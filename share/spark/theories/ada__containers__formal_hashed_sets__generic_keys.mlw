module Ada__containers__formal_hashed_sets__generic_keys__witness
  use import real.Real
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__witness
  use "ada__containers__formal_hashed_sets__generic_keys__args".Ada__containers__formal_hashed_sets__generic_keys__key
  use "ada__containers__formal_hashed_sets__generic_keys__args".Ada__containers__formal_hashed_sets__generic_keys__key_type
  use "ada__containers__formal_hashed_sets__args".Ada__containers__formal_hashed_sets__element_type
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__witness
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__set
  use import  "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__find
  use import  "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__element

  function witness Ada__containers__formal_hashed_sets__generic_keys__key_type.base_type : real

  axiom witness_def:
    (forall e : Ada__containers__formal_hashed_sets__element_type.base_type
 [Ada__containers__formal_hashed_sets__witness.witness e].
  Ada__containers__formal_hashed_sets__witness.witness e =
  witness (Ada__containers__formal_hashed_sets__generic_keys__key.key e))
end

module Ada__containers__formal_hashed_sets__generic_keys__key__2
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_hashed_sets__args".Ada__containers__formal_hashed_sets__element_type
  use "ada__containers__formal_hashed_sets__generic_keys__args".Ada__containers__formal_hashed_sets__generic_keys__key_type
  use "ada__containers__formal_hashed_sets__generic_keys__args".Ada__containers__formal_hashed_sets__generic_keys__key
  use import Ada__containers__formal_hashed_sets__generic_keys__witness
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__set
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__length
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__cursor
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__element

  function key__2__logic "inline" (co:set) (cu:cursor) : Ada__containers__formal_hashed_sets__generic_keys__key_type.base_type =
  Ada__containers__formal_hashed_sets__generic_keys__key.key (element__logic co cu)

  val key__2 (co:set) (cu:cursor) : Ada__containers__formal_hashed_sets__generic_keys__key_type.base_type
     requires { position co cu > 0 }
     ensures  { result = key__2__logic co cu }
end

module Ada__containers__formal_hashed_sets__generic_keys__find
  use import int.Int
  use import "_gnatprove_standard".Main
  use  "ada__containers__formal_hashed_sets__generic_keys__args".Ada__containers__formal_hashed_sets__generic_keys__key_type
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__set
  use import Ada__containers__formal_hashed_sets__generic_keys__witness
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__cursor
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__find

  function find__logic "inline" (co : set) (e:Ada__containers__formal_hashed_sets__generic_keys__key_type.base_type) : cursor =
  find_ co (witness e)

  val find (co:set) (e:Ada__containers__formal_hashed_sets__generic_keys__key_type.base_type)  : cursor
     ensures  { result = find__logic co e }
end

module Ada__containers__formal_hashed_sets__generic_keys__element
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_hashed_sets__generic_keys__args".Ada__containers__formal_hashed_sets__generic_keys__key_type
  use "ada__containers__formal_hashed_sets__args".Ada__containers__formal_hashed_sets__element_type
  use import Ada__containers__formal_hashed_sets__generic_keys__witness
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__set
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__cursor
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__element
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__find

  function element__logic "inline" (co:set) (k:Ada__containers__formal_hashed_sets__generic_keys__key_type.base_type) : Ada__containers__formal_hashed_sets__element_type.base_type =
Ada__containers__formal_hashed_sets__element.element__logic co (find_ co (witness k))

  val element (co:set) (k:Ada__containers__formal_hashed_sets__generic_keys__key_type.base_type) : Ada__containers__formal_hashed_sets__element_type.base_type
     requires { position co (find_ co (witness k)) > 0 }
     ensures  { result = element__logic co k }
end

module Ada__containers__formal_hashed_sets__generic_keys__replace
  use import int.Int
  use import "_gnatprove_standard".Main
  use  "ada__containers__formal_hashed_sets__generic_keys__args".Ada__containers__formal_hashed_sets__generic_keys__key_type
  use "ada__containers__formal_hashed_sets__args".Ada__containers__formal_hashed_sets__element_type
  use import Ada__containers__formal_hashed_sets__generic_keys__witness
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__set
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__cursor
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__no_element
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__find 
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__replace_element

  val replace (co:ref Ada__containers__formal_hashed_sets__set.__split_fields) (cap : Ada__containers__formal_hashed_sets__set.__split_discrs)(k:Ada__containers__formal_hashed_sets__generic_keys__key_type.base_type) (e:Ada__containers__formal_hashed_sets__element_type.base_type) : unit
     requires { let rec_co = {Ada__containers__formal_hashed_sets__set.__split_fields = !co;
                              Ada__containers__formal_hashed_sets__set.__split_discrs = cap}  in
                   find_ rec_co (witness k) <> no_element }
     writes { co }
     reads { co }
     ensures { let rec_co = {Ada__containers__formal_hashed_sets__set.__split_fields = !co;
                              Ada__containers__formal_hashed_sets__set.__split_discrs = cap}  in
               let old_co = {Ada__containers__formal_hashed_sets__set.__split_fields = old !co;
                              Ada__containers__formal_hashed_sets__set.__split_discrs = cap}  in
                   replace_element old_co (find_ old_co (witness k)) e rec_co }
end

module Ada__containers__formal_hashed_sets__generic_keys__delete
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_hashed_sets__generic_keys__args".Ada__containers__formal_hashed_sets__generic_keys__key_type
  use import Ada__containers__formal_hashed_sets__generic_keys__witness
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__set
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__cursor
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__no_element
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__find
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__delete

  val delete (co:ref Ada__containers__formal_hashed_sets__set.__split_fields) (cap : Ada__containers__formal_hashed_sets__set.__split_discrs) (k : Ada__containers__formal_hashed_sets__generic_keys__key_type.base_type) : unit
     requires { let rec_co = {Ada__containers__formal_hashed_sets__set.__split_fields = !co;
                              Ada__containers__formal_hashed_sets__set.__split_discrs = cap}  in
                   find_ rec_co (witness k) <> no_element }
     writes     { co }
     reads      { co }
     ensures { let rec_co = {Ada__containers__formal_hashed_sets__set.__split_fields = !co;
                              Ada__containers__formal_hashed_sets__set.__split_discrs = cap}  in
               let old_co = {Ada__containers__formal_hashed_sets__set.__split_fields = old !co;
                              Ada__containers__formal_hashed_sets__set.__split_discrs = cap}  in
                   delete old_co (find_ old_co (witness k)) rec_co }
end

module Ada__containers__formal_hashed_sets__generic_keys__exclude
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_hashed_sets__generic_keys__args".Ada__containers__formal_hashed_sets__generic_keys__key_type
  use import Ada__containers__formal_hashed_sets__generic_keys__witness
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__set
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__cursor
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__no_element
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__find
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__delete

  val exclude (co:ref Ada__containers__formal_hashed_sets__set.__split_fields) (cap : Ada__containers__formal_hashed_sets__set.__split_discrs) (k:Ada__containers__formal_hashed_sets__generic_keys__key_type.base_type) : unit
     writes     { co }
     reads      { co }
     ensures { let rec_co = {Ada__containers__formal_hashed_sets__set.__split_fields = !co;
                              Ada__containers__formal_hashed_sets__set.__split_discrs = cap}  in
               let old_co = {Ada__containers__formal_hashed_sets__set.__split_fields = old !co;
                              Ada__containers__formal_hashed_sets__set.__split_discrs = cap}  in
                   if find_ old_co (witness k) = no_element then  old !co = !co
                         else delete old_co (find_ old_co (witness k)) rec_co  }
end

module Ada__containers__formal_hashed_sets__generic_keys__contains
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_hashed_sets__generic_keys__args".Ada__containers__formal_hashed_sets__generic_keys__key_type
  use import Ada__containers__formal_hashed_sets__generic_keys__witness
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__set
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__cursor
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__find
  use import "ada__containers__formal_hashed_sets".Ada__containers__formal_hashed_sets__delete

  function contains__logic set Ada__containers__formal_hashed_sets__generic_keys__key_type.base_type : bool

  axiom contains_c:
  forall co : set, e : Ada__containers__formal_hashed_sets__generic_keys__key_type.base_type [contains__logic co e].
    contains__logic co e = True <-> 0 < position co (find_ co (witness e))

  val contains (co:set) (e:Ada__containers__formal_hashed_sets__generic_keys__key_type.base_type) : bool
     ensures { contains__logic co e = result }
end