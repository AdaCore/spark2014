module Ada__containers__formal_doubly_linked_lists__generic_sorting__is_sorted
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_doubly_linked_lists__args".Ada__containers__formal_doubly_linked_lists__element_type
  use import "ada__containers__formal_doubly_linked_lists".Ada__containers__formal_doubly_linked_lists__list
  use import "ada__containers__formal_doubly_linked_lists".Ada__containers__formal_doubly_linked_lists__cursor
  use import "ada__containers__formal_doubly_linked_lists".Ada__containers__formal_doubly_linked_lists__element
  use "ada__containers__formal_doubly_linked_lists__generic_sorting__args".Ada__containers__formal_doubly_linked_lists__generic_sorting__olt

  function is_sorted__logic list : bool

  axiom is_sorted__def:
  forall co : list. is_sorted__logic co = True <-> (forall cu1 cu2 : cursor [element__logic co cu1, element__logic co cu2].
         position co cu1 >  position co cu2 > 0 -> not Ada__containers__formal_doubly_linked_lists__generic_sorting__olt.olt (element__logic co cu1)
(element__logic co cu2) = True)

  val is_sorted (co : list) : bool
     ensures  { result = is_sorted__logic co }
end

module Ada__containers__formal_doubly_linked_lists__generic_sorting__sort
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_doubly_linked_lists__args".Ada__containers__formal_doubly_linked_lists__element_type
  use import "ada__containers__formal_doubly_linked_lists".Ada__containers__formal_doubly_linked_lists__list
  use import "ada__containers__formal_doubly_linked_lists".Ada__containers__formal_doubly_linked_lists__length
  use import "ada__containers__formal_doubly_linked_lists".Ada__containers__formal_doubly_linked_lists__cursor
  use import "ada__containers__formal_doubly_linked_lists".Ada__containers__formal_doubly_linked_lists__find
  use import "ada__containers__formal_doubly_linked_lists".Ada__containers__formal_doubly_linked_lists__contains
  use import Ada__containers__formal_doubly_linked_lists__generic_sorting__is_sorted

  val sort (co:ref Ada__containers__formal_doubly_linked_lists__list.__split_fields) (cap : Ada__containers__formal_doubly_linked_lists__list.__split_discrs) : bool
     writes { co }
     ensures  { let rec_co = {Ada__containers__formal_doubly_linked_lists__list.__split_fields = !co;
                             Ada__containers__formal_doubly_linked_lists__list.__split_discrs = cap}  in
               let old_co = {Ada__containers__formal_doubly_linked_lists__list.__split_fields = old !co;
                             Ada__containers__formal_doubly_linked_lists__list.__split_discrs = cap}  in
               is_sorted__logic rec_co = True /\ length_ rec_co = length_ old_co /\
            (forall e : Ada__containers__formal_doubly_linked_lists__element_type.base_type
	[findfirst rec_co e| findfirst old_co e].  contains__logic rec_co e = contains__logic old_co e) }
end

module Ada__containers__formal_doubly_linked_lists__generic_sorting__merge
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_doubly_linked_lists__args".Ada__containers__formal_doubly_linked_lists__element_type
  use import "ada__containers__formal_doubly_linked_lists".Ada__containers__formal_doubly_linked_lists__list
  use import "ada__containers__formal_doubly_linked_lists".Ada__containers__formal_doubly_linked_lists__length
  use import "ada__containers__formal_doubly_linked_lists".Ada__containers__formal_doubly_linked_lists__cursor
  use import "ada__containers__formal_doubly_linked_lists".Ada__containers__formal_doubly_linked_lists__find
  use import "ada__containers__formal_doubly_linked_lists".Ada__containers__formal_doubly_linked_lists__contains
  use import Ada__containers__formal_doubly_linked_lists__generic_sorting__is_sorted

  val merge (target:ref Ada__containers__formal_doubly_linked_lists__list.__split_fields) (t_cap : Ada__containers__formal_doubly_linked_lists__list.__split_discrs) (source:ref Ada__containers__formal_doubly_linked_lists__list.__split_fields) (s_cap : Ada__containers__formal_doubly_linked_lists__list.__split_discrs) : bool
     writes { target, source }
     requires { let rec_t = {Ada__containers__formal_doubly_linked_lists__list.__split_fields = !target;
                             Ada__containers__formal_doubly_linked_lists__list.__split_discrs = t_cap}  in
               let rec_s = {Ada__containers__formal_doubly_linked_lists__list.__split_fields = !source;
                             Ada__containers__formal_doubly_linked_lists__list.__split_discrs = s_cap}  in
                length_ rec_s <= capacity rec_t - length_ rec_t }
     ensures  { let rec_t = {Ada__containers__formal_doubly_linked_lists__list.__split_fields = !target;
                             Ada__containers__formal_doubly_linked_lists__list.__split_discrs = t_cap}  in
               let old_t = {Ada__containers__formal_doubly_linked_lists__list.__split_fields = old !target;
                             Ada__containers__formal_doubly_linked_lists__list.__split_discrs = t_cap}  in
               let rec_s = {Ada__containers__formal_doubly_linked_lists__list.__split_fields = !source;
                             Ada__containers__formal_doubly_linked_lists__list.__split_discrs = s_cap}  in
               let old_s = {Ada__containers__formal_doubly_linked_lists__list.__split_fields = old !source;
                             Ada__containers__formal_doubly_linked_lists__list.__split_discrs = s_cap}  in
               (is_sorted__logic old_t = True -> is_sorted__logic old_s = True -> is_sorted__logic rec_t = True) /\ 
	length_ rec_t = length_ old_t + length_ old_s /\ length_ rec_s = 0 /\
            (forall e : Ada__containers__formal_doubly_linked_lists__element_type.base_type
	[findfirst rec_t e | findfirst old_t e |  findfirst old_s e]. 
             contains__logic rec_t e = True <-> (contains__logic old_t e = True \/  contains__logic old_s e = True)) }
end