module Ada__containers__formal_vectors__generic_sorting__is_sorted
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__element_type
  use import "ada__containers__formal_vectors".Ada__containers__formal_vectors__vector
  use import "ada__containers__formal_vectors".Ada__containers__formal_vectors__length
  use import "ada__containers__formal_vectors".Ada__containers__formal_vectors__cursor
  use import "ada__containers__formal_vectors".Ada__containers__formal_vectors__element
  use "ada__containers__formal_vectors__generic_sorting__args".Ada__containers__formal_vectors__generic_sorting__olt

  function is_sorted vector : bool

  axiom is_sorted__def:
  forall co : vector. is_sorted co = True <-> (forall i1 i2 : int [element co i1, element co i2].
         length_ co  >= i1 >  i2 > 0 -> not Ada__containers__formal_vectors__generic_sorting__olt.olt (Ada__containers__formal_vectors__element_type.to_base (element co i1))
(Ada__containers__formal_vectors__element_type.to_base (element co i2)) = True)

  val is_sorted (co : vector) : bool
     ensures  { result = is_sorted co }
end

module Ada__containers__formal_vectors__generic_sorting__sort
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__element_type
  use import "ada__containers__formal_vectors".Ada__containers__formal_vectors__vector
  use import "ada__containers__formal_vectors".Ada__containers__formal_vectors__length
  use import "ada__containers__formal_vectors".Ada__containers__formal_vectors__cursor
  use import "ada__containers__formal_vectors".Ada__containers__formal_vectors__find_index
  use import "ada__containers__formal_vectors".Ada__containers__formal_vectors__contains
  use import Ada__containers__formal_vectors__generic_sorting__is_sorted

  val sort (co : ref vector) : bool
     writes { co }
     ensures  { is_sorted !co = True /\ length_ !co = length_ (old !co) /\ capacity !co = capacity (old !co) /\
            (forall e : Ada__containers__formal_vectors__element_type.base_type
	[find_index_ !co e 1| find_index_ (old !co) e 1].  contains !co e = contains (old !co) e) }
end

module Ada__containers__formal_vectors__generic_sorting__merge
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__element_type
  use import "ada__containers__formal_vectors".Ada__containers__formal_vectors__vector
  use import "ada__containers__formal_vectors".Ada__containers__formal_vectors__length
  use import "ada__containers__formal_vectors".Ada__containers__formal_vectors__cursor
  use import "ada__containers__formal_vectors".Ada__containers__formal_vectors__find_index
  use import "ada__containers__formal_vectors".Ada__containers__formal_vectors__contains
  use import Ada__containers__formal_vectors__generic_sorting__is_sorted

  val merge (target source : ref vector) : bool
     writes { target, source }
     requires { length_ !source <= capacity !target - length_ !target }
     ensures  { (is_sorted (old !target) = True -> is_sorted (old !source) = True -> is_sorted !target = True) /\ 
	length_ !target = length_ (old !target) + length_ (old !source) /\ length_ !source = 0 /\
        capacity !target = capacity (old !target) /\ capacity !source = capacity (old !source) /\
            (forall e : Ada__containers__formal_vectors__element_type.base_type
	[find_index_ !target e 1 | find_index_ (old !target) e 1 |  find_index_ (old !source) e 1]. 
             contains !target e = True <-> (contains (old !target) e = True \/  contains (old !source) e = True)) }
end