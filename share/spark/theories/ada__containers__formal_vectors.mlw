(* This is the definition of generic modules for the translation in Why3 of instances of
   Ada.Containers.Formal_Vectors

   GNATprove generates first modules for the instance formal parameters:
      - for type Index_Type: module Ada__containers__formal_vectors__index_type
      - for type Element_Type: module Ada__containers__formal_vectors__element_type
      - for function "=": module Ada__containers__formal_vectors__oeq
      - for variable Bounded: module Ada__containers__formal_vectors__bounded

   GNATprove then specializes every module in this file for the given instance, based on
   the modules for formal parameters. There is one module for each public subprogram defined
   in the Ada unit. The order of modules follows the order of declarations in the Ada spec,
   except for modules which have to be defined earlier due to dependencies.

   IMPORTANT NOTE: currently, the file ada__containers__formal_indefinite_vectors.mlw is the
   same as this one, where "formal_vectors" has been replaced with "formal_indefinite_vectors".
   The two should be kept synchronized until a better mechanism is used for sharing common
   theories.
*)

(* useful helper functions on index types *)
module Ada__containers__formal_vectors__index_type_helper
  use import int.Int
  use import "_gnatprove_standard".Main
  use        Ada__containers__count_type
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__index_type

  function index_type_length "inline" : int =
    Ada__containers__formal_vectors__index_type.last -
    Ada__containers__formal_vectors__index_type.first + 1

  axiom index_type_length :
    Ada__containers__count_type.in_range (index_type_length)

  function index_type__to_index "inline" (i : int) : int =
    i - Ada__containers__formal_vectors__index_type.first + 1

  function index_type__of_index "inline" (i : int) : int =
    i + Ada__containers__formal_vectors__index_type.first - 1
end

(* subtype Extended_Index *)
module Ada__containers__formal_vectors__extended_index
  use import "int".Int
  use import "_gnatprove_standard".Main
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__index_type

  type extended_index

  function first : int = Ada__containers__formal_vectors__index_type.first - 1

  function last : int = Ada__containers__formal_vectors__index_type.last

  function attr__ATTRIBUTE_MODULUS : int

  clone export "ada__model".Static_Discrete with
    type t = extended_index,
    function first = first,
    function last = last
end

(* useful helper functions in extended index type *)
module Ada__containers__formal_vectors__extended_index_helper
  use import int.Int
  use import "_gnatprove_standard".Main
  use        Ada__containers__count_type
  use import Ada__containers__formal_vectors__extended_index

  function extended_index__to_index "inline" (i : int) : int = i - first

  function extended_index__of_index "inline" (i : int) : int = i + first
end

(* constant No_Index *)
module Ada__containers__formal_vectors__no_index
  use import "int".Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__extended_index

  function no_index : int

  axiom no_index__def :
    no_index = first
end

(* subtype Capacity_Range *)
module Ada__containers__formal_vectors__capacity_range
  use import "int".Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__index_type_helper

  type capacity_range

  function first : int = 0

  function last : int = index_type_length

  function attr__ATTRIBUTE_MODULUS : int

  clone export "ada__model".Static_Discrete with
    type t = capacity_range,
    function first = first,
    function last = last
end

(* type Vector *)
module Ada__containers__formal_vectors__vector
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__index_type_helper
  use        Ada__containers__formal_vectors__capacity_range

  type __split_discrs = {rec__capacity : Ada__containers__formal_vectors__capacity_range.capacity_range}

  type __split_fields = { rec__main__ : __private }

  type vector = { __split_discrs : __split_discrs; __split_fields : __split_fields }

  predicate vector_inv "inline" (l : vector) =
     l = { __split_discrs = { rec__capacity = l.__split_discrs.rec__capacity }; __split_fields = { rec__main__ = l.__split_fields.rec__main__ } }

  (* value of discriminant Capacity is called "initial_capacity" to distinguish from function
     Capacity, which might be different in the unbounded case *)
  function initial_capacity "inline"
    (v : vector)
  : int
  = Ada__containers__formal_vectors__capacity_range.to_rep (rec__capacity (__split_discrs v))

  function bool_eq vector vector : bool
  function user_eq vector vector : bool
end

(* function Capacity *)
module Ada__containers__formal_vectors__capacity
  use import int.Int
  use import "_gnatprove_standard".Main
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__bounded
  use        Ada__containers__formal_vectors__capacity_range
  use import Ada__containers__formal_vectors__vector

  function capacity__logic vector : int

  (* value of discriminant Capacity is called "initial_capacity" to distinguish from function
     Capacity, which might be different in the unbounded case *)
  function capacity "inline" (v : vector) : int =
    capacity__logic v

  axiom capacity__def :
    forall v : vector [capacity__logic v | initial_capacity v].
      if Ada__containers__formal_vectors__bounded.bounded then
        capacity__logic v = initial_capacity v
      else
        capacity__logic v >= initial_capacity v

  val capacity (v : vector) : int
    ensures { result = capacity__logic v }
end

(* function Length *)
module Ada__containers__formal_vectors__length
  use import int.Int
  use import "_gnatprove_standard".Main
  use        Ada__containers__formal_vectors__capacity_range
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__capacity

  function length__logic (v : vector) : int

  function length_ "inline" (v : vector) : int = length__logic v

  axiom length_range:
    forall v : vector [length__logic v].
      0 <= length_ v <= capacity v

  val length (v : vector) : int
    ensures { result = length__logic v }
end

(* function Empty_Vector *)
module Ada__containers__formal_vectors__empty_vector
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__length

  function empty_vector__logic () : vector

  val empty_vector () : vector
    ensures { result = empty_vector__logic () }

  axiom empty_is_empty :
    length_ (empty_vector__logic ()) = 0
end

(* function Element *)
module Ada__containers__formal_vectors__element
  use import int.Int
  use import "_gnatprove_standard".Main
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__element_type
  use import Ada__containers__formal_vectors__index_type_helper
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__length

  function element_ vector int : Ada__containers__formal_vectors__element_type.base_type

  axiom element_range:
    forall v : vector, i : int. Ada__containers__formal_vectors__element_type.valid (element_ v i)

  function element__logic "inline"
    (v : vector)
    (i : int)
  : Ada__containers__formal_vectors__element_type.base_type
  = element_ v (index_type__to_index i)

  val element
    (v : vector)
    (i : int)
  : Ada__containers__formal_vectors__element_type.base_type
    requires { 0 < index_type__to_index i <= length_ v }
    ensures  { result = element_ v (index_type__to_index i) }
end

(* function "=" on vectors *)
module Ada__containers__formal_vectors__Oeq__2
  use import int.Int
  use import "_gnatprove_standard".Main
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__element_type
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__oeq
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__element

  function oeq__2__logic (v1 : vector) (v2 : vector) : bool

  axiom oeq__2__def :
    forall v1 v2 : vector [oeq__2__logic v1 v2].
      oeq__2__logic v1 v2 <->
        (length_ v1 = length_ v2 /\
         (forall i:int [element_ v1 i |  element_ v2 i].
            0 < i <= length_ v1 ->
              Ada__containers__formal_vectors__oeq.oeq
                (element_ v1 i) (element_ v2 i)))

  val oeq__2 (v1 : vector) (v2 : vector) : bool
    ensures { result = oeq__2__logic v1 v2 }
end

(* function To_Vector *)
module Ada__containers__formal_vectors__to_vector
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__index_type_helper
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__oeq
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__element

  function to_vector__logic
    (e   : Ada__containers__formal_vectors__element_type.base_type)
    (len : int)
  : vector

  axiom to_vector_def :
    forall e   : Ada__containers__formal_vectors__element_type.base_type,
           len : int
           [to_vector__logic e len].
      0 <= len <= index_type_length ->
        length_ (to_vector__logic e len) = len /\
        forall i : int [element_ (to_vector__logic e len) i].
          0 < i <= len ->
            Ada__containers__formal_vectors__oeq.oeq (element_ (to_vector__logic e len) i) e

  val to_vector
    (e   : Ada__containers__formal_vectors__element_type.base_type)
    (len : int)
  : vector
    requires { index_type_length >= len >= 0 }
    ensures  { result = to_vector__logic e len /\ vector_inv result /\
               length_ result = len /\
               forall i : int [element_ result i].
                 0 < i <= len ->
            Ada__containers__formal_vectors__oeq.oeq (element_ (result) i) e }
end

(* procedure Reserve_Capacity *)
module Ada__containers__formal_vectors__reserve_capacity
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__capacity
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__bounded
  use import Ada__containers__formal_vectors__Oeq__2

  val reserve_capacity (v:ref Ada__containers__formal_vectors__vector.__split_fields) (v_cap :Ada__containers__formal_vectors__vector.__split_discrs) (cap : int) : unit
    requires { Ada__containers__formal_vectors__bounded.bounded -> cap <= Ada__containers__formal_vectors__capacity_range.to_rep v_cap.rec__capacity }
    writes   { v }
    reads    { v }
    ensures  { let rec_v = {Ada__containers__formal_vectors__vector.__split_fields = !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
               let old_v = {Ada__containers__formal_vectors__vector.__split_fields = old !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
                   if cap <= capacity old_v then
                     !v = old !v
                   else
                     (capacity rec_v >= cap /\ oeq__2__logic old_v rec_v) }
end

(* function Is_Empty *)
module Ada__containers__formal_vectors__is_empty
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__length

  function is_empty__logic vector : bool

  axiom is_empty :
    forall v : vector [is_empty__logic v].
      is_empty__logic v <-> length_ v = 0

  val is_empty (v : vector) : bool
    ensures { result = True <-> length_ v = 0 }
end

(* procedure Clear *)
module Ada__containers__formal_vectors__clear
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__capacity
  use import Ada__containers__formal_vectors__length
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__bounded

  val clear (v:ref Ada__containers__formal_vectors__vector.__split_fields) (v_cap :Ada__containers__formal_vectors__vector.__split_discrs) : unit
     writes  { v }
     reads   { v }
     ensures { let rec_v = {Ada__containers__formal_vectors__vector.__split_fields = !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
                   length_ rec_v = 0 }
end

(* procedure Assign *)
module Ada__containers__formal_vectors__assign
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__capacity
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__Oeq__2
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__bounded

  val assign (target:ref Ada__containers__formal_vectors__vector.__split_fields) (t_cap :Ada__containers__formal_vectors__vector.__split_discrs) (source : vector) : unit
    requires { Ada__containers__formal_vectors__bounded.bounded ->
                 length_ source <= Ada__containers__formal_vectors__capacity_range.to_rep t_cap.rec__capacity }
    writes   { target }
    reads    { target }
    ensures  { let rec_t = {Ada__containers__formal_vectors__vector.__split_fields = !target;
                            Ada__containers__formal_vectors__vector.__split_discrs = t_cap}  in
                   oeq__2__logic rec_t source }
end

(* function Copy *)
module Ada__containers__formal_vectors__copy
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__index_type_helper
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__capacity
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__Oeq__2
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__bounded

  function copy__logic vector int : vector

  axiom copy__def:
    forall v : vector, cap : int [copy__logic v cap].
      oeq__2__logic v (copy__logic v cap) /\
      (cap = 0 -> capacity (copy__logic v cap) = length_ v) /\
      (length_ v <= cap -> capacity (copy__logic v cap) = cap)

  val copy (v : vector) (cap : int) : vector
    requires { Ada__containers__formal_vectors__bounded.bounded ->
                 cap = 0 \/ length_ v <= cap }
    ensures  { result = copy__logic v cap /\ vector_inv result }
end

(* procedure Replace_Element *)
module Ada__containers__formal_vectors__replace_element
  use import int.Int
  use import "_gnatprove_standard".Main
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__element_type
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__oeq
  use import Ada__containers__formal_vectors__index_type_helper
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__capacity
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__element

  predicate replace_element
    (v1 : vector)
    (i  : int)
    (e  : Ada__containers__formal_vectors__element_type.base_type)
    (v2 : vector)
  =
    0 < i <= length_ v1 /\
    length_ v1 = length_ v2 /\
    Ada__containers__formal_vectors__oeq.oeq (element_ v2 i) e /\
    (forall j : int [element_ v2 j | element_ v1 j].
       0 < j <= length_ v1 -> i <> j -> element_ v2 j = element_ v1 j) /\
    capacity v1 = capacity v2

  val replace_element
    (v:ref Ada__containers__formal_vectors__vector.__split_fields) (v_cap :Ada__containers__formal_vectors__vector.__split_discrs)
    (i : int)
    (e : Ada__containers__formal_vectors__element_type.base_type)
  : unit
    requires { let rec_v = {Ada__containers__formal_vectors__vector.__split_fields = !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
                   0 < index_type__to_index i <= length_ rec_v }
    writes   { v }
    reads    { v }
    ensures  { let rec_v = {Ada__containers__formal_vectors__vector.__split_fields = !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
               let old_v = {Ada__containers__formal_vectors__vector.__split_fields = old !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
                   replace_element old_v ( index_type__to_index i) e rec_v }
end

(* procedure Append on vectors *)
module Ada__containers__formal_vectors__append
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__capacity
  use import Ada__containers__formal_vectors__length
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__bounded
  use import Ada__containers__formal_vectors__element

  predicate append vector vector vector

  axiom append_length_:
    forall v1 v2 nv : vector [append v1 nv v2].
	append v1 nv v2 -> length_ v2 = length_ v1 + length_ nv

  axiom append_capacity:
    forall v1 v2 nv : vector [append v1 nv v2].
      Ada__containers__formal_vectors__bounded.bounded -> append v1 nv v2 ->
        capacity v1 = capacity v2

  axiom append_element1:
    forall v1 v2 nv : vector,
           j        : int
           [append v1 nv v2, element_ v1 j | append v1 nv v2, element_ v2 j].
      append v1 nv v2 -> 0 < j <= length_ v1 -> element_ v1 j = element_ v2 j

  axiom append_element2:
    forall v1 v2 nv : vector, j : int [append v1 nv v2, element_ nv j].
      append v1 nv v2 -> 0 < j <= length_ nv -> element_ nv j = element_ v2 (length_ v1 + j)

  axiom append_element2bis:
    forall v1 v2 nv : vector, j : int [append v1 nv v2, element_ v2 j].
      append v1 nv v2 ->
        length_ v1 < j <= length_ v1 + length_ nv ->
          element_ nv (j - length_ v1) = element_ v2 j

  val append (v:ref Ada__containers__formal_vectors__vector.__split_fields) (v_cap :Ada__containers__formal_vectors__vector.__split_discrs) (nv : vector) : unit
     requires { let rec_v = {Ada__containers__formal_vectors__vector.__split_fields = !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
                   Ada__containers__formal_vectors__bounded.bounded ->
                        length_ rec_v + length_ nv <= capacity rec_v }
     writes   { v }
     reads    { v }
     ensures  { let rec_v = {Ada__containers__formal_vectors__vector.__split_fields = !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
               let old_v = {Ada__containers__formal_vectors__vector.__split_fields = old !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
                   append old_v nv rec_v }
end

(* procedure Append on vector and element *)
module Ada__containers__formal_vectors__append__2
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__element_type
  use "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__oeq
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__capacity
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__element
  use import Ada__containers__formal_vectors__to_vector
  use import Ada__containers__formal_vectors__append
  use        "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__bounded

  val append__2
    (v:ref Ada__containers__formal_vectors__vector.__split_fields) (v_cap :Ada__containers__formal_vectors__vector.__split_discrs)
    (e : Ada__containers__formal_vectors__element_type.base_type)
  : unit
    requires { let rec_v = {Ada__containers__formal_vectors__vector.__split_fields = !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
                   Ada__containers__formal_vectors__bounded.bounded -> length_ rec_v < capacity rec_v }
    writes   { v }
    reads    { v }
    ensures  { let rec_v = {Ada__containers__formal_vectors__vector.__split_fields = !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
               let old_v = {Ada__containers__formal_vectors__vector.__split_fields = old !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
                   Ada__containers__formal_vectors__oeq.oeq (element_ rec_v (length_ rec_v)) e /\
                   (* This is redundant with the following *)
                   append old_v (to_vector__logic e 1) rec_v }
end

(* procedure Delete_Last *)
module Ada__containers__formal_vectors__delete_last
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__extended_index_helper
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__capacity
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__element

  predicate delete_last vector vector

  axiom delete_last_length_:
    forall v1 v2 : vector [delete_last v1 v2].
      delete_last v1 v2 -> length_ v1 = length_ v2 + 1

  axiom delete_last_capacity:
    forall v1 v2 : vector [delete_last v1 v2].
      delete_last v1 v2 -> capacity v1 = capacity v2

  axiom delete_last_elmt:
    forall v1 v2 : vector,
           j     : int
           [delete_last v1 v2, element_ v1 j | delete_last v1 v2, element_ v2 j].
      delete_last v1 v2 -> 0 < j < length_ (v1) -> element_ v1 j = element_ v2 j

  val delete_last (v:ref Ada__containers__formal_vectors__vector.__split_fields) (v_cap :Ada__containers__formal_vectors__vector.__split_discrs) : unit
    writes  { v }
    reads   { v }
    ensures { let rec_v = {Ada__containers__formal_vectors__vector.__split_fields = !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
               let old_v = {Ada__containers__formal_vectors__vector.__split_fields = old !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
                   if length_ old_v = 0 then
                     (length_ rec_v = 0 /\ capacity rec_v = capacity old_v)
                   else
                     delete_last old_v rec_v }
end

(* procedure Reverse_Elements *)
module Ada__containers__formal_vectors__reverse_elements
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__capacity
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__element

  predicate reverse_elements vector vector

  axiom reverse_elements_length_:
    forall v1 v2 : vector [reverse_elements v1 v2].
      reverse_elements v1 v2 -> length_ v1 = length_ v2

  axiom reverse_elements_capacity:
    forall v1 v2 : vector [reverse_elements v1 v2].
      reverse_elements v1 v2 -> capacity v1 = capacity v2

  axiom reverse_elements_element:
    forall v1 v2 : vector, i : int [reverse_elements v1 v2, element_ v2 i].
      reverse_elements v1 v2 -> 0 < i <= length_ v2 ->
        element_ v2 i = element_ v1 (length_ v2 - i + 1)

  axiom reverse_elements_element_bis:
    forall v1 v2 : vector, i : int [reverse_elements v1 v2, element_ v1 i].
      reverse_elements v1 v2 -> 0 < i <= length_ v1 ->
        element_ v1 i = element_ v2 (length_ v1 - i + 1)

  val reverse_elements (v:ref Ada__containers__formal_vectors__vector.__split_fields) (v_cap :Ada__containers__formal_vectors__vector.__split_discrs) : unit
     writes  { v }
     reads   { v }
     ensures { let rec_v = {Ada__containers__formal_vectors__vector.__split_fields = !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
               let old_v = {Ada__containers__formal_vectors__vector.__split_fields = old !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
                   reverse_elements rec_v old_v }
end

(* procedure Swap *)
module Ada__containers__formal_vectors__swap
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__index_type_helper
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__capacity
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__element

  predicate swap vector int int vector

  axiom swap_len_cap :
    forall v1 v2 : vector, i1 i2 : int [swap v1 i1 i2 v2 ].
      swap v1 i1 i2 v2 ->
        length_ v1 = length_ v2 /\
        capacity v1 = capacity v2

  axiom swap_elt:
    forall v1 v2    : vector,
           i1 i2, i : int
           [swap v1 i1 i2 v2, element_ v1 i|swap v1 i1 i2 v2, element_ v2 i ].
      swap v1 i1 i2 v2 -> 0 < i <= length_ v1 -> i <> i1 /\ i <> i2 ->
        element_ v1 i = element_ v2 i

  axiom swap_range:
    forall v1 v2 : vector, i1 i2 : int [swap v1 i1 i2 v2 ].
      swap v1 i1 i2 v2 ->
        0 < i1 <= length_ v1 /\
        element_ v1 i1 = element_ v2 i2 /\
        0 < i2 <= length_ v1 /\
        element_ v1 i2 = element_ v2 i1

  val swap (v:ref Ada__containers__formal_vectors__vector.__split_fields) (v_cap :Ada__containers__formal_vectors__vector.__split_discrs) (i1 i2 : int) : unit
    requires { let rec_v = {Ada__containers__formal_vectors__vector.__split_fields = !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
                   0 < index_type__to_index i1 <= length_ rec_v /\
                   0 < index_type__to_index i2 <= length_ rec_v }
     writes  { v }
     reads   { v }
     ensures { let rec_v = {Ada__containers__formal_vectors__vector.__split_fields = !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
               let old_v = {Ada__containers__formal_vectors__vector.__split_fields = old !v;
                            Ada__containers__formal_vectors__vector.__split_discrs = v_cap}  in
                   (i1 = i2 /\ !v = (old !v)) \/
                   (i1 <> i2 /\ swap old_v (index_type__to_index i1) (index_type__to_index i2) rec_v) }
end

(* function First_Index *)
module Ada__containers__formal_vectors__first_index
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__index_type
  use import Ada__containers__formal_vectors__index_type_helper
  use import Ada__containers__formal_vectors__vector

  function first_index__logic (v : vector) : int

  axiom first_index__def :
    forall v : vector [first_index__logic v].
      first_index__logic v =
      index_type__of_index 1

  val first_index (v : vector) : int
      ensures { result =
                index_type__of_index 1 }
end

(* function First_Element *)
module Ada__containers__formal_vectors__first_element
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__element_type
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__element

  function first_element__logic (v : vector) :
    Ada__containers__formal_vectors__element_type.base_type
  = element_ v 1

  val first_element (v : vector) : Ada__containers__formal_vectors__element_type.base_type
    requires { length_ v > 0 }
    ensures  { result = element_ v 1 }
end

(* function Last_Index *)
module Ada__containers__formal_vectors__last_index
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__extended_index
  use import Ada__containers__formal_vectors__extended_index_helper
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__length

  function last_index__logic (v:vector) : int

  axiom last_index__def :
    forall v:vector [last_index__logic v].
      last_index__logic v = extended_index__of_index (length_ v)

  val last_index (v:vector) : int
    ensures { result = extended_index__of_index (length_ v) }
end

(* function Last_Element *)
module Ada__containers__formal_vectors__last_element
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__element_type
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__element

  function last_element__logic (v : vector) :
    Ada__containers__formal_vectors__element_type.base_type
  = element_ v (length_ v)

  val last_element (v : vector) : Ada__containers__formal_vectors__element_type.base_type
    requires { length_ v > 0 }
    ensures  { result = element_ v (length_ v) }
end

(* function Find_Index *)
module Ada__containers__formal_vectors__find_index
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__element_type
  use "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__oeq
  use import Ada__containers__formal_vectors__index_type_helper
  use import Ada__containers__formal_vectors__extended_index
  use import Ada__containers__formal_vectors__extended_index_helper
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__element

  function find_index_ vector Ada__containers__formal_vectors__element_type.base_type int
  : int

  function find_index__logic "inline"
    (v : vector)
    (e : Ada__containers__formal_vectors__element_type.base_type)
    (i : int)
  : int
  = find_index_ v e (index_type__to_index i)

  function find_ "inline"
    (v : vector)
    (e : Ada__containers__formal_vectors__element_type.base_type)
    (i : int)
  : int
  = extended_index__to_index (find_index_ v e i)

  axiom find_range :
    forall v : vector,
           e : Ada__containers__formal_vectors__element_type.base_type,
           n : int
           [find_index_ v e n].
      n <= find_ v e n <= length_ v \/ find_ v e n = 0

  axiom find_no :
    forall v : vector,
           e : Ada__containers__formal_vectors__element_type.base_type,
           n : int
           [find_index_ v e n].
      find_ v e n = 0 ->
        forall i : int [element_ v i].
          n <= i <= length_ v /\ i > 0 ->
            not (Ada__containers__formal_vectors__oeq.oeq (element_ v i) e)

  axiom find_ex :
    forall v : vector,
           e : Ada__containers__formal_vectors__element_type.base_type,
           n : int
           [find_index_ v e n].
      find_ v e n > 0 ->
        Ada__containers__formal_vectors__oeq.oeq
          (element_ v (find_ v e n)) e

  axiom find_oth :
    forall v : vector,
           e : Ada__containers__formal_vectors__element_type.base_type,
           n : int
           [find_index_ v e n].
      find_ v e n > 0 ->
        forall i : int [element_ v i].
          n <= i < find_ v e n /\ i > 0 ->
            not (Ada__containers__formal_vectors__oeq.oeq (element_ v i) e)

  val find_index
    (v : vector)
    (e : Ada__containers__formal_vectors__element_type.base_type)
    (i : int)
  : int
    ensures { result = find_index__logic v e i }
end

(* function Reverse_Find_Index *)
module Ada__containers__formal_vectors__reverse_find_index
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__element_type
  use "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__oeq
  use import Ada__containers__formal_vectors__index_type_helper
  use import Ada__containers__formal_vectors__extended_index
  use import Ada__containers__formal_vectors__extended_index_helper
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__element

  function reverse_find_index_ vector Ada__containers__formal_vectors__element_type.base_type int : int

  function reverse_find_ "inline"
    (v : vector)
    (e : Ada__containers__formal_vectors__element_type.base_type)
    (i : int)
  : int
  = extended_index__to_index (reverse_find_index_ v e i)

  axiom reverse_find_range :
    forall v : vector,
           e : Ada__containers__formal_vectors__element_type.base_type,
           n : int
           [reverse_find_index_ v e n].
      0 < reverse_find_ v e n <= n /\  reverse_find_ v e n <= length_ v
        \/
      reverse_find_ v e n = 0

  axiom reverse_find_no :
    forall v : vector,
           e : Ada__containers__formal_vectors__element_type.base_type,
           n : int
           [reverse_find_index_ v e n].
      reverse_find_ v e n = 0 ->
        forall i : int [element_ v i].
          0 < i <= n /\ i <= length_ v ->
            not (Ada__containers__formal_vectors__oeq.oeq
                  (element_ v i) e)

  axiom reverse_find_ex :
    forall v : vector,
           e : Ada__containers__formal_vectors__element_type.base_type,
           n : int
           [reverse_find_index_ v e n].
      reverse_find_ v e n > 0 ->
        Ada__containers__formal_vectors__oeq.oeq
          (element_ v (reverse_find_ v e n)) e

  axiom reverse_find_oth :
    forall v : vector,
           e : Ada__containers__formal_vectors__element_type.base_type,
           n : int [reverse_find_index_ v e n].
      reverse_find_ v e n > 0 ->
        forall i : int [element_ v i].
          reverse_find_ v e n < i <= n /\ i <= length_ v ->
            not (Ada__containers__formal_vectors__oeq.oeq
                  (element_ v i) e)

  function reverse_find_index__logic
    (v : vector)
    (e : Ada__containers__formal_vectors__element_type.base_type)
    (i : int)
  : int
  = if extended_index__to_index (i) = 0 then
      reverse_find_index_ v e (length_ v)
    else
      reverse_find_index_ v e (index_type__to_index i)

  val reverse_find_index
    (v : vector)
    (e : Ada__containers__formal_vectors__element_type.base_type)
    (i : int)
  : int
    ensures { result = reverse_find_index__logic v e i }
end

(* function Contains *)
module Ada__containers__formal_vectors__contains
  use import int.Int
  use import "_gnatprove_standard".Main
  use "ada__containers__formal_vectors__args".Ada__containers__formal_vectors__index_type
  use import Ada__containers__formal_vectors__extended_index
  use import Ada__containers__formal_vectors__extended_index_helper
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__find_index

  function contains__logic
    (v : vector)
    (e : Ada__containers__formal_vectors__element_type.base_type)
  : bool
  = if extended_index__to_index (find_index_ v e 1) > 0 then True else False

  val contains
    (v : vector)
    (e : Ada__containers__formal_vectors__element_type.base_type)
  : bool
    ensures { if extended_index__to_index (find_index_ v e 1) > 0 then
                result = True
              else
                result = False }
end

(* function Has_Element *)
module Ada__containers__formal_vectors__has_element
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__index_type_helper

  function has_element__logic (v : vector) (i : int) : bool =
    if 0 < index_type__to_index i <= length_ v then True else False

  val has_element (v : vector) (i : int) : bool
    ensures { if 0 < index_type__to_index i <= length_ v then
                result = True
              else
                result = False }
end

(* function First_To_Previous *)
module Ada__containers__formal_vectors__first_to_previous
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__index_type_helper
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__element

  function first_to_previous__logic vector int : vector

  axiom first_to_previous_len :
    forall v : vector, i : int [first_to_previous__logic v i].
      0 < i <= length_ v -> length_ (first_to_previous__logic v i) = i - 1

  axiom first_to_previous_elt :
    forall v   : vector,
           i j : int
           [first_to_previous__logic v i, element_ v j
           |element_ (first_to_previous__logic v i) j].
      0 < i <= length_ v ->
        0 < j < i -> element_ v j = element_ (first_to_previous__logic v i) j

  val first_to_previous (v : vector) (i : int) : vector
    requires { 0 < index_type__to_index i <= length_ v }
    ensures  { result = first_to_previous__logic v i /\ vector_inv result }
end

(* function Current_To_Last *)
module Ada__containers__formal_vectors__current_to_last
  use import int.Int
  use import "_gnatprove_standard".Main
  use import Ada__containers__formal_vectors__index_type_helper
  use import Ada__containers__formal_vectors__vector
  use import Ada__containers__formal_vectors__length
  use import Ada__containers__formal_vectors__element

  function current_to_last__logic vector int : vector

  axiom current_to_last_len :
    forall v:vector, i:int [current_to_last__logic v i].
      0 < i <= length_ v -> length_ (current_to_last__logic v i) = length_ v - i + 1

  axiom current_to_last_elt1 :
    forall v : vector, i j :int [current_to_last__logic v i, element_ v j].
      0 < i <= length_ v -> i <= j <= length_ v ->
        element_ v j = element_ (current_to_last__logic v i) (j - i + 1)

  axiom current_to_last_elt2 :
    forall v : vector, i j : int [element_ (current_to_last__logic v i) j].
      0 < i <= length_ v -> 0 < j <= length_ v - i + 1 ->
        element_ v (j + i - 1) = element_ (current_to_last__logic v i) j

  val current_to_last (v : vector) (i : int) : vector
    requires { 0 < index_type__to_index i <= length_ v }
    ensures  { result = current_to_last__logic v i /\ vector_inv result}
end
