module Main
  use export "_gnatprove_standard_th".Main_Main

  (* exception used to simulate return statements *)
  exception Return__exc

  (* The type for the heap, and the heap variable. This variable represents
     all effects that we cannot describe more precisely, and that do not
     interfere with other variables, i.e., writes through pointers, aliased
     variables etc. *)
  type __type_of_heap
  type __type_of_heap__ref = { mutable __type_of_heap__content "model_trace:" : __type_of_heap }
  val __HEAP : __type_of_heap__ref

  (* the return type for the functions that correspond to 'Image *)
  type __image

  (* Mutable records holding references over builtin types *)
  type int__ref  = { mutable int__content "model_trace:"  : int  }
  type bool__ref = { mutable bool__content "model_trace:" : bool }
  type real__ref = { mutable real__content "model_trace:" : real }
  type __private__ref = { mutable __private__content "model_trace:" : __private }

  (* Projections from records holding references over builtin types to builtin types *)
  function int__ref___projection
    (a : int__ref)  : int =
    a.int__content
  meta "model_projection" function int__ref___projection
  meta "inline : no" function int__ref___projection

  function bool__ref___projection
    (a : bool__ref)  : bool =
    a.bool__content
  meta "model_projection" function bool__ref___projection
  meta "inline : no" function bool__ref___projection

  function real__ref___projection
    (a : real__ref)  : real =
    a.real__content
  meta "model_projection" function real__ref___projection
  meta "inline : no" function real__ref___projection

  function __private__ref___projection
    (a : __private__ref)  : __private =
    a.__private__content
  meta "model_projection" function __private__ref___projection
  meta "inline : no" function __private__ref___projection

  (* Program function that sets the value of its parameter to any possible
     value allowed by its type. *)
  val int__havoc (x : int__ref) : unit
     writes { x }
  val bool__havoc (x : bool__ref) : unit
     writes { x }
  val real__havoc (x : real__ref) : unit
     writes { x }
  val __private__havoc (x : __private__ref) : unit
     writes { x }
end

module Compatible_Tags
  (* A prediacte to check compatibility between tags *)
  predicate __compatible_tags (from_tag : int) (to_tag : int)
  axiom __compatible_tags_refl :
    forall tag : int. __compatible_tags tag tag
end

module Integer
  use export "_gnatprove_standard_th".Integer
end

module Int_Power
  use export int.Power
end

module Int_Minmax
  use import int.Int
  use int.MinMax

  function int_max (x y : int) : int = MinMax.max x y

  function int_min (x y : int) : int = MinMax.min x y

end

module Int_Abs
  use export int.Abs
end

module Int_Division
  use import int.Int
  use int.ComputerDivision
  use int.EuclideanDivision

  (* Ada division and rem operator correspond to what Why3 calls "computer
  division". Ada mod operator does not correspond to any predefined operator
  in Why3. *)
  function div (x y : int) : int = ComputerDivision.div x y
  function euclid_div (x y : int) : int = EuclideanDivision.div x y

  function rem (x y : int) : int = ComputerDivision.mod x y

  (* This is the formula I found after playing with mod and euclidean mod *)
  function mod (x y : int) : int =
    if y > 0 then EuclideanDivision.mod x y else EuclideanDivision.mod x y + y

  (* This function is used for the (implicit) modulo operation on modular
  types. The modulus is always positive, and in that case, the Ada mod or
  Euclidean mod are OK. We take the Euclidean one because it is better
  supported. *)
  function math_mod (x y : int) : int = EuclideanDivision.mod x y

  (* These program functions are there to generate division checks *)

  val div_ (x:int) (y:int) : int
     requires { y <> 0 }
     ensures { result = div x y }

  val euclid_div_ (x:int) (y:int) : int
     requires { y <> 0 }
     ensures { result = euclid_div x y }

  val rem_ (x:int) (y:int) : int
     requires { y <> 0 }
     ensures{ result = rem x y }

  val mod_ (x:int) (y:int) : int
     requires { y <> 0 }
     ensures { result = mod x y }

end

module Floating_power
  (* Ada's exponentiation operator "**" axiomatization:

     As said in the Ada RM (sec 4.5.6), "X**N" can be equal equal to
     any one of the possible factorizations of the exponentiation:
     "multiplications are associated in an arbitrary order". Also, it
     is guaranteed that for "N" negative "the result is the reciprocal
     of the result using the absolute value of "N"". Hence, since
     multiplication on floats is commutative but not associative, we
     can only be sure of the value of "X**N" for "N" between -3 and
     3. *)

  type t

  use import int.Int
  predicate is_finite t
  predicate is_zero t
  predicate eq t t

  function of_int int : t
  function ( * ) t t   : t
  function div   t t   : t
  function power t int : t

  axiom Power_0 : forall x: t. is_finite x -> eq (power x 0) (of_int 1)

  lemma Power_1 : forall x : t. is_finite x -> eq (power x 1) x

  axiom Power_2 : forall x : t. is_finite x -> eq (power x 2) (x * x)

  axiom Power_3 : forall x : t. is_finite x -> eq (power x 3) (x * (x * x))

  axiom Power_neg1 : forall x : t. is_finite x -> not (is_zero x) ->
    eq (power x (-1)) (div (of_int 1) x)

  axiom Power_neg2 : forall x : t. is_finite x -> not (is_zero x) ->
    eq (power x (-2)) (div (of_int 1) (power x 2))

  axiom Power_neg3 : forall x : t. is_finite x -> not (is_zero x) ->
    eq (power x (-2)) (div (of_int 1) (power x 3))
end

module Floating_next_prev
  (* next/prev representable:
     Next and previous representable reals. The functions return respectively
     the representable real greater than or lower than the argument x, which
     may or not be representable. *)

  type t

  constant max_value : t
  function neg t : t

  predicate is_finite t
  predicate eq t t
  predicate lt t t
  predicate le t t
  predicate gt t t
  predicate ge t t

  function next_representable (x : t) : t
  function prev_representable (x : t) : t

  (* Note that Succ (-0) > +0 *)

  (* need to guard with is_finite since the axiom cannot hold when x is NaN *)
  axiom next_representable_def :
    forall x : t [next_representable x]. is_finite x -> gt (next_representable x) x

  axiom prev_representable_def :
    forall x : t [prev_representable x]. is_finite x -> lt (prev_representable x) x

  (* does not need is finite since gt y x implies that neither x or y is NaN *)
  axiom next_representable_def2 :
    forall x y : t. gt y x -> ge y (next_representable x)

  axiom prev_representable_def2 :
    forall x y : t. lt y x -> le y (prev_representable x)

  (* possible addition: *)

  (* axiom next_representable_gt :
    forall x y z : t. gt y x -> gt z y -> gt z (next_representable x)

    and idem for prev.
  *)

  axiom next_representable_finite :
    forall x : t [is_finite (next_representable x)].
      is_finite x -> not (eq x max_value) -> is_finite (next_representable x)

  axiom prev_representable_finite :
    forall x : t [is_finite (prev_representable x)].
      is_finite x -> not (eq x (neg max_value)) -> is_finite (prev_representable x)
end

module Floating
  clone export _gnatprove_standard_th.Floating_Func

  constant zeroF   : t
  function div_rne t t : t
  function rem t t : t

  val div_rne_ (x:t) (y:t) : t
     requires { not (eq y zeroF) }
     ensures { result = div_rne x y }

  val rem_ (x:t) (y:t) : t
     requires { not (eq y zeroF) }
     ensures{ result = rem x y }
end

module Float32RNE
  use export ieee_float.Float32

  function mul_rne (x y : t) : t = mul RNE x y
  function div_rne (x y : t) : t = div RNE x y
  function add_rne (x y : t) : t = add RNE x y
  function sub_rne (x y : t) : t = sub RNE x y

  function of_int_rne (x:int) : t = of_int RNE x
  function to_int_rna (x:t) : int = to_int RNA x

  function ceil     (x:t) : t = roundToIntegral RTP x
  function floor    (x:t) : t = roundToIntegral RTN x
  function rounding (x:t) : t = roundToIntegral RNA x
  function truncate (x:t) : t = roundToIntegral RTZ x
end

module Float64RNE
  use export ieee_float.Float64

  function mul_rne (x y : t) : t = mul RNE x y
  function div_rne (x y : t) : t = div RNE x y
  function add_rne (x y : t) : t = add RNE x y
  function sub_rne (x y : t) : t = sub RNE x y

  function of_int_rne (x:int) : t = of_int RNE x
  function to_int_rna (x:t) : int = to_int RNA x

  function ceil     (x:t) : t = roundToIntegral RTP x
  function floor    (x:t) : t = roundToIntegral RTN x
  function rounding (x:t) : t = roundToIntegral RNA x
  function truncate (x:t) : t = roundToIntegral RTZ x
end

module Float32_power
  use export Float32RNE

  clone export Floating_power with
    type t = t,
    function ( * ) = mul_rne,
    function div = div_rne,
    function of_int = of_int_rne,
    predicate eq = eq,
    predicate is_finite = t'isFinite,
    predicate is_zero = is_zero
end

module Float64_power
  use export Float64RNE

  clone export Floating_power with
    type t = t,
    function ( * ) = mul_rne,
    function div = div_rne,
    function of_int = of_int_rne,
    predicate eq = eq,
    predicate is_finite = t'isFinite,
    predicate is_zero = is_zero
end

module Float32_next_prev
  use export Float32RNE

  constant max_value : t
  axiom max_value : max_real = t'real max_value

  clone export Floating_next_prev with
    type t = t,
    function max_value = max_value,
    function neg = neg,
    predicate eq = eq,
    predicate is_finite = t'isFinite,
    predicate lt = lt,
    predicate gt = gt,
    predicate le = le,
    predicate ge = ge
end

module Float64_next_prev
  use export Float64RNE

  constant max_value : t
  axiom max_value : max_real = t'real max_value

  clone export Floating_next_prev with
    type t = t,
    function max_value = max_value,
    function neg = neg,
    predicate eq = eq,
    predicate is_finite = t'isFinite,
    predicate lt = lt,
    predicate gt = gt,
    predicate le = le,
    predicate ge = ge
end

module Float32
  use export Float32RNE

  clone export Floating with
    type t = t,
    predicate lt = lt,
    predicate le = le,
    predicate gt = gt,
    predicate ge = ge,
    predicate eq = eq,
    function div_rne = div_rne,
    constant zeroF = zeroF

  constant one : t = (1.0:t)
  axiom one_is_int: is_int one
  axiom one_of_int: one = of_int RNA 1

  type t__ref = { mutable t__content "model_trace:" : t }
end

module Float64
  use export Float64RNE

  clone export Floating with
    type t = t,
    predicate lt = lt,
    predicate le = le,
    predicate gt = gt,
    predicate ge = ge,
    predicate eq = eq,
    function div_rne = div_rne,
    constant zeroF = zeroF

  constant one : t = (1.0:t)
  axiom one_is_int: is_int one
  axiom one_of_int: one = of_int RNA 1

  type t__ref = { mutable t__content "model_trace:" : t }
end

module FloatConv
  use export ieee_float.FloatConverter

  function to_float64_rne (x:Float32.t) : Float64.t = to_float64 RNE x
  function to_float32_rne (x:Float64.t) : Float32.t = to_float32 RNE x

  val range_check_ (f l x : Float64.t) : Float64.t
    requires { (Float64.(.<=) f x) /\ (Float64.(.<=) x l) }
    ensures { result = x }
end

module Float32_BV_Converter
  use export ieee_float.Float32_BV_Converter
  use import ieee_float.Float32

  function of_ubv8_rna  (x:BV8.t)  : t = of_ubv8  RNA x
  function of_ubv16_rna (x:BV16.t) : t = of_ubv16 RNA x
  function of_ubv32_rna (x:BV32.t) : t = of_ubv32 RNA x
  function of_ubv64_rna (x:BV64.t) : t = of_ubv64 RNA x

  function of_ubv8_rtp  (x:BV8.t)  : t = of_ubv8  RTP x
  function of_ubv16_rtp (x:BV16.t) : t = of_ubv16 RTP x
  function of_ubv32_rtp (x:BV32.t) : t = of_ubv32 RTP x
  function of_ubv64_rtp (x:BV64.t) : t = of_ubv64 RTP x

  function of_ubv8_rtn  (x:BV8.t)  : t = of_ubv8  RTN x
  function of_ubv16_rtn (x:BV16.t) : t = of_ubv16 RTN x
  function of_ubv32_rtn (x:BV32.t) : t = of_ubv32 RTN x
  function of_ubv64_rtn (x:BV64.t) : t = of_ubv64 RTN x

  function to_ubv8_rna  (x:t) : BV8.t  = to_ubv8  RNA x
  function to_ubv16_rna (x:t) : BV16.t = to_ubv16 RNA x
  function to_ubv32_rna (x:t) : BV32.t = to_ubv32 RNA x
  function to_ubv64_rna (x:t) : BV64.t = to_ubv64 RNA x

  val range_check_ (f l n : t) : t
    requires {f .<= n .<= l}
    ensures {result = n /\ f .<= n .<= l}
end

module Float64_BV_Converter
  use export ieee_float.Float64_BV_Converter
  use import ieee_float.Float64

  function of_ubv8_rna  (x:BV8.t)  : t = of_ubv8  RNA x
  function of_ubv16_rna (x:BV16.t) : t = of_ubv16 RNA x
  function of_ubv32_rna (x:BV32.t) : t = of_ubv32 RNA x
  function of_ubv64_rna (x:BV64.t) : t = of_ubv64 RNA x

  function of_ubv8_rtp  (x:BV8.t)  : t = of_ubv8  RTP x
  function of_ubv16_rtp (x:BV16.t) : t = of_ubv16 RTP x
  function of_ubv32_rtp (x:BV32.t) : t = of_ubv32 RTP x
  function of_ubv64_rtp (x:BV64.t) : t = of_ubv64 RTP x

  function of_ubv8_rtn  (x:BV8.t)  : t = of_ubv8  RTN x
  function of_ubv16_rtn (x:BV16.t) : t = of_ubv16 RTN x
  function of_ubv32_rtn (x:BV32.t) : t = of_ubv32 RTN x
  function of_ubv64_rtn (x:BV64.t) : t = of_ubv64 RTN x

  function to_ubv8_rna  (x:t) : BV8.t  = to_ubv8  RNA x
  function to_ubv16_rna (x:t) : BV16.t = to_ubv16 RNA x
  function to_ubv32_rna (x:t) : BV32.t = to_ubv32 RNA x
  function to_ubv64_rna (x:t) : BV64.t = to_ubv64 RNA x

  val range_check_ (f l n : t) : t
    requires {f .<= n .<= l}
    ensures {result = n /\ f .<= n .<= l}
end

module Boolean
  use export bool.Bool
  use export bool.Ite
  use import int.Int
  use import Main

  use export "_gnatprove_standard_th".Boolean_Func

  (* Boolean logical connectors, functions for conversion of booleans, etc *)

  function to_int (b : bool) : int =
   if b = True then 1 else 0

  function of_int (i : int) : bool =
   if i = 0 then False else True

  function last : int = 1
  function first : int = 0

  predicate in_range (x : int) = x = 0 \/ x = 1

  predicate dynamic_property "inline" (f l x : int) = in_range x

  function attr__ATTRIBUTE_IMAGE bool : __image

  predicate attr__ATTRIBUTE_VALUE__pre_check (x : __image)

  function attr__ATTRIBUTE_VALUE __image : bool

  val attr__ATTRIBUTE_VALUE_ (x : __image) : bool
    requires { attr__ATTRIBUTE_VALUE__pre_check x }
    ensures { true }

  val range_check_ (n : int) : int
    requires { in_range n }
    ensures { result = n }

  val check_not_last (n : int) : int
    requires { n <> last }
    ensures { result = n }

  val check_not_first (n : int) : int
    requires { n <> first }
    ensures { result = n }

end

(* The following theories care about the *contents* of Arrays, and defines
   access and update functions. They do not care about properties of bounds.
   However, boolean equality and sliding needs array bounds as *inputs*. These
   functions are independent of the representation of constrained/unconstrained
   arrays. This also means that there is some special circuitry in gnat2why to
   actually call these functions.

   For Boolean equality, the arguments are, in order:
    - the first array
    - for each dimension, first and last
    - the second array
    - for each dimension, first and last

  Boolean equality returns true when all dimensions of the two arrays are of
  the same length, and the arrays contain the same elements in their valid
  range (note that access needs to be slided when the bounds do not coincide,
  but the length is still the same).

  For sliding, the arguments are, in order:
    - the array
    - for each dimension, the old and new value of first

  Sliding shifts the elements of the array according to the difference between
  the old and new value of first.

*)
module Array__Index
  type t

  predicate le t t
  predicate lt t t
  predicate gt t t

  function  add t t : t
  function  sub t t : t

  function one : t
end

module Array__1
  use map.Map

  use import bool.Bool

  clone Array__Index as I1

  type component_type

  type map = Map.map I1.t component_type
  type map__ref = { mutable map__content "model_trace:" : map }
  val map__havoc (x : map__ref) : unit
     writes { x }

  function get "inline" (a : map) (i : I1.t) : component_type = Map.get a i
  function set "inline" (a : map) (i : I1.t) (v : component_type) : map = Map.set a i v

  function slide map I1.t I1.t : map
  meta "encoding : lskept" function slide

  axiom slide_eq :
    forall a : map.
    forall first : I1.t
      [slide a first first].
      slide a first first = a

  axiom slide_def :
    forall a : map.
    forall old_first : I1.t.
    forall new_first : I1.t.
    forall i : I1.t
      [get (slide a old_first new_first) i].
      get (slide a old_first new_first) i = get a (I1.sub i (I1.sub new_first old_first))

  (* Concatenation is only defined for one-dimensional arrays; it appends a
     map to another. We do not really care about the valid ranges of the
     original arrays, but we need to know for each access to the
     concatenation, which of the arguments we need to look at. Also, if we are
     interested in the second argument, a shift must be made depending on the
     original "first" value. *)

  function concat map I1.t I1.t map I1.t I1.t : map
  meta "encoding : lskept" function concat

  axiom concat_def :
    forall a b : map.
    forall a_first a_last b_first b_last : I1.t.
    forall i : I1.t [get (concat a a_first a_last b b_first b_last) i].
      ((I1.le a_first i /\ I1.le i a_last) ->
          get (concat a a_first a_last b b_first b_last) i = get a i)
         /\
      ((I1.gt i a_last) ->
        get (concat a a_first a_last b b_first b_last) i = get b (I1.add (I1.sub i a_last) (I1.sub b_first I1.one)))

   (* a singleton array is the array which is defined only at the given
   position, and yields the given value. *)

   function singleton component_type I1.t : map
   meta "encoding : lskept" function singleton

   axiom singleton_def :
    forall v : component_type.
    forall i : I1.t  [get (singleton v i) i].
      get (singleton v i) i = v
end

module Array__2
  use import bool.Bool

  clone Array__Index as I1
  clone Array__Index as I2

  type component_type

  type map
  type map__ref = { mutable map__content "model_trace:" : map }
  val map__havoc (x : map__ref) : unit
     writes { x }

  function get map I1.t I2.t : component_type
  meta "encoding : lskept" function get
  function set map I1.t I2.t component_type : map
  meta "encoding : lskept" function set

  axiom Select_eq :
    forall m : map.
    forall i : I1.t.
    forall j : I2.t.
    forall a : component_type [set m i j a].  get (set m i j a) i j = a

  axiom Select_neq :
    forall m : map.
    forall i i2 : I1.t.
    forall j j2 : I2.t.
    forall a : component_type [get (set m i j a) i2 j2| set m i j a, get m i2 j2].
    not (i = i2 /\ j = j2) -> get (set m i j a) i2 j2 = get m i2 j2

  function slide map I1.t I1.t I2.t I2.t : map
  meta "encoding : lskept" function slide

  axiom slide_def :
    forall a : map.
    forall new_first    old_first   : I1.t.
    forall new_first_2  old_first_2 : I2.t.
    forall i : I1.t.
    forall j : I2.t
      [get (slide a old_first new_first old_first_2 new_first_2) i j].
      get (slide a old_first new_first old_first_2 new_first_2) i j =
        get a (I1.sub i (I1.sub new_first old_first)) (I2.sub j (I2.sub new_first_2 old_first_2))
end

module Array__3
  use import bool.Bool

  clone Array__Index as I1
  clone Array__Index as I2
  clone Array__Index as I3

  type component_type

  type map
  type map__ref = { mutable map__content "model_trace:" : map }
  val map__havoc (x : map__ref) : unit
     writes { x }

  function get map I1.t I2.t I3.t : component_type
  meta "encoding : lskept" function get
  function set map I1.t I2.t I3.t component_type : map
  meta "encoding : lskept" function set

  axiom Select_eq :
    forall m : map.
    forall i : I1.t.
    forall j : I2.t.
    forall k : I3.t.
    forall a : component_type [set m i j k a].  get (set m i j k a) i j k = a

  axiom Select_neq :
    forall m : map.
    forall i i2 : I1.t.
    forall j j2 : I2.t.
    forall k k2 : I3.t.
    forall a : component_type [get (set m i j k a) i2 j2 k2| set m i j k a, get m i2 j2 k2].
    not (i = i2 /\ j = j2 /\ k = k2) ->
      get (set m i j k a) i2 j2 k2 = get m i2 j2 k2

  function slide map I1.t I1.t I2.t I2.t I3.t I3.t : map
  meta "encoding : lskept" function slide

  axiom slide_def :
    forall a : map.
    forall old_first   new_first   : I1.t.
    forall old_first_2 new_first_2 : I2.t.
    forall old_first_3 new_first_3 : I3.t.
    forall i : I1.t.
    forall j : I2.t.
    forall k : I3.t
      [get (slide a old_first new_first old_first_2 new_first_2
                    old_first_3 new_first_3) i j k].
      get (slide a old_first new_first old_first_2 new_first_2
                   old_first_3 new_first_3) i j k =
        get a (I1.sub i (I1.sub new_first old_first))
              (I2.sub j (I2.sub new_first_2 old_first_2))
              (I3.sub k (I3.sub new_first_3 old_first_3))
end

module Array__4
  use import bool.Bool

  clone Array__Index as I1
  clone Array__Index as I2
  clone Array__Index as I3
  clone Array__Index as I4

  type component_type

  type map
  type map__ref = { mutable map__content "model_trace:" : map }
  val map__havoc (x : map__ref) : unit
     writes { x }

  function get map I1.t I2.t I3.t I4.t : component_type
  meta "encoding : lskept" function get
  function set map I1.t I2.t I3.t I4.t component_type : map
  meta "encoding : lskept" function set

  axiom Select_eq :
    forall m : map.
    forall i : I1.t.
    forall j : I2.t.
    forall k : I3.t.
    forall l : I4.t.
    forall a : component_type [set m i j k l a].  get (set m i j k l a) i j k l = a

  axiom Select_neq :
    forall m : map.
    forall i i2 : I1.t.
    forall j j2 : I2.t.
    forall k k2 : I3.t.
    forall l l2 : I4.t.
    forall a : component_type
      [get (set m i j k l a) i2 j2 k2 l2|
       set m i j k l a, get m i2 j2 k2 l2].
    not (i = i2 /\ j = j2 /\ k = k2 /\ l = l2) ->
      get (set m i j k l a) i2 j2 k2 l2 = get m i2 j2 k2 l2

  function slide map I1.t I1.t I2.t I2.t I3.t I3.t I4.t I4.t : map
  meta "encoding : lskept" function slide

  axiom slide_def :
    forall a : map.
    forall old_first   new_first   : I1.t.
    forall old_first_2 new_first_2 : I2.t.
    forall old_first_3 new_first_3 : I3.t.
    forall old_first_4 new_first_4 : I4.t.
    forall i : I1.t.
    forall j : I2.t.
    forall k : I3.t.
    forall l : I4.t
      [get (slide a old_first new_first old_first_2 new_first_2
                    old_first_3 new_first_3 old_first_4 new_first_4) i j k l].
      get (slide a old_first new_first old_first_2 new_first_2
                   old_first_3 new_first_3 old_first_4 new_first_4) i j k l =
        get a (I1.sub i (I1.sub new_first old_first))
              (I2.sub j (I2.sub new_first_2 old_first_2))
              (I3.sub k (I3.sub new_first_3 old_first_3))
              (I4.sub l (I4.sub new_first_4 old_first_4))
end

module BVAda
  type t

  function abs "inline" (x : t) : t = x

  predicate ult t t
  predicate ule t t
  predicate ugt t t
  predicate uge t t

  function to_uint t : int

  use import bool.Bool
  function bool_eq (x: t) (y: t) : bool = x = y
  function bool_ne (x: t) (y: t) : bool = x <> y
  function bool_lt (x: t) (y: t) : bool = ult x y
  function bool_le (x: t) (y: t) : bool = ule x y
  function bool_gt (x: t) (y: t) : bool = ugt x y
  function bool_ge (x: t) (y: t) : bool = uge x y

  use import int.Int
  function one : t

  function (*) t t : t

  function power t int : t

  axiom Power_0 : forall x: t. power x 0 = one

  lemma Power_1 : forall x : t. power x 1 = x

  axiom Power_s : forall x: t, n: int. n >= 0 -> power x (n+1) = x * power x n

  lemma Power_s_alt: forall x: t, n: int. n > 0 -> power x n = x * power x (n-1)

  lemma Power_sum : forall x: t, n m: int. 0 <= n -> 0 <= m ->
    power x (n+m) = power x n * power x m

  lemma Power_mult : forall x:t, n m : int. 0 <= n -> 0 <= m ->
    power x (Int.(*) n m) = power (power x n) m

  lemma Power_mult2 : forall x y: t, n: int. 0 <= n ->
    power (x * y) n = power x n * power y n

  function bv_min (x y : t) : t = if ule x y then x else y
  function bv_max (x y : t) : t = if ule x y then y else x

  use int.MinMax

  lemma bv_min_to_uint: forall x y.
    to_uint (bv_min x y) = MinMax.min (to_uint x) (to_uint y)

  lemma bv_max_to_uint: forall x y.
    to_uint (bv_max x y) = MinMax.max (to_uint x) (to_uint y)

end

module BV8
  use export bv.BV8

  type t__ref = { mutable t__content "model_trace:" : t }
  val t__havoc (x : t__ref) : unit
     writes { x }

  clone export BVAda with
    type t = t,
    predicate ult = ult,
    predicate ule = ule,
    predicate ugt = ugt,
    predicate uge = uge,
    function to_uint = t'int,
    function ( * ) = mul,
    function one = one

  val of_int_ (i : int) : t
    requires{ uint_in_range i }
    ensures{ result = of_int i }

  val udiv_ (x : t) (y : t) : t
    requires{ y <> zeros }
    ensures{ result = udiv x y }

  val urem_ (x : t) (y : t) : t
    requires{ y <> zeros }
    ensures{ result = urem x y }
end

module BV16
  use export bv.BV16

  type t__ref = { mutable t__content "model_trace:" : t }
  val t__havoc (x : t__ref) : unit
     writes { x }

  clone export BVAda with
    type t = t,
    predicate ult = ult,
    predicate ule = ule,
    predicate ugt = ugt,
    predicate uge = uge,
    function to_uint = t'int,
    function ( * ) = mul,
    function one = one

  val of_int_ (i : int) : t
    requires{ uint_in_range i }
    ensures{ result = of_int i }

  val udiv_ (x : t) (y : t) : t
    requires{ y <> zeros }
    ensures{ result = udiv x y }

  val urem_ (x : t) (y : t) : t
    requires{ y <> zeros }
    ensures{ result = urem x y }
end

module BV32
  use export bv.BV32

  type t__ref = { mutable t__content "model_trace:" : t }
  val t__havoc (x : t__ref) : unit
     writes { x }

  clone export BVAda with
    type t = t,
    predicate ult = ult,
    predicate ule = ule,
    predicate ugt = ugt,
    predicate uge = uge,
    function to_uint = t'int,
    function ( * ) = mul,
    function one = one

  val of_int_ (i : int) : t
    requires{ uint_in_range i }
    ensures{ result = of_int i }

  val udiv_ (x : t) (y : t) : t
    requires{ y <> zeros }
    ensures{ result = udiv x y }

  val urem_ (x : t) (y : t) : t
    requires{ y <> zeros }
    ensures{ result = urem x y }
end

module BV64
  use export bv.BV64

  type t__ref = { mutable t__content "model_trace:" : t }
  val t__havoc (x : t__ref) : unit
     writes { x }

  clone export BVAda with
    type t = t,
    predicate ult = ult,
    predicate ule = ule,
    predicate ugt = ugt,
    predicate uge = uge,
    function to_uint = t'int,
    function ( * ) = mul,
    function one = one

  val of_int_ (i : int) : t
    requires{ uint_in_range i }
    ensures{ result = of_int i }

  val udiv_ (x : t) (y : t) : t
    requires{ y <> zeros }
    ensures{ result = udiv x y }

  val urem_ (x : t) (y : t) : t
    requires{ y <> zeros }
    ensures{ result = urem x y }
end

module BVConv_32_64
  use export bv.BVConverter_32_64

  val range_check_ (f l x : BV64.t) : BV64.t
    requires { (BV64.ule f x) /\ (BV64.ule x l) }
    ensures { result = x }
end

module BVConv_16_64
  use export bv.BVConverter_16_64

  val range_check_ (f l x : BV64.t) : BV64.t
    requires { (BV64.ule f x) /\ (BV64.ule x l) }
    ensures { result = x }
end

module BVConv_8_64
  use export bv.BVConverter_8_64

  val range_check_ (f l x : BV64.t) : BV64.t
    requires { (BV64.ule f x) /\ (BV64.ule x l) }
    ensures { result = x }
end

module BVConv_16_32
  use export bv.BVConverter_16_32

  val range_check_ (f l x : BV32.t) : BV32.t
    requires { (BV32.ule f x) /\ (BV32.ule x l) }
    ensures { result = x }
end

module BVConv_8_32
  use export bv.BVConverter_8_32

  val range_check_ (f l x : BV32.t) : BV32.t
    requires { (BV32.ule f x) /\ (BV32.ule x l) }
    ensures { result = x }
end

module BVConv_8_16
  use export bv.BVConverter_8_16

  val range_check_ (f l x : BV16.t) : BV16.t
    requires { (BV16.ule f x) /\ (BV16.ule x l) }
    ensures { result = x }
end
