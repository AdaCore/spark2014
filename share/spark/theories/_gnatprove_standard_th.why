theory Main_Main
  use import bool.Bool

  (* special private type for private types not in SPARK and hidden extension
  components *)
  type __private

  (* equality over private types *)
  function private__bool_eq __private __private : bool

  (* dummy value for the null extension when the dynamic type matches the
  static type *)
  function __null_ext__ : __private

  (* special type for representation of fixed_point types *)
  type __fixed = int

end

theory Integer
  use import int.Int
  use import bool.Bool

  function bool_eq int int : bool
  function bool_ne int int : bool
  function bool_lt int int : bool
  function bool_le int int : bool
  function bool_gt int int : bool
  function bool_ge int int : bool

  axiom bool_eq_axiom:
    forall x:int.
    forall y:int.
      bool_eq x y = True <-> x = y

  axiom bool_ne_axiom:
    forall x:int.
    forall y:int.
      bool_ne x y = True <-> x <> y

  axiom bool_lt_axiom:
    forall x:int.
    forall y:int.
      bool_lt x y = True <-> x < y

  axiom bool_int__le_axiom:
    forall x:int.
    forall y:int.
      bool_le x y = True <-> x <= y

  axiom bool_gt_axiom:
    forall x:int.
    forall y:int.
        bool_gt x y = True <-> x > y

  axiom bool_ge_axiom:
    forall x:int.
    forall y:int.
        bool_ge x y = True <-> x >= y

end

theory Floating_Func
  use import bool.Bool

  type t

  predicate lt t t
  predicate le t t
  predicate gt t t
  predicate ge t t
  predicate eq t t
  predicate neq (x y : t) = not (eq x y)

  function bool_lt  (x: t) (y: t) : bool = lt x y
  function bool_le  (x: t) (y: t) : bool = le x y
  function bool_gt  (x: t) (y: t) : bool = gt x y
  function bool_ge  (x: t) (y: t) : bool = ge x y
  function bool_eq  (x: t) (y: t) : bool = eq x y
  function bool_neq (x: t) (y: t) : bool = not (eq x y)
end

theory Boolean_Func
  use import bool.Bool

  function bool_eq (x : bool) (y : bool) : bool =
    if x = y then True else False

end
