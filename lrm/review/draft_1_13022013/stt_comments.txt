
Sorry for the delay.
-Tuck
-----
Spark LRM Review -- T. Taft, starting 13-Feb-2013

Ident: STT/1
Section: 7.1.2
Page/Para:
Comment:
This paragraph is confusing.  What is a "more obvious view"?  Perhaps a more "intuitive" or "natural" view?  In the phrase "this may be given explicitly" to what does "this" refer?
-------
The read or update of a volatile variable or state abstraction is considered to be both a read and an update of the entity. In Global and Depends aspects this means that volatile entities will be regarded as being both an input and an output and this may be given explicitly. However if a variable or abstract state is explicitly designated as being a Volatile Input or a Volatile Output, an abbreviated form of the Global and Depends aspect is permitted which gives a more obvious view of the global and dependency.
-----
Ident: STT/2
Section: 7.1.2
Page/Para:
Comment:
This sentence is missing something (a semicolon or a dash?):
In a Depends aspect it need not appear as an output an implicit self dependency of the entity will be declared.
---
Ident: STT/3
Section: 7.1.2
Page/Para:
Comment:
Ditto for this sentence:
In a Depends aspect it need not appear as an input an implicit self dependency of the entity will be declared.
---
Ident: STT/4
Section: 7.1.2
Page/Para:
Comment:
singular/plural mismatch, and "a assertion":
A volatile variable or state abstractions cannot be mentioned directly in a assertion expression as the reading of a volatile may affect its value.
---
Ident: STT/5
Section: 7.1.3
Page/Para:
Comment:
"... since modular [is] analysis {is} performed before ..."
---
Ident: STT/6
Section: 7.1.3
Page/Para: p. 49
Comment:
  the parenthetical parts of this sentence are confusing:
State abstraction provides a mechanism for naming, in a package’s visible_part, state (typically variable declarations) that will be declared within the package’s body (or private_part, or within private descendants of the package).

It would make sense to say "(typically variables)" since the variables are
the state, not their declarations.  But it would be even better to leave it out, or move it later in the sentence.  It also doesn't make sense to parenthesize "or private_part, or within private descendants of the package" since there is nothing parenthetical about this.

I also find it funny to say that State abstraction is primarily about "naming",
and also note that the names are used outside of the visible part, e.g. during a refinement in the body.  All in all, I think this sentence should be rewritten, or perhaps even dropped completely.
---
Ident: STT/7
Section: 7.1.3
Page/Para: p. 49
Comment:
"The hidden state of a package may be represented by one or more state abstractions, with [each] {any} pair of state abstractions representing disjoint sets of hidden variables."
---
Ident: STT/8
Section: 7.1.3 (and probably elsewhere)
Page/Para: p. 49 (and elsewhere)
Comment:
No need to capitalize "aspect."  E.g. "Global Aspect" => "Global aspect".
---
Ident: STT/9
Section: 7.1.3 (and perhaps elsewhere)
Page/Para: p. 49
Comment:
In syntax descriptions, reserved words should be bolded or quoted or
upper-cased or somehow distinguished from non-terminals.  E.g., in:

   ( state_name with property_list )

the "with" should be <b>with</b> or WITH or 'with' or something like that.
---
Ident: STT/10
Section: 7.1.3
Page/Para: p. 49 (and later)
Comment:
In the following legality rule:

 7. A package_declaration or generic_package_declaration requires a
    completion [(a body)] if it contains a non-null Abstract State aspect
    specification.

the magic phrase "requires a completion" (of 3.11.1 fame) appears.  I suspect
it should be changed to "shall have a completion" to avoid implying that the
presence of this aspect triggers the "requires a completion" semantics.
My belief is that we still want the programmer to insert a
"pragma Elaborate_Body" for example, if there is nothing else in the spec
that would normally trigger the "requires a completion" semantics.
I think we want to be able to erase Abstract_State aspects and still have
a legal Ada program.
NOTE: The "requires completion" wording also appears later in 7.1.3, and
should probably also be changed to "shall have a completion."
---
Ident: STT/11
Section: 7.1.3
Page/Para: p. 50
Comment:
In the following:
2. The hidden state of a package P consists of:
* any variables declared immediately within the private part or body of P; and
* the visible state and state abstractions of any packages declared immediately within the private part or body of P, and of any private child units of P or of their public descendants.

This seems to leave out the hidden state of nested packages.  Shouldn't we
change the last bullet to be two bullets:
* the hidden state of any packages declared immediately within the visible
  part of P
* the hidden and visible state and state abstractions of any packages declared
  immediately within the private part or body of P, and of any private child
  units of P or of their public descendants.

---
Ident: STT/12
Section: 7.1.3
Page/Para: p. 50
Comment:
Here is a more general question about private descendants:
We seem to be treating them as "part" of the parent, but whether or
not a particular private descendant is included in a program
can depend on whether it is mentioned in a "with" clause
by a public descendant.  So this implies that some private
descendants might not be included, even though the parent is
included in a program.  How does this affect the model?
Should we treat private descendants on which the parent has
no dependence as though there were a public descendant?
Similarly, should we treat public descendants on which the
parent *has* a dependence in the way we were proposing to
treat private descendants?
Or should we treat each library package independently? (That
would be the simplest!)

---
Ident: STT/13
Section: 7.1.3
Page/Para: p. 50
Comment: (Editorial)
Two paragraphs are numbered "1.".
The paragraph numbered "2." has the following
typo: "The specification is [is] checked..."
The paragraph numbered "3." should use "that"
rather than "which": "... with a property list [which] {that}
includes the Volatile property..."
In the Example, a comment should be revised:
 "... abstract state name{d} State ..."
In the Example, "Global" is bolded in some cases and not in others.
In general the "bolding" is not consistent (here and elsewhere).
---



Ident: STT/14
Section: A.1.1
Page/Para:
Comment:
"Swap" example used to explain shift from "Derives" to "Depends" is not
helpful because it is symmetric.  It starts from:

  Derives X from Y & Y from X

and goes to

  Depends => (X => Y, Y => X)

so it is unclear whether "Derives" and "Depends" use essentially the
same order or if the order should be reversed.

Ident: STT/15
Section: A.1.3
Page/Para:
Comment:
quantified expression needs to be parenthesized:

   Post => (for all I in X’Range => (X (I) = 0));

Also, why is "Depends" in bold, while Pre and Post are not?

Ident: STT/16
Section: A.2.1
Page/Para:
Comment:
why are some things bolded (e.g. "Pre") and some not (e.g. "Post")?
