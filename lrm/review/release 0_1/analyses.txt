
Implementor (Analyses)
  Are we confident that we have a workable model for flow-analysis
  and proof of the new language?

----------------------------------------------------------
General comments not related to a page/paragraph
----------------------------------------------------------

Ident: AN-FS1
Section: general
Page/para:
Comment: I am missing in this document a comprehensive list of
  attributes and when they can be used.
Status: 

Ident: AN-FS2
Section: general
Page/para:
Comment: For flow analysis we must now keep track of 'First and 'Last
of every object thanks to dynamic subtypes. Otherwise it might
possible to write a program in which information `disappears':
   function F (X : in T) return Integer
      is (X'First);
What should the derives of this be?
   result from X?
   result from X'Range?
   result from null?    <- this is the current spark95 view

If we go with the spark 95 model, then we have a problem here.
   declare
      subtype U is T range Secret_Data .. T'Last;
      Tmp : U := T'Last;
   begin
      Send_To_The_Enemy (F (Tmp));
   end;

If we go with "derives result from X" we have this problem:
   procedure Init_Array (X : out T)
   is
   begin
      X := T'(F'First => 1,
              others  => 0);
   end Init_Array;
Now the derives would intuitively contradict the mode of X.

If we go with "result from X'Range" (or track 'First and 'Last
separately) then it means we need to write tedious contracts like:
   function Is_Zero (X : T) return Boolean
      with Depends => (Is_Zero'Result => X,
                       null           => X'Range)
      is (X = 0);

Serious thought required. I tend to "derives result from X", with
implicit 'Range as an in parameter and flow analysis will not complain
if you derive nothing from it and the default is "Depends (null => all
the 'Range stuff)".
Status: 


Ident: AN-JK3
Section: general (related to previous review)
Page/para:
Comment:
  'First and 'Last (and 'Length?) for unconstrained or
  dynamically constrained array parameters/globals need special care,
  because information can flow through them. To support the general case,
  one should be able to mention X'First / X'Last for any array variable in
  dependency relations.

  In the most common cases, however, this will introduce a lot of noise
  into dependency relations. For example, for a subprogram with an
  unconstrained array parameter X of mode "out", X'First and X'Last are
  implicit "in" parameters. In addition, there may be flow from
  X'First/'Last to the contents of X. Such "obvious" relations should be
  implicit, and not be required to be written by the programmer.
Status: 


Ident: AN-JK4
Section: general
Page/para:
Comment:
  The generative contracts are mentioned very late in chapt. 6. It should
  be stated that every subprogram has an implicit global/flow contract. If
  the user provides one, both are compared and the implicit one should
  refine the explicit one.

  When the global/flow contract is required for analysis of another
  subprogram (e.g. to implement the above comparison), the user-provided
  contract is used if it exists, otherwise the implicit one is used.
Status: 


----------------------------------------------------------
Regular comments
----------------------------------------------------------

Ident: AN-JK5
Section: 3.3
Page/para:
Comment:
  Why is the initialization expression of a variable required to be in S14
  for the variable to be in S14?
Status: 


Ident: AN-FS6
Section: 5.5.3
Page/para: 18 .. 19
Comment: We may want a restriction which requires each while loop to
  have a Loop_Variant pragma.
Status: 


Ident: AN-YM7
Section: 6.1
Page/para: 23/5
Comment: I don't see what we could do about the access and aliased formal
  parameter specs, null exclusion parameters or access results. (the list of
  "todo".) I'd rather say these are not in SPARK 2014.
Status: 


Ident: AN-JK8
Section: 6.1.3
Page/para:
Comment:
  The "expansion" given for the contract cases aspect is not quite
  the same, as the "exactly_one_of" has to be true in *all* contexts, not
  only the calling contexts.
Status: 


Ident: AN-YM9
Section: 6.1.4
Page/para: 26 .. 28
Comment:
  YM: The description of mode refinement in not clear enough for
    implementation.
  FS: This entire section makes no sense to me. Honestly; I have
    skipped it as it is incomprehensible. Is this an aspect or not?  Flow
    analysis will not cope with refining the mode of individual array
    elements. Why is this not implicit from having the refined global
    list?
  JK: very difficult to read; in any case won't go into first release.
    We should make sure (how?) that we can add that stuff later into the
    language, and leave it out for now.
Status: This section has now been removed and the necessary detail merged
        with the sections where it is used. [JIB] 


Ident: AN-YM10
Section: 6.1.4
Page/para: 28
Comment: The todo mentioning a possible executable semantics for the
  conditional modes is probably much too ambitious. I'd just remove it for now.
  Same for the similar toto on param aspect.
Status: 


Ident: AN-FS11
Section: 6.1.5
Page/para:
Comment: Flow analysis cannot cope with "global in out a(j)". Nor can
  it cope with conditional stuff. Can we defer this until after rel1? We
  really must take it out of the grammar and the examples!
Status: This has been done. [JIB]


Ident: AN-FS12
Section: 6.1.6
Page/para:
Comment:
  FS: Remove for release 1
  JK: leave out for the first release
Status: Done. [JIB]


Ident: AN-FS13
Section: 6.1.7
Page/para:
Comment: Remove all the conditional stuff.
Status: Done. [JIB] 


Ident: AN-YM14
Section: 6.3.4
Page/para: 37
Comment: The 2nd verification rule for Global aspect says that
  "If a subprogram does not have a global_aspect then an implicit one is
   synthesised from implementation of the body (if it exists)."
  This does not belong to the language description I think.
Status: 


Ident: AN-YM15
Section: 6.3.4
Page/para: 37
Comment: The first verification rule for Dependency aspect mixes synthesis
  of aspects (I don't see this belonging to the langage definition) and
  checking of aspects between refined_dependency_aspect on body and
  dependency_aspect on the spec (which does not belong to this section on
  dependency_aspect on body).
Status: 


Ident: AN-YM16
Section: 6.3.4
Page/para: 38/4
Comment: It is said that refined_global_aspect may be synthesized. That looks
  odd to me, as I'd rather use the global_aspect given by the user if any.
  This issue of synthesis should be described once only, possibly in the
  introduction of the LRM, or at the start of the chapter, and then
  verification rules should not distinguish between synthesized and manually
  written contracts.
Status: 


Ident: AN-YM17
Section: 6.4.3
Page/para: 40/4
Comment: It is said that P may require a refined_dependency_aspect because of
  state_refinement, but this is the first time this constraint appears, so
  one may not understand what is meant here, unless one already knows SPARK.
Status: 


Ident: AN-JK18
Section: 7.1.1
Page/para:
Comment: Remove comments about "good practice"
Status: 


Ident: AN-FS19
Section: 7.1.2
Page/para: verification rules
Comment: I am not sure what flow analysis is meant to check here.
Status: 


Ident: AN-FS20
Section: 7.1.4 and 7.1.5
Page/para:
Comment: I note that in a generic or package in a body information can
  flow into the initialisation from either the generic parameters or the
  state of the enclosing subprogram. We must be able to capture this in
  analysis.
Status: 


Ident: AN-FS21
Section: 7.2.2 | null abstract state
Page/para:
Comment: I do not understand how we can flow-analyse something like a
  cache without being either unhelpful (lots of coupling) or unsound
  (you miss potential coupling).
Status: 


Ident: AN-YM22
Section: 7.2.4
Page/para: 55/2
Comment: There should be a restriction that volatile variables are not allowed
  in assertions, since that amount to a side-effect.
Status: 


Ident: AN-JK23
Section: 9
Page/para:
Comment:
  Why does excluding tasks and synchronization exclude Ada.Calendar? It
  just so happens that this package is defined in chapt. 9 of the LRM, but
  that's about it. Nothing in that package would make it be outside of
  S14. It's true however that this package requires some special
  attention, there should be a volatile global "in" state. This could be
  done by annotating the underlying "pragma import" C functions which
  probably read that state.
Status: 

