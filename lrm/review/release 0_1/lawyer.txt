Here are my comments so far, from section 1 and section C.
Mostly with language focus.

Overall it looks very good.  I like the uniform use of "Refined_xxx"
terminology.

-Tuck
------------------------

STT comments on SPARK 2014 LRM manual, based on
release 0.1 dated November 15, 2012.

Ident: LL-STT1
Section: 1.4 
Why is tasking not in the SPARK 2014 subset?  What happened to RavenSPARK?  It 
says "not currently permitted."  Is that a technical term?  Do we intend to lift that 
restriction before release of S14?
Status: 


Ident: LL-STT2
Section: 1.4 
We need a term for the "SPARK-friendly" subset of features, which are not all in 
S14, but which allow for some amount of analysis.
Status: 


Ident: LL-STT3
Section: 1.5 
"Flow analysis" vs. "Data flow analysis" vs. "Info flow analysis."  Should we make 
a distinction?
Status: 


Ident: LL-STT4
Section: 1.5 
"Flow analysis rules" vs. "Verification rules."  SB says everything follows from 
rule relating to run-time checks, but what about things in Ada which are *not* checked, 
such as use of uninitialized data, race conditions, various nasty erroneous conditions 
relating to renaming, etc.?  YM mentions the type invariants, but that seems just 
indicative of a set of things where the run-time checks are incomplete relative to what we 
want to do for proofs.
Status: 


Ident: LL-STT5
Section: 1.6
A "profile" is defined already in the Ada RM, and it includes a set of 
restrictions, plus various policy specifications, and perhaps a few other things 
specifiable via pragmas.
Status: 


Ident: LL-STT6
Section: C.1.1 
"comprises of" ==> "comprises" or "consists of"
Status: 


Ident: LL-STT7
Section: C.1.1 
Intro paragraph should mention the fact that "derives" has become "depends" in 
S14, and perhaps title should become "Global and Derives/Depends"
Status: 


Ident: LL-STT8
Section: C.1.2 
"Post => (X = Y'Old, Y = X'Old)" ==> "Post => X = Y'Old and Y = X'Old"
Status: 


Ident: LL-STT9
Section: C.1.3 
"I in Positive range X'First .. X'Last" => "I in X'Range"?
Status: 


Ident: LL-STT10
Section: C.1.3 
"J in Positive range X'First .. I" => J in X'First .. I"?
Status: 


Ident: LL-STT11
Section: C.1.4 
"comprises of" => "comprises" or "consists of" (comment on "begin" keyword of 
package body."
Status: 


Ident: LL-STT12
Section: C.2.1 
If the SPARK 2005 and 2014 are identical, then why don't the introductory lines 
say "Specifications in SPARK 2005 (2014 is identical):" or some such thing?  Ditto for 
Body (also applies in C.2.2).
Status: 


Ident: LL-STT13
Section: C.2.1 
In Refined_Post for Clear, why do we need to say S.StackPointer = 0, since that 
is implied by Is_Empty(S)?
Status: 


Ident: LL-STT14
Section: C.2.1 
It seems unnecessary to initialize all values of stack in Clear.  I would think 
that an invariant of (for all I in 1..S.Stack_Pointer => S.Stack_Vector(I) = 0) would be 
sufficient, with Clear only setting S.Stack_Pointer to zero.
Status: 


Ident: LL-STT15
Section: C.2.1 (pp 91-92) 
In Pop postcondition don't we need to say that there is no change to 
S.Stack_Vector(1..S.Stack_Pointer)?  Or is that somehow assumed due to a default "frame" 
rule? (Also comes up in C.2.2, p. 109.)
Status: 


Ident: LL-STT16
Section: C.2.1 
bottom of p. 97 "Specification in SPARK 2014" => "Body in SPARK 2014"
Status: 


Ident: LL-STT17
Section: C.2.1
pp. 92-99 seems like a like of examples that are only indicating that "inherit" 
is no longer required for children.  Or else I am missing something...
Status: 


Ident: LL-STT18
Section: C.2.2 p. 100 
The following looks funny "with Abstract_State => (S, Pointer), -- 
concrete state".  What is the explanation for this comment?
Status: 


Ident: LL-STT19
Section: C.2.2 p. 110 
We have a procedure with "Global => State"; should that be "Global => 
(Input => State)" or is "Input" presumed if not stated?  Ditto for "Global => 
(Source_A_14.State, ...)"?
Status: 


Ident: LL-STT20
Section: C.2.3 p. 115-116  
It seems unnecessarily confusing to use "Inputs" and "Outputs" as 
the names of the global state variables, given the use of "Input" and "Output" as words 
with special significance, producing quite confusing constructs like "((Inputs with 
Volatile, Input))."  How about "Input_State" and "Output_State" instead?  Also, how does 
"Input" related to "Volatile" in this example.  Is "Input" qualifying "Volatile" (and only 
permitted in its presence), or qualifying Inputs?  Perhaps "((Input_State with 
Volatile(Input)))"?
Status: 


Ident: LL-STT21
Section: C.2.3 p. 116-117 
You have "Body in input/output port in SPARK 2014: This is as per 
SPARK 2005." and then you use features that are not in SPARK 2005, such as aspect 
specifications using "with Address => ...".  What gives?
Status: 


Ident: LL-STT22
Section: A (6.2 Strict Modes) p. 78 
The terms "import" and "export" are used here.  Don't we mean "input" and "output"?
Status: 


Ident: LL-STT23
Section: A (7.2.2 Refined State Aspect) p. 80 
Rather than "Null_State_Refinement_Prohibited" 
use "No_Null_State_Refinement" to be consistent with other restriction identifiers.
Status: 


Ident: LL-STT24
Section: B p. 81 
"Extended Legality Rules" sounds like we are relaxing certain legality rules, thereby making *more* things legal.  I would suggest we call this appendix "Additional Legality Rules" or "SPARK-specific Legality Rules."
Status: 


Ident: LL-STT25
Section: 13.1 p. 73 
"As aspects specifications" ==> "As aspect specifications"; "expression associated to the" ==> "expression associated with the".
Status: 


Ident: LL-STT26
Section: 13.1 p. 73 
Why aren't forward references allowed?  It seems a serious usability issue to disallow them, especially in code that has already taken advantage of this when written.  Also, any type-related aspect specifications, such as Type_Invariant, will necessarily involve forward references.
Status: 


Ident: LL-STT27
Section: 13.3 p. 73 
Why no unchecked type conversions?  Can't these just be treated like "volatile"?
Status: 


Ident: LL-STT28
Section: 13.4 p. 73 
It says "Read and Write" operations are not in SPARK 2014.  Do you mean all stream-related attribute subprograms, or just 'Read and 'Write?  And why aren't they permitted?  Is this because they can produce junk?  How are they worse than a volatile integer?
Status: 


Ident: LL-STT29
Section: 9 p. 65 
Do we plan to release S14 without support for tasking?  Isn't that a step backward?  Should tasking be listed as a "TBD" rather than as not supported?


============================

Bob,

I wasn't signed up to review, but decided to spend some time on it anyway.

I only managed to get up through chapter 5, though I realize that there's
a lot of meat in chapters 6 and 7.

Most of my comments are in the category of wording and minor editorial.
I've used the "{}[]" commenting convention that we've used in the ARG.

Get para numbers in!

Review comments on the SPARK 2014 Reference Manual (draft of 15 Nov 2012)
-------------------------------------------------------------------------
(NOTE: Only covers Chapters 1-5)


Chapter 1 (Introduction)
Status: 


Ident: LL-GD30
Section: 1
Page/para: 3/1
Comment:
The use of the word "both" seems awkward.  I think it reads better without it.
(Alternative is to keep "both", and replace "but" with "and".)
Status: 


Ident: LL-GD31
Section: 1
Page/para: 3/2
Comment: Add a comma: "predecessor{,} SPARK 2005"
Status: 


Ident: LL-GD32
Section: 1.1
Page/para: 3/3
Comment: Add a comma: "In this context{,} "implementors" means ..."
Status: 


Ident: LL-GD33
Section: 1.1
Page/para: 3/4
Comment: Please replace "LRM" with "RM", and in the first instance
say "Ada 2012 Reference Manual".
Status: 


Ident: LL-GD34
Section: 1.1
Page/para: 3/5
Comment: Add a space: "SPARK{ }2005 to SPARK 2014"
Status: 


Ident: LL-GD35
Section: 1.2
Page/para: 3/9
Comment: This paragraph mentions "erroneous or unspecified behavior",
but what about implementation-defined or partially specified behavior
(such as order of evaluation or bounded errors)?
Status: 


Ident: LL-GD36
Section: 1.3
Page/para: 4/5
Comment: Add a hyphen: "run{-}time profile"
Status: 


Ident: LL-GD37
Section: 1.3
Page/para: 4/9
Comment: Replace hyphen with a space: "never fail at run[-]{ }time"
Status: 


Ident: LL-GD38
Section: 1.3
Page/para: 4/10
Comment: Eliminate hyphens, add comma: "pre[-]conditions, post[-]conditions,
type[-]{ }invariants{,} and so on."
Status: 


Ident: LL-GD39
Section: 1.3
Page/para: 4/11
Comment: Hyphen not needed: "non[-]functional properties"
Status: 


Ident: LL-GD40
Section: 1.4
Page/para: 4/14
Comment: Replace hyphen with a space: "side[-]{ }effects"
Status: 


Ident: LL-GD41
Section: 1.4
Page/para: 4/21
Comment: It says "Package body entirely not in SPARK 2014", but I think
it would read better as "Package body not entirely in SPARK 2014".  Surely
*some* parts of the body are likely to be in SPARK 2014 (such as the
beginning and ending syntax of the package body).
Status: 


Ident: LL-GD42
Section: 1.4
Page/para: 4/23
Comment: Add a comma: "almost entirely in SPARK 2014{,} with a small..."
Status: 


Ident: LL-GD43
Section: 1.4
Page/para: 5/3
Comment: Add a hyphen "mixed{-}[ ]language programming"
Status: 


Ident: LL-GD44
Section: 1.5
Page/para: 6/2
Comment: Add a hyphen: "data{-}flow analysis" (two instances)
Status: 


Ident: LL-GD45
Section: 1.7 (1)
Page/para: 6/?
Comment: Do we want to use British spelling or American spelling in
this document?  The Ada RM uses American spelling.  The word in question
in this paragraph is "favoured" (American spelling is "favored").
Status: 


Ident: LL-GD46
Section: 1.7 (1)
Page/para: 6/?
Comment: In the first sentence, I think the single "-" should be a
double hyphen (to make it a full-fledged dash).
Status: 


Ident: LL-GD47
Section: 1.9 (1)
Page/para: 7/?
Comment: Change "LRM" to "RM": "Ada 2012 {RM}[LRM]"


Chapter 2 (Lexical Elements)
Status: 


Ident: LL-GD48
Section: 2.9
Page/para: 10/1
Comment: "... the following set of reserved words {is}[are] never used ..."
Status: 


Ident: LL-GD49
Section: 2.9
Page/para: 10/2
Comment: Delete the period at the end of the list of reserved words.


Chapter 3 (Declarations and Types)
Status: 


Ident: LL-GD50
Section: 3
Page/para: 11/1
Comment: Pluralize: "... any declaration{s} or type{s} ..."
Status: 


Ident: LL-GD51
Section: 3.2 (1)
Page/para: 11/3
Comment: Normally rules pertaining to private types would be given in
Chapter 7, but OK I guess to mention it here.  The restriction should
probably also be given in Chapter 7.
Status: 


Ident: LL-GD52
Section: 3.2 (2)
Page/para: 11/4
Comment: Subtype predicates only apply to subtypes, so it seems that only
subtypes should be mentioned here (and change "(sub)type" to "subtype".
Status: 


Ident: LL-GD53
Section: 3.3
Page/para: 11/6
Comment: Same comment as for private types in 3.2: Deferred constants are
a Chapter 7 entity, so this rule should also (or instead) be given there.
Status: 


Ident: LL-GD54
Section: 3.6
Page/para: 12/1
Comment: Since 3.2 says that aliased isn't allowed in object declarations,
this section should say that aliased isn't allowed in an array declaration.
Status: 


Ident: LL-GD55
Section: 3.8
Page/para: 12/3
Comment: Since 3.2 says that aliased isn't allowed in object declarations,
this section should say that aliased isn't allowed in component declarations.
Status: 


Ident: LL-GD56
Section: 3.10 (2)
Page/para: 12/??
Comment: No need for the apostrophe in "attribute 'Access".


Chapter 4 (Names and Expressions)
Status: 


Ident: LL-GD57
Section: 4
Page/para: 13/1
Comment: Reword sentence as:
           "The term assertion expression denotes an expression..."
Status: 


Ident: LL-GD58
Section: 4
Page/para: 13/1
Comment: Add "subtype": "... a type invariant or {subtype} predicate, ..."
Status: 


Ident: LL-GD59
Section: 4.1.3 (1)
Page/para: 13/5
Comment: Add a hyphen: "run{-}time"
Status: 


Ident: LL-GD60
Section: 4.1.3 (1)
Page/para: 13/5
Comment: It says "if this property can be determined by static analysis",
which seems imprecise.  It would be better to define what specific properties
must be satisfied.  Otherwise this seems subject to how good the static
analysis is, which could potentially change over time.  Or is this some
sort of general statement that's intended to apply to more than this section,
in which case it should be moved elsewhere (perhaps into Chapter 1)?  Also,
the rule in the next paragraph should probably be stated more precisely.
Status: 


Ident: LL-GD61
Section: 4.3
Page/para: 13/2
Comment: This paragraph needs more precision. In particular, it would be
good to define "side-effect free" (maybe this is defined elsewhere?).
Also, it should define what it means for an aggregate to have uninitialized
components (has box associations for components without default init).
Status: 


Ident: LL-GD62
Section: 4.3.4 (2)
Page/para: 14/7
Comment: Remove hyphen: "non[-]discriminant"
Status: 


Ident: LL-GD63
Section: 4.3.4 (3)
Page/para: 14/8
Comment: In the first sentence, I think the single "-" should be a
double hyphen (to make it a full-fledged dash).
Status: 


Ident: LL-GD64
Section: 4.3.4 (4)
Page/para: 14/9
Comment: Is there a good reason to leave the order of evaluation unspecified
rather than just saying it's left to right?  I thought that SPARK preferred to
avoid things that are "unspecified", so why not define a canonical ordering?
Also, this would be consistent with the array form of 'Update, which requires
left-to-right evaluation (although I realize that the rationale for the array
case is different, since it allows overwriting).  Maybe this is just a matter
of being consistent with Ada, since the attribute will be allowed in non-SPARK
programs, and in SPARK 2014 the expressions have to be side-effect free, so
the order of evaluation doesn't really matter.
Status: 


Ident: LL-GD65
Section: 4.3.4 (5)
Page/para: 14/10
Comment: Add hyphen: "one{-}[ ]dimensional"
Status: 


Ident: LL-GD66
Section: 4.3.4 (6)
Page/para: 15/?
Comment: The first sentence says:

 "Each array_component_association of the attribute_reference shall have one
  or more array_component_associations, each of which shall have an expression."

but that doesn't make sense.  It seems that it should probably read simply:

 "Each array_component_association of the attribute_reference shall have
  an expression."

Also, strictly speaking, the expression of an attribute_reference (actually
of the attribute_designator) is required to be static, so it wouldn't be
allowed to be an aggregate in strict Ada.  Do we need to say anything about
extending it here?  (I guess the other way to go would be to define 'Update
to be a function, but that wouldn't work unless we were willing to require
double parentheses, which we obviously don't want.)
Status: 


Ident: LL-GD67
Section: 4.3.4 (9)
Page/para: 15/5
Comment: "If T is {a} one-dimensional {array} type ..."
Status: 


Ident: LL-GD68
Section: 4.3.4 (12)
Page/para: 15/8
Comment: "This is different {from} [than] the Update attribute ..."
Status: 


Ident: LL-GD69
Section: 4.4 (1)
Page/para: 16/1
Comment: Where is "side-effect free" defined?  (Maybe add a reference?)


Chapter 5 (Statements)
Status: 


Ident: LL-GD70
Section: 5.1 (3)
Page/para: 17/4
Comment: Fix typo: "... shall not be {an} [am] accept_statement ..."
Status: 


Ident: LL-GD71
Section: 5.5.3
Page/para: 18/?
Comment: It seems odd to define nonterminals invariant_statement and
loop_variant_statement for these pragmas (and why does one have a prefix
"loop_" and not the other?).  It would be more consistent with the Ada RM
to define them as for other pragmas.  If the nonterminals are retained, then
presumably the syntax of statement needs to be extended to include them.
Status: 


Ident: LL-GD72
Section: 5.5.3
Page/para: 19/3
Comment: I suppose this is picky, but I don't like the wording about
comparing values, which can be read as a choice between evaluating
until unequal values are found or unconditionally evaluating all
expressions.  How about this rewording:

  "...: comparisons are performed in textual order [either] until
   {either a pair} of unequal values {is} [are] found{,} or {else}
   until values for all {pairs of} expressions have been compared
   {and found to be equal}."
Status: 


Ident: LL-GD73
Section: 5.5.3
Page/para: 19/3
Comment: "..., the last pair of values to be compared {is} [are] then ..."
Status: 


Ident: LL-GD74
Section: 5.5.3
Page/para: 19/4
Comment: Remove hyphen: "vice[-]{ }versa"
Status: 


Ident: LL-GD75
Section: 5.5.3
Page/para: 19/8
Comment: Add comma in 1st sentence: "... assertion expression{,} a constant ..."
Status: 


Ident: LL-GD76
Section: 5.5.3
Page/para: 20/?
Comment: Add hyphens in bullet: "run{-}time tag{-}[ ]value determination"
Status: 


Ident: LL-GD77
Section: 5.5.3
Page/para: 20/?
Comment: For the second to last paragraph on this page, it might be good
to give a note to explain what the rule means (explain the case where the
entity can be declared within the prefix itself).
Status: 


Ident: LL-GD78
Section: 5.5.3
Page/para: 21/1
Comment: Maybe add a reference to the Ada RM for the term "potentially
unevaluated".  (One might mistakenly think that the rule might apply in
a case where it appears after a loop exit or early return.)
Status: 


Ident: LL-GD79
Section: 5.9 (2-3)
Page/para: 21/7-8
Comment: Same comment as for invariant_statement and loop_invariant_statement:
Why define statement nonterminals for these pragmas, which is not the way the
RM defines pragmas?
Status: 


Ident: LL-GD80
Section: 5.9 (5)
Page/para: 21/10
Comment: Minor editorial for 1st sentence: "For {each of} [all] the pragmas
Check, Assert, Assert_And_Cut{,} and Loop_Invariant, ..."


---(end of comments from Gary Dismukes)---


Rod Chapman comments
Status: 


Ident: LL-RCC81
Section: 6
Page/para: 
Comment: What are the rules for preventing aliasing in the presence
of object renamings?
Status: 


