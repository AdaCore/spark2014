(*
Why3 is the name of a tool which can convert its own rich logical language
into the formats of other tools such as:
   Alt-Ergo, CVC3, Simplify, Z3, SMT
   Eprover, Iprover, SPASS, Vampire, TPTP
   Coq, PVS

Why3 has two input languages:
   * Why / Why3: a logic language, similar to FDL, Alt-Ergo etc
   * WhyML: a "programming language" similar to ML/Ocaml

There is no compiler for WhyML, and there are many features of WhyML that are
not executable, hence the quotes. WhyML is actually a superset of Why, as we
will see.

   The logic language Why3
   =======================

* Why3 is stored in files with suffix ".why".
* A Why file is a list of *theories*.
* A theory is a list of *declarations*.
* A declaration is one of:
   * type declaration
   * object declaration/definition
   * function declaration/definition
   * predicate declaration/definition
   * axiom/goal
   * use/clone declaration


*)

theory Abstract

   (*
   Abstract types
   --------------

   This is in abstract type *)

   type t

   (* one can declare constant objects of abstract type. A constant is
   like a function without arguments. *)

   function c : t

   (* One can also declare functions. This one takes two arguments of type t
   and returns another object of type t *)

   function f (x : t) t : t

   (* One can also define a function *)

   function g (x : t) : t = f x x

end

theory Builtins
   (*
      Builtins
      --------

   there are two built-in types:
      - int for mathematical integers;
      - bool for booleans.

      You need to "use" the corresponding theories. "use" is a bit like "with"
      in Ada. "use import" is a bit like "with" + "use" in Ada. The syntax is
         use [import] file.Theory
      When the file name contains symbols that are not allowed in identifiers,
      e.g. "-", you can use quotes to protect it.
      *)

   use import int.Int
   use import "bool".Bool

   type my_int = int

   type my_bool = bool

   function x : int = 1 + 2

   function b : bool

   function g (y : int) : bool =
      if y = 0 then True else b
end

theory Predicates
   (* Truth is *not* represented using booleans in Why3. Instead, there is a
      distinction between terms (with a type, possibly "bool") and predicates
      (a syntactic category, does not have a type).
      Equality is a predicate, "true" and "false" are predicates, "True" and
      "False" are terms of type "bool".
      predicates can be connected with logical connectors /\, \/, ->
      quantifiers are also predicates
      *)

   (* all "use" clauses are local to a theory. Have to be repeated in a new
   theory. We will see these often :-) *)

   use import int.Int
   use import "bool".Bool

   predicate is_zero (x : int) = x = 0

   predicate is_positive (x : int) = x > 0

   predicate is_nonnegative (x : int) = is_zero x \/ is_positive x

   use import int.EuclideanDivision
   predicate is_prime (x : int) =
      is_positive x /\ forall k : int. is_positive k -> not (mod x k = 0)

   (* axioms and goals are predicates *)

   goal g :
      is_positive 5 /\ is_prime 23

   function p : int

   axiom p_is_prime : is_prime p

   goal g2 :
      forall x: int. if is_prime x then is_positive x else true

   (* The arguments of predicate symbols are terms. There are if-expressions
   both in predicates and in terms; the condition is always a predicate, which
   makes it possible to "lift" a predicate back to a term: *)

   function is_prime_bool (x : int) : bool =
      if is_prime x then True else False
end

(*
   Other type declarations
   -----------------------
*)

theory Records

   use import int.Int
   use import "bool".Bool

   type point = {| x : int; y : int |}

   function get_x (p : point) : int = p.x
   function get_y (p : point) : int = p.y

   (* Danger! Concrete types do not like axioms. The following axiom is
   inconsistent: *)

   axiom half_plane :
      forall p : point. p.x > 0

   goal g:
      forall z : int.
         get_y {| x = -2; y = z |} = 3

   function mk_point (x : int) (y : int) : point =
      {| x = x; y = y |}

   (* you can "update" such a record, ie create a new copy *)

   function mk_positive (p : point) : point =
      if p.x > 0 then p
      else {| p with x = - p.x |}
end

theory Algebraic

   (* There are also algebraic data types, that work just as in ML. *)
   use import int.Int
   use import int.EuclideanDivision
   use import "bool".Bool

   type weekday =
      | Monday | Tuesday | Wednesday | Thursday | Friday


   type op = | Add | Sub | Mult | Div

   function op_apply (operator : op) (a : int) (b : int) : int =
      match operator with
      | Add -> a + b
      | Sub -> a - b
      | Mult -> a * b
      | Div -> div a b
      end

   type expr =
      | Literal int
      | Binop (op, expr, expr)

   function eval ( x : expr) : int =
      match x with
      | Literal i -> i
      | Binop (op, a, b) ->
         let ea = eval a in
         let eb = eval b in
         op_apply op ea eb
      end

end


(* Cloning *)

(* One can "copy" theories while modifying particular symbols. This works a
lot like generics in Ada. *)

theory Commutative

   type c

   function f c c : c

   axiom f_commutative :
      forall x y : c. f x y = f y x
end

theory Associative

   type t

   function g t t : t

   axiom associative :
      forall x y z : t. g x (g y z) = g (g x y) z
end

(* Theory CommAss is a "merge" of Commutative and Associative *)
theory CommAss

   clone import Commutative

   clone Associative as A
   with type t = c,
        function g = f
end


(*
   Why3 ML programs
   ================

WhyML is a super-set of the logic language. One can write functions with
pre- and postconditions, and with side effects and exceptions.

A WhyML file has the suffix ".mlw".
A WhyML file is a list of theories and modules.
We have already seen theories.
A module is a list of *program declarations*.
Every logic declaration is also a program declaration.

New program declarations include:
   * program function declarations/definitions
   * exceptions
   * program types
*)

module A

   use import int.Int
   use import "bool".Bool
   use import ref.Ref

   (* This is a program function definition, with a pre- and a postcondition *)

   let f (x : int) =
      { x > 0 }               (* the precondition *)
      x + 1                   (* the body of the function *)
      { result = x + 1 }      (* the postcondition *)

   (* remark the use of "result" in the postcondition *)

   (* this is a *mutable* variable - one cannot provide an initial value *)
   val x : ref int

   let g () =
      { !x > 0 }
      x := !x + 1
      { !x = (old !x) + 1 }


   (* one can also declare functions without giving a body: *)

   val y : ref int

   val h (z : ref int) :
      { !z > !x }                      (* the precondition *)
      int                              (* the return type *)
      reads y z                        (* reads declaration *)
      writes x                         (* writes declaration *)
      { !x = !y + 1 }                  (* postcondition *)


   let f1 () =
     { }
       let k = ref 1 in
       x := 0;
       y := 0;
       h k             (* need to prove the precondition *)
     {!x = 1 }         (* need to prove the postcondition *)


   let f2 () =
      { }                               (* default precondition is true *)
      let x = ref 0 in
      let y = ref 0 in
      while !x < 10 do                 (* need to prove invariant, even when *)
         invariant { !y <= 10 * !x }   (* not going in the loop *)
         variant   { 10 - !x }         (* need to prove that variant decreases *)
         y := !y + 1;
         x := !x + 1
      done
      { }                              (* default precondition is true *)


   exception E

   let k (x : int) =
      { x = 0 }
      try
         if x = 0 then raise E;
         0
      with E -> 1
      end
      { result = 1 }
end

module Mut

   use import int.Int
   use import "bool".Bool
   use import ref.Ref

   (* Mutable records; you can declare fields of records to be mutable *)

   type r = {| x : int; mutable y : int |}

   let f (t : r) =
      { t.x = 0 }
      t.y <- 0
      (* it comes for free that the other field has not changed *)
      { t.x = 0 }


   val k : ref int

   let assert_stuff () =
      { }
      assert {!k = 0 };       (* VC + hypothesis *)
      check {!k = 0 };        (* VC *)
      assume {!k = 0 };       (* hypothesis *)

      abstract
         k := 0
         { !k >= 0 };

      k := (any {true } int {result >= 0 })
      { }

end


(* resources:
   - why3.lri.fr (manual + examples)
   - why3-club@lists.gforge.inria.fr
 *)
