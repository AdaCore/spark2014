(The decision as to when to start a new step number here is a little arbitrary!)

1. Launch GPS with the project file test.gpr

2. Note that we have a number of different features that we want to demo today.
   There are several example files we will use to illustrate different features
   but they are linked together by a main program which calls all of them.
   ACTUALLY, THIS IS NO LONGER TRUE AS I FOLLOWED YANNICK'S SUGGESTION OF
   USING DIFFERENT MAIN PROGRAMS FOR DIFFERENT EXAMPLES. JUST LEAVING IT IN
   FOR NOW ANDREW IN CASE YOU WANT TO REVERT TO A SINGLE MAIN PROGRAM.

   We will come back to the main program later, but the first example we will
   look at is a binary search.

3. Open binary_search.ads
   Here is the specification for a binary search function. It searches an array
   of integers for a given value. The postcondition says that it returns the
   index at which that value is found in the array. It doesn't specify
   explicitly what happens if the value is not found, although we can deduce
   that it will return zero because that's the only value that would satisfy
   the postcondition in this case.

   The precondition states that the array is sorted.

   Let's look at the body now...

4. Open binary_search.adb
   Note that the first if statement does indeed return 0 if the value is not
   present in the array. Note that this is an example of an early return, which
   the new SPARK 2014 flow analyzer can cope with, but SPARK 2005 could not.

   The body of the loop itself performs the search using a binary chop
   method. Note that we have a pragma Loop_Invariant, which is needed to help
   prove the postcondition, and a Loop_Variant, for proving termination.

   Run "Prove File" (with default 1s timeout) - proved checks are highlighted
   green, but the loop invariant is red to indicate that it could not be proved.

   First thing we can try is increasing the timout...
   (On my machine a 5s timeout is sufficient to prove everything.)

5. But what if there was a mistake in the invariant?
   Introduce a deliberate error - change "Left - 1" to "Left + 1" in the
   quantifier in line 19.
   Re-run the proof - it will take longer and will fail to prove the invariant.
   What now? Assuming we don't know what the problem is, we could try
   executing the contract...

6. (Note that I have changed the initial state of the array, and the value
   searched for, in main.adb in order to make this work.)
   The main program initially sets the array to (1, 2, 3, 3, 5, others=> 10)
   and searches for the value '4'.
   We can execute our contract by building and running the main program...
   (Assertion checks have to be enabled)
   raised SYSTEM.ASSERTIONS.ASSERT_FAILURE : Loop_Invariant failed at binary_search.adb:19
   At this point we might proceed by using the debugger to see what values
   the variables have at the point where the assertion fails, and go from there.
   Another option is to set the proof to "check first then path" and look at
   the path to the failed proof, although I'm not sure how useful that is in
   this case.

7. Put the loop invariant back to the correct form and re-prove (all proves OK).
   The Loop_variant states that on each iteration the value of Right - Left
   is strictly decreasing. If we can prove that then we can prove
   loop termination.
   (It might be better to leave the loop variant out to begin with, then type
   it in manually at this stage, in the interests of showing things one step
   at a time?)
   May be worth showing what happens if you get the loop variant wrong - for
   example change it to "(Decreases => Med)" and it won't prove.

   So the key points we wanted to show in that example were:

     - proof results are shown at the source code level (with path highlighting)
     - contracts can be executed
     - loop invariant
     - loop variant

8. The next example shows Contract_Cases, which is sometimes a convenient way of
   expressing postconditions.

   Open cc.ads, which shows the postcondition for Next_Day expressed using
   Contract_Cases. And if we look at the body in cc.adb we can see that it
   returns the successor in the enum unless we've got to Sunday in which case
   it wraps back round to Monday. (The Contract_Cases could have been written
   in a shorter form, like the body, but we wanted the longer form in order to
   demonstrate some properties.)

   Try to prove the contract cases example. It will report:
     cc.ads:7:11: info: disjoint contract cases proved
     cc.ads:7:11: complete contract cases not proved

   It's not complete because Thu => Fri is missing. If you put that in then
   it will prove. If you make a copy-paste error and have two entries with the
   same LHS then it will fail to prove that the cases are disjoint.

   If you want to you could build and execute cc_main.adb which raises
   SYSTEM.ASSERTIONS.ASSERT_FAILURE : cc.ads:7 contract cases incomplete
   for the original version of the code.

   This example also illustrates one possible method for mixing SPARK and
   non-SPARK code. The main program has a loop where we want to print out
   the value of Next_Day for each day of the week. It does this via a call
   to a packe we have created called SPARK_IO, which is an extremely simple
   wrapper for Text_IO. (Note that TJJ has a proper version in progress, or
   use Trevor's version here if it is ready and it makes sense to do so.)

   In this case the spec of SPARK_IO says that there is Abstract_State, which
   is modified by the call to Put_Line. This is a reasonable model, and it
   keeps the flow analyser happy when analysing the main program. The body of
   SPARK_IO is 'hidden' from GNATprove with SPARK_Mode => Off.

9. Now let's look at developments in Flow Analysis.
   Open test.adb
   Run "Examine File"
   6 flow warnings are reported.
   Note that 4 of the 6 errors have an 'inspection' (?) icon next to them.
   Clicking these icons, either in the Locations tab or in the code editor
   window, causes the path leading to the warning to be displayed. Clicking
   the icon a second time toggles the highlighting off again.

   First warning (line 6) path highlighting takes you straight to where the
   problem is (X not set before the return on line 10). This also illustrates
   that you can now put return statements in procedures.

   Second warning (line 26) - again the path highlighting leads you straight
   to the issue, showing the path where N is not initialized.

   Third warning (line 57) highlights both paths leading out of the assignment
   because the value of X is not used on either path. The warning on line 59
   is similar.

10. The next example shows a number of SPARK 2014 features, mainly in the area
    of package annotations.
    Open the_stack_with_conditions_14.ads
    Note that it has:
      Abstract_State    - announcing the presence of hidden state
      Initializes       - the hidden state is initialized at elaboration
      Initial_Condition - (new in SPARK 2014) the condition Is_Empty is true
                          once the package state has been initialized
      INITIAL_CONDITION DOESN'T WORK FOR PROOF YET (GNATPROVE STOPS WITH AN
      ERROR, SO REMOVE IT BEFORE RUNNING THE DEMO)

    Walk through the rest of the package spec, noting the use of expression
    functions for Is_Empty and Is_Full.

    Now open the package body.

    Refined_State annotation tells us that the Abstract_State "State" is
    refined onto two constituents, S and Pointer.

    Note that the subprogram contracts are repeated in the body, now in terms
    of the refined state. (Just like SPARK 2005.)

    Note also that the sequence of statements at the end of the body initializes
    the state, fulfilling the promise made by the contract (?) on the spec.

    NOTE THAT THIS USES REFINED_POST WHICH IS NOT SUPPORTED YET SO DELETE IT
    FROM THE DEMO BEFORE RUNNING IT.

    Show that we can flow-analyse and prove the example, and all VCs are
    discharged. (Push and Pop have suitable preconditions to guard against
    underflow and overflow, making use of the expression functions Is_Full and
    Is_Empty.)

11. The next example shows how SPARK 2014 analysis works for generic packages.
    It's based on an example from the SPARK 2005 training course where it would
    have been natural to make use of generics if only they were available.
    It also happens to use child packages.

    (NOTE THAT IT WOULD BE NICE TO PUT EXPLICIT ABSTRACT_STATE AND REFINED_STATE
    CONTRACTS ON THIS EXAMPLE BUT IT CRASHES THE FRONT-END AT PRESENT. IT
    WOULD ALSO BE NICE TO USE EXTERNAL STATE FOR THIS PACKAGE.)

    Open parent.ads - this is the spec for a package which reads a switch and
    returns its value as on, off or unknown. In fact it is actually implemented
    as several switches, with a child package for each, and the top-level
    function combines the readings from the child packages.

    Open parent-child.ads
    As each switch is identical, apart from the memory address it maps to, we
    can declare a generic (private) child package Parent.Child with a parameter
    providing the address to use. Note that SPARK_Mode is not specified (and is
    not allowed to be specified) because GNATprove analyses the expanded
    instantiations, not the generic templates.

    Open parent-child.adb
    Here is the body of the generic child package. Note that the generic param
    is used to specify the address for the switch, which is modelled as volatile
    and there is some code to read in the value.

    Open parent.adb
    Here is the body of the parent, with instantiations for each child.
    (The pragma Warnings are to suppress warnings relating to volatiles as
    the analysis of volatiles is not yet fully supported.)
    We can flow-analyse and prove the whole lot - no errors.

    It's instructive to introduce an error, for example in parent-child.adb
    change "Raw_Value := Port" to "Raw_Value := Port + 1" and re-prove the
    parent body. The error is reported three times, as a consequence of the
    fact that the analysis is done on each instantiated body.
