(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type short_short_integer "bounded_type"
 
 function first  : int =
  ( -128 )
 
 function last  : int =
  127
 
 clone export "ada__model".Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type short_integer "bounded_type"
 
 function first  : int =
  ( -32768 )
 
 function last  : int =
  32767
 
 clone export "ada__model".Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type integer "bounded_type"
 
 function first  : int =
  ( -2147483648 )
 
 function last  : int =
  2147483647
 
 clone export "ada__model".Discrete with
 type t = integer, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type long_integer "bounded_type"
 
 function first  : int =
  ( -9223372036854775808 )
 
 function last  : int =
  9223372036854775807
 
 clone export "ada__model".Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type long_long_integer "bounded_type"
 
 function first  : int =
  ( -9223372036854775808 )
 
 function last  : int =
  9223372036854775807
 
 clone export "ada__model".Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type natural "bounded_type"
 
 function first  : int =
  0
 
 function last  : int =
  2147483647
 
 clone export "ada__model".Discrete with
 type t = natural, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type positive "bounded_type"
 
 function first  : int =
  1
 
 function last  : int =
  2147483647
 
 clone export "ada__model".Discrete with
 type t = positive, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type short_float 
 
 function first  : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last  : real =
  (340282346638528859811704183484516925440.0)
 
 clone export "ada__model".Floating_Point with
 type t = short_float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type float 
 
 function first  : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last  : real =
  (340282346638528859811704183484516925440.0)
 
 clone export "ada__model".Floating_Point with
 type t = float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type long_float 
 
 function first  : real =
  (-.179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 function last  : real =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 clone export "ada__model".Floating_Point with
 type t = long_float, 
 function round_real_tmp = Floating.round_double, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "long_long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type long_long_float 
 
 function first  : real =
  (-.179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 function last  : real =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 clone export "ada__model".Floating_Point with
 type t = long_long_float, 
 function round_real_tmp = Floating.round_double, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type character "bounded_type"
 
 function first  : int =
  0
 
 function last  : int =
  255
 
 clone export "ada__model".Discrete with
 type t = character, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type wide_character "bounded_type"
 
 function first  : int =
  0
 
 function last  : int =
  65535
 
 clone export "ada__model".Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type wide_wide_character "bounded_type"
 
 function first  : int =
  0
 
 function last  : int =
  2147483647
 
 clone export "ada__model".Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import Standard__positive
 use import Standard__integer
 use import Standard__character
 use        "_gnatprove_standard".Integer
 use import "int".Int
 use        "_gnatprove_standard".Array__1

 clone export "ada__model".Unconstr_Array with
 type component_type = Standard__character.character, 
 type base_type = Standard__integer.integer, 
 function to_int = Standard__integer.to_int, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate in_range = Standard__positive.in_range
 
 type string  = 
  __t
 
 function to_string 
   (x : __image)  :string
 
 function from_string 
   (x : string)  :__image
end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import Standard__positive
 use import Standard__integer
 use import Standard__wide_character
 use        "_gnatprove_standard".Integer
 use import "int".Int
 use        "_gnatprove_standard".Array__1

 clone export "ada__model".Unconstr_Array with
 type component_type = Standard__wide_character.wide_character, 
 type base_type = Standard__integer.integer, 
 function to_int = Standard__integer.to_int, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate in_range = Standard__positive.in_range
 
 type wide_string  = 
  __t
end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import Standard__positive
 use import Standard__integer
 use import Standard__wide_wide_character
 use        "_gnatprove_standard".Integer
 use import "int".Int
 use        "_gnatprove_standard".Array__1

 clone export "ada__model".Unconstr_Array with
 type component_type = Standard__wide_wide_character.wide_wide_character, 
 type base_type = Standard__integer.integer, 
 function to_int = Standard__integer.to_int, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate in_range = Standard__positive.in_range
 
 type wide_wide_string  = 
  __t
end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type duration 
 
 function first  : real =
  (-.9223372036854775808.0E-9)
 
 function last  : real =
  (9223372036854775807.0E-9)
 
 clone export "ada__model".Floating_Point with
 type t = duration, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type integer_8 "bounded_type"
 
 function first  : int =
  ( -128 )
 
 function last  : int =
  127
 
 clone export "ada__model".Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type integer_16 "bounded_type"
 
 function first  : int =
  ( -32768 )
 
 function last  : int =
  32767
 
 clone export "ada__model".Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type integer_32 "bounded_type"
 
 function first  : int =
  ( -2147483648 )
 
 function last  : int =
  2147483647
 
 clone export "ada__model".Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type integer_64 "bounded_type"
 
 function first  : int =
  ( -9223372036854775808 )
 
 function last  : int =
  9223372036854775807
 
 clone export "ada__model".Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type universal_integer "bounded_type"
 
 function first  : int =
  ( -9223372036854775808 )
 
 function last  : int =
  9223372036854775807
 
 clone export "ada__model".Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last
end

(* Module for axiomatizing type "universal_real", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_real
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type universal_real 
 
 function first  : real =
  (-.179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 function last  : real =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 clone export "ada__model".Floating_Point with
 type t = universal_real, 
 function round_real_tmp = Floating.round_double, 
 function first = first, 
 function last = last
end

(* Module for defining the constant "n" defined at t1q4.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module T1q4__isqrt__n
 use import "_gnatprove_standard".Main
 use import Standard__natural
 use        "_gnatprove_standard".Integer
 use import "int".Int

 function n 
   :Standard__natural.natural
end

(* Module for declaring a program function (and possibly a logic function) for "isqrt" defined at t1q4.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module T1q4__isqrt
 use import "_gnatprove_standard".Main
 use import Standard__integer
 use import Standard__natural
 use        "_gnatprove_standard".Integer
 use import "int".Int

 val isqrt
   (t1q4__isqrt__n : int) (t1q4__isqrt__root : ref Standard__natural.natural)  :unit
  requires { true }
  ensures { ( ( ( (Standard__natural.to_int !t1q4__isqrt__root) * (Standard__natural.to_int !t1q4__isqrt__root) ) <= t1q4__isqrt__n ) /\ ( ( ( (Standard__natural.to_int !t1q4__isqrt__root) + 1 ) * ( (Standard__natural.to_int !t1q4__isqrt__root) + 1 ) ) > t1q4__isqrt__n ) ) }
  writes {t1q4__isqrt__root }

end

(* Module for axiomatizing type "big_natural" defined at t1q4.adb:8, created in Gnat2Why.Types.Translate_Type *)
module T1q4__isqrt__big_natural
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type big_natural "bounded_type"
 
 function first  : int =
  0
 
 function last  : int =
  9223372036854775807
 
 clone export "ada__model".Discrete with
 type t = big_natural, 
 function first = first, 
 function last = last
end

(* Module including all necessary axioms for the subprogram "isqrt" declared at t1q4.ads:5, created in Gnat2Why.Subprograms.Complete_Subprogram_Spec_Translation *)
module T1q4__isqrt__expr_fun_closure
 use import "_gnatprove_standard".Main
 use import T1q4__isqrt
 use import Standard__integer
 use import Standard__natural
 use        "_gnatprove_standard".Integer
 use import "int".Int

end
(* Module for defining a ref holding the value of variable "root" defined at t1q4.ads:5, created in Gnat2Why.Decls.Translate_Variable *)
module T1q4__isqrt__root
 use import Standard__natural
 use import "_gnatprove_standard".Main

 type t  = 
  Standard__natural.natural
 
 val root  : ref t
end

(* Module for defining a ref holding the value of variable "local_root" defined at t1q4.adb:10, created in Gnat2Why.Decls.Translate_Variable *)
module T1q4__isqrt__local_root
 use import T1q4__isqrt__big_natural
 use import "_gnatprove_standard".Main

 type t  = 
  T1q4__isqrt__big_natural.big_natural
 
 val local_root  : ref t
end
(* Module for defining the loop exit exception for the loop"L_1" defined at t1q4.adb:15, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module T1q4__isqrt__L_1
 use import "_gnatprove_standard".Main

 exception L_1
end
(* Module for checking absence of run-time errors and subprogram contract on subprogram body of "isqrt" defined at t1q4.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram_Body *)
module T1q4__isqrt__def
 use import "_gnatprove_standard".Main
 use import T1q4__isqrt__L_1
 use import Standard__integer
 use import T1q4__isqrt__n
 use import T1q4__isqrt__big_natural
 use import T1q4__isqrt__root
 use import Standard__long_long_integer
 use import T1q4__isqrt__local_root
 use import Standard__natural
 use        "_gnatprove_standard".Integer
 use import "int".Int

 let def "GP_Subp:t1q4.ads:5" "GP_Pretty_Ada:T1Q4.ISQRT"  (__void_param : unit) 
 requires { true }
 ensures { ( "GP_Reason:VC_POSTCONDITION" "GP_Sloc_VC:t1q4.ads:6:19" "keep_on_simp" ( ( "GP_Pretty_Ada:Root*Root <= N" "GP_Sloc:t1q4.ads:6:20" ( ( (Standard__natural.to_int !T1q4__isqrt__root.root) * (Standard__natural.to_int !T1q4__isqrt__root.root) ) <= (Standard__natural.to_int T1q4__isqrt__n.n) ) ) /\ ( "GP_Pretty_Ada:Root+1)*(Root+1) > N" "GP_Sloc:t1q4.ads:7:22" ( ( ( (Standard__natural.to_int !T1q4__isqrt__root.root) + 1 ) * ( (Standard__natural.to_int !T1q4__isqrt__root.root) + 1 ) ) > (Standard__natural.to_int T1q4__isqrt__n.n) ) ) ) ) }
  = 
  try
   ( ( "GP_Sloc:t1q4.adb:13:18" T1q4__isqrt__local_root.local_root := ( (T1q4__isqrt__big_natural.of_int(0)) ) );
   ( "GP_Sloc:t1q4.adb:15:7" (if (True) then (
    try
     ( ( "GP_Sloc:t1q4.adb:16:11" (if (( ( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:16:38" "keep_on_simp" (Standard__long_long_integer.range_check_(( ( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:16:33" "keep_on_simp" (Standard__long_long_integer.range_check_(( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) + 1 ))) ) * ( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:16:52" "keep_on_simp" (Standard__long_long_integer.range_check_(( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) + 1 ))) ) ))) ) > (T1q4__isqrt__big_natural.to_int((T1q4__isqrt__big_natural.of_int((Standard__natural.to_int(T1q4__isqrt__n.n)))))) )) then (
      raise T1q4__isqrt__L_1.L_1)) );
     ( "GP_Sloc:t1q4.adb:18:22" T1q4__isqrt__local_root.local_root := ( (T1q4__isqrt__big_natural.of_int(( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:18:36" "keep_on_simp" (Standard__long_long_integer.range_check_(( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) + 1 ))) ))) ) );
     while True do
      invariant { 
       ( "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc_VC:t1q4.adb:21:10" "keep_on_simp" ( ( "GP_Pretty_Ada:Local_Root * Local_Root <= N" "GP_Sloc:t1q4.adb:22:13" ( ( (T1q4__isqrt__big_natural.to_int !T1q4__isqrt__local_root.local_root) * (T1q4__isqrt__big_natural.to_int !T1q4__isqrt__local_root.local_root) ) <= (Standard__natural.to_int T1q4__isqrt__n.n) ) ) /\ ( "GP_Pretty_Ada:Local_Root <= 16#7FFF_FFFF#" "GP_Sloc:t1q4.adb:23:22" ( (T1q4__isqrt__big_natural.to_int !T1q4__isqrt__local_root.local_root) <= 2147483647 ) ) ) )
       }
      ( (any unit
      requires {true} 
      ensures {true} 
      );
      abstract (___ignore(( ( ( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) * (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) ) <= (T1q4__isqrt__big_natural.to_int((T1q4__isqrt__big_natural.of_int((Standard__natural.to_int(T1q4__isqrt__n.n)))))) ) && ( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) <= 2147483647 ) ))) ensures {true};
      (if (True) then (
       ( ( "GP_Sloc:t1q4.adb:16:11" (if (( ( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:16:38" "keep_on_simp" (Standard__long_long_integer.range_check_(( ( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:16:33" "keep_on_simp" (Standard__long_long_integer.range_check_(( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) + 1 ))) ) * ( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:16:52" "keep_on_simp" (Standard__long_long_integer.range_check_(( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) + 1 ))) ) ))) ) > (T1q4__isqrt__big_natural.to_int((T1q4__isqrt__big_natural.of_int((Standard__natural.to_int(T1q4__isqrt__n.n)))))) )) then (
        raise T1q4__isqrt__L_1.L_1)) );
       ( "GP_Sloc:t1q4.adb:18:22" T1q4__isqrt__local_root.local_root := ( (T1q4__isqrt__big_natural.of_int(( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:18:36" "keep_on_simp" (Standard__long_long_integer.range_check_(( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) + 1 ))) ))) ) ) )) else (
       raise T1q4__isqrt__L_1.L_1)) )
     done )
    with
     T1q4__isqrt__L_1.L_1 -> ()
    end)) );
   ( "GP_Sloc:t1q4.adb:27:12" T1q4__isqrt__root.root := ( (Standard__natural.of_int(( "GP_Reason:VC_RANGE_CHECK" "GP_Sloc_VC:t1q4.adb:27:23" "keep_on_simp" (Standard__natural.range_check_((T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)))) ))) ) );
   raise Return__exc )
  with
   Return__exc -> abstract (___ignore((andb(( ( (Standard__natural.to_int(!T1q4__isqrt__root.root)) * (Standard__natural.to_int(!T1q4__isqrt__root.root)) ) <= (Standard__natural.to_int(T1q4__isqrt__n.n)) )) (( ( ( (Standard__natural.to_int(!T1q4__isqrt__root.root)) + 1 ) * ( (Standard__natural.to_int(!T1q4__isqrt__root.root)) + 1 ) ) > (Standard__natural.to_int(T1q4__isqrt__n.n)) ))))) ensures {true}
  end
end
