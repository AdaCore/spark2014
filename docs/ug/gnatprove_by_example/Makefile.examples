.PHONY: gnatprove flow prove results clean force

RESULTS=$(PWD)/results
ALL=$(wildcard examples/*.ad?)
ALL_FLOW_MSG=$(sort $(patsubst examples/%.ads,$(RESULTS)/%.flow,$(patsubst examples/%.adb,$(RESULTS)/%.flow,$(ALL))))
ALL_PROVE_MSG=$(sort $(patsubst examples/%.ads,$(RESULTS)/%.prove,$(patsubst examples/%.adb,$(RESULTS)/%.prove,$(ALL))))

COMMON_OPTS = -f -k -q -j0 --report=all --warnings=on
FLOW_OPTS   = $(COMMON_OPTS) --mode=flow
PROVE_OPTS  = $(COMMON_OPTS) --mode=prove --prover=cvc4,altergo,z3

gnatprove: flow prove

flow:
	mkdir -p flow
	cp examples/*.gpr          \
	   examples/illegal.txt    \
	   examples/flow_error.txt \
	   examples/spark_mode.txt \
	   flow
	cat examples/spark_mode.txt \
            examples/illegal.txt    \
            examples/flow_error.txt \
            > flow/spark_mode_or_illegal.txt
	-cd flow && gnatprove $(FLOW_OPTS) -P illegal.gpr       >  flow.results
	-cd flow && gnatprove $(FLOW_OPTS) -P flow_error.gpr    >> flow.results
	cd flow  && gnatprove $(FLOW_OPTS) -P spark_mode.gpr    >> flow.results
	cd flow  && gnatprove $(FLOW_OPTS) -P no_spark_mode.gpr >> flow.results

prove:
	mkdir -p prove
	cp examples/*.gpr           \
	   examples/spark_mode.txt  \
	   examples/codepeer_on.txt \
	   examples/long.txt        \
	   examples/altergo.txt      \
	   prove
	echo "" > prove/illegal.txt
	echo "" > prove/flow_error.txt
	cat examples/spark_mode.txt  \
 	    examples/codepeer_on.txt \
            examples/illegal.txt     \
            examples/flow_error.txt  \
            examples/long.txt        \
            examples/altergo.txt > prove/spark_mode_or_illegal.txt
	cd prove && gnatprove $(PROVE_OPTS) -P codepeer_on.gpr --steps=100 >  prove.results
	cd prove && gnatprove $(PROVE_OPTS) -P intro.gpr --steps=100       >>  prove.results
	cd prove && gnatprove $(PROVE_OPTS) -P long.gpr --steps=10000      >> prove.results
	cd prove && gnatprove $(COMMON_OPTS) -P altergo.gpr --steps=100    >> prove.results

results: $(ALL_FLOW_MSG) $(ALL_PROVE_MSG)

# Make sure to accept a possible empty result of 'grep' (currently ensured by
# sorting the output of grep), instead of treating it as an error. In that
# case, force generation of a non-empty output, to avoid errors when creating
# the pdf document.

$(RESULTS)/%.flow: force
	cd $(RESULTS) && grep -e '^$*.ad' ../flow/flow.results | python $(PWD)/../sort_messages.py > $@
	test -s $@ || echo "no output" > $@

$(RESULTS)/%.prove: force
	cd $(RESULTS) && grep -e '^$*.ad' ../prove/prove.results | python $(PWD)/../sort_messages.py > $@
	test -s $@ || echo "no output" > $@

clean:
	rm -rf flow prove examples/proof/sessions
