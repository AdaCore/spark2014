(* Module for checking absence of run-time errors and contract cases in the subprogram spec of "increment2" defined at t1q2.ads:4, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram_Spec *)
module T1q2__increment2__pre
 use import "_gnatprove_standard".Main
 use        "_standard__types_in_spec".Standard__integer
 use        "_standard__types_in_spec".Standard__integer
 use        "t1q2__variables".T1q2__increment2__x
 use        "t1q2__variables".T1q2__increment2__y
 use        "_gnatprove_standard".Integer
 use import "int".Int

 let pre_check "GP_Subp:t1q2.ads:4" "GP_Pretty_Ada:precondition for T1Q2.Increment2"  (t1q2__increment2__x : ref Standard__integer.integer) (t1q2__increment2__y : ref Standard__integer.integer) 
 requires { true }
 ensures { true }
  = 
  ( abstract (___ignore(( ( (Standard__integer.to_int(!T1q2__increment2__x.x)) <> 2147483647 ) && ( (Standard__integer.to_int(!T1q2__increment2__y.y)) <> 2147483647 ) ))) ensures {true};
  (any unit
  requires {true} 
  ensures {( ( (Standard__integer.to_int !T1q2__increment2__x.x) <> 2147483647 ) /\ ( (Standard__integer.to_int !T1q2__increment2__y.y) <> 2147483647 ) )} 

  ) )
end

(* Module for checking absence of run-time errors and subprogram contract on subprogram body of "increment2" defined at t1q2.ads:4, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram_Body *)
module T1q2__increment2__def
 use import "_gnatprove_standard".Main
 use        "t1q2__context_in_body".T1q2__increment2__x_old
 use        "t1q2__context_in_body".T1q2__increment2__x_old__constant_closure
 use        "_standard__types_in_spec".Standard__integer
 use        "_standard__types_in_spec".Standard__integer
 use        "t1q2__context_in_body".T1q2__increment2__y_old
 use        "t1q2__context_in_body".T1q2__increment2__y_old__constant_closure
 use        "t1q2__variables".T1q2__increment2__x
 use        "t1q2__variables".T1q2__increment2__y
 use        "_gnatprove_standard".Integer
 use import "int".Int

 let def "GP_Subp:t1q2.ads:4" "GP_Pretty_Ada:T1Q2.Increment2"  (__void_param : unit) 
 requires { ( ( (Standard__integer.to_int !T1q2__increment2__x.x) <> 2147483647 ) /\ ( (Standard__integer.to_int !T1q2__increment2__y.y) <> 2147483647 ) ) }
 ensures { ( "GP_Reason:VC_POSTCONDITION" "GP_Sloc_VC:t1q2.ads:7:17" "keep_on_simp" ( ( "GP_Pretty_Ada:X = X'Old + 1" "GP_Sloc:t1q2.ads:7:17" ( (Standard__integer.to_int !T1q2__increment2__x.x) = ( (Standard__integer.to_int (old !T1q2__increment2__x.x )) + 1 ) ) ) /\ ( "GP_Pretty_Ada:Y = Y'Old + 1" "GP_Sloc:t1q2.ads:8:31" ( (Standard__integer.to_int !T1q2__increment2__y.y) = ( (Standard__integer.to_int (old !T1q2__increment2__y.y )) + 1 ) ) ) ) ) }
  = 
  ( abstract (___ignore(!T1q2__increment2__y.y)) ensures {true};
  (let _temp_standard__t1q2_0 = (any Standard__integer.integer
  ensures {( result = !T1q2__increment2__y.y )} 

  ) in (
   ( abstract (___ignore(!T1q2__increment2__x.x)) ensures {true};
   (let _temp_standard__t1q2_1 = (any Standard__integer.integer
   ensures {( result = !T1q2__increment2__x.x )} 

   ) in (
    try
     ( (let t1q2__increment2__x_old___assume = !T1q2__increment2__x.x in (
      (any unit
      requires {true} 
      ensures {( t1q2__increment2__x_old___assume = T1q2__increment2__x_old.x_old )} 

      )))
     ;
     (let t1q2__increment2__y_old___assume = !T1q2__increment2__y.y in (
      (any unit
      requires {true} 
      ensures {( t1q2__increment2__y_old___assume = T1q2__increment2__y_old.y_old )} 

      )))
     ;
     abstract ( ( "GP_Sloc:t1q2.adb:9:7" T1q2__increment2__x.x := ( (Standard__integer.of_int(( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q2.adb:9:12" "keep_on_simp" (Standard__integer.range_check_(( (Standard__integer.to_int(!T1q2__increment2__x.x)) + 1 ))) ))) ) );
     ( "GP_Sloc:t1q2.adb:10:5" abstract (___ignore((andb(( (Standard__integer.to_int(!T1q2__increment2__x.x)) = ( (Standard__integer.to_int(T1q2__increment2__x_old.x_old)) + 1 ) )) (( (Standard__integer.to_int(!T1q2__increment2__y.y)) = (Standard__integer.to_int(T1q2__increment2__y_old.y_old)) ))))) ensures {true} ) ) ensures {( "GP_Reason:VC_ASSERT" "GP_Sloc_VC:t1q2.adb:10:5" "keep_on_simp" ( ( "GP_Pretty_Ada:X = X_Old + 1" "GP_Sloc:t1q2.adb:10:28" ( (Standard__integer.to_int !T1q2__increment2__x.x) = ( (Standard__integer.to_int T1q2__increment2__x_old.x_old) + 1 ) ) ) /\ ( "GP_Pretty_Ada:Y = Y_Old" "GP_Sloc:t1q2.adb:10:48" ( (Standard__integer.to_int !T1q2__increment2__y.y) = (Standard__integer.to_int T1q2__increment2__y_old.y_old) ) ) ) )};
     ( "GP_Sloc:t1q2.adb:11:7" T1q2__increment2__y.y := ( (Standard__integer.of_int(( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q2.adb:11:12" "keep_on_simp" (Standard__integer.range_check_(( (Standard__integer.to_int(!T1q2__increment2__y.y)) + 1 ))) ))) ) );
     raise Return__exc )
    with
     Return__exc -> abstract (___ignore(( ( (Standard__integer.to_int(!T1q2__increment2__x.x)) = ( (Standard__integer.to_int(_temp_standard__t1q2_1)) + 1 ) ) && ( (Standard__integer.to_int(!T1q2__increment2__y.y)) = ( (Standard__integer.to_int(_temp_standard__t1q2_0)) + 1 ) ) ))) ensures {true}
    end))
    )))
   )
end
