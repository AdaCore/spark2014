(* Module for checking absence of run-time errors and contract cases in the subprogram spec of "bounded_add" defined at t1q5.ads:4, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram_Spec *)
module T1q5__bounded_add__pre
 use import "_gnatprove_standard".Main
 use        "t1q5__context_in_spec".T1q5__bounded_add__x
 use        "t1q5__context_in_spec".T1q5__bounded_add__y
 use        "_standard__types_in_spec".Standard__integer
 use        "_standard__types_in_spec".Standard__integer
 use        "_gnatprove_standard".Integer
 use import "int".Int

 let pre_check "GP_Subp:t1q5.ads:4" "GP_Pretty_Ada:precondition for T1Q5.Bounded_Add"  (t1q5__bounded_add__x : Standard__integer.integer) (t1q5__bounded_add__y : Standard__integer.integer) (t1q5__bounded_add__z : ref Standard__integer.integer) 
 requires { true }
 ensures { true }
  = 
  ( ( abstract (___ignore(True)) ensures {true};
  (any unit
  requires {true} 
  ensures {true} 

  ) );
  ( abstract (___ignore(( ( (Standard__integer.to_int(T1q5__bounded_add__x.x)) + (Standard__integer.to_int(T1q5__bounded_add__y.y)) ) > 2147483647 ))) ensures {true};
  (let _temp_standard__t1q5_2 = (any bool
  ensures {( result = (Integer.bool_gt ( (Standard__integer.to_int T1q5__bounded_add__x.x) + (Standard__integer.to_int T1q5__bounded_add__y.y) ) 2147483647) )} 

  ) in (
   ( abstract (___ignore(( ( -2147483648 ) > ( (Standard__integer.to_int(T1q5__bounded_add__x.x)) + (Standard__integer.to_int(T1q5__bounded_add__y.y)) ) ))) ensures {true};
   (let _temp_standard__t1q5_1 = (any bool
   ensures {( result = (Integer.bool_gt ( -2147483648 ) ( (Standard__integer.to_int T1q5__bounded_add__x.x) + (Standard__integer.to_int T1q5__bounded_add__y.y) )) )} 

   ) in (
    ( abstract (___ignore((andb(( ( -2147483648 ) <= ( (Standard__integer.to_int(T1q5__bounded_add__x.x)) + (Standard__integer.to_int(T1q5__bounded_add__y.y)) ) )) (( ( (Standard__integer.to_int(T1q5__bounded_add__x.x)) + (Standard__integer.to_int(T1q5__bounded_add__y.y)) ) <= 2147483647 ))))) ensures {true};
    (let _temp_standard__t1q5_0 = (any bool
    ensures {( result = (andb (Integer.bool_le ( -2147483648 ) ( (Standard__integer.to_int T1q5__bounded_add__x.x) + (Standard__integer.to_int T1q5__bounded_add__y.y) )) (Integer.bool_le ( (Standard__integer.to_int T1q5__bounded_add__x.x) + (Standard__integer.to_int T1q5__bounded_add__y.y) ) 2147483647)) )} 

    ) in (
     ( assert { ( "GP_Reason:VC_DISJOINT_CONTRACT_CASES" "GP_Sloc_VC:t1q5.ads:5:11" "keep_on_simp" ( ( ( ( 0 + (if (( _temp_standard__t1q5_0 = True )) then (
      1) else (
      0)) ) + (if (( _temp_standard__t1q5_1 = True )) then (
      1) else (
      0)) ) + (if (( _temp_standard__t1q5_2 = True )) then (
      1) else (
      0)) ) <= 1 ) ) };
     assert { ( "GP_Reason:VC_COMPLETE_CONTRACT_CASES" "GP_Sloc_VC:t1q5.ads:5:11" "keep_on_simp" ( ( ( ( 0 + (if (( _temp_standard__t1q5_0 = True )) then (
      1) else (
      0)) ) + (if (( _temp_standard__t1q5_1 = True )) then (
      1) else (
      0)) ) + (if (( _temp_standard__t1q5_2 = True )) then (
      1) else (
      0)) ) >= 1 ) ) } )))
     )))
    )))
   ) )
end

(* Module for checking absence of run-time errors and subprogram contract on subprogram body of "bounded_add" defined at t1q5.ads:4, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram_Body *)
module T1q5__bounded_add__def
 use import "_gnatprove_standard".Main
 use        "t1q5__context_in_spec".T1q5__bounded_add__x
 use        "t1q5__context_in_spec".T1q5__bounded_add__y
 use        "t1q5__variables".T1q5__bounded_add__z
 use        "_standard__types_in_spec".Standard__integer
 use        "_standard__types_in_spec".Standard__integer
 use        "_gnatprove_standard".Integer
 use import "int".Int

 let def "GP_Subp:t1q5.ads:4" "GP_Pretty_Ada:T1Q5.Bounded_Add"  (__void_param : unit) 
 requires { true }
 ensures { true }
  = 
  (let _temp_standard__t1q5_5 = (any bool
  ensures {( result = (Integer.bool_gt ( (Standard__integer.to_int T1q5__bounded_add__x.x) + (Standard__integer.to_int T1q5__bounded_add__y.y) ) 2147483647) )} 

  ) in (
  (let _temp_standard__t1q5_4 = (any bool
  ensures {( result = (Integer.bool_gt ( -2147483648 ) ( (Standard__integer.to_int T1q5__bounded_add__x.x) + (Standard__integer.to_int T1q5__bounded_add__y.y) )) )} 

  ) in (
  (let _temp_standard__t1q5_3 = (any bool
  ensures {( result = (andb (Integer.bool_le ( -2147483648 ) ( (Standard__integer.to_int T1q5__bounded_add__x.x) + (Standard__integer.to_int T1q5__bounded_add__y.y) )) (Integer.bool_le ( (Standard__integer.to_int T1q5__bounded_add__x.x) + (Standard__integer.to_int T1q5__bounded_add__y.y) ) 2147483647)) )} 

  ) in (
   try
    ( ( "GP_Sloc:t1q5.adb:7:6" (if ((andb(( (Standard__integer.to_int(T1q5__bounded_add__x.x)) < 0 )) (( (Standard__integer.to_int(T1q5__bounded_add__y.y)) < 0 )))) then (
     ( "GP_Sloc:t1q5.adb:9:9" (if (( (Standard__integer.to_int(T1q5__bounded_add__x.x)) < ( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q5.adb:9:30" "keep_on_simp" (Standard__integer.range_check_(( ( -2147483648 ) - (Standard__integer.to_int(T1q5__bounded_add__y.y)) ))) ) )) then (
      ( "GP_Sloc:t1q5.adb:10:14" T1q5__bounded_add__z.z := ( (Standard__integer.of_int(( -2147483648 ))) ) )) else (
      ( "GP_Sloc:t1q5.adb:12:14" T1q5__bounded_add__z.z := ( (Standard__integer.of_int(( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q5.adb:12:19" "keep_on_simp" (Standard__integer.range_check_(( (Standard__integer.to_int(T1q5__bounded_add__x.x)) + (Standard__integer.to_int(T1q5__bounded_add__y.y)) ))) ))) ) ))) )) else (
     ( "GP_Sloc:t1q5.adb:15:6" (if ((andb(( (Standard__integer.to_int(T1q5__bounded_add__x.x)) > 0 )) (( (Standard__integer.to_int(T1q5__bounded_add__y.y)) > 0 )))) then (
      ( "GP_Sloc:t1q5.adb:17:9" (if (( (Standard__integer.to_int(T1q5__bounded_add__x.x)) > ( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q5.adb:17:29" "keep_on_simp" (Standard__integer.range_check_(( 2147483647 - (Standard__integer.to_int(T1q5__bounded_add__y.y)) ))) ) )) then (
       ( "GP_Sloc:t1q5.adb:18:14" T1q5__bounded_add__z.z := ( (Standard__integer.of_int(2147483647)) ) )) else (
       ( "GP_Sloc:t1q5.adb:20:14" T1q5__bounded_add__z.z := ( (Standard__integer.of_int(( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q5.adb:20:19" "keep_on_simp" (Standard__integer.range_check_(( (Standard__integer.to_int(T1q5__bounded_add__x.x)) + (Standard__integer.to_int(T1q5__bounded_add__y.y)) ))) ))) ) ))) )) else (
      ( "GP_Sloc:t1q5.adb:25:11" T1q5__bounded_add__z.z := ( (Standard__integer.of_int(( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q5.adb:25:16" "keep_on_simp" (Standard__integer.range_check_(( (Standard__integer.to_int(T1q5__bounded_add__x.x)) + (Standard__integer.to_int(T1q5__bounded_add__y.y)) ))) ))) ) ))) ))) );
    raise Return__exc )
   with
    Return__exc -> ( abstract (___ignore(True)) ensures {true};
    ( ( abstract (___ignore((if (_temp_standard__t1q5_3) then (
     ( (Standard__integer.to_int(!T1q5__bounded_add__z.z)) = ( (Standard__integer.to_int(T1q5__bounded_add__x.x)) + (Standard__integer.to_int(T1q5__bounded_add__y.y)) ) )) else (
     True)))) ensures {true};
    assert { ( "GP_Reason:VC_CONTRACT_CASE" "GP_Sloc_VC:t1q5.ads:5:79" "keep_on_simp" (if (( _temp_standard__t1q5_3 = True )) then (
     ( (Standard__integer.to_int !T1q5__bounded_add__z.z) = ( (Standard__integer.to_int T1q5__bounded_add__x.x) + (Standard__integer.to_int T1q5__bounded_add__y.y) ) )) else true) ) } );
    ( abstract (___ignore((if (_temp_standard__t1q5_4) then (
     ( (Standard__integer.to_int(!T1q5__bounded_add__z.z)) = ( -2147483648 ) )) else (
     True)))) ensures {true};
    assert { ( "GP_Reason:VC_CONTRACT_CASE" "GP_Sloc_VC:t1q5.ads:6:52" "keep_on_simp" (if (( _temp_standard__t1q5_4 = True )) then (
     ( (Standard__integer.to_int !T1q5__bounded_add__z.z) = ( -2147483648 ) )) else true) ) } ) );
    ( abstract (___ignore((if (_temp_standard__t1q5_5) then (
     ( (Standard__integer.to_int(!T1q5__bounded_add__z.z)) = 2147483647 )) else (
     True)))) ensures {true};
    assert { ( "GP_Reason:VC_CONTRACT_CASE" "GP_Sloc_VC:t1q5.ads:7:51" "keep_on_simp" (if (( _temp_standard__t1q5_5 = True )) then (
     ( (Standard__integer.to_int !T1q5__bounded_add__z.z) = 2147483647 )) else true) ) } ) )
   end))
  ))
  ))

end
