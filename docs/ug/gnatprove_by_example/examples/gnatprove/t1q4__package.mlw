(* Module for checking absence of run-time errors and subprogram contract on subprogram body of "isqrt" defined at t1q4.ads:4, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram_Body *)
module T1q4__isqrt__def
 use import "_gnatprove_standard".Main
 use        "t1q4__context_in_spec".T1q4__isqrt__n
 use        "t1q4__types_in_body".T1q4__isqrt__big_natural
 use        "t1q4__variables".T1q4__isqrt__root
 use        "_standard__types_in_spec".Standard__integer
 use        "t1q4__variables".T1q4__isqrt__local_root
 use        "_standard__types_in_spec".Standard__long_long_integer
 use        "t1q4__context_in_body".T1q4__isqrt__L_1
 use        "_standard__types_in_spec".Standard__natural
 use        "_gnatprove_standard".Integer
 use import "int".Int

 let def "GP_Subp:t1q4.ads:4" "GP_Pretty_Ada:T1Q4.ISQRT"  (__void_param : unit) 
 requires { true }
 ensures { ( "GP_Reason:VC_POSTCONDITION" "GP_Sloc_VC:t1q4.ads:5:19" "keep_on_simp" ( ( "GP_Pretty_Ada:Root*Root <= N" "GP_Sloc:t1q4.ads:5:20" ( ( (Standard__natural.to_int !T1q4__isqrt__root.root) * (Standard__natural.to_int !T1q4__isqrt__root.root) ) <= (Standard__natural.to_int T1q4__isqrt__n.n) ) ) /\ ( "GP_Pretty_Ada:Root+1)*(Root+1) > N" "GP_Sloc:t1q4.ads:6:22" ( ( ( (Standard__natural.to_int !T1q4__isqrt__root.root) + 1 ) * ( (Standard__natural.to_int !T1q4__isqrt__root.root) + 1 ) ) > (Standard__natural.to_int T1q4__isqrt__n.n) ) ) ) ) }
  = 
  try
   ( ( "GP_Sloc:t1q4.adb:13:18" T1q4__isqrt__local_root.local_root := ( (T1q4__isqrt__big_natural.of_int(0)) ) );
   ( "GP_Sloc:t1q4.adb:15:7" (if (True) then (
    try
     ( ( "GP_Sloc:t1q4.adb:16:11" (if (( ( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:16:38" "keep_on_simp" (Standard__long_long_integer.range_check_(( ( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:16:33" "keep_on_simp" (Standard__long_long_integer.range_check_(( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) + 1 ))) ) * ( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:16:52" "keep_on_simp" (Standard__long_long_integer.range_check_(( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) + 1 ))) ) ))) ) > (Standard__natural.to_int(T1q4__isqrt__n.n)) )) then (
      raise T1q4__isqrt__L_1.L_1)) );
     ( "GP_Sloc:t1q4.adb:18:22" T1q4__isqrt__local_root.local_root := ( (T1q4__isqrt__big_natural.of_int(( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:18:36" "keep_on_simp" (Standard__long_long_integer.range_check_(( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) + 1 ))) ))) ) );
     while True do
      invariant { 
       ( "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc_VC:t1q4.adb:21:10" "keep_on_simp" ( ( "GP_Pretty_Ada:Local_Root * Local_Root <= N" "GP_Sloc:t1q4.adb:22:13" ( ( (T1q4__isqrt__big_natural.to_int !T1q4__isqrt__local_root.local_root) * (T1q4__isqrt__big_natural.to_int !T1q4__isqrt__local_root.local_root) ) <= (Standard__natural.to_int T1q4__isqrt__n.n) ) ) /\ ( "GP_Pretty_Ada:Local_Root <= 16#7FFF_FFFF#" "GP_Sloc:t1q4.adb:23:22" ( (T1q4__isqrt__big_natural.to_int !T1q4__isqrt__local_root.local_root) <= 2147483647 ) ) ) )
       }
      ( (any unit
      requires {true} 
      ensures {true} 

      );
      abstract (___ignore(( ( ( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) * (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) ) <= (Standard__natural.to_int(T1q4__isqrt__n.n)) ) && ( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) <= 2147483647 ) ))) ensures {true};
      (if (True) then (
       ( ( "GP_Sloc:t1q4.adb:16:11" (if (( ( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:16:38" "keep_on_simp" (Standard__long_long_integer.range_check_(( ( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:16:33" "keep_on_simp" (Standard__long_long_integer.range_check_(( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) + 1 ))) ) * ( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:16:52" "keep_on_simp" (Standard__long_long_integer.range_check_(( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) + 1 ))) ) ))) ) > (Standard__natural.to_int(T1q4__isqrt__n.n)) )) then (
        raise T1q4__isqrt__L_1.L_1)) );
       ( "GP_Sloc:t1q4.adb:18:22" T1q4__isqrt__local_root.local_root := ( (T1q4__isqrt__big_natural.of_int(( "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc_VC:t1q4.adb:18:36" "keep_on_simp" (Standard__long_long_integer.range_check_(( (T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)) + 1 ))) ))) ) ) )) else (
       raise T1q4__isqrt__L_1.L_1)) )
     done )
    with
     T1q4__isqrt__L_1.L_1 -> ()
    end)) );
   ( "GP_Sloc:t1q4.adb:27:12" T1q4__isqrt__root.root := ( (Standard__natural.of_int(( "GP_Reason:VC_RANGE_CHECK" "GP_Sloc_VC:t1q4.adb:27:23" "keep_on_simp" (Standard__natural.range_check_((Standard__natural.to_int((Standard__natural.of_int(( "GP_Reason:VC_RANGE_CHECK" "GP_Sloc_VC:t1q4.adb:27:23" "keep_on_simp" (Standard__natural.range_check_((T1q4__isqrt__big_natural.to_int(!T1q4__isqrt__local_root.local_root)))) ))))))) ))) ) );
   raise Return__exc )
  with
   Return__exc -> abstract (___ignore((andb(( ( (Standard__natural.to_int(!T1q4__isqrt__root.root)) * (Standard__natural.to_int(!T1q4__isqrt__root.root)) ) <= (Standard__natural.to_int(T1q4__isqrt__n.n)) )) (( ( ( (Standard__natural.to_int(!T1q4__isqrt__root.root)) + 1 ) * ( (Standard__natural.to_int(!T1q4__isqrt__root.root)) + 1 ) ) > (Standard__natural.to_int(T1q4__isqrt__n.n)) ))))) ensures {true}
  end
end
