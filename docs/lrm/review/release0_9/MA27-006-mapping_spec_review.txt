!Implementer: TJJ
!Reviewer: RPM
!Revision reviewed:
!TN Description: Review of mapping spec in LRM 0.9
!Check messages under this TN - Are all issues addressed?:
!Review completed:
!TN marked dead:

!Label: RPM/1
!Location: A.1
!Description: Before the bullet list it says that the first two items are
not needed in SPARK 2014. After the list it says they have to be done using
pragma Assume. Seems contradictory. (Whatever we decide to do should also
be consistent with the text in A.3.3 "Input driver using 'Tail in a contract"
and similar following examples, and A.4.1 "Assume Contract"). From what I
have read it seems to me that we do need to have a way of saying 'Always_Valid
and we can accomplish this using pragma Assume, so I think it's the text 
before the bullets that needs to be reworked.
!Action Taken:
!Checked By:

!Label: RPM/2
!Location: None.
!Description: Comment withdrawn.
!Action Taken: None.
!Checked By: RPM

!Label: RPM/3
!Location: Table in A.1, "global on body" and A.2.4
!Description: A bit subtle, but a global on the body in SPARK 2005 could be
mapped to either Refined_Global or simply Global, depending on whether it
is refined in SPARK 2005 or just a subprogram with no separate spec. Maybe
change to "global on body (refined)" and add another row "global on body 
(not refined)" which maps to Global aspect? 
!Action Taken:
!Checked By:

!Label: RPM/4
!Location: Table in A.1, "post on body"
!Description: As above, the postcondition on the body might not be refined.
!Action Taken:
!Checked By:

!Label: RPM/5
!Location: Table in A.1, heading row
!Description: I'm not sure that 'alternative' is the right word to describe
the SPARK 2014 construct. How about just shortening it to "SPARK 2014"?
!Action Taken:
!Checked By:

!Label: RPM/6
!Location: A2.2
!Description: The precondition on Divide in SPARK 2005 is:

  Y /= 0 and X / Y <= Integer'Last

but in SPARK 2014 it is:

  Y /= 0 and X > Integer'First and Y > Integer'First

Why the difference? If it's deliberate I think it needs some explanation.
!Action Taken:
!Checked By:

!Label: RPM/7
!Location: A.3.2
!Description: Maybe worth pointing out that having S and Pointer as two 
separate abstract own variables with 1-1 refinement onto concrete 
variables is not good practice and is shown here for illustration?
!Action Taken:
!Checked By:

!Label: RPM/8
!Location: Examples
!Description: A few of the code examples don't have line numbers and don't
have syntax highlighting. Some setting missed out for them?
!Action Taken:
!Checked By:

!Label: RPM/9
!Location: A.4.1 "Assert (no loop) contract"
!Description: It may be worth noting that Assert_And_Cut is not likely to
be needed at all, and Assert may be useful for debugging not really as an
aid to the prover. Ah, having read A.4.2 I withdraw this comment.
!Action Taken: None.
!Checked By: RPM

!Label: RPM/10
!Location: A.5.6
!Description: Please add a note to say why the main_program annotation is
not needed. (Just a single sentence would be fine.)
!Action Taken:
!Checked By: 


