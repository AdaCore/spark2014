
   Ident: YM01
   Section: 1.5
   Page/para: 5/1st para after bullet points
   Comment: The Verification Rules are presented as enforcement of flow analysis only. This is not the case, for example Verification Rules for Loop_Invariant have nothing to do with flow analysis.

   Ident: YM02
   Section: 1.6
   Page/para: 6/2
   Comment: The LRM says that SPARK 2014 pragmas either have no dynamics semantics, or are used "to define assertions whose success shall be proven statically". This is not the case, as Loop_Invariant and Loop_Variant can perfectly be used for their dynamic role only.

   Ident: YM03
   Section: 3.2.4
   Page/para: 19
   Comment: If subtype predicates are to be included in SPARK 2014, additional verification rules should be created, so that formal verification is possible at the level of an individual subprogram. In particular, the variables that are mentioned in the Global contract of a subprogram should have the corresponding predicate verified on entry (for IN and IN OUT) and exit (for OUT and IN OUT) of the subprogram.

Also, the Ada RM rules (see RM 3.2.4 Dynamic Semantics) only define checks for values of parameters whose type has a subtype predicate attached. But no check is performed when the subtype predicate is attached to a component of the type. For example, in the code below, no violation is detected when calling Violate on a parameter of type T. It would be expected in SPARK to have the same kind of rules that Ada has for type invariants (that apply on any "part" of an object that has a type invariant attached).

procedure P is
   type R is tagged record
      A, B : Integer;
   end record with Predicate => R.A = R.B;
   procedure Violate (C : in out R) is
   begin
      C.A := C.B + 1;
   end Violate;

   type T is record
      C : R;
   end record;
   procedure Violate (D : in out T) is
   begin
      D.C.A := D.C.A + 1;
   end Violate;

   E : T;
begin
   E := (C => (A | B => 0));
   Violate (E);    --  not detected

   E := (C => (A | B => 0));
   Violate (E.C);  --  detected
end P;

As subtype predicates are an important specification feature of Ada 2012, it would not be understandable to leave it outside SPARK 2014. But this requires work to define sensible Verification Rules. Note that it may be appropriate to define reasonable constraints on the content of the predicate in SPARK 2014 (like the fact the expression cannot refer to global variables), to both simplify verification and facilitate their correct use.

   Ident: YM04
   Section: 6.8
   Page/para: 45
   Comment: Nothing is currently added to expression functions in the LRM, wrt Ada LRM. Does that mean they cannot be given a Global/Depends/Contract_Cases aspect?

   Ident: YM05
   Section: 7.1.5
   Page/para: 52
   Comment: The rationale for providing an Initial_Condition aspect is not clear, now that initialization of library-level constants and variables has been restricted in SPARK to compiler-known values. The LRM says this serves to establish the "precondition" of the program proper, but this is given by the compiler-known values initializing the library-level constants and variables. It seems that Initial_Condition is mostly useful for stating the effect of statements in package body elaboration, which should be mentioned.

   Ident: YM06
   Section: 7.2.2
   Page/para: 53
   Comment: I am not convinced by the rationale for refined pre/post/global/depends/contract_cases. Here is what it says:

"1. The semantics of properties defined in terms of abstract state can only be precisely defined in terms of the corresponding concrete state, though nested abstraction is also necessary to manage hierarchies of data."

Although this was true for SPARK 2005, this is not the case anymore with SPARK 2014. Functional properties expressed as pre/post/contract_cases can use actual program functions (instead of separate logic functions in SPARK 2005), whose implementation is precisely defined in terms of the concrete state. Regarding global/depends contracts, the benefit of re-specifying them in terms of concrete state is not obvious at all.

"2. There may be multiple possible refinements for a given abstract specification and so the user should be able to specify what they actually want."

The main way that a user specifies this "refinement" is by an "implementation" of the specified abstraction. Of course there are multiple possible implementations for an abstraction, but what is the benefit of stating twice (in the implementation, and in the refined aspects) the same implementation?

"3. This is necessary to support development via stepwise refinement."

The implementation is not really a refinement of the spec. The real refinement (like in the B method) is between a higher-level specification and a lower-level specification. I don't believe we provide useful features here for stepwise refinement.

Overall, I feel that refinement was useful in SPARK 2005, but won't be useful in SPARK 2014. I did not see an example which could not be slightly rewritten (say, by introducing a wrapper function) to attain the same verification goals with only Pre/Post/Global/Depends. Note that this is independent of Refined_State, which is clearly needed. Given the additional complexity of refined Pre/Post/etc. for little gain, I favor not putting them in SPARK 2014.

   Ident: YM07
   Section: 7.3.2
   Page/para: 60
   Comment: In order for type invariants to be always true outside of the unit implementing the type, restrictions should be imposed on the expression stating the type invariant property. In particular, it should not mention global variables, or else it could be broken anytime by code modifying the global variable.

Additionally, there should be Verification Rules that state in which cases a global variable (mentioned in the Global contract) has its type invariant checked, similarly to what should be done for predicate subtypes.

   Ident: YM08
   Section: 7.4
   Page/para: 60
   Comment: Verification tools should be prevented from using the value of the deferred constant when analyzing a unit which has no visibility over the private part where the value of the constant is defined.

   Ident: YM09
   Section: 8.3
   Page/para: 61
   Comment: Expanding on YM08, there should be visibility rules for verification. Otherwise, nothing prevents a verification tool from looking at the body of a subprogram inside the package body of P to perform the verification of the body of another subprogram inside the package body of Q. If SPARK 2014 defines a language for modular verification, visibility rules that prevent the above should be given.

-- 
Yannick Moy, Senior Software Engineer, AdaCore
