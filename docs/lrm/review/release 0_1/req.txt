Ident: REQ-SM1
Section: 1
Page/para: 
Comment: Section 1.5 says something about Verification Rules, but I think we need a section of the introduction dedicated to structure and a
definition of which rules appear in each subsection (Dynamic Semantics, Static Semantics, Verification Rules, ...).
Status:


Ident: REQ-SM2
Section: 2-14
Page/para: 
Comment: Related to the previous comment: Within a section - and particularly in 5,6,7 - I think we should be consistent about which subsections appear. 
eg. if there are no Dynamic Semantics then just say this. Otherwise you don't know if something has been accidentally omitted.
Status:


Ident: REQ-SM3
Section: 2-14
Page/para: 
Comment: Related to the previous comment: We should be consistent about whether we provide examples (and/or refer to the mapping spec).
Status:


Ident: REQ-SM4
Section: 1 (and 1.3 4/2)
Page/para: 3/2
Comment: Mentioning ATM and avionics seems too domain specific - we don't want to deter customers in other sectors?
Status:


Ident: REQ-SM5
Section: 1.2 (and 1.5 6/3)
Page/para: 3/3
Comment: "Implementation" = "Compiler"?
Status: No action, RCC


Ident: REQ-SM6
Section: 1.2
Page/para: 3/3
Comment: "rejected" sounds as though it isn't portable between compilers - that's not what you mean, right?
Status:


Ident: REQ-SM7
Section: 1.2
Page/para: 3/4
Comment: Insert "automatic" before "formal verification" - the theory doesn't change, only what is practically possible.
Status:


Ident: REQ-SM8
Section: 1.3
Page/para: 4/1
Comment: "may" => "will"?
Status:


Ident: REQ-SM9
Section: 1.4
Page/para: 4/1
Comment: I'm not sure that "simplification" is the same thing as "restriction", so stick to the latter.
Status:


Ident: REQ-SM10
Section: 1.4
Page/para: 4/1
Comment: "of" => "from"
Status: Can't locate this issue, RCC


Ident: REQ-SM11
Section: 1.4
Page/para: 4/7
Comment: Should say "Tasking is not permitted" and then add a section of "Future Enhancements"; this will also be the place to put the rel2+ ToDos.
Status:


Ident: REQ-SM12
Section: 1.4
Page/para: 4/9
Comment: I'm not sure what comes after the "if" is true - there is more than this to the rationale for what is in the subset.
Status:


Ident: REQ-SM13
Section: 1.5
Page/para: 5/2
Comment: "must" ^be able to "compile successfully".
Status:


Ident: REQ-SM14
Section: 1.5
Page/para: 5/2
Comment: Overloading word "restriction".
Status:


Ident: REQ-SM15
Section: 1.5
Page/para: 5/2
Comment: Access types not mentioned in App B.
Status:


Ident: REQ-SM16
Section: 1.5
Page/para: 6/2
Comment: Delete "also".
Status: Done, RCC


Ident: REQ-SM17
Section: 1.5
Page/para: 6/4
Comment: So we will have to provide the GNAT RM?
Status: No action, RCC


Ident: REQ-SM18
Section: 1.6
Page/para: 6/1
Comment: "Additional" => "addition"
Status: Done, RCC


Ident: REQ-SM19
Section: 1.7
Page/para: 6/1
Comment: Delete "mandatory" - otherwise it's a tautology.
Status: Done, RCC


Ident: REQ-SM20
Section: 1.8
Page/para: 7/7
Comment: We need to provide a reference for where we define this process.
Status:


Ident: REQ-SM21
Section: 4.3.4
Page/para: 14 
Comment: Does this section come to a conclusion about was is / isn't in SPARK 2014?
Status:


Ident: REQ-SM22
Section: 5.1
Page/para: 17/1
Comment: "complicate" => "are not amenable to".
Status:


Ident: REQ-SM23
Section: 5.5.3
Page/para: 18/?
Comment: The paragraph in []s looks like a comment?
Status:


Ident: REQ-SM24
Section: 5.9
Page/para: 21/?
Comment: Doesn't the example belong in Section 5.5.3?
Status:


Ident: REQ-SM25
Section: 6.1
Page/para: 23/?
Comment: What does it mean for a function declaration to "update a name"?
Status:


Ident: REQ-SM26
Section: 6.1
Page/para: 23/?
Comment: This is an example of a rel2+ ToDO that should be in a separate chapter/appendix.
Status:


Ident: REQ-SM27
Section: 6.1.1
Page/para: 24/1
Comment: Reword: "The implementation of the body
of the subprogram must satisfy the post condition provided the precondition is True and the subprogram completes
normally."
Status:


Ident: REQ-SM27
Section: 6.1.2
Page/para: 24/?
Comment: I prefer version 2.
Status:


Ident: REQ-SM28
Section: 6.1.3
Page/para: 24/?
Comment: Include "Aspect" in all subsection names that are about aspects.
Status:


Ident: REQ-SM29
Section: 6.1.3
Page/para: 25/last but one
Comment: Typo in "con formant"
Status: Done, RCC


Ident: REQ-SM30
Section: 6.1.3
Page/para: 25/final
Comment: "a" or "exactly one of the given"?
Status:


Ident: REQ-SM31
Section: 6.1.3
Page/para: 26/3&4
Comment: Suggest "others" is one reserved font where appropriate. And there is confusion in here about whether
others is in itself a contract guard.
Status:


Ident: REQ-SM32
Section: 6.1.4 (and elsewhere)
Page/para: 26/1
Comment: Is it possible to get ReST to generate numeric section cross-refs?!
Status:


Ident: REQ-SM33
Section: 6.1.5
Page/para: 30/?
Comment: "filed" => "field"
Status: Done, RCC


Ident: REQ-SM34
Section: 6.1
Page/para: 23/?
Comment: This is an example of a rel2+ ToDO that should be in a separate chapter/appendix.
Status:


Ident: REQ-SM35
Section: 6.4
Page/para: 38/?
Comment: Have we captured the old rules about flow=auto mode.
Status:


Ident: REQ-SM36
Section: 7.1.3
Page/para: 46/?
Comment: Have we addressed the problem of default integrities that I raised in L713-009?
Status:


Ident: REQ-SM37
Section: 7.3.2
Page/para: 60/?
Comment: Are there really no verification rules for type invariants - or do they belong with the subprogram body?
Status:


Ident: REQ-SM38
Section: 9
Page/para: 65/1
Comment: Delete "currently". The aim to add it should go in the Futures appendix.
Status:


Ident: REQ-SM39
Section: App A
Page/para: 77/?
Comment: I think this needs an introduction and clarification: these are the optional restrictions.
Status:


Ident: REQ-SM40
Section: App A
Page/para: 77/?
Comment: Should we be talking about GNAT here - maybe ok if it's introduced earlier.
Status:


Ident: REQ-SM41
Section: App A
Page/para: 80/
Comment: There are no profiles!! This needs at least a ToDo.
Status:


Ident: REQ-SM42
Section: App B
Page/para: 81/?
Comment: This doesn't look like the complete list eg. Section 5.
Status:


Ident: REQ-SM43
Section: App C
Page/para: 83/?
Comment: "document" => "appendix".
Status: Done, RCC


Ident: REQ-SM44
Section: C.1.1
Page/para: 83/?
Comment: "structured" => "mapped" or "restructured".
Status:


Ident: REQ-SM45
Section: C.1.1
Page/para: 83/?
Comment: Is the type inference explained anywhere? - Otherwise how do you know there isn't a completeness problem?

===================

These all from CC

my review:
Status:


Ident: REQ-CC46
Section: 1.3
Page/para: 4
Comment: Is it really necessary to speak twice of WCET where we don't even
plan to provide this static analysis capability ourselves? Once as part
of the need for Profiles seems enough
Status:


Ident: REQ-CC47
Section: 1.4
Page/para: 5
Comment: last bullet point, last sentence: that seems too strong a restriction
for hybrid usage. I would prefer: the latter declarations are not used
by pure SPARK 2014 code.

I also think we need to define here what is the finest-grain of
hybridation we are ready to deal with. In particular, a subprogram can
only have 3 states:
    - spec in S14, body not
    - spec and body outside of S14
    - spec and body in S14
we don't care about the case where the body would have chunks in s14 and
other outside.
Status:


Ident: REQ-CC48
Section:  1.5
Page/para: 5
Comment: a comma would be welcome before "is performed"
Status:


Ident: REQ-CC49
Section: 1.5
Page/para: 5
Comment: I don't understand the last sentence of the 2nd paragraph. in
particular, the notion of something that might be fully or partially in
s14 "as instructed by the user" ?????
Status:


Ident: REQ-CC50
Section: 1.5
Page/para: 5-6
Comment: The purpose of this section is unclear and its name particularly vague.
I'd like to review the rationale for this section before commenting further.
Status:


Ident: REQ-CC51
Section: 
Page/para: 5 4th paragraph from bottom
Comment: what is the point of this paragraph? if we retain it, I suggest
getting rid of all the "(" & ")" which confuse things even more.
Status:


Ident: REQ-CC52
Section: 
Page/para: page 6, 2nd paragraph
Comment: This parapgraph is highly objectional from my review cap. Not only its
purpose is unclear but it is also blatantly false. WE WANT to be able to
make proofs on chunks of what is called "invalid SPARK 2014 programs".
Status:


Ident: REQ-CC53
Section: 1.5
Page/para: 6, last para
Comment: "The GNAT Pro Ada 2012 implementation"???? replace with "the GNAT Pro compiler"
Status:


Ident: REQ-CC54
Section: 1.6
Page/para: 6
Comment: the whole section has little value and is a repeat of what was said in 1.3
Status:


Ident: REQ-CC55
Section: 1.7
Page/para: 6
Comment: we need to make it clearer that the "constructive mode" is still fully
supported.
Status:


Ident: REQ-CC56
Section: 1.8
Page/para: 6
Comment: there is a missing discussion about what we used to call "alfa-friendly"
code. I don't think we want to reuse this concept but we need to define
precisely what are the characteristics of a non-s14 subprogram that can
call or be called by a s14 one so that the formal verif on the latter be
meaningful. We also want to minimize (eliminate?) the restrictions on
Ada code that has no influence on s14 code.
Status:


Ident: REQ-CC57
Section: 6.1.3
Page/para: 24
Comment: I don't understand why there is so much emphasis on initial and final
values of parameters or global variables. I understand and agree with
what is written but I'm concerned that it doesn't correspond to how pre
and post are described and that could cause confusion. I would go for a
simpler introductory sentence: "contract cases provide for a structured
way of defining a subprogram contract using mutually exclusive
subcontract cases"
I would also suggest adding a "real" example  early. There is what looks
like an example but which is not so: it is a kind of equivalence which
might be interesting but doesn't help much understanding the concept.
Status:


Ident: REQ-CC58
Section: 
Page/para: page 25, static semantics
Comment: Do we really need a "contract_cases" in the assertion policy? it seems
error-prone since people could dis(/en)able postconditions without
dis(/en)abling contract_cases which seems to make little sense to me.
I suggest that contract_cases be guarded by the same assertion mark as
postconditions.
Status:


Ident: REQ-CC59
Section: 
Page/para: page 27, 5., last bullet
Comment: either is an indexed component: so a(1) and a(1) are independent?
Status: No longer relevant as now only entire objects can be referenced in the relevant aspects. [JIB]


Ident: REQ-CC60
Section: 
Page/para: page 27, 6.,
Comment: 2nd bullet: efective --> effective
3rd bullet: or --> nor
Status: Done, RCC


Ident: REQ-CC61
Section: 
Page/para: page 27, 1.,
Comment: why is the numbering of paragraphs reset to 1?
this paragraph should happen before since it is used by the previous
ones... generally speaking the whole thing is difficult to understand
until you get to the examples on page 29/30
Status: This section has now been removed and the detail subsumed within the referencing sections. [JIB]
        


Ident: REQ-CC62
Section: 
Page/para: page 27, 3.
Comment: why can't an entire object have a "out" or "proof" effective mode? That
doesn't seem obvious...
Status: No longer relevant as now only entire objects can be referenced in the relevant aspects. [JIB]


Ident: REQ-CC63
Section: 
Page/para: page 28: 6.,
Comment: evalustae --> evaluate
Status: Done, RCC


Ident: REQ-CC64
Section: 
Page/para: page 28, 6.1.5
Comment: The second sentence is unclear: are the only mode allowed 'in', 'out',
'in out' as implied or  'proof' is also OK?
Status: Proof is also OK, which is now made clear by the updated syntax and text. [JIB]


Ident: REQ-CC65
Section: 
Page/para: page 31, comments of procedure G
Comment: A.(I) --> I suppose the '.' is a typo
Status: Done, RCC


Ident: REQ-CC66
Section: 
Page/para: page 32
Comment: I have some doubts about the "=>+" notation. It doesn't seem
necessary and doesn't help particularly the reader...
this is the first instance of a particularly weird notation so far...
Status: No better alternative is currently available so not proposed to change this at the moment. [JIB]


Ident: REQ-CC67
Section: 
Page/para: page 36 Verification rules
Comment: why is it relevant to the language definition that some verification
rules are checked by flow analysis or proofs? I strongly suggest we
remove this purely implementation oriented detail.
Status:


Ident: REQ-CC68
Section: 
Page/para: page 36, 6.3.3, 4.
Comment: why isn't there a similar rule for 'out' and 'proof' ?
Status:


Ident: REQ-CC69
Section: 
Page/para: page 36, 6.3.3 checked by proof, 1. & 2.
Comment: the 2 sentences say exactly the same thing for the case of one component
and the case od several. This is confusing. We should merge the 2 sentences.
furthermore, "is considered" doesn't really mean "checked by proof",
does it? We need to choose between describing the properties or
describing the checks done but here we are in the middle...
Status:


Ident: REQ-CC70
Section: 
Page/para: page 38, 6.4
Comment: the introductory paragraph is a bit abrupt. Why are we starting with
something only relevant to OO? Furthermore, since we talk about
dispatching, is it really the case that only the one to which it
resolves statically need to be s14 as implied? It seems that all
potential overriding need to be as well.



=======================================================

Neil White

Format of Review Comments
-------------------------
SPARK 2014 LRM
Release: 0.1
November 15, 2012
Status:


Ident: REQ-NW71
Section:        1
Page/para:      3/1
Comment:        "SPARK 2014"   Change later? When do we need the right language and tool names throughout?
Status:


Ident: REQ-NW72
Section:        1.2
Page/para:      3/Bullet 3
Comment:        Text implies compiler tie-in. We need to be carefult to consider clients who use SPARK but this other compilers. Reword?
Status:


Ident: REQ-NW73
Section:        1.2
Page/para:      3/Bullet 4
Comment:        Not clear to me if (a) the language spec is complete, but the first tool release is not, or (b) the language spec is partial and the tool release matches is, or (c) a hybrid. This bullet implies tasking is in the language spec, but it's not in the first tool release?
Status:


Ident: REQ-NW74
Section:        1.2
Page/para:      4/Add new bullet?
Comment:        Add new bullet point   "As expressive as SPARK 83/95/05"?
Status:


Ident: REQ-NW75
Section:        1.4
Page/para:      4/1 Bullet 6
Comment:        Inconsistent with goals. Only a restiction in the inial tool, not the language?
Status:


Ident: REQ-NW76
Section:        1.5
Page/para:      6/3
Comment:        So how do other compilers work? Ignore? Skip?
Status:


Ident: REQ-NW77
Section:        1.7
Page/para:      6/2
Comment:        Add "also" before "facilitate".
Status:


Ident: REQ-NW78
Section:        1.8
Page/para:      7/4
Comment:        Do not like "by makeing some assumptions," text. Reowrd.
Status:


Ident: REQ-NW79
Section:        11
Page/para:      69/?
Comment:        Do we allow top-level handlers? Mosk SPARK programs have them!
Status:


Ident: REQ-NW80
Section:        13.3
Page/para:      73/1
Comment:        Unchecked conversions useful? Retain?
Status:


Ident: REQ-NW81
Section:        Appendix A
Page/para:      79/6.3 Note:
Comment:        How do we deal with Non-GNAT users who don't have GNAT check?
Status:


Ident: REQ-NW82
Section:        Appendix C.1.2
Page/para:      84/Specification in SPARK 2005
Comment:        For procedure Swap_Array_Elements, why do we need X /= Y?
Status:


Ident: REQ-NW83
Section:        Appendix C.1.3
Page/para:      85/Specification in SPARK 2005
Comment:        For procedure Init in spec, why do we need X'Length?
Status:


Ident: REQ-NW84
Section:        Appendix C.2.1
Page/para:      89/Private type with refined pre/post contracts in the body
Comment:        Re the bit about proof rules : Why does this matter? Does this add anything? Delete?
Status:


Ident: REQ-NW85
Section:        Appendix C.2.1
Page/para:      90/Body in SPARK 2005
Comment:        For procedure Clear, S.Stack_Vector := Vector'(Index_Range => 0), why do we need this? pointless?
Status:


Ident: REQ-NW86
Section:        Appendix C.2.1
Page/para:      91/ Specification in SPARK 2014:
Comment:        Not that keen on your stack!
                Clear (A);
                Clear (B); push (B, x); pop(B, y);
                Now you have A not equal to B
Status:


Ident: REQ-NW87
Section:        Appendix C.2.1
Page/para:      92/Body in SPARK 2014
Comment:        For function Is_Empty, with Refined_Post, is this really refined?
Status:


Ident: REQ-NW88
Section:        Appendix C.2.1
Page/para:      93/--#inherit Pairs_05.Additional_05
Comment:        Correct code format to be consistent.
Status:


Ident: REQ-NW89
Section:        Appendix C.2.1
Page/para:      95/Specification in SPARK 2014
Comment:        For procedure Push, syntax "=>+", used without introduction?
Status:


Ident: REQ-NW90
Section:        Appendix C.2.1
Page/para:      96 & 97/Extension of tagged type in child package ADT
Comment:        Correct code font to be consistent.
Status:


Ident: REQ-NW91
Section:        Appendix C.2.1
Page/para:      97/Second instance of Specification in SPARK 2014.
Comment:        Change second instance of "Specification in SPARK 2014" to "Body in SPARK 2014".
Status: Done, RCC


Ident: REQ-NW92
Section:        Appendix C.2.1
Page/para:      99/Body of public child A in SPARK 2005
Comment:        General commnet, but thought of it here: I hope we can clear up the horror that is public/private SPARK children in 2014? Most projects of any size ban them as unworkably confusing!
Status:


Ident: REQ-NW93
Section:        Appendix C.2.2
Page/para:      99/1
Comment:        Remove second sentence to be consistent   put the body of the SPARK 2014 version of the code at the end.
Status:


Ident: REQ-NW94
Section:        Appendix C.2.2
Page/para:      109 & 110/spec & body of Private Children in SPARK 2005
Comment:        Correct code font to be consistent.
Status:


Ident: REQ-NW95
Section:        Appendix C.2.2
Page/para:      111/Specification of Private Children on SPARK 2014
Comment:        Correct code font to be consistent.
Status:


Ident: REQ-NW96
Section:        C.2.3
Page/para:      120/Switch body in SPARK 2014
Comment:        For package body Switch, what if state is not all volatile?
Status:


Ident: REQ-NW97
Section:        Appendix C.2.4
Page/para:      128/Circular dependence and elaboration order
Comment:        "SPARK tools"   is this the correct phrase?
Status:


Ident: REQ-NW98
Section:        Appendix C.3.1
Page/para:      131/Assert (no loop) contract
Comment:        "that are within them as the new hypotheses" - verging on needing knowledge of the proof language to understand this?
Status:


Ident: REQ-NW99
Section:        N/A
Page/para:      N/A
Comment:        Add something on Generics to mapping section?
Status: 





