Rod: many groups of "users" of the technology (from developers to academics,
  to regulators...)
  many communities and industries
  no point in address all problems for all people
  goal: make it possible to have an architecture that is extensible
  interest in:
   - open architecture
   - what is achievable in the time allowed
  learn from experience from existing tools and research/tool provider groups
  goal: showing at the end a diagram of tool architecture
  starting from scratch is a great opportunity
Yannick: Beware of putting too much effort in the genericity, like done in
  Frama-C platform centered on plug-in -> more complex, not so beneficial

Rod: Isn't it a problem to have an intermediate language for going back to
  source?
Johannes: We use an API to drive Why3, so we have access to the internal
  tree, very flexible.
Rod: what communication between the tools?
Arno: mostly files, some programmatic (gnatwhy3)

Johannes: presentation of the current architecture of gnatprove

Rod: for usability, focus on precise error messages and autofix
Rod: do we want the user to push the button or to run in background?
  (squiggle mode by Microsoft Research on Spec#)
Yannick: our users are more interested in deciding when proving things
Arno: About interaction between CodePeer and GNATprove, no interaction yet.
  Some plan initially in Hi-Lite:
    - CodePeer to generate loop invariants
    - CodePeer to suggest pre and postconditions that user may validate
Trevor: generation of global contracts is useful in maintenance mode

Rod: utility of a database for successive runs?
Arno: We have this in CodePeer, just SQL + clever translation of lines.
  We have an ongoing project Qualimetrics for doing this for various analysis
  tools at AdaCore. Have a common representation and be able to collect
  results on various runs and generate reports/graphics/etc.

list desired analyses in SPARK 2014
-----------------------------------
- syntax
- sem
   - types
   - subset (language constraints, restrictions and profile)
   - contract consistency
   - aliasing
- info-flow analysis:
   - undefined variables
   - ineffective statements
   - loop stability
   - code derives
   - function without side effects
- proof
   - absence of RTE
   - partial correctness
   - properties
   - termination
   - type predicates + type invariants
   - OO + LSP
   - warnings on contracts (incomplete/unimplementable)
   - re-verification of MBD assertions
   - granularity of re-verification
- enhanced flow/global contracts
   - conditional contracts
   - component-wise contracts
- metrics (qualimetrics)
- concurrency
- dead code detection (also semantic dead code: statements not useful for proof)
- WCET
- Stack / memory usage
- counter-example generation
- browsing and IDE cleverness
   - slicing
   - impact analysis

front-end/parsing
-----------------

(interfacing questions and issues of legacy syntax support to consider)

deductive verification tools (VC generation & proof system)
----------------------------

static analysis tools (data & information flow analysis engine)
---------------------

Yannick: presentation of KSU presentation done at AdaCore at the information
  flow meeting


how to support legacy code, transitions
---------------------------------------

detailed breakdown of work items
--------------------------------
