------------------------------------------------------------------------
with S;use type S.Array_Range; use type S.IntArray; 
--@ line 1
--# inherit s;
package External_S
is



   procedure Linear_Search
     (Table : in S.IntArray
--@ line 8
                         ;
      Value : in Integer;
      Found : out Boolean;
      Index : out S.Array_Range
--@ line 11
                             );
   --# post              not Found or else Table(Index) = Value;

   function Check_Index
     (Table : S.IntArray
--@ line 15
                      ;
      Value : Integer;
      Index : S.Array_Range
--@ line 17
                         ) return Boolean;
   --# pre              Table'First <= Index and then Index <= Table'Last;
   --# return Result =>  Result             = (Table(Index) = Value);
end External_S;
with S;use type S.Array_Range; use type S.IntArray; with External_S;
--@ line 1
--# inherit s, external_s;
--@ line 1
package Internal_S
--@ line 1
          is
--@ line 7
   procedure Linear_Search
     (Table : in S.IntArray
--@ line 8
                         ;
      Value : in Integer;
      Found : out Boolean;
      Index : out S.Array_Range
--@ line 11
                             );
   --# post              not Found or else Table(Index) = Value;

   function Check_Index
     (Table : S.IntArray
--@ line 15
                      ;
      Value : Integer;
      Index : S.Array_Range
--@ line 17
                         ) return Boolean;
   --# pre              Table'First <= Index and then Index <= Table'Last;
   --# return Result =>  Result             = (Table(Index) = Value);

end Internal_S;
package S
is
   type Array_Range is range 1 .. 10;

   type IntArray is array (Array_Range) of Integer;
end S;
package body Internal_S
--@ line 1
               is

  procedure Linear_Search
    (Table : in S.IntArray
--@ line 4
                        ;
     Value : in Integer;
     Found : out Boolean;
     Index : out S.Array_Range
--@ line 7
                            )
  is
  begin
     Found := False;

     Index := Table'First;
     while Index <= S.Array_Range
--@ line 13
                               '(Table'Last) loop
        --# assert     Found = False;
        if Table(Index) = Value then
           Found := True;
           exit;
        end if;

        if Index = Table'Last then
           exit;
        end if;

        Index := Index + 1;
     end loop;

  end Linear_Search;

  function Check_Index
    (Table : S.IntArray
--@ line 30
                     ;
     Value : Integer;
     Index : S.Array_Range
--@ line 32
                        ) return Boolean
  is
  begin
     return Table(Index) = Value;
  end Check_Index;

end Internal_S;
------------------------------------------------------------------------
                     Total  Examiner Simp(U/R)  Checker Review False Undiscgd
Assert or Post:          7      0      7              0      0      0       0
Precondition check:      0      0      0              0      0      0       0
Check statement:         0      0      0              0      0      0       0
Runtime check:           6      0      6              0      0      0       0
Refinement VCs:          0      0      0              0      0      0       0
Inheritance VCs:         0      0      0              0      0      0       0
===============================================================================
Totals:                 13      0     13              0      0      0       0
% Totals:                       0%   100%             0%     0%     0%      0%
===================== End of Semantic Analysis Summary ========================
