asm_stack.adb:10:4: sparkify: discard contract on definition of subprogram
------------------------------------------------------------------------
package ASM_Stack
--@ line 1
--# own Stack_Top, Stack_Vector;
--# initializes Stack_Top, Stack_Vector;
is
pragma Elaborate_Body (ASM_Stack);
--@ line 4
   Stack_Size : constant := 100;
   type Stack_Range is range 0 .. Stack_Size;
   type Vector is array(Stack_Range range <>) of Integer;
   subtype New_Name_2 is Stack_Range range 
--@ line 7
                          1 .. Stack_Size;
--@ line 7
   subtype New_Name_1 is Vector (New_Name_2);
--@ line 7
   Stack_Vector : New_Name_1               := New_Name_1'
--@ line 7
                                              (others => 1);
   Stack_Top  : Stack_Range := 0;
end ASM_Stack;
with ASM_Stack;use type ASM_Stack.Stack_Range; 
use type ASM_Stack.Vector; 
--@ line 1
--# inherit asm_stack;
package External_ASM_Stack
is
--@ line 3
   function Is_Empty return Boolean;
--@ line 3
   --# global in     ASM_Stack.Stack_Top;
   --# --@ line 12
   --# return Result =>      Result          = (ASM_Stack.Stack_Top
   --# --@ line 12
   --#                                                    = 0);
--@ line 5
   procedure Clear;
--@ line 5
   --# global    out ASM_Stack.Stack_Top, ASM_Stack.Stack_Vector;
   --# post              Is_Empty(ASM_Stack.Stack_Top);
--@ line 4
   Stack_Size : constant := 100;
end External_ASM_Stack;
with ASM_Stack;use type ASM_Stack.Stack_Range; 
use type ASM_Stack.Vector; 
with External_ASM_Stack;
--@ line 1
--# inherit external_asm_stack, asm_stack;
--@ line 1
package Internal_ASM_Stack
--@ line 1
                  is

   function Is_Empty return Boolean;
--@ line 3
   --# global in     ASM_Stack.Stack_Top;
   --# --@ line 12
   --# return Result =>      Result          = (ASM_Stack.Stack_Top
   --# --@ line 12
   --#                                                    = 0);
--@ line 5
   procedure Clear;
--@ line 5
   --# global    out ASM_Stack.Stack_Top, ASM_Stack.Stack_Vector;
   --# post              External_ASM_Stack.Is_Empty(ASM_Stack.Stack_Top);

end Internal_ASM_Stack;
package body Internal_ASM_Stack

is
   Stack_Size : constant := 100;
--@ line 10
   function Is_Empty return Boolean
   is

   begin
      return ASM_Stack.Stack_Top
--@ line 14
                       = 0;
   end Is_Empty;

   procedure Clear
   is
   begin
      ASM_Stack.Stack_Top
--@ line 20
                :=0;
      ASM_Stack.Stack_Vector
--@ line 21
                   := ASM_Stack.New_Name_1'
--@ line 21
                      (others => 0);
   end Clear;

end Internal_ASM_Stack;
------------------------------------------------------------------------
                     Total  Examiner Simp(U/R)  Checker Review False Undiscgd
Assert or Post:          2      0      1              0      0      0       1
Precondition check:      0      0      0              0      0      0       0
Check statement:         0      0      0              0      0      0       0
Runtime check:           2      0      2              0      0      0       0
Refinement VCs:          0      0      0              0      0      0       0
Inheritance VCs:         0      0      0              0      0      0       0
===============================================================================
Totals:                  4      0      3              0      0      0       1  <<<
% Totals:                       0%    75%             0%     0%     0%     25% <<<
===================== End of Semantic Analysis Summary ========================
