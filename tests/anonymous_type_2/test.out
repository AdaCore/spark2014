anon_type.adb:11:23: sparkify: implicit loop invariant
anon_type.adb:14:29: sparkify: implicit loop invariant
anon_type.adb:17:33: sparkify: implicit loop invariant
------------------------------------------------------------------------
package Anon_Type
is



   subtype Index is Integer range 0 .. 4;
   subtype Value is Integer range 0 .. 9;
   type Array1 is array (Index) of Value;
   subtype New_Name_1 is Integer range 5 .. 9;
--@ line 9
   subtype New_Name_2 is                          Integer range 0 .. 9;
--@ line 9
   type Array2 is array (New_Name_1) of New_Name_2;
   Size : constant Integer :=10;
   subtype New_Name_3 is Integer range 
--@ line 11
                         1 .. Size;
--@ line 11
   type Array3 is array (New_Name_3) of Value;
   subtype New_Name_4 is Integer range 
--@ line 12
                         1 .. 10;
--@ line 12
   type Array4 is array (New_Name_4) of Value;
   subtype New_Name_5 is Integer range 
--@ line 13
                         1 .. 2;
--@ line 13
   subtype New_Name_6 is Integer range 
--@ line 13
                                 1 .. 3;
--@ line 13
   type Array5 is array (New_Name_5, New_Name_6) of Value;
end Anon_Type;
with Anon_Type;use type Anon_Type.Array1; use type Anon_Type.Array2; use type Anon_Type.Array3; use type Anon_Type.Array4; use type Anon_Type.Array5; 
--@ line 1
------------------------------------------------------------------------------
--  Test the anonymous type in constrained_array_definition,
--# inherit anon_type;
package External_Anon_Type
is
   subtype Index is Integer range 0 .. 4;
   subtype Value is Integer range 0 .. 9;
--@ line 15
   procedure Exchange(A1 : out Anon_Type.Array1
--@ line 15
                                     ; A2 : out Anon_Type.Array2
--@ line 15
                                                      ;
                      A3 : out Anon_Type.Array3
--@ line 16
                                     ; A4 : out Anon_Type.Array4
--@ line 16
                                                      ; A5 : in out Anon_Type.Array5
--@ line 16
                                                                          );
end External_Anon_Type;
with Anon_Type;use type Anon_Type.Array1; use type Anon_Type.Array2; use type Anon_Type.Array3; use type Anon_Type.Array4; use type Anon_Type.Array5; with External_Anon_Type;
--@ line 1
------------------------------------------------------------------------------
--  Test the anonymous type in constrained_array_definition,
--# inherit external_anon_type, anon_type;
package Internal_Anon_Type
is
   subtype Index is Integer range 0 .. 4;
   subtype Value is Integer range 0 .. 9;
--@ line 15
   procedure Exchange(A1 : out Anon_Type.Array1
--@ line 15
                                     ; A2 : out Anon_Type.Array2
--@ line 15
                                                      ;
                      A3 : out Anon_Type.Array3
--@ line 16
                                     ; A4 : out Anon_Type.Array4
--@ line 16
                                                      ; A5 : in out Anon_Type.Array5
--@ line 16
                                                                          );
end Internal_Anon_Type;
package body Internal_Anon_Type
is
   procedure exchange(A1 : out Anon_Type.Array1
--@ line 3
                                     ; A2 : out Anon_Type.Array2
--@ line 3
                                                      ;
                     A3 : out Anon_Type.Array3
--@ line 4
                                    ; A4 : out Anon_Type.Array4
--@ line 4
                                                     ; A5 : in out Anon_Type.Array5
--@ line 4
                                                                         )
   is
   begin
        A1 := Anon_Type.Array1'
--@ line 7
              (0,0,0,0,0);
        A2 := Anon_Type.Array2'
--@ line 8
              (1,1,1,1,1);
        A3 := Anon_Type.Array3'
--@ line 9
              (0,1,2,3,4,5,6,7,8,9);
        A4 := Anon_Type.Array4'
--@ line 10
              (9,8,7,6,5,4,3,2,1,0);
      for I in Integer range 
--@ line 11
               1 .. 9 loop
         --# assert True;
--@ line 12
         A2(I) := A1(I);
      end loop;
      for I in Integer range 
--@ line 14
               Anon_Type.Array3
--@ line 14
                     'Range loop
         --# assert True;
--@ line 15
         A4(I) := A3(I);
      end loop;
      for I in Integer range 
--@ line 17
               Anon_Type.Array5
--@ line 17
                     'Range (2) loop
         --# assert True;
--@ line 18
         A5(1,I) := A4(I/2);
      end loop;
   end exchange;
end Internal_Anon_Type;
------------------------------------------------------------------------
                     Total  Examiner Simp(U/R)  Checker Review False Undiscgd
Assert or Post:          8      1      6              0      0      0       1
Precondition check:      0      0      0              0      0      0       0
Check statement:         0      0      0              0      0      0       0
Runtime check:          12      0     10              0      0      0       2
Refinement VCs:          0      0      0              0      0      0       0
Inheritance VCs:         0      0      0              0      0      0       0
===============================================================================
Totals:                 20      1     16              0      0      0       3  <<<
% Totals:                       5%    80%             0%     0%     0%     15% <<<
===================== End of Semantic Analysis Summary ========================
