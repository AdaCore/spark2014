------------------------------------------------------------------------
package Anon_Type
is



   subtype New_Name_1 is 
--@ line 6
      Integer range 0 .. 10;
--@ line 5
   type Matrix is array(Integer  range <>, Integer range <>)
   of New_Name_1;
end Anon_Type;
with Anon_Type;use type Anon_Type.Matrix; 
--@ line 1
-----------------------------------------------------------------------------
--  Examples for fix the anonymous type in object declarations or definitions
--# inherit anon_type;
package External_Anon_Type
is

   function Increment (Var_In : in Integer) return Integer;
end External_Anon_Type;
with Anon_Type;use type Anon_Type.Matrix; 
with External_Anon_Type;
--@ line 1
-----------------------------------------------------------------------------
--  Examples for fix the anonymous type in object declarations or definitions
--# inherit external_anon_type, anon_type;
package Internal_Anon_Type
--@ line 4
                  is


   function Increment (Var_In : in Integer) return Integer;
end Internal_Anon_Type;
--  3.3.1 Object Declarations
--  3.3.1:
--  object_declaration ::=
--     defining_identifier_list : [aliased] [constant] subtype_indication [:= expression];
--   | defining_identifier_list : [aliased] [constant] access_definition [:= expression];
--   | defining_identifier_list : [aliased] [constant] array_type_definition [:= expression];
--   | single_task_declaration
--   | single_protected_declaration
--  3.3.1:
--  defining_identifier_list ::=
--   defining_identifier {, defining_identifier}

-- with Ada;

package body Internal_Anon_Type
--@ line 15
                       is
   function Increment(Var_In :  in Integer) return Integer
   is

      Limit          : constant Integer := 10_000;

      subtype New_Name_2 is 
--@ line 21
                       Integer range 0 .. 10;
--@ line 21
      Var_Out        : New_Name_2            := 0;


      subtype New_Name_3 is 
--@ line 24
                       Integer range -Limit .. +Limit;
--@ line 24
      A, B           : New_Name_3                    ;

      subtype New_Name_5 is Integer range 
--@ line 26
                              1 .. 10;
--@ line 26
      subtype New_Name_4 is String (New_Name_5);
--@ line 26
      Ten_Characters : New_Name_4     ;
      subtype New_Name_7 is Integer range 
--@ line 27
                              1 .. 8;
--@ line 27
      subtype New_Name_8 is Integer range 
--@ line 27
                                      1 .. 9;
--@ line 27
      subtype New_Name_6 is Anon_Type.Matrix (New_Name_7, New_Name_8);
--@ line 27
      Board          : New_Name_6            ;

      subtype New_Name_9 is Integer range 
--@ line 29
                              1.. 10;
--@ line 29
      type New_Name_10 is array (New_Name_9) of Integer;
--@ line 29
      My_Array1      : New_Name_10              ;
      subtype New_Name_11 is Integer range 
--@ line 30
                              1.. 20;
--@ line 30
      type New_Name_12 is array (New_Name_11) of Integer;
--@ line 30
      My_Array2      : New_Name_12              ;
   begin
      Var_Out  := Var_In + (Var_Out + 1);
      return Var_Out;
   end Increment;
end Internal_Anon_Type;
------------------------------------------------------------------------
                     Total  Examiner Simp(U/R)  Checker Review False Undiscgd
Assert or Post:          1      0      1              0      0      0       0
Precondition check:      0      0      0              0      0      0       0
Check statement:         0      0      0              0      0      0       0
Runtime check:           1      0      0              0      0      0       1
Refinement VCs:          0      0      0              0      0      0       0
Inheritance VCs:         0      0      0              0      0      0       0
===============================================================================
Totals:                  2      0      1              0      0      0       1  <<<
% Totals:                       0%    50%             0%     0%     0%     50% <<<
===================== End of Semantic Analysis Summary ========================
