anon_type.adb:10:23: sparkify: implicit loop invariant
anon_type.adb:11:26: sparkify: implicit loop invariant
anon_type.adb:12:29: sparkify: implicit loop invariant
------------------------------------------------------------------------
package Anon_Type
is
pragma Elaborate_Body (Anon_Type);



   subtype New_Name_1 is Integer range 0 .. 9;
--@ line 7
   subtype New_Name_2 is                      Integer range 0 .. 9;
   subtype New_Name_3 is 
--@ line 8
           Integer range 0 .. 999;
--@ line 7
   type Matrix is array (New_Name_1, New_Name_2) of New_Name_3;
end Anon_Type;
with Anon_Type;use type Anon_Type.Matrix; 
--@ line 1
------------------------------------------------------------------------------
--  Test the anonymous type in for statement see .adb
--
--@ line 3
--# inherit anon_type;
package External_Anon_Type
is




   procedure Multiply (X,Y : in Anon_Type.Matrix
--@ line 10
                                      ; Z : in out Anon_Type.Matrix
--@ line 10
                                                         );
end External_Anon_Type;
with Anon_Type;use type Anon_Type.Matrix; 
with External_Anon_Type;
--@ line 1
------------------------------------------------------------------------------
--  Test the anonymous type in for statement see .adb
--
--@ line 3
--# inherit external_anon_type, anon_type;
package Internal_Anon_Type
--@ line 4
                  is

   -- type Matrix_Index is range 0 .. 9;



   procedure Multiply (X,Y : in Anon_Type.Matrix
--@ line 10
                                      ; Z : in out Anon_Type.Matrix
--@ line 10
                                                         );

end Internal_Anon_Type;
------------------------------------------------------------------------------
--  Test the anonymous type in for statement
--
package body Internal_Anon_Type
--@ line 4
                       is

   procedure Multiply (X,Y : in Anon_Type.Matrix
--@ line 6
                                      ; Z : in out Anon_Type.Matrix
--@ line 6
                                                         )
   is
   begin
      -- Z := Matrix'(1 .. 9 => (1 .. 9 =>0));
      for I in Integer range 
--@ line 10
               1 .. 9 loop
         --# assert True;
--@ line 11
         for J in Integer range 
--@ line 11
                  1 .. 9 loop
            --# assert True;
--@ line 12
            for K in Integer range 
--@ line 12
                     1 .. 9 loop
               --# assert True;
--@ line 13
               Z(I,J) := X(I,K) * Y(K,J);
            end loop;
         end loop;
      end loop;
   end Multiply;

end Internal_Anon_Type;
------------------------------------------------------------------------
                     Total  Examiner Simp(U/R)  Checker Review False Undiscgd
Assert or Post:         13      4      6              0      0      0       3
Precondition check:      0      0      0              0      0      0       0
Check statement:         0      0      0              0      0      0       0
Runtime check:           7      0      6              0      0      0       1
Refinement VCs:          0      0      0              0      0      0       0
Inheritance VCs:         0      0      0              0      0      0       0
===============================================================================
Totals:                 20      4     12              0      0      0       4  <<<
% Totals:                      20%    60%             0%     0%     0%     20% <<<
===================== End of Semantic Analysis Summary ========================
