asm_stack.adb:13:4: sparkify: discard contract on definition of subprogram
asm_stack.adb:20:4: sparkify: discard contract on definition of subprogram
------------------------------------------------------------------------
package ASM_Stack
--@ line 1
--# own Stack_Top, Stack_Vector;
--# initializes Stack_Top, Stack_Vector;
is
pragma Elaborate_Body (ASM_Stack);

   Stack_Size : constant := 100;
   type Stack_Range is range 0 .. Stack_Size;
   type Vector is array(Stack_Range range <>) of Integer;

   subtype New_Name_2 is Stack_Range range 
--@ line 10
                          1 .. Stack_Size;
--@ line 10
   subtype New_Name_1 is Vector (New_Name_2);
--@ line 10
   Stack_Vector : New_Name_1               := New_Name_1'
--@ line 10
                                              (others => 0);
   Stack_Top : Stack_Range := 0;
end ASM_Stack;
with ASM_Stack;use type ASM_Stack.Stack_Range; 
use type ASM_Stack.Vector; 
--@ line 1
-- This specification is a implementation of a ASM (Abstract Stata Machine)
-- " An ASM is an entity which has well defined states plus a set of operation
-- which cause state transitions
--# inherit asm_stack;
package External_ASM_Stack
is
   function Is_Empty return Boolean;
--@ line 7
   --# global in     ASM_Stack.Stack_Top;
   --# --@ line 15
   --# return Result =>     Result          = (ASM_Stack.Stack_Top
   --# --@ line 15
   --#                                                   = 0);
--@ line 8
   function Is_Full return Boolean;
--@ line 8
   --# global in     ASM_Stack.Stack_Top;
   --# --@ line 22
   --# return Result =>     Result         = (ASM_Stack.Stack_Top
   --# --@ line 22
   --#                                                  = ASM_Stack.Stack_Size
   --# --@ line 22
   --#                                                              );
--@ line 11
   procedure Clear;
--@ line 11
   --# global    out ASM_Stack.Stack_Top, ASM_Stack.Stack_Vector;
   --# post              Is_Empty(ASM_Stack.Stack_Top);

   procedure Push(X : in Integer);
--@ line 14
   --# global in out ASM_Stack.Stack_Top, ASM_Stack.Stack_Vector;
   --# pre              not Is_Full(ASM_Stack.Stack_Top);

   procedure Pop (X : out Integer);
--@ line 17
   --# global in     ASM_Stack.Stack_Vector;
   --#        in out ASM_Stack.Stack_Top;
   --# --@ line 18
   --# pre              not Is_Empty(ASM_Stack.Stack_Top);
--@ line 6
   Stack_Size : constant := 100;
end External_ASM_Stack;
with ASM_Stack;use type ASM_Stack.Stack_Range; 
use type ASM_Stack.Vector; 
with External_ASM_Stack;
--@ line 1
-- This specification is a implementation of a ASM (Abstract Stata Machine)
-- " An ASM is an entity which has well defined states plus a set of operation
-- which cause state transitions
--# inherit external_asm_stack, asm_stack;
package Internal_ASM_Stack
--@ line 5
                  is

   function Is_Empty return Boolean;
--@ line 7
   --# global in     ASM_Stack.Stack_Top;
   --# --@ line 15
   --# return Result =>     Result          = (ASM_Stack.Stack_Top
   --# --@ line 15
   --#                                                   = 0);
--@ line 8
   function Is_Full return Boolean;
--@ line 8
   --# global in     ASM_Stack.Stack_Top;
   --# --@ line 22
   --# return Result =>     Result         = (ASM_Stack.Stack_Top
   --# --@ line 22
   --#                                                  = ASM_Stack.Stack_Size
   --# --@ line 22
   --#                                                              );
--@ line 10
   -- assert,precondition and postcondition are translated in SPARK syntax
   procedure Clear;
--@ line 11
   --# global    out ASM_Stack.Stack_Top, ASM_Stack.Stack_Vector;
   --# post              External_ASM_Stack.Is_Empty(ASM_Stack.Stack_Top);

   procedure Push(X : in Integer);
--@ line 14
   --# global in out ASM_Stack.Stack_Top, ASM_Stack.Stack_Vector;
   --# pre              not External_ASM_Stack.Is_Full(ASM_Stack.Stack_Top);

   procedure Pop (X : out Integer);
--@ line 17
   --# global in     ASM_Stack.Stack_Vector;
   --#        in out ASM_Stack.Stack_Top;
   --# --@ line 18
   --# pre              not External_ASM_Stack.Is_Empty(ASM_Stack.Stack_Top);


end Internal_ASM_Stack;
--  Implementation of the subprograms

package body Internal_ASM_Stack
is

   Stack_Size : constant := 100;



                                                             --  anonymous type in unconstrained array


   function Is_Empty return Boolean
   is

   begin
      return ASM_Stack.Stack_Top
--@ line 17
                       = 0;
   end Is_Empty;

   function Is_Full return Boolean
   is

   begin
      return ASM_Stack.Stack_Top
--@ line 24
                       = ASM_Stack.Stack_Size
--@ line 24
                                   ;
   end Is_Full;
--@ line 25
         -- the name will be generated

   procedure Clear
   is
   begin
      ASM_Stack.Stack_Top
--@ line 30
                :=0;
      ASM_Stack.Stack_Vector
--@ line 31
                   := ASM_Stack.New_Name_1'
--@ line 31
                      (others => 0); -- The aggregat must be qualified
   end Clear;

   procedure Push(X : in Integer)
   is
   begin
      ASM_Stack.Stack_Top
--@ line 37
                :=ASM_Stack.Stack_Top
--@ line 37
                            + 1;
      ASM_Stack.Stack_Vector
--@ line 38
                  (ASM_Stack.Stack_Top
--@ line 38
                            ) := X;
   end Push;

   procedure Pop (X : out Integer)
   is
   begin
      ASM_Stack.Stack_Top
--@ line 44
                := ASM_Stack.Stack_Top
--@ line 44
                             - 1;
      X := ASM_Stack.Stack_Vector
--@ line 45
                       (ASM_Stack.Stack_Top
--@ line 45
                                  + 1);
   end Pop;

end Internal_ASM_Stack;
------------------------------------------------------------------------
                     Total  Examiner Simp(U/R)  Checker Review False Undiscgd
Assert or Post:          5      2      3(   1)        0      0      0       0
Precondition check:      0      0      0              0      0      0       0
Check statement:         0      0      0              0      0      0       0
Runtime check:           6      0      6(   2)        0      0      0       0
Refinement VCs:          0      0      0              0      0      0       0
Inheritance VCs:         0      0      0              0      0      0       0
===============================================================================
Totals:                 11      2      9(   3)        0      0      0       0
% Totals:                      18%    82%(  27%)      0%     0%     0%      0%
===================== End of Semantic Analysis Summary ========================
