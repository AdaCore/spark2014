------------------------------------------------------------------------
package tq is

        Board_Size : constant Integer :=8;
        type Board_Index is range 1 .. Board_Size;
        type Colours is (No_colour, Black, White);
        type Pieces is (No_Piece, Pawn, Knight, Rook, Bishop, Queen, King);
        type Contents is record
              Colour : Colours;
              Piece : Pieces;
        end record;
        type Row is array (Board_Index) of Contents;
        type Boards11 is array (Board_Index) of Row;
        Empty : constant Contents := Contents'
--@ line 13
                                     (No_Colour, No_Piece);
        Empty_Row : Constant Row := Row'
--@ line 14
                                    (Board_Index => Empty);

        procedure Array_Of_Array (Initial_Board : out Boards11);
        --procedure Multi_Dim_Array (P, Q : out Complex);

end tq;
package body tq is

   procedure Array_Of_Array (Initial_Board : out Boards11)
   is
   begin

      Initial_Board :=Boards11'
                (1 => Row'
--@ line 8
                      (Contents'
--@ line 8
                       (White,Rook),Contents'
                                (White,Knight),Contents'
                                (White,Bishop),Contents'
                                (White,Queen),Contents'
                                (White,King),Contents'
                                (White,Bishop),Contents'
                                (White,Knight),Contents'
                                (White,Rook)
                                ),
                        2 => Row'
--@ line 17
                             (Board_Index =>Contents'
--@ line 17
                                            (White,Pawn)),
                        3 .. 6 => Empty_Row,
                        7 => Row'
--@ line 19
                             (Board_Index =>Contents'
--@ line 19
                                            (White,Pawn)),
                        8 => Row'
--@ line 20
                             (Contents'
--@ line 20
                              (Black,Rook),Contents'
                                (Black,Knight),Contents'
                                (Black,Bishop),Contents'
                                (Black,Queen),Contents'
                                (Black,King),Contents'
                                (Black,Bishop),Contents'
                                (Black,Knight),Contents'
                                (Black,Rook)
                                )
                        )
                        ;

   end Array_Of_Array;

end tq;
------------------------------------------------------------------------
                     Total  Examiner Simp(U/R)  Checker Review False Undiscgd
Assert or Post:          1      1      0              0      0      0       0
Precondition check:      0      0      0              0      0      0       0
Check statement:         0      0      0              0      0      0       0
Runtime check:           1      0      1              0      0      0       0
Refinement VCs:          0      0      0              0      0      0       0
Inheritance VCs:         0      0      0              0      0      0       0
===============================================================================
Totals:                  2      1      1              0      0      0       0
% Totals:                      50%    50%             0%     0%     0%      0%
===================== End of Semantic Analysis Summary ========================
