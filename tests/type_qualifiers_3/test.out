------------------------------------------------------------------------
with tq;use type tq.Board_Index; use type tq.Colours; use type tq.Pieces; use type tq.Contents; use type tq.Row; use type tq.Boards11; 
--@ line 1
--# inherit tq;
--@ line 1
package Internal_tq
--@ line 1
           is
--@ line 16
        procedure Array_Of_Array (Initial_Board : out tq.Boards11
--@ line 16
                                                              );
        --procedure Multi_Dim_Array (P, Q : out Complex);
end Internal_tq;
package tq is

        Board_Size : constant Integer :=8;
        type Board_Index is range 1 .. Board_Size;
        type Colours is (No_colour, Black, White);
        type Pieces is (No_Piece, Pawn, Knight, Rook, Bishop, Queen, King);
        type Contents is record
              Colour : Colours;
              Piece : Pieces;
end record;
        type Row is array (Board_Index) of Contents;
        type Boards11 is array (Board_Index) of Row;
        Empty : constant Contents := Contents'
--@ line 13
                                     (No_Colour, No_Piece);
        Empty_Row : Constant Row := Row'
--@ line 14
                                    (Board_Index => Empty);

        procedure Array_Of_Array (Initial_Board : out Boards11);
        --procedure Multi_Dim_Array (P, Q : out Complex);
end tq;
package body Internal_tq
--@ line 1
                is

   procedure Array_Of_Array (Initial_Board : out tq.Boards11
--@ line 3
                                                         )
   is
   begin
      Initial_Board :=tq.Boards11'
        (1 => tq.Row'
--@ line 7
              (tq.Contents'
--@ line 7
               (tq.White
--@ line 7
                     ,tq.Rook
--@ line 7
                          ),tq.Contents'
               (tq.White
--@ line 8
                     ,tq.Knight
--@ line 8
                            ),tq.Contents'
               (tq.White
--@ line 9
                     ,tq.Bishop
--@ line 9
                            ),tq.Contents'
               (tq.White
--@ line 10
                     ,tq.Queen
--@ line 10
                           ),tq.Contents'
               (tq.White
--@ line 11
                     ,tq.King
--@ line 11
                          ),tq.Contents'
               (tq.White
--@ line 12
                     ,tq.Bishop
--@ line 12
                            ),tq.Contents'
               (tq.White
--@ line 13
                     ,tq.Knight
--@ line 13
                            ),tq.Contents'
               (tq.White
--@ line 14
                     ,tq.Rook
--@ line 14
                          )
              ),
         2 => tq.Row'
--@ line 16
              (tq.Board_Index
--@ line 16
                           =>tq.Contents'
--@ line 16
                             (tq.White
--@ line 16
                                   ,tq.Pawn
--@ line 16
                                        )),
         3 .. 6 => tq.Empty_Row
--@ line 17
                            ,
         7 => tq.Row'
--@ line 18
              (tq.Board_Index
--@ line 18
                           =>tq.Contents'
--@ line 18
                             (tq.White
--@ line 18
                                   ,tq.Pawn
--@ line 18
                                        )),
         8 => tq.Row'
--@ line 19
              (tq.Contents'
--@ line 19
               (tq.Black
--@ line 19
                     ,tq.Rook
--@ line 19
                          ),tq.Contents'
               (tq.Black
--@ line 20
                     ,tq.Knight
--@ line 20
                            ),tq.Contents'
               (tq.Black
--@ line 21
                     ,tq.Bishop
--@ line 21
                            ),tq.Contents'
               (tq.Black
--@ line 22
                     ,tq.Queen
--@ line 22
                           ),tq.Contents'
               (tq.Black
--@ line 23
                     ,tq.King
--@ line 23
                          ),tq.Contents'
               (tq.Black
--@ line 24
                     ,tq.Bishop
--@ line 24
                            ),tq.Contents'
               (tq.Black
--@ line 25
                     ,tq.Knight
--@ line 25
                            ),tq.Contents'
               (tq.Black
--@ line 26
                     ,tq.Rook
--@ line 26
                          )
              )
        );
   end Array_Of_Array;

end Internal_tq;
------------------------------------------------------------------------
                     Total  Examiner Simp(U/R)  Checker Review False Undiscgd
Assert or Post:          1      1      0              0      0      0       0
Precondition check:      0      0      0              0      0      0       0
Check statement:         0      0      0              0      0      0       0
Runtime check:           1      0      1              0      0      0       0
Refinement VCs:          0      0      0              0      0      0       0
Inheritance VCs:         0      0      0              0      0      0       0
===============================================================================
Totals:                  2      1      1              0      0      0       0
% Totals:                      50%    50%             0%     0%     0%      0%
===================== End of Semantic Analysis Summary ========================
