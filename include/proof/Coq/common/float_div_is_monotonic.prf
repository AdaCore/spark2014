assert (t'real fliteral3 = b / a) as l4real by
  (destruct fliteral_axiom3 as [fliteral3_finite l_real3]; rewrite l_real3; auto).

(* add the finitness of the concerned literals in the proof context *)
destruct fliteral_axiom1 as [fliteral1_finite l_real1].
destruct fliteral_axiom2 as [fliteral2_finite l_real2].
destruct fliteral_axiom3 as [fliteral3_finite l_real3].

(* project the le predicate on float to inequalities on reals *)
rewrite le_finite in h4, h5, h6, h7, h8, h9, h10; auto.

(* assert that l4 is strictly positive *)
assert (0 < t'real fliteral3) as l4_pos by
 (rewrite l4real; apply Rdiv_lt_0_compat; auto).

assert (t'real val3 <> 0) as v3real_neq_zero by (intro i; rewrite i in h8; fourier).

(* the following three lemmas specify that the division is finite *)
assert (~ is_zero val3) as v3_not_zero.
{
 intro Habs. apply v3real_neq_zero. apply zero_to_real in Habs; intuition.
}

assert (no_overflow RNE (t'real val1 / t'real val3)) as no_ov_v1v3.
{ apply Bounded_real_no_overflow.
  apply Abs.Abs_le.
  apply Rle_trans with (r2:=t'real fliteral2 * / t'real fliteral3); auto.
  unfold Rdiv.
  rewrite Abs.Abs_prod.
  apply Rmult_le_compat; try (apply Abs.Abs_pos).
  - rewrite Abs.Abs_le; rewrite l_real3, l_real2 in *; auto.
    split; auto.
    apply Rle_trans with (t'real (neg fliteral2)); auto.
    generalize (neg_finite fliteral2 fliteral2_finite). intro Hneg.
    destruct Hneg as [fin Hneg]. rewrite Hneg. rewrite l_real2. right. reflexivity.
  - rewrite Rbasic_fun.Rabs_right.
    apply Rinv_le_contravar; auto.
    apply Rle_ge.
    left; apply Rinv_0_lt_compat.
    rewrite l4real in *. eapply Rlt_le_trans with (b/a); auto.
  - rewrite l4real, Rinv_Rdiv.
    unfold Rdiv.
    rewrite <-Rmult_assoc.
    apply Rmult_le_reg_r with (r:=b); auto.
    field_simplify (t'real fliteral2 * a * / b * b).
    rewrite Real.infix_sl_def, Rinv_1, Rmult_1_r, l2_Z2R, maxfloat_Z2R.
    unfold a, b.
    repeat rewrite <-Z2R_mult.
    apply Z2R_le.
    ring_simplify; omega.

    intro i; rewrite i in b_pos; clear - b_pos; fourier.
    intro i; rewrite i in b_pos; clear - b_pos; fourier.
    intro i; rewrite i in a_pos; clear - a_pos; fourier. }

assert (no_overflow RNE (t'real val2 / t'real val3)) as no_ov_v2v3.
{ apply Bounded_real_no_overflow.
  apply Abs.Abs_le.
  apply Rle_trans with (r2:=t'real fliteral2 * / t'real fliteral3); auto.
  unfold Rdiv.
  rewrite Abs.Abs_prod.
  apply Rmult_le_compat; try (apply Abs.Abs_pos).
  - rewrite Abs.Abs_le; rewrite l_real3, l_real2, l_real1 in *; split; auto.
    apply Rle_trans with (t'real (neg fliteral2)); eauto.
    generalize (neg_finite fliteral2 fliteral2_finite). intro Hneg.
    destruct Hneg as [fin Hneg]. rewrite Hneg. rewrite l_real2. right. reflexivity.
  - rewrite Rbasic_fun.Rabs_right.
    apply Rinv_le_contravar; auto.
    apply Rle_ge.
    left; apply Rinv_0_lt_compat.
    clear -l4_pos h8. fourier.
  - rewrite l4real, Rinv_Rdiv.
    unfold Rdiv.
    rewrite <-Rmult_assoc.
    apply Rmult_le_reg_r with (r:=b); auto.
    field_simplify (t'real fliteral2 * a * / b * b).
    rewrite Real.infix_sl_def, Rinv_1, Rmult_1_r, l2_Z2R, maxfloat_Z2R.
    unfold a, b.
    repeat rewrite <-Z2R_mult.
    apply Z2R_le.
    ring_simplify; omega.

    intro i; rewrite i in b_pos; clear - b_pos; fourier.
    intro i; rewrite i in b_pos; clear - b_pos; fourier.
    intro i; rewrite i in a_pos; clear - a_pos; fourier. }

(* deduce the projections of val1 / val3 and val2 * val3 and that they
   are finite *)
destruct (div_finite RNE _ _ h1 h3 v3_not_zero no_ov_v1v3) as (v1v3_finite,to_real_v1v3).
destruct (div_finite RNE _ _ h2 h3 v3_not_zero no_ov_v2v3) as (v2v3_finite,to_real_v2v3).

(* project to real and conclude the proof using the monotonicity of
   round and monotonicity of the real multiplication *)
rewrite le_finite; auto.
rewrite to_real_v1v3, to_real_v2v3.
apply Round_monotonic.
apply Rmult_le_compat_r; auto.
left; apply Rinv_0_lt_compat; apply Rlt_le_trans with (t'real fliteral3); eauto.
split; auto. apply neg_finite; auto.
split; auto. apply neg_finite; auto.
Qed.
