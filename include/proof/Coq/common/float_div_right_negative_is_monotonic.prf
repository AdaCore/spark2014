assert (t'real fliteral3 = (b / a)) as l4real.
{
  destruct fliteral_axiom3 as [fliteral3_finite l_real3].
  rewrite l_real3. reflexivity.
}


(* add the finitness of the concerned literals in the proof context *)
destruct fliteral_axiom1 as [fliteral1_finite l_real1].
destruct fliteral_axiom2 as [fliteral2_finite l_real2].
destruct fliteral_axiom3 as [fliteral3_finite l_real3].


(* project the le predicate on float to inequalities on reals *)
rewrite le_finite in h6, h7, h8, h9, h10, h11, h12; auto.

(* assert that l4 is strictly positive *)
assert (t'real fliteral3 > 0 ) as l4_pos.
{
 rewrite l_real3. apply Rlt_gt, Rdiv_lt_0_compat; auto.
}


assert (t'real val3 <> 0) as v3real_neq_zero.
{
  intro i; rewrite i in h11. destruct (neg_finite fliteral3) as [finite neg_finite].
  auto. rewrite neg_finite in h11. apply Rlt_not_ge in l4_pos. destruct l4_pos.
  replace 0 with (-0) in h11 by ring. eapply Ropp_le_cancel in h11.
  intuition.
}

(* the following three lemmas specify that the division is finite *)
assert (~ is_zero val3) as v3_not_zero.
{
  (rewrite zero_to_real; intros (_, u); auto).
}


assert (no_overflow RNE (t'real val1 / t'real val3)) as no_ov_v1v3.
{ apply Bounded_real_no_overflow.
  apply Abs.Abs_le.
  apply Rle_trans with (r2:=t'real fliteral2 * (a / b) ); auto.
  unfold Rdiv.
  rewrite Abs.Abs_prod.
  apply Rmult_le_compat; try (apply Abs.Abs_pos).
  - rewrite <- h2 in *.
    rewrite Abs.Abs_le. destruct (neg_finite fliteral2) as [finite neg_finite]. auto.
    rewrite neg_finite in *. auto.
  - rewrite <- h2 in *.
    rewrite Rbasic_fun.Rabs_left.
    apply Rle_trans with (r2:=/ t'real fliteral3).
    rewrite Ropp_inv_permute; auto.
    apply Rinv_le_contravar. clear - l4_pos. fourier.
    destruct (neg_finite fliteral3) as [finite neg_finite]. auto.
    rewrite neg_finite in *.
    fourier.
    right; rewrite l4real; field.
    split; intro i; [rewrite i in b_pos|rewrite i in a_pos]; fourier.
    destruct (neg_finite fliteral3) as [finite neg_finite]. auto.
    rewrite neg_finite in *. apply Rinv_lt_0_compat; fourier.
  - unfold Rdiv.
    rewrite <-Rmult_assoc.
    apply Rmult_le_reg_r with (r:=b); auto.
    field_simplify (t'real fliteral2 * a * / b * b).
    rewrite Real.infix_sl'def, Rinv_1, Rmult_1_r, l2_IZR, maxfloat_IZR.
    unfold a, b.
    repeat rewrite <-mult_IZR.
    apply IZR_le.
    ring_simplify; omega.

    intro i; rewrite i in b_pos; clear - b_pos; fourier. }

assert (no_overflow RNE (t'real val2 / t'real val3)) as no_ov_v2v3.
{ apply Bounded_real_no_overflow.
  apply Abs.Abs_le.
  apply Rle_trans with (r2:=t'real fliteral2 * (a / b) ); auto.
  unfold Rdiv.
  rewrite Abs.Abs_prod.
  apply Rmult_le_compat; try (apply Abs.Abs_pos).
  - rewrite <- h2 in *.
    rewrite Abs.Abs_le. split; auto.
    destruct (neg_finite fliteral2) as [finite neg_finite]. auto.
    rewrite neg_finite in *. auto.
  - rewrite <- h2 in *.
    rewrite Rbasic_fun.Rabs_left.
    apply Rle_trans with (r2:=/ t'real fliteral3).
    rewrite Ropp_inv_permute; auto.
    destruct (neg_finite fliteral3) as [finite neg_finite]. auto.
    rewrite neg_finite in *. apply Rinv_le_contravar; auto.
    clear -h11. fourier.
    right; rewrite l4real; field.
    split; intro i; [rewrite i in b_pos|rewrite i in a_pos]; fourier.
    apply Rinv_lt_0_compat. destruct (neg_finite fliteral3) as [finite neg_finite]. auto.
    rewrite neg_finite in *. fourier.
  - unfold Rdiv.
    rewrite <-Rmult_assoc.
    apply Rmult_le_reg_r with (r:=b); auto.
    field_simplify (t'real fliteral2 * a * / b * b).
    rewrite Real.infix_sl'def, Rinv_1, Rmult_1_r, l2_IZR, maxfloat_IZR.
    unfold a, b.
    repeat rewrite <-mult_IZR.
    apply IZR_le.
    ring_simplify; omega.

    intro i; rewrite i in b_pos; clear - b_pos; fourier. }

(* deduce the projections of val1 / val3 and val2 * val3 and that they
   are finite *)
destruct (div_finite RNE _ _ h3 h5 v3_not_zero no_ov_v1v3) as (v1v3_finite,to_real_v1v3).
destruct (div_finite RNE _ _ h4 h5 v3_not_zero no_ov_v2v3) as (v2v3_finite,to_real_v2v3).

(* project to real and conclude the proof using the monotonicity of
   round and monotonicity of the real multiplication *)
rewrite le_finite; auto.
rewrite to_real_v1v3, to_real_v2v3.
apply Round_monotonic.
unfold Rdiv; rewrite Rmult_comm, (Rmult_comm (t'real val1)).
apply Rmult_le_compat_neg_l; auto.
left; apply Rinv_lt_0_compat.
destruct (neg_finite fliteral3) as [finite neg_finite]. auto.
    rewrite neg_finite in *.
eapply Rle_lt_trans with (- t'real fliteral3); intuition.
split; auto. apply neg_finite; auto.
split; auto. apply neg_finite; auto.
split; auto. apply neg_finite; auto.
split; auto. apply neg_finite; auto.
Qed.
