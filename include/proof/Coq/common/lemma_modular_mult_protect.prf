intros pre.
Open Scope Z_scope.
Require Import SPARK.

(* rewrite hypotheses *)
pose (to_uint_bounds arg1) as arg1_type; clearbody arg1_type.
pose (to_uint_bounds arg2) as arg2_type; clearbody arg2_type.
pose (to_uint_bounds upper_bound) as upper_bound_type; clearbody upper_bound_type.
destruct arg1_type as (arg1_lb, arg1_ub), arg2_type as (arg2_lb, arg2_ub), upper_bound_type as (upper_bound_lb, upper_bound_up).
unfold ule in pre.

(* rewrite goal *)
unfold ule.
rewrite to_uint_mul.

(* split on cases of pre *)
destruct (Z.eq_dec (to_uint arg2) 0) as [arg2_zero|arg2_not_zero].

(* case arg2 is zero *)
* assert (0 <= to_uint arg1 * to_uint arg2 < SPARK_MAX_UINT_PLUS1) as zero_bound.
  rewrite arg2_zero, Z.mul_0_r.
  auto with zarith.
  pose (BV_Gen.mod1_out (to_uint arg1 * to_uint arg2) SPARK_MAX_UINT_PLUS1 zero_bound) as mul_in_bounds; clearbody mul_in_bounds.
  rewrite mul_in_bounds, arg2_zero, Z.mul_0_r.
  auto with zarith.

(* case arg2 is not zero *)
* destruct pre as [arg2_zero|arg1_le_arg2].
  rewrite arg2_zero in arg2_not_zero.
  rewrite to_uint_of_int in arg2_not_zero by auto with zarith.
  contradict arg2_not_zero.
  trivial.

  (* shared lemma for two subgoals (arg1 / arg2) * arg1 <= arg2 *)
  assert (to_uint arg1 * to_uint arg2 <= to_uint upper_bound) as shared_lemma.
  rewrite to_uint_udiv in arg1_le_arg2.
  unfold EuclideanDivision.div in arg1_le_arg2.
  case Z_le_dec as [hyp|neg_hyp] in arg1_le_arg2; [|contradict neg_hyp; apply Z_mod_lt; auto with zarith].
  assert (0 < to_uint arg2) as arg2_pos by auto with zarith.
  apply (div_then_mult _ _ _ arg2_pos upper_bound_lb arg1_le_arg2).

  rewrite BV_Gen.mod1_out.

  + exact shared_lemma.

  + auto with zarith.

Qed.
