intros (factor_type,(pre_val1_lt_val2,pre_val2_ub)).
Open Scope Z_scope.
Require Import SPARK.

(* rewrite hypotheses *)
pose (to_uint_bounds val1) as val1_type; clearbody val1_type.
pose (to_uint_bounds val2) as val2_type; clearbody val2_type.
unfold in_range in factor_type.
destruct val1_type as (val1_lb, val1_ub), val2_type as (val2_lb, val2_ub), factor_type as (factor_lb, factor_ub).
unfold ule in factor_lb, factor_ub, pre_val2_ub.
unfold ult in pre_val1_lt_val2.
rewrite to_uint_of_int in factor_lb, factor_ub by auto with zarith.
assert (0 < to_uint factor) as factor_pos by auto with zarith.

(* rewrite goal *)
unfold ult.
rewrite to_uint_mul, to_uint_mul.

(* shared lemma val2 * factor in bounds *)
assert (to_uint val2 * to_uint factor <= SPARK_MAX_UINT) as shared_lemma.
{
  rewrite to_uint_udiv, to_uint_of_int in pre_val2_ub by auto with zarith.
  unfold EuclideanDivision.div in pre_val2_ub.
  case Z_le_dec as [hyp|neg_hyp] in pre_val2_ub; [|contradict neg_hyp; apply Z_mod_lt; auto with zarith].
  assert (0 <= SPARK_MAX_UINT) as uint_max_nat by auto with zarith.
  apply (div_then_mult _ _ _ factor_pos uint_max_nat pre_val2_ub).
}

(* shared lemma val1 * factor < val2 * factor *)
assert (to_uint val1 * to_uint factor < to_uint val2 * to_uint factor) as inter_ineq.
{
  apply (Zmult_lt_compat_r _ _ _ factor_pos pre_val1_lt_val2).
}

rewrite BV_Gen.mod1_out, BV_Gen.mod1_out.

(* val1 * factor < val2 * factor *)
* exact inter_ineq.

(* no overflow in val2 * factor *)
* split; auto with zarith. (* use shared_lemma here *)

(* no overflow in val1 * factor *)
* split; auto with zarith. (* use inter_ineq here *)

Qed.
