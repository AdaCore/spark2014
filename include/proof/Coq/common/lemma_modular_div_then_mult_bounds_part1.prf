(* not used anymore, as Alt-ergo manages to prove Lemma_Modular_Div_Then_Mult_Bounds_Part1 *)

intros dummy0 arg2_type dummy Heq.
Open Scope Z_scope.
Require Import SPARK.

(* rewrite hypotheses *)
pose (to_uint_bounds arg1) as arg1_type.
pose (to_uint_bounds res) as res_type.
unfold dynamic_invariant1, in_range in arg2_type.
destruct arg1_type as (arg1_lb, arg1_ub),
         arg2_type as (arg2_lb, arg2_ub),
         res_type as (res_lb, res_ub); auto.
unfold ule in *.
rewrite rliteral_axiom2 in arg2_lb.
rewrite rliteral_axiom1 in arg2_ub.

assert (0 < t'int arg2) as arg2_pos by auto with zarith.

(* shared lemma: no overflow in (arg1 / arg2) * arg2 *)
assert (0 <= (t'int arg1 / t'int arg2) * t'int arg2 <
       (* Problem with cpp not replacing variable here *)
       SPARK_MAX_UINT_PLUS1) as no_ovfl_div_mul.
split.
{ assert (t'int arg2 > 0) as arg2_pos2 by auto with zarith.
  assert (0 <= t'int arg1 / t'int arg2) as div_nat.
  apply (Z_div_pos _ _ arg2_pos2 arg1_lb).
  apply (Zmult_gt_0_le_0_compat _ _ arg2_pos2 div_nat).
}
{
  assert (t'int arg1 / t'int arg2 * t'int arg2 <= t'int arg1) as inter_ineq.
  apply (div_mul_le _ _ arg1_lb arg2_pos).
  auto with zarith.
}

(* shared lemma: res <= arg1 *)
assert (t'int res <= t'int arg1) as res_le_arg1.
rewrite Heq. rewrite to_uint_mul, to_uint_udiv.
unfold EuclideanDivision.div.
case Z_le_dec; [intros|intros neg_hyp; contradict neg_hyp; apply Z_mod_lt; auto with zarith].
rewrite BV_Gen.mod1_out.
(* apply theorem *)
{ apply (div_mul_le _ _ arg1_lb arg2_pos). }
(* no overflow in (arg1 / arg2) * arg2 *)
{ exact no_ovfl_div_mul. }


(* 2 different checks have the same generated Coq file *)
(* First proof *)

try (unfold ule; exact res_le_arg1);
(* Second proof *)
(try unfold ult; try intros;
try rewrite to_uint_sub_bounded; [| omega];
try rewrite Heq;
try rewrite to_uint_mul;
try rewrite to_uint_udiv;
try unfold EuclideanDivision.div;
try case Z_le_dec; [intros|intros neg_hyp; contradict neg_hyp; apply Z_mod_lt; auto with zarith];
try rewrite BV_Gen.mod1_out; eauto;
try rewrite <- Zmod_eq_full; try apply Z_mod_lt; omega).
Qed.
