destruct fliteral_axiom1 as [fliteral1_finite l_real1].
destruct fliteral_axiom2 as [fliteral2_finite l_real2].
destruct fliteral_axiom3 as [fliteral3_finite l_real3].

(* project the le predicate on float to inequalities on reals *)
rewrite le_finite in h4, h5, h6, h7, h8, h9, h10; auto.

(* lemma to help prove that abs (to_real val3) <= to_real l4 below *)
assert (t'real fliteral3 <= t'real val3) as l4_le_v3.
{ rewrite l_real3, l_real2 in *.
  apply Rle_trans with (r2:=0); [|fourier]. fourier.
}
(*
  left; apply Ropp_lt_gt_0_contravar.
  prove_sup0. }
*)

(* proof that val1 * val3 does not overflow to be able to use mul_finite *)
assert (no_overflow RNE (t'real val1 * t'real val3)) as no_ov_v1v3.
{ apply Bounded_real_no_overflow.
  apply Abs.Abs_le.
  apply Rle_trans with (r2:=t'real fliteral2 * t'real fliteral2); auto.
  rewrite Abs.Abs_prod.
  apply Rmult_le_compat; try (apply Abs.Abs_pos).
  destruct (neg_finite fliteral2) as [finite neg_finite]. auto. rewrite neg_finite in *. auto.
  rewrite Abs.Abs_le. auto.
  rewrite Abs.Abs_le. rewrite l_real3 in *; split; auto. apply Rle_trans with (0/10); auto.
  fourier. }

(* proof that val2 * val3 does not overflow to be able to use mul_finite *)
assert (no_overflow RNE (t'real val2 * t'real val3)) as no_ov_v2v3.
{ apply Bounded_real_no_overflow.
  apply Abs.Abs_le.
  apply Rle_trans with (r2:=t'real fliteral2 * t'real fliteral2); auto.
  rewrite Abs.Abs_prod.
  generalize (neg_finite fliteral2); intros. destruct H; auto.
  apply Rmult_le_compat; try (apply Abs.Abs_pos);
      rewrite Abs.Abs_le; split; auto; fourier.
}

(* deduce the projections of val1 * val3 and val2 * val3 and that they
   are finite *)
destruct (mul_finite RNE _ _ h1 h3 no_ov_v1v3) as (v1v3_finite, v1v3_real).
destruct (mul_finite RNE _ _ h2 h3 no_ov_v2v3) as (v2v3_finite, v2v3_real).

(* project to real and conclude the proof using the monotonicity of
   round and monotonicity of the real multiplication *)
rewrite le_finite; auto.
rewrite v1v3_real, v2v3_real.
apply Round_monotonic.
apply Rmult_le_compat_r.
rewrite l_real3 in h8; fourier.
fourier.
split; auto. apply neg_finite. auto.
split; auto. apply neg_finite. auto.
Qed.
