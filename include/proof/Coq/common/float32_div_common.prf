(* Import tactics & lemmas dealing with reals inequality *)
Require Import Fourier.
(* Import lemmas dealing with floats, in particulpar Z2R and
   associated lemmas which will help us quickly prove rersults on
   bigfloats that are integers *)
Require Import Flocq.Core.Fcore.

(* We define a and b, the denominator and numerator of l4, as the
   conversion of two big integers, and prove that they are positive.
   This will let us share the rest of the proof between 32-bit and
   64-bit division.
   Note that we go through Z to prove the inequality which is *much*
   faster, and even more for 64-bit values, than proving it with
   reals. *)
set (a:=Z2R 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
assert (0 < a) as a_pos by (now apply (Z2R_lt 0)).

set (b:=Z2R 10842021724855044340074528008699417114257812500000000000000000000000).
assert (0 < b) as b_pos by (now apply (Z2R_lt 0)).

(* We provide the Z value of l2 as well as the max of floats, again to
   be able to share the proof between 32/64 bits. *)
assert (to_real l2 = Z2R 9223372036854775808) as l2_Z2R by (rewrite l_real2; auto).
assert (33554430 * 10141204801825835211973625643008 = Z2R 340282346638528859811704183484516925440)
  as maxfloat_Z2R by (ring_simplify; auto).
