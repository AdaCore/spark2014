intros dummy arg2_type pre.
Open Scope Z_scope.
Require Import SPARK.

(* rewrite hypotheses *)
pose (to_uint_bounds arg1) as arg1_type.
unfold dynamic_invariant, in_range in arg2_type.
destruct arg1_type as (arg1_lb, arg1_ub), arg2_type as (arg2_lb, arg2_ub); eauto.
unfold ule in arg2_lb, arg2_ub.
rewrite rliteral_axiom2 in arg2_lb.
rewrite rliteral_axiom1 in arg2_ub.
assert (0 < t'int arg2) as arg2_pos by auto with zarith.
unfold ule in pre.
rewrite to_uint_udiv, rliteral_axiom1 in pre.
unfold EuclideanDivision.div in pre.
case Z_le_dec in pre; [|contradict n; apply Z_mod_lt; auto with zarith].

(* rewrite goal *)
apply to_uint_extensionality.
rewrite to_uint_urem.
rewrite to_uint_mul.
assert (t'int arg1 * t'int arg2 <= SPARK_MAX_UINT) as no_ovfl_mult.
assert (0 <= SPARK_MAX_UINT) as uint_last_nat by auto with zarith.
apply (div_then_mult _ _ _ arg2_pos uint_last_nat pre).
assert (EuclideanDivision.mod1 (t'int arg1 * t'int arg2) SPARK_MAX_UINT_PLUS1 = t'int arg1 * t'int arg2) as mod_noop_on_mult.
rewrite BV_Gen.mod1_out by auto with zarith.
trivial.
rewrite mod_noop_on_mult.

(* apply theorem *)
assert (EuclideanDivision.mod1 (t'int arg2 * t'int arg1 + 0) (t'int arg2) = EuclideanDivision.mod1 0 (t'int arg2)) as mod_is_zero.
apply (EuclideanDivision.Mod_mult _ _ _ arg2_pos).
replace (t'int arg1 * t'int arg2) with (t'int arg2 * t'int arg1) by auto with zarith.
replace (t'int arg2 * t'int arg1) with (t'int arg2 * t'int arg1 + 0) by auto with zarith.
rewrite mod_is_zero, rliteral_axiom by auto with zarith.
assert (t'int arg2 <> 0) as arg2_not_zero by auto with zarith.
apply (EuclideanDivision.Mod_0 _ arg2_not_zero).

Qed.
