intros (arg2_type,pre).
Open Scope Z_scope.
Require Import SPARK.

(* rewrite hypotheses *)
pose (to_uint_bounds arg1) as arg1_type.
unfold in_range in arg2_type.
destruct arg1_type as (arg1_lb, arg1_ub), arg2_type as (arg2_lb, arg2_ub).
unfold ule in arg2_lb, arg2_ub.
rewrite to_uint_of_int in arg2_lb, arg2_ub by auto with zarith.
assert (0 < to_uint arg2) as arg2_pos by auto with zarith.
unfold ule in pre.
rewrite to_uint_udiv, to_uint_of_int in pre; [|auto with zarith].
unfold EuclideanDivision.div in pre.
case Z_le_dec in pre; [|contradict n; apply Z_mod_lt; auto with zarith].

(* rewrite goal *)
apply to_uint_extensionality.
rewrite to_uint_urem.
rewrite to_uint_mul.
assert (to_uint arg1 * to_uint arg2 <= SPARK_MAX_UINT) as no_ovfl_mult.
assert (0 <= SPARK_MAX_UINT) as uint_last_nat by auto with zarith.
apply (div_then_mult _ _ _ arg2_pos uint_last_nat pre).
assert (EuclideanDivision.mod1 (to_uint arg1 * to_uint arg2) SPARK_MAX_UINT_PLUS1 = to_uint arg1 * to_uint arg2) as mod_noop_on_mult.
rewrite BV_Gen.mod1_out by auto with zarith.
trivial.
rewrite mod_noop_on_mult.

(* apply theorem *)
assert (EuclideanDivision.mod1 (to_uint arg2 * to_uint arg1 + 0) (to_uint arg2) = EuclideanDivision.mod1 0 (to_uint arg2)) as mod_is_zero.
apply (EuclideanDivision.Mod_mult _ _ _ arg2_pos).
replace (to_uint arg1 * to_uint arg2) with (to_uint arg2 * to_uint arg1) by auto with zarith.
replace (to_uint arg2 * to_uint arg1) with (to_uint arg2 * to_uint arg1 + 0) by auto with zarith.
rewrite mod_is_zero, to_uint_of_int by auto with zarith.
assert (to_uint arg2 <> 0) as arg2_not_zero by auto with zarith.
apply (EuclideanDivision.Mod_0 _ arg2_not_zero).

Qed.
