-------------------------------------------------------------------------------
--            HI-LITE BUILD INSTRUCTIONS FOR ADACORE DEVELOPERS              --
--                                                                           --
--                            Unix / Linux                                   --
-------------------------------------------------------------------------------

To build Hi-Lite on a Unix / Linux machine, you need the following products:

   - GNAT Pro compiler with sources
   - GNATcoll (gnatlib)
   - Ocaml
   - Ocamlgraph
   - Alt-Ergo
   - Why3

The following instructions explain how to obtain and install these products.
The final directory structure of all related products is:

   <Root>
    |
    +--- local --- bin
    |
    +--- gnat
    |
    +--- gnatlib
    |
    +--- hi-lite
         |
         +--- ocaml-XYZ
         |
         +--- ocamlgraph-XYZ
         |
         +--- alt-ergo-XYZ
         |
         +--- why-XYZ

1) Create an Open-DO Forge account
   1.1) Visit the following website

      http://forge.open-do.org

   1.2) Click "new account" in the top right corner. Fill in the appropriate
      fields and follow the instructions to verify your e-mail address.

   1.3) Click "Projects" in the top left corner and click on "Hi-Lite".

   1.4) Click "Request to join" on the right side of the web page. Follow the
      instructions and click "Submit". The project admin will add you to the
      team.

2) Hi-Lite sources
   2.1) Once a member of the Hi-Lite development team, clone the following
      repository in directory <Root>

      git clone --recursive git+ssh://<Developer>@scm.forge.open-do.org//scmrepos/git/hi-lite/hi-lite.git

      where <Developer> denotes your Open-DO Forge user name. This step creates
      directory <Root>/hi-lite.

   2.2) Initialize and get the sources for the Why3 and Alt-Ergo submodules

      $ cd <Root>/hi-lite
      $ git submodule init
      $ git submodule update

3) GNAT Pro compiler with sources
   3.1) Check out

      $ svn co svn+ssh://svn.us.adacore.com/Dev/trunk/gnat

      in directory <Root>. This step creates directory <Root>/gnat.

   Steps 3.2 and 3.3 are optional; you do not need to install the latest
   compiler, it is sufficient to install a recent wavefront of GNAT Pro from a
   nightly build. For the following (in particular step 9), we only need the
   GNAT sources.

   3.2o) Build the compiler.

      $ cd <Root>/gnat
      $ make setup
      $ make all

   3.3o) Export the compiler.

      $ export PATH=<Root>/local/bin:$PATH

4) GNATcoll
   4.1) Check out

      $ svn co svn+ssh://svn.eu.adacore.com/Dev/trunk/gps/gnatlib

      in directory <Root>. This step creates directory <Root>/gnatlib.

   4.2) Configure gnatlib

      $ ./configure --prefix=<Root>/local --with-python=/<machine>.a/gnatmail/gcc-45/install-<machine>/python --disable-shared

      where <Root> denotes a full path and <machine> denotes the machine name
      (Ex: kwai).

      OR, if you don't need to build gnatmerge:

      $ ./configure --prefix=<Root>/local --without-python

      Make sure that gnatlib is configured with projects support, which can be
      seen in the output of the configure command:
        configure:  Projects: yes

   4.3) Build gnatlib

      $ make

   4.4) Install gnatlib

      $ make install

5) Ocaml
   5.1) Visit the following website

      http://caml.inria.fr/download.en.html

      and download the "Windows and Unix systems" gzipped tarball.

   5.2) Extract the archive in directory <Root>/hi-lite. This step creates
      directory <Root>/hi-lite/ocaml-<XXX> where <XXX> is the version number.

   5.3) Configure Ocaml

      $ cd <Root>/hi-lite/ocaml-<XXX>
      $ ./configure -prefix <Root>/local

      where <Root> denotes a full path.

   5.4) Build Ocaml

      $ make world
      $ make opt

   5.5) Install Ocaml

      $ make install

6) Ocamlgraph
   6.1) Visit the following website

      http://ocamlgraph.lri.fr

      and download the tarball under section "Distribution".

   6.2) Extract the archive in directory <Root>/hi-lite. This step creates
      directory <Root>/hi-lite/ocamlgraph-<XXX> where <XXX> is the version
      number.

   6.3) Configure Ocamlgraph

      $ cd <Root>/hi-lite/ocamlgraph-<XXX>
      $ ./configure --prefix=<Root>/local

      where <Root> denotes a full path.

   6.4) Build Ocamlgraph

      $ make

   6.5) Install Ocamlgraph

      $ make install

7) Alt-Ergo

   7.1) Configure Alt-Ergo

      $ cd <Root>/hi-lite/alt-ergo
      $ ./configure --prefix=<Root>/hi-lite/install

      where <Root> denotes a full path.

   7.2) Build Alt-Ergo

      $ make

   7.3) Install Alt-Ergo

      $ make install

8) Why3

   8.1) Configure Why3

      $ cd <Root>/hi-lite/why3
      $ ./configure --prefix=<Root>/hi-lite/install --enable-relocation --disable-gui

      where <Root> denotes a full path.

   8.2) Build Why3

      $ make

   8.3) Install Why3

      $ make install

9) ASIS
   Get a source package that has the same version as your installation of GNAT.
   Then build it and set your GPR_PROJECT_PATH to the root of the source
   package:

   $ make all gu_tools
   $ export GPR_PROJECT_PATH=$PWD:$GPR_PROJECT_PATH

10) Build gnat2why, gnatprove, gnatmerge

   Detailed information can be found in the main Makefile. The short version
   is:

   $ ln -s <Root>/gnat gnat_backends/gnat_src
   $ make
   $ export PATH=<Root>/hi-lite/install/bin:$PATH
   $ make stdlib
   $ make install
   $ make gnatmerge install-gnatmerge

11) Install AdaCore python

   Get the version that corresponds to your system:

   svn+ssh://svn.eu.adacore.com/Dev/trunk/binaries/python/2.7/distrib

12) Install gnatpython

   Follow the instructions at:
   https://www2.adacore.com/internal.auth/gnatpython-docs/introduction.html#installation

13) Run the testsuite

   $ cd <Root>/hi-lite/testsuite/gnatprove
   $ ./run-tests

   OR

   $ ./run-tests -j n
   where n is a sufficiently high number, eg. n = 5

   OR (for a quicker partial check)

   $ ./run-tests --quick

   OR (for the same partial check, even faster)

   $ ./run-tests --quick -j n

14) Run the ACATS testsuite on gnatprove
   14.1) Check out

      $ svn co svn+ssh://svn.us.adacore.com/Dev/trunk/gnatmail/testsuites/acats

      in directory <Root>. This step creates directory <Root>/acats

   14.2) Run

      $ cd <Root>/acats
      $ ./run_acats_test.py --mode=gnatprove-check

15) Obtain a coverage report

   15.1) Compile gnat2why with coverage information and run the testsuite

      $ make coverage

   15.2) Open up gps and look at the coverage report

      $ gps
      Tools -> Coverage -> Gcov -> Compute coverage files
