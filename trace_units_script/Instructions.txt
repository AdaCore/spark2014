1) The script takes a list of files and/or directories as arguments
   and recursively looks for files that end in ".rst", ".ads", ".adb"
   and ".ada".  If no arguments are presented, then the script
   assumes that the argument is the current path ('.'). Then it
   checks the trace units in the ".rst" files against trace units in
   the other files (".ads", ".adb", ".ada").

   If you are running the script from within the SPARK2014 repository,
   then give ".." as an argument.

2) Duplicate files are not taken into consideration.

3) The script does not get affected by wrong spaces.

4) Trace Units in tests must be followed either by a blank line, by
   code or by another trace unit (must not have an irrelevant comment
   directly after a TU, because it will make the script think that
   the comment is part of the TU).

   Example of a TU in a test:

     --  TU: 9. Each ``mode_selector`` shall occur at most once in a single
     --  Global aspect.

5) After the script gets executed, a csv file is created that says
   which TU was found where. This allows us to find which test covers
   which TU. I use LibreOffice to read this file (set the
   separator to comma ',' and the delimiter to double-quote '"').

6) If you want to add a TU in the LRM for which you do not
   want to have a corresponding test, then add either:

     "-cbatu-"     (stands for Checked By Another Trace Unit)

                             or

     "-nt-"        (not tested/testable)

7) Explanation of prefixes in SPARK rm:

     "_tu-"   stands for trace unit.
     "_etu-"  stands for end trace unit
     "-fa-"   means this trace unit is tested by flow analysis
     "-fe-"   means this trace unit is tested by the front end
     "-pr-"   means this trace unit is tested by proof
     "-sf-"   means this trace unit is tested by SPARK filter (spark_definition)

   A trace unit is made out of all the text that exists either between
   a "_tu-" prefix and an "_etu-" prefix or between two subsequent
   "_tu-" prefixes.

   Any text that directly follows the aforementioned prefixes and
   which is not in itself a prefix does not affect the behaviour of
   the trace units script. However, for readability and consistency
   reasons it is recommended that people add some text that is
   indicative of the section and the specific kind of rules that are
   being covered.

   Example of TUs in the LRM:

     .. centered:: **Legality Rules**

     .. _tu-fe-contract_cases-01:

     1. A Contract_Cases aspect may have at most one **others**
        ``contract_case`` and if it exists it must be the last one in the
        ``contract_case_list``.

     .. _tu-fe-contract_cases-02:

     2. A ``consequence`` expression is considered to be a postcondition
        expression for purposes of determining the legality of Old or
        Result ``attribute_references``.

     .. _etu-contract_cases-lr:

     .. centered:: **Static Semantics**

     .. _tu-fe-contract_cases-03:

     3. A Contract_Cases aspect is an assertion (as defined in RM
        11.4.2(1.1/3)); its assertion expressions are as described
        below. Contract_Cases may be specified as an
        ``assertion_aspect_mark`` in an Assertion_Policy pragma.

     .. _etu-contract_cases-ss:
