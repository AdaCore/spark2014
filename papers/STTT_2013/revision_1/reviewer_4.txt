SECTION I: SUMMARY AND RECOMMENDATION

SUMMARY OF EVALUATION

        Good

RECOMMENDATION

Score

Please select your score:

        Author should prepare a major revision(3)

Confidence

Please select your confidence:

        High(3)

SECTION II: COMMENTS TO BE WITHHELD FROM AUTHOR(S)

SECTION III: OVERVIEW

READER INTEREST

1. Is the paper of current interest to a reasonable segment of the journal?

        Yes

2. Relative to the current level of reader interest in the paper, how is this
interest likely to

change during the next five years?

        Relatively little change

3. Within its particular field of specialization, is the topic of the paper
considered important?

        Yes, definitely

CONTENT

1. Is the paper technically sound? (not necessary for style review

        Yes

2. How would you describe the technical depth of the paper

        Suitable for the non-specialist

3. Does the paper make a tangible contribution to the state-of-the-art in its
field?

        To a limited extent

4. Is the bibliography adequate?

        Yes, after certain additions and,or deletions (see Detailed Comments)

5. To what extent is the material in the paper likely to be used by other
researchers and

practitioners?

        Average

PRESENTATION

1. Is the abstract an appropriate and adequate digest of the work presented?

        Yes

2. Does the introduction clearly state the background and motivation in terms

understandable to the non-specialist?

        Yes

3. How would you rate the overall organization of the paper?

        Satisfactory

4. Relative to the technical content, is the length of the paper appropriate?

        Yes

5. Is the English satisfactory

        Yes

6. How readable is the paper for a computer scientist or engineer who is not a
specialist in

this particular fie

        Readable with ordinary effort

7. Disregarding the technical content, how would you regard the quality of
presentation?

        Good

SECTION IV: DETAILED COMMENTS

Please elaborate on your judgment:

(This section will be sent to the corresponding author)




The paper provides an interesting insight into the world of SPARK and
GNATprove, illustrated by the application of the tools to the examples
of the VerifyThis 2012 verification competition. The paper discusses
many practical and pragmatical aspects of verification that are
important  when applying a tool in practice. In particular, the
combination with run-time checking (executable specs) is interesting.

On the negative side, the authors should add detail at key points, as
well as make some of their statements more precise (see below).
Altogether, I recommend a major revision of the paper.


General remarks:


The authors should make it more clear (resp. add this information where
appropriate) as to what has been achieved during the competition itself
and what in the aftermath. The relation between different versions
should be traced with more detail.

The reader is curious why you did not tackle challenge 3. This curiosity
is not satisfied by the paper.

Editing should be tightened up. It feels like there is some redundancy
in the introduction, where the certain general tenets make repeated
appearance.

In many places the authors make broad claims without providing
explanations, justifications, or context (see below).

The discussion of the semantics of data types and annotations should be
made more precise, more detailed, and maybe also consolidated in one
place (see below).

The discussion of executable specifications and how they were used
during the competition needs to be deepened.

Related work on integer handling for verification and combining tests
and proofs is ignored. These are not novel issues/solutions, but making
them usable can very well be.

I would like to learn more about the connection to the underlying
theorem prover platform.


Detailed remarks and wording issues:


Abstract
"cost competitive" -> "cost-competitive"

"At the heart [...] is [...] contracts". Plural-singular coordination?

p.1

"safety critical" -> "safety-critical"

"As predicted in..." There are 3 occurrences of "competition" in this
small para.

"there are still some remaining challenges" This is somewhat of an
understatement.

"We would like to identify". You do or merely would like to?

p.2

"on same the same"

The relationship between Ada and SPARK should be briefly explained early in
the paper. Currently, Ada makes the first appearance in the title of
Section 2.1.

"and a list of aspects" Is "aspects" a technical term? If so, please
define - otherwise rephrase.

"The expression of specifications is made easier by new
expression forms". Awkward repetition of "expression".

The para starting with "Expression functions define..." is unclear. What
is a "single" expression? The next sentence is also unclear. Are you
describing what is typically known as pure/side-effect-free functions?

"The SPARK semantics are easier to work with for programmers." This is
something that you should definitely explain in more detail. Also, it
should probably be "is easier".

p.3

"the point where this increase matters" Please expound.

"Note that the cases above are disjoint and complete, as expected" Is
this something checked by SPARK? If not, what happens, if the cases are
not disjoint and complete? Please expound and be more clear.

"is manda-" overfull hbox.

"testing - all based" This is a hyphen, not an appropriate dash.

"This requires coverage analysis such as MC/DC." MC/DC is not an
analysis. Please clarify.

"Formal methods can help to verify that no anomalous behaviour will
occur, for example it can be used prove the absence of run-time errors."
Run-on sentence, "used prove", unclear "it" reference. Rephrase.

"Formal methods can also be used to show compliance between a program's
actual and intended behaviour." While formal methods can do this to an
extent, this is a bold claim, as the intended behavior is something
informal. Please clarify the claim or expound your evidence.

"a proof of program correctness is comparable to exhaustive analysis
achieving 100% coverage" This is not the full truth as proofs can be
vacuous due to contradictory requirements or unsoundness of the proof
system. Please clarify the claim or expound your evidence.

"From RTCA [RTC11]:" Please add context.

p.4

"section 2" -> "Section 2"

For the reader to fully appreciate the Sqrt example, it is necessary
that you explain briefly the semantics of integers in Ada/SPARK, in
particular with respect to data type bounds.

"The notion of preconditions and postconditions was first introduced by
Hoare..." It seems that some of this material should be moved earlier in
the text.

"For formal program verification, assertions have typically been
interpreted as formulae in classical first-order logic. This is not
consistent with the run-time assertion checking semantics." The
difference between the two semantics should be (better) explained in the
paper.

"i.e." -> "i.e.,"

There are several mentions of robustness testing together with contracts
on this page. This needs clarification - maybe a definition of
robustness testing would help. The problem is that the postcondition of
the contract can only be used as a test oracle, if the precondition is
satisfied. This seems to be in conflict with robustness testing. Please
expound.

"When [...], remember in do-178c-terms..." Awkward wording.

p.5

"we are building the verification tools using the GNAT compiler," Please
clarify in what way exactly you are "using" the compiler here. It might
also make sense to end the sentence here and start a new one with "see
[KSD12]..."

"we have the option to implement a solution for this" Awkward wording.

"compiler GNAT" -> "GNAT compiler"

"Ada standard supports this approach" Unclear which approach.

"...and executable semantics for the program" Unclear.

"Minimized mode: larger base type (64bits) used when needed" Please
explain "when needed". The discussion of integer semantics needs to be
tightened up and maybe also consolidated throughout the paper.

p.6

"The former is obtained by restricting SPARK 2014 to a subset  of
Ada..." Move to the front?

"GNATprove relies heavily on the features of the Why3 language" Why3 has
not been introduced so far. Please do so, preferably explaining the
peculiarities of this pairing (What? Why? How?).

The whole passage starting with "For example, the VCs are kept small" is
unclear. Please clarify.

"one can choose to produce fewer but more complex VCs" Why? Please
explain.

The relation/differences between timestamps and hashes is not clear at
all. Both are mechanisms to avoid work duplication. Please clarify.

The para before Section 6.1 is confusing. Please clarify what, when, and
why has happened.


"The type Text is an array of integers with unknown bounds." The program
text seems to suggest instead that the array index is in range of
1..10^6. Am I misunderstanding something?

p.7

"The initial solution without annotations" What is the "initial"
solution?

Spec of Downsweep: does SPARK have support for sum comprehensions? You
define your own later, but this could be discussed already here.

p.8

"Note that the contracts of all previous procedures and functions
contain calls to function All_Elements_In..." Is this to avoid
overflowing the sum? If so, please state clearly here.

"for the simple property of the Upsweep procedure" -> "for one simple(r)
property" maybe?

"but it is our experience that existential quantification is difficult
for the automatic provers that we have available." Is this really true
in this context? You are using the existential quantifier in the
precondition, so the prover does not really have to find a witness. I
wonder.

p.9

The passage right before Section 6.4 is unclear. The problem seems to
appear whenever you are describing the history of your development (with
SPARK 2005, with SPARK 2014, etc.). Please be more clear.

"The run-time error raised" -> "The raised run-time error"

The whole passage at the beginning of Section 6.4 is difficult to
follow. In particular, the reader has to piece together if the errors
found were in the specification or in the code. As this is an important
passage, please make it very clear.

"Another very useful feature for these challenges was the ability to
eliminate completely all possibilities of numeric overflow in
annotations" Unclear. What feature? Why useful for these challenges?

There is a line break between "challenge" and "2".

Overfull hbox.

"A minimal flow analysis is always required for the soundness of proofs"
Why? Please expound.

p.11

What exactly are the references Bar12b and DCKP12? Please clarify.
