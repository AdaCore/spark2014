Report 007-R-14

Default
SECTION I: Summary and Recommendation

Summary of Evaluation

Overall quality is:

Good
Score

Please select the score of the paper.

Mild Accept
Confidence

Please select your confidence.

High
SECTION III: Overview

Reader Interest

1. Is the paper of current interest to a reasonable segment of the journal?

Yes

2. Relative to the current level of reader interest in the paper, how is this
interest likely to change during the next five years?

Growing interest

3. Within its particular field of specialization, is the topic of the paper
considered important?

Yes, definitely
Content

1. Is the paper technically sound?
(not necessary for style review)

Yes

2. How would you describe the technical depth of the paper?

Appropriate for someone working in the field

3. Does the paper make a tangible contribution to the state-of-the-art in its
field?

To a limited extent

4. Is the bibliography adequate?

Yes

5. To what extent is the material in the paper likely to be used by other
researchers and practitioners?

Average
Presentation

1. Is the abstract an appropriate and adequate digest of the work presented?

Yes

2. Does the introduction clearly state the background and motivation in terms
understandable to the non-specialist?

Yes

3. How would you rate the overall organization of the paper?

Satisfactory

4. Relative to the technical content, is the length of the paper appropriate?

Yes

5. Is the English satisfactory

Yes

6. How readable is the paper for a computer scientist or engineer who is not a
specialist in this particular field

Readable with ordinary effort

7. Disregarding the technical content, how would you regard the quality of
presentation?

Good
Section IV: Detailed Comments for Author(s)

Mandatory, please elaborate on your judgement.

This paper gives an overview of SPARK 2014 and its companion tool
GNATprove (a redesign by Altran and Adacore of the SPARK language and
its tools) using problems from the VerifyThis 2012 competition. It
describes features that allowed the second author to win the prize of
user-assistance tool feature at the VerifyThis 2012 competition.

This is a nice paper. It would make a nice contribution to the special
issue if accepted (and provided the issues described below are fixed
or clarified).

Pros

- This is a nice tool paper to introduce GNATprove.

- GNATprove features executable specifications and the paper discusses
this design choice in many details, using examples from the
competition to do so.

Cons

- The paper only addresses the first two problems of VerifyThis 2012,
and only the first one is provided a complete solution.

- The paper does not describe the challenges either, and thus is not
standalone. I suggest this is fixed in the final version.

- The discussion regarding the semantics of integers in annotations
(Section 4 page 5) is not that convincing. I understand the tension
between the desire of having a mathematical semantics on one side
and the problem of executing annotations on the other side. But
providing several modes, that is several semantics, raises issues
(what if one mode if used for one part of the proof and another mode
for another part) that need to be cleared out.

Various points could be clarified. Here are some comments:

- page 2: please give a reference (or URL) for the competition

- page 2: "INRIA" -> "Inria"

- page 2: "same the same"

- page 2: what is "Index'Last"?

- page 2: "only on a bounded domain" -> be more precise

- page 2: "A loop invariant can be inserted anywhere ... The former
only has to hold when execution reaches the corresponding program
point" -> so what is the difference wrt an assertion?

- page 3: ", see section 6" -> "(see Section 6)"

- page 3: "Like for loop invariants, the point where this increase matters
is the program point where the loop variant appears in the code." ->
wrt to which other program point?

- page 3: "JML[BCC+05" (missing space)

- page 3: "it can be used prove"

- page 4: "has such semantics" -> "have"?

- page 4: "If the chosen method is testing... If the chosen
verification method ..." -> this discussion is quite unclear

- page 5:
- "larger base type (64bits) used when needed" -> please explain "when needed"
- "use bignum library in the remaining cases" -> please explain "in
the remaining cases"

- page 6: "those features which render automatic verification
impossible or very hard" -> I don't understand why "exceptions" and
"side-effects in expressions" are listed in those features

- page 6, function LCP: to deduce the postcondition X + LCP’Result = A’Last +
1
from the negation of the test of the while loop, that is X+L >
A'Last, it looks like we are missing information (such as a loop
invariant X+L <= A'Last+1 for instance)

- page 7: "Since L is of a bounded type (the scalar type Natural of
natural numbers)" -> it may be wise to recall that these "natural
numbers" are bounded

- page 7: "In order to make automatic proof possible, we fix the length
of the array to 8" -> please explain

- page 7, right bottom: why not replacing all these equalities "A(0)=0
and then ..." with bounded quantifications?

- page 9: there is a huge overfull hbox ("SPARK2014" in the right
column)
