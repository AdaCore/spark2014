Actioned comments from reviewer 1

from Report 007-R-14
---

> - The paper only addresses the first two problems of VerifyThis 2012,
> and only the first one is provided a complete solution.
>
> - The paper does not describe the challenges either, and thus is not
> standalone. I suggest this is fixed in the final version.

Fixed. Added sections 6.1, 6.2 and 6.4.

>
> - The discussion regarding the semantics of integers in annotations
> (Section 4 page 5) is not that convincing. I understand the tension
> between the desire of having a mathematical semantics on one side
> and the problem of executing annotations on the other side. But
> providing several modes, that is several semantics, raises issues
> (what if one mode if used for one part of the proof and another mode
> for another part) that need to be cleared out.

Good point, have now explained profiles, at the end of section 4. Integer
semantics is a sensitive issue.

> Various points could be clarified. Here are some comments:
>
> - page 2: please give a reference (or URL) for the competition
>

Fixed.

> - page 2: "INRIA" -> "Inria"

Fixed.

>
> - page 2: "same the same"
>

Fixed.

> - page 2: what is "Index'Last"?
>

Fixed.

> - page 2: "only on a bounded domain" -> be more precise
>

Fixed.

> - page 2: "A loop invariant can be inserted anywhere ... The former
> only has to hold when execution reaches the corresponding program
> point" -> so what is the difference wrt an assertion?
>

Fixed.

> - page 3: ", see section 6" -> "(see Section 6)"
>

Fixed.

> - page 3: "Like for loop invariants, the point where this increase matters
> is the program point where the loop variant appears in the code." ->
> wrt to which other program point?

Explained loop invariants more.

>
> - page 3: "JML[BCC+05" (missing space)
>

Fixed.

> - page 3: "it can be used prove"

Fixed.

>
> - page 4: "has such semantics" -> "have"?

Fixed.

>
> - page 4: "If the chosen method is testing... If the chosen
> verification method ..." -> this discussion is quite unclear

Left as is, could be better.

>
> - page 5:
> - "larger base type (64bits) used when needed" -> please explain "when
> needed" - "use bignum library in the remaining cases" -> please explain
> "in the remaining cases"
>

Fixed.

> - page 6: "those features which render automatic verification
> impossible or very hard" -> I don't understand why "exceptions" and
> "side-effects in expressions" are listed in those features
>

Reworded.

> - page 6, function LCP: to deduce the postcondition X + LCP’Result = A’Last
> + 1
> from the negation of the test of the while loop, that is X+L >
> A'Last, it looks like we are missing information (such as a loop
> invariant X+L <= A'Last+1 for instance)

The postcondition as an implication:
 X + LCP /= A'Last + 1 and Y + LCP /= A'Last + 1 -> A(X + LCP) /= A(Y +LCP)

I find it easier to read the postcondition as an implication
(considered changing this). Also, don't forget the precondition.

Consider these two cases of negative while condition:

1) The while loop is never entered (L = 0, X + L <= A'Last (precondition),
Y + L <= A'Last (precondition), A(X + L) /= A(Y + L) (negative while condition)) In this case the RHS of implication in postcondition is trivially true.

2) The while loop has been entered before (L /= 0, X + (L-1) <= A'Last
(while condition previous iteration), Y + (L-1) <= A'Last (while
condition previous iteration). If now for example X + L > A'Last, we
can deduce that X + L = A'Last + 1 and LHS of postcondition false.

I have also clarified in section 2.2 the semantics of SPARK loop
invariants compared to classic loop invariants. Think of them as
asserts and VCs as paths between asserts. So there are two different
VCs for 1) and 2) above. 2) corresponds to the path from the assert
statement (loop invariant) of the last time the loop was entered, via
a failed while condition, to the assert at the end of the program
(postcondition).

Hope this helps.

> - page 7: "Since L is of a bounded type (the scalar type Natural of
> natural numbers)" -> it may be wise to recall that these "natural
> numbers" are bounded

Hmm, think it does say...

>
> - page 7: "In order to make automatic proof possible, we fix the length
> of the array to 8" -> please explain

Reworded plus added description of challenges should make this clearer.

>
> - page 7, right bottom: why not replacing all these equalities "A(0)=0
> and then ..." with bounded quantifications?
>

Leave for now. Yes, that would have been something in between the
general solution and the concrete listing of states... not tried.

> - page 9: there is a huge overfull hbox ("SPARK2014" in the right
> column)

Fixed.
