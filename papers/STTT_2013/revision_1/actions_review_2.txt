Actioned comments from reviewer 2

from Report 007-R-15
---

> The paper provides an overview of SPARK 2014, and documents the authors’
> experience in using the tool during the 2012 VerifyThis competition. The
> SPARK Approach has a long history, with its origins dating back to the
> late 80’s. SPARK 2014 represents a significant development, with new
> language features and significant improvements to the reasoning aspects of
> the tool. The combination of proof and executable contracts looks to be
> very powerful, as well as usable –
> allowing the synergies of test and proof to be exploited within a single
> framework.
>
> My recommendation is for “acceptance”; however, I would like aspects of the
> paper to be elaborated. What is provided is of a high standard, what I am
> calling for is more detail. Given that the page limit is 20, then this
> should not be a problem:
>
> 1. I would like to see more details on the annotation execution
> mechanism, especially given that it won a prize, e.g. step through a
> buggy invariant showing how the bug is revealed.
>

Half of section 6.7 describes this using concrete example. Not
actioned further now. Note taken, great idea, we are planning such
step by step on-line tutorial.

> 2. A lot of stats on proof attempts (successes, failures, annotations
> supplied) – would be useful if these were summarised in a table.
>

OK, Leaving for now.

> 3. Essentially two challenge problems were tackled (although two versions
> of Tree Sum problem were investigated) – why were these challenges
> selected over the other members of the VerifyThis 2012 Challenge set?

Added section 6.1.

> 4. The current version of SPARK includes an interactive proof environment,
> i.e. the SPADE Proof Checker. The SPADE PC is by no means state-of-the-art,
> but still has industrial users who might be left wondering after reading
> the paper what support for interactive proof will be provided in SPARK
> 2014? Why3 can obviously interface with interactive provers, just not
> clear what options will be available within SPARK 2014.

The paper says SPARK2014 tools can target as many automatic or manual
provers as the Why3 platform allows. This is of course true but we are
currently investigating and experimenting to find a solution that
scales well for industrial users. Isabelle and Coq are experimented
with as backends but no conclusive message here yet.

> 5. Section 6.2 makes reference to “84 more lines for loop invariants and
> loop variants”. An example invariant is provided, but would be nice to see
> more of the invariants and variants –currently the paper only uses 11 of
> the 20 page limit – scope for appendices.

We're not sure that this would help the reader to understand
better. It is available to anyone who is interested to see the full
solution for any reason, at http://fm2012.verifythis.org/solutions.

with Types; use Types;

package PrefixSum is pragma SPARK_Mode (On);

   Maximum : constant := 1_000_000;

   function All_Elements_In (A : Input; Max : Positive) return Boolean is
      (for all K in A'Range => A (K) in -Max .. Max);

   function All_Left_Elements_In (A : Input; Right : Integer; Max : Positive)
     return Boolean
   is
      (for all K in A'Range => (if K < Right then A (K) in -Max .. Max));

   function All_Right_Elements_In (A : Input; Left : Integer; Max : Positive)
     return Boolean
   is
      (for all K in A'Range => (if K > Left then A (K) in -Max .. Max));

   function Intermediate_Form (A, B : Input) return Boolean with
     Pre => All_Elements_In (A, Maximum * 8)
       and then All_Elements_In (B, Maximum);

   function Intermediate_Form (A, B : Input) return Boolean is
       (for all K in A'Range =>
          (if (K + 1) mod 8 = 0 then
             A (K) = B (0) + B (1) + B (2) + B (3) +
                     B (4) + B (5) + B (6) + B (7)
          elsif (K + 1) mod 4 = 0 then
             A (K) = B (K) + B (K-1) + B (K-2) + B (K-3)
          elsif (K + 1) mod 2 = 0 then
             A (K) = B (K) + B (K-1)
          else
             A (K) = B (K)));

   procedure Upsweep (A : in out Input; Output_Space : out Positive) with
     Pre  => All_Elements_In (A, Maximum),
     Post => All_Elements_In (A, 8 * Maximum)
       and then Output_Space = 8
       and then Intermediate_Form (A, A'Old);

   procedure Downsweep
     (Ghost : Input; A : in out Input; Input_Space : in Positive)
   with
     Pre => All_Elements_In (Ghost, Maximum)
       and then All_Elements_In (A, 8 * Maximum)
       and then Input_Space = 8
       and then Intermediate_Form (A, Ghost),
     Post =>
       A (0) = 0
         and then
       A (1) = Ghost (0)
         and then
       A (2) = Ghost (0) + Ghost (1)
         and then
       A (3) = Ghost (0) + Ghost (1) + Ghost (2)
         and then
       A (4) = Ghost (0) + Ghost (1) + Ghost (2) + Ghost (3)
         and then
       A (5) = Ghost (0) + Ghost (1) + Ghost (2) + Ghost (3) + Ghost (4)
         and then
       A (6) = Ghost (0) + Ghost (1) + Ghost (2) + Ghost (3) + Ghost (4)
             + Ghost (5)
         and then
       A (7) = Ghost (0) + Ghost (1) + Ghost (2) + Ghost (3) + Ghost (4)
             + Ghost (5) + Ghost (6);

end PrefixSum;


package body PrefixSum is pragma SPARK_Mode (On);

   procedure Upsweep (A : in out Input; Output_Space : out Positive) is
      Space : Positive := 1;
      Left  : Natural;
      Right : Natural;
   begin
      while Space < A'Length loop
         pragma Loop_Invariant
            (All_Elements_In (A, Space * Maximum)
              and then
            (Space = 1 or Space = 2 or Space = 4)
              and then
            (for all K in A'Range =>
              (if (K + 1) mod 8 = 0
                 and then Space = 8
               then
                 A (K) = A'Loop_Entry (0) + A'Loop_Entry (1) +
                         A'Loop_Entry (2) + A'Loop_Entry (3) +
                         A'Loop_Entry (4) + A'Loop_Entry (5) +
                         A'Loop_Entry (6) + A'Loop_Entry (7)
               elsif (K + 1) mod 4 = 0
                 and then Space >= 4
               then
                 A (K) = A'Loop_Entry (K) + A'Loop_Entry (K-1) +
                         A'Loop_Entry (K-2) + A'Loop_Entry (K-3)
               elsif (K + 1) mod 2 = 0
                 and then Space >= 2
               then
                 A (K) = A'Loop_Entry (K) + A'Loop_Entry (K-1)
               else
                 A (K) = A'Loop_Entry (K))));
         pragma Loop_Variant (Increases => Space);

         Left := Space - 1;

         while Left < A'Length loop
            pragma Loop_Invariant (
              (Left + 1) mod Space = 0
                and then
              All_Left_Elements_In (A, Left, Space * 2 * Maximum)
                and then
              All_Right_Elements_In (A, Left - 1, Space * Maximum)
                and then
              (Left + 1) mod (Space * 2) = Space
                and then
              (if Left >= A'Length then Left = 8 or Left = 9)
                and then
              (for all K in A'Range =>
                (if K in A'First .. Left - Space
                   and then (K + 1) mod (2 * Space) = 0
                 then
                    A (K) = A'Loop_Entry (K) + A'Loop_Entry (K - Space)
                 else
                    A (K) = A'Loop_Entry (K))));
            pragma Loop_Variant (Increases => Left);

            Right     := Left + Space;
            A (Right) := A (Left) + A (Right);
            Left      := Left + Space * 2;
         end loop;
         Space := Space * 2;
      end loop;
      Output_Space := Space;
   end Upsweep;

   procedure Downsweep
     (Ghost : Input; A : in out Input; Input_Space : in Positive)
   is
      Space : Natural := Input_Space;
      Left  : Natural;
      Right : Natural;
      Temp  : Integer;
   begin
      A (A'Last) := 0;
      Space      := Space / 2;

      while Space > 0 loop
         pragma Loop_Invariant
           ((Space = 4 or Space = 2 or Space = 1)
              and then
            All_Elements_In (A, (4 / Space) * 8 * Maximum)
              and then
            (for all K in A'Range =>
              	 (if Space = 4 then
                    A (K) = A'Loop_Entry (K)
                 elsif Space = 2 and then (K+1) mod 8 = 0 then
                    A (K) = A'Loop_Entry (K) + A'Loop_Entry (K - 2*Space)
                 elsif Space = 2 and then (K+1) mod 4 = 0 then
                    A (K) = A'Loop_Entry (K + 2*Space)
                 elsif Space = 2 then
                    A (K) = A'Loop_Entry (K)
                 elsif Space = 1 and then (K+1) mod 2 = 0 then
                    A (1) = A'Loop_Entry (7) and
                    A (3) = A'Loop_Entry (1) + A'Loop_Entry (7) and
                    A (5) = A'Loop_Entry (7) + A'Loop_Entry (3) and
                    A (7) = A'Loop_Entry (5) + A'Loop_Entry (7)
                          + A'Loop_Entry (3)
                 else
                    A (K) = A'Loop_Entry (K))));
         pragma Loop_Variant (Decreases => Space);

         Right := Space * 2 - 1;
         while Right < A'Length loop
            pragma Loop_Invariant (
              (for all K in A'Range =>
                (if K in A'First .. Right - Space * 2 then
                  (if (K + 1) mod (2 * Space) = 0 then
                      A (K) = A'Loop_Entry (K) + A'Loop_Entry (K - Space)
                   elsif (K + 1) mod Space = 0 then
                      A (K) = A'Loop_Entry (K + Space)
                   else
                   A (K) = A'Loop_Entry (K))
                 else
                   A (K) = A'Loop_Entry (K)))
                 and then
              (Right + 1) mod (Space * 2) = 0
                 and then
              (if Right >= A'Length then
                 Right = 9 or Right = 11 or Right = 15));
            pragma Loop_Variant (Increases => Right);

            Left      := Right - Space;
            Temp      := A (Right);
            A (Right) := A (Left) + A (Right);
            A (Left)  := Temp;
            Right     := Right + Space * 2;
         end loop;
         Space := Space / 2;
      end loop;
   end Downsweep;

end PrefixSum;
