Report 007-R-18

Default
SECTION I: Summary and Recommendation

Summary of Evaluation

Overall quality is:

Excelent
Score

Please select the score of the paper.

Strong Accept
Confidence

Please select your confidence.

High
SECTION III: Overview

Reader Interest

1. Is the paper of current interest to a reasonable segment of the journal?

Yes

2. Relative to the current level of reader interest in the paper, how is this
interest likely to change during the next five years?

Relatively little change

3. Within its particular field of specialization, is the topic of the paper
considered important?

Yes, definitely
Content

1. Is the paper technically sound?
(not necessary for style review)

Yes

2. How would you describe the technical depth of the paper?

Suitable for the non-specialistSuitable for the non-specialist

3. Does the paper make a tangible contribution to the state-of-the-art in its
field?

To a limited extent

4. Is the bibliography adequate?

No

5. To what extent is the material in the paper likely to be used by other
researchers and practitioners?

Average
Presentation

1. Is the abstract an appropriate and adequate digest of the work presented?

Yes

2. Does the introduction clearly state the background and motivation in terms
understandable to the non-specialist?

Yes

3. How would you rate the overall organization of the paper?

Satisfactory

4. Relative to the technical content, is the length of the paper appropriate?

Yes

5. Is the English satisfactory

Yes

6. How readable is the paper for a computer scientist or engineer who is not a
specialist in this particular field

Readable with ordinary effort

7. Disregarding the technical content, how would you regard the quality of
presentation?

Good
Section IV: Detailed Comments for Author(s)

Mandatory, please elaborate on your judgement.

This paper reports a contribution to Hoare's famous challenge to build a
verifying compiler. The paper's key contribution is to address two identified
hindrances to the take-up of such verification technology: (1) accessibility of
the technology by non-experts; and (2) providing a convincing cost-benefit
argument to compel industrial take-up.


Opinion
-------

This paper is an interesting and worthwhile read. It is also a useful
contribution to Hoare's Verifying Compiler grand challenge, and so I think it
worth publishing. My reservations are that it is lightweight in two important
respects:

(a) It lacks context by not referring properly to the existing literature.

(b) There is no conclusion from the work or evaluation of its results.

I would like the authors to address both these points by expanding the
references to related work and reflecting on their contributions, and by
comparing their work with similar efforts (such as Microsoft's VCC). Crucially,
I'd like to see a scientific evaluation of the current authors' VerifyThis
solutions by comparing them with other solutions.


Detailed Comments
-----------------

A useful reference addressing point (2) above is not cited in the current
paper:

Formal methods: Practice and experience. J Woodcock, PG Larsen, J Bicarregui,
J
Fitzgerald. ACM Computing Surveys 41(4) 2009

It may be useful to add it.

The authors of the current paper are the designers and builders of the SPARK
2014 language and tool-set -- verily a verifying compiler! They illustrate
their approach to solving (1) and (2) by using examples from the VerifyThis
competition.

The approach advocated by the authors essentially addresses both (1) and (2)
simultaneously by combining tests and proofs as a cost-effective, or at least
competitive, way to develop software for certification, such as using DO-178B
or
the newer and more formal-methods friendly DO-178C.

The paper consists in seven sections:

1. Introduction

2. Key language features for verification

3. Integrated testing and proving

4. Choosing the right semantics for integers

5. Making automatic verification work

6. VerifyThis competition

7. Ongoing work

Notable by its absence is a section on conclusions: how does the work
presented
actually address challenges (1) and (2)? Why is SPARK better than, say, VCC?

I find the paper rather narrow. For example, it says:

"[...] there are still some remaining challenges before we can expect
verifying
compilers to be as widely used as testing.

"There are some notable exceptions where formal software verification has been
successfully used and scaled to large industrial projects. For example the
SPARK language and tool-set for static verification has been applied for many
years in on-board aircraft systems, control systems, cryptographic systems,
and
rail systems [Bar12b, O'N12]."

SPARK is an excellent exception; but where are the other exceptions? They do
exist -- Microsoft's Verifying C Compiler (VCC) comes immediately to mind --
and
these exceptions deserve to be mentioned in a general review of the background
to the paper.

Another example of the narrow viewpoint is in the discussion of testing and
proof. There is an excellent school of research and practice that is summed up
by Gaudel's seminal slogan "Testing can be formal too". Recent work in this
area combining testing and verification techniques-- for example, concolic
testing -- has been shown to be eminently feasible for full-scale application
in
industry. Unfortunately, only two references are provided in this section
(apart from the reference to DO-178B), and this is inadequate.

It would be helpful to have a reference to the VerifyThis challenge and a
discussion of its purposes aims and methodology; at the very least its web
site
(www.verifythis.org) should be mentioned.


Typos etc
---------

"The grand challenge of building a verifiying compiler"
-->
"The grand challenge of building a verifying compiler"

"At the heart of our technique is executable contracts"
-->
"At the heart of our technique are executable contracts"

"In section 4 we describe specific language features which enables
specifications to be written more naturally."
-->
"In section 4 we describe specific language features that enable
specifications to be written more naturally."

"For example, here is the loop variant used in the longest commmon prefix
challenge:"
-->
"For example, here is the loop variant used in the longest common prefix
challenge:"

"We will describe a few observations of what drives the current practises in
the
industry"
-->
"We will describe a few observations of what drives ** current practices in
**
industry"

"Industry standards and certification documents highly influence the state-of-
practise safety-critical software development."
-->
"Industry standards and certification documents highly influence the state-of-
practice of safety-critical software development."

"the recently released successor and replacement of DO-178B, allows to replace
some of the prescribed testing activities by formal methods."
-->
"the recently released successor and replacement of DO-178B, allows ** some of
the prescribed testing activities to be replaced by formal methods."

"More run-time checks gives better robustness testing"
-->
"More run-time checks give** better robustness testing"
or
"*An increase in* run-time checks gives better robustness testing"

"An effect of having the same semantics in assertions as in the program code,
is
that run-time exceptions must be considered"
-->
"An effect of having the same semantics in assertions as in the program code**
is that run-time exceptions must be considered"

"As an example, consider a programmer who wants to state a pre-condition that
the addition of two number fits in a desired integer type"
-->
"As an example, consider a programmer who wants to state a pre**condition that
the addition of two number*s* fits in a desired integer type"

"Alt-Ergo [BCCL08] which is distributed with GNAT-prove."
-->
"Alt-Ergo [BCCL08], which is distributed with GNAT-prove."

"The initial solution without annotations is straightforward, and only 50
lines
long."
-->
"The initial solution without annotations is straightforward** and only 50
lines
long."

"the possibility to call alternate provers"
-->
"the possibility to call alternat*iv*e provers"

"Fran\c{c}cois"
-->
"Fran\c{c}ois"

"colocated"
-->
"co-located"

Please note: I read this re-flowing the pdf to make it readable on a BeBook e-
reader, so I might have introduced some irregularities. My apologies.
