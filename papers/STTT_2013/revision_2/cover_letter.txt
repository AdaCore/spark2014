Dear reviewers,

thank you once again for very helpful comments and suggestions. This is
much appreciated. Here is the action log for revision 2 of the paper:

Reviewer 1
---

> This revised version clearly improves on the previous one.
> Not all my comments regarding the first version have been taken into
> account by
> the authors. Yet I'm in favor of acceptance, even without further revision,
> since
> the current state of the paper is now quite good.
>
> A minor question regarding the definition of constant Maximum on page 10:
> Instead of Index'Last, I would rather have used 2^Tree_Depth, which is a
> tighter
> bound. Am I missing something.

Agree, that's nicer, changed it acccordingly, and checked that it does not
impact provability negatively. The Input array type is constrained (that's
why it was written using Index'Last in the first place). A further
generalisation would be to make the solution work for unconstrained arrays,
but the provability for unconstrained arrays needs improvement, which we
are working on at the moment.

Reviewer 2
---

> While the authors have not been able to address all my concerns, I feel
> that the improvements made are sufficient for the paper to be acceptable
> for publication.

OK, thanks.


Reviewer 3
---

All comments fixed in previous review.


Reviewer 4
---

> Does SPARK check for disjointness/completeness or not? It is not a
> problem if it does not check, but there must be a clear statement.

Explained the generation of checks for contract cases.

> p.4
>
> "Ada 2012 and thus SPARK 2014 have such semantics."
>
> Please say what the semantics is. Here the paper puts a lot of emphasis
> on differences in assertion semantics but does not explain the
> differences _at all_.

Added a paragraph to explain differences in assertion semantics.

> "Successful execution of postcondition -> test successful" Only if
> precondition holds!
>
> "An increase in run-time checks gives better robustness testing" This is
> not clear. See remarks on robustness testing in previous review.

Removed unclear statements about robustness testing.

> p.5
>
> "Proof of absence of some run-time exceptions provides for some
> robustness testing" Also not clear. See above. You might want to define
> robustness testing!
>

Removed unclear statements about robustness testing. (Hopefully this
can be discussed in another paper.)

> "Related Work on Combined Test and Proof"
>
> I think SPEC# can emit run-time checks for unproven goals and KeY can
> generate tests for them.

Added references.

> p.6
>
> "Minimized mode: larger base type (64bits) used when needed"
> Please clarify "when needed" and what happens if the value overflows the
> 64 bit type in this mode. See also previous review.

Explained more in detailed now.

> p.10
>
> "existential quantification is difficult for the automatic provers that
> we have available"
>
> This is only true if the existential quantifier appears in positive
> polarity in the VCs. Does the problem occur when proving the contract or
> when using it? Of course, quantifiers typically appear in both
> polarities.  The universal quantifier in the postcondition will become
> existential when the contract is used, yet it seems not to be a
> problem. In other words, the explanation given here why that particular
> quantifier is difficult is not necessarily adequate. Please clarify or
> remove.

Point taken. Added a note about the condition when this happens:
establishing the precondition.


Editors comment
---

> The editors ask you to update the title of challenge
> #2 from "tree sum" to "prefix sum" throughout their submission. There
> might have been confusion wrt this in the original description.

Fixed.


Additionally minor updates from first round of reviews and small
self-raised issues.
