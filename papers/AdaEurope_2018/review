----------------------- REVIEW 1 ---------------------
PAPER: 17
TITLE: Safe Dynamic Memory Management in Ada and SPARK
AUTHORS: Maroua Maalej, Yannick Moy and Tucker Taft

Overall evaluation: 2 (accept)

----------- Overall evaluation -----------
This paper introduces an extension to Ada and to SPARK, i.e., safe pointer types which provide automatic storage management without asynchronous garbage collection and without explicit deallocation by the programmer. Since aliasing is strictly controlled, these pointers can be used in SPARK for formal verification.

The concept borrows from Rust and ParaSail, but is different in many ways to work well with Ada's language features.

An ownership aspect is introduced to discriminate the new pointer types from the traditional ones.
Ownership is moved by assignment statements which set the original access object to null.
In addition, it is possible to ``borrow'' access values via in parameters and to ``observe'' pointed-to objects via access-to-constant parameters.

Composite Types are also supported.

Several examples are given to show the usefulness of the approach.

The proposal has been formalized as an Ada Issue for inclusion in the next version of Ada.

Although I recommend acceptance of the paper, I'll give some hints for improvements:

(1) Several times it is stated that the proposed pointers will enhance parallel computing. I would have liked to see an example for this claim.

(2) An example showing how a node is inserted into a binary search tree is presented. In addition, I would have liked to see how a node is deleted from such a tree.

Typo: page 3, line 4: results -> result


----------------------- REVIEW 2 ---------------------
PAPER: 17
TITLE: Safe Dynamic Memory Management in Ada and SPARK
AUTHORS: Maroua Maalej, Yannick Moy and Tucker Taft

Overall evaluation: 3 (strong accept)

----------- Overall evaluation -----------
The paper presents an interesting contribution to a future version of Ada, consisting of a safe model for using pointers and dynamic memory management in safety-critical applications. The approach allows for formally checking properties such as absence of aliased objects, dangling references and memory leaks. The approach is also applicable to the SPARK language subset. The paper is well written and is a nice relevant contribution.

Pointers are very interesting for creating dynamic data structures, and this approach allows using pointers for this purpose, with automatic memory deallocation.

The ownership ideas underlying the proposed memory model are not new. They come from languages such as Rust and ParaSail, but their adaptation to Ada is an interesting contribution.

As a general comment I would like the authors to comment on the implications of concurrent tasking with this proposed model. This issue is not mentioned and it seems that there might be race conditions arising. For instance, in Figure 3, how can you prove that another task that has visibility over variable X is not concurrently modifying the object pointed to by X while the call to Sum is in progress?


----------------------- REVIEW 3 ---------------------
PAPER: 17
TITLE: Safe Dynamic Memory Management in Ada and SPARK
AUTHORS: Maroua Maalej, Yannick Moy and Tucker Taft

Overall evaluation: 0 (borderline paper)

----------- Overall evaluation -----------
This paper is essentially a report on AI12-0240 that introduces a
  safe dynamic memory management mechanism based on ownership
  concept. The topic is definitely meaningful for the community, but
  the paper is rather hard to follow, and it is unclear what the
  contribution of the paper is, beyond being a rationale for this AI.

  The paper has a strange structure, for instance related works are
  listed last, whereas one would assume they should come in section 2
  so as to provide some insights on the design choice made for the
  Ownership aspect.

  Also, the examples are detailed in a very verbose form, that looses
  the reader: the isuses are well-known for people familiar with Ada
  and High-Integrity profiles, yet the way Ownership solves them is
  not described in the paper. The corresponding legality rules are
  external in the description of the AI itself. This choice is
  detrimental to the readability of the paper.

  Finally, the section 3 has no benefit to the reader, except to
  recall why aliasing is an issue. The paper definitely miss some
  information on how SPARK would benefit from this AI, e.g. in terms
  of additional language features.

  Interesting enough, if you read the paper starting from section 4
  (related work) then 3 (aliasing issues) then 2, you have a better
  understanding of the issue and the benefit of the contribution.

  As such, I value the effort of the contribution, but the quality of
  the presentation itself does not serve it. It should be improved to  
  ease readability by a non-Ada lawyer.


----------------------- REVIEW 4 ---------------------
PAPER: 17
TITLE: Safe Dynamic Memory Management in Ada and SPARK
AUTHORS: Maroua Maalej, Yannick Moy and Tucker Taft

Overall evaluation: 2 (accept)

----------- Overall evaluation -----------
This is a nice paper, providing an interesting contribution for the conference.

However, the authors should improve the introduction to provide a better motivation, namely by explaining the challenges being addressed and clearly highlighting the main contributions of the work.
