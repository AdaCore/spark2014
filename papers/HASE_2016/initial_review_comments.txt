----------------------- REVIEW 1 ---------------------
It is an interesting topic. I recommend to accept this paper as a fast
abstract.

I do not want to get into a terminological discussion here but the paper
has nothing to do with system safety. I recommend to always say language
safety to help the reader.

The paper needs a brief summary of the SPARC toolset.

It is not clear to me if the static program checking is solely based on
why3. And why this approach was chosen.

It is not clear how the checks described in Section III are mapped into the
conditions to be verified by why3. This section is about what but not how.
I recommend to talk more about check rather than about subtleties of
concurrency in SPARC Ada 2014


----------------------- REVIEW 2 ---------------------
The SPARK language is a subset of the ADA language and it is designed to
enable formal verification. This article presents an improvment on this
language. In particular, these improvments focus on the statical detection
of data races and locking cycles.

The subject addressed in this article is well adapted to the HASE
conference. It is an interesting subject and the article is well written.
Nevertheless, there is still place at the end of the article that could be
used to provide more informations.

Checks can be based on annotations provided by the developer (for instance
for the Part_Of annotation). It would be interesting to provide an example
of annotation. Unless annotations are not fixed yet (and this could be
indicated).

The article lacks illustrations. For instance, cylclic locking checks can
be illustrated with simple call trace (even if the article presents static
checks). This illustration is not necessarly the most adapted for this
article, but an illustration of this kind help to understand the
contribution.

For the locking cycles, an operation can invoke an external call based on
the data provided on its input (with an if structure for instance). Are the
domain of data considered to detect cyclic locking? If it is not so, a
violation of this rule can be triggered while the data don't allow to
effectively violate this rule in practice.

The last remark is about the solution proposed: is this solution built
specifically for the case of multitasking? Does a similar approach was
already proposed for a monotasking? (and what is the difference with the
proposed approach)?


----------------------- REVIEW 3 ---------------------
This fast abstract paper describes the safety requirements for multitasking
in SPARK which is a subset of Ada designed to enable formal verification.

The paper seems to be about an important problem, but it is unclear how
significant the contribution is or would be. The introduction section could
be improved to make this clearer.

The paper's content is a bit of boring, without any diagram or result to
help readers understand how it works and how well it works.

Finally, as a fast abstract submission, it would be good to talk about the
future plan of how to complete this work at the end of the paper.
