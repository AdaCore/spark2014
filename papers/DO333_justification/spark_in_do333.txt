SPARK technology is a formal method according to DO-333. The justification for this claim rests on two sub-claims:
1. SPARK programs are formal models.
2. SPARK analyses are formal analyses.

SPARK programs are formal models:
---------------------------------

The SPARK programming language is an unambiguous programming language, whose precise semantics is defined in the SPARK Reference Manual [SPARK RM] based on the Ada Reference Manual [Ada RM]. Those reference manuals are produced by respectively the SPARK Language Design Committee organized between AdaCore and Altran and the Ada Rapporteur Group (a.k.a. ISO/IEC JTC1/SC22/WG9). The Ada Reference Manual is an ISO/IEC standard. A subset of the SPARK RM was formalized in the Coq proof assistant [Zhi].

Ada RM defines precisely the possible violations of language semantics in a program:
- Compile-time errors prevent compilation.
- Run-time errors are signaled by an exception at run time.
- The possible effects of bounded errors are precisely bounded by the standard, for example reading an uninitialized variable.
- Remaining errors are designated by erroneous execution, and may have unbounded effects.

SPARK RM rules (including verification rules that are enforced through formal analysis) prevent all possible violations of language semantics, at the exclusion of the exhaustion of stack usage (signaled by a Storage_Error exception in Ada RM) which must be verified independently.

SPARK semantics is stricter than Ada semantics in order to prevent ambiguities and allow formal analysis. In particular, input and output data (parameters and globals) should be fully initialized on calls, and should not be aliased if aliasing may cause interferences. SPARK verification rules prevent such cases.

SPARK functional specifications (in the form of contracts, invariants, assertions) are based on the same expression forms as code. The semantics of expression evaluation is the same in specifications as in code. In particular, specifications use the same machine integer and floating-point values as code, and not mathematical integers or reals, and run-time errors may be raised in specifications. SPARK only allows fixed-point operations whose result belongs to the perfect result set as defined in Ada RM. SPARK assumes IEEE 754 standard semantics for basic operations of floating-point types.

SPARK programs may display implementation-defined behavior due to two possible reasons. First, the choice of target platform and run-time library may influence the behavior of the program. Formal analysis should be performed with the target platform and run-time library used for compiling the executable. Second, non-parenthesized arithmetic operations could be re-ordered by the compiler, if the code is not compiled with the GNAT compiler, which may result in a failing computation (due to overflow checking) becoming a successful one, and vice-versa. These cases can be detected by SPARK toolset and the user should use parentheses in such a situation to force an order of evaluation.

[SPARK RM] http://docs.adacore.com/spark2014-docs/html/lrm/
[Ada RM] http://www.ada-auth.org/standards/12rm/html/RM-TOC.html
[Zhi] Zhi Zhang, Formalization of a SPARK Subset in Coq, HILT 2013

SPARK analyses are formal analyses:
-----------------------------------

SPARK toolset provides two different analyses:
1. Flow analysis allows to check SPARK legality rules, absence of reads of uninitialized variables, absence of aliasing that can cause interferences, data dependencies and flow dependencies.
2. Proof allows to check absence of run-time errors and functional contracts.

Flow analysis is based on the construction of program dependency graphs (PDG) from the program abstact syntax tree (AST), which form a formal model to which flow analysis is applied. [Reps]

Proof is based on the generation of Verification Conditions (VC) based on Hoare logic [Floyd, Hoare], by Weakest Precondition Calculus [Dijkstra, Flanagan, Filliâtre, Leino], using a translation of the program into the Intermediate Verification Language Why3 as formal model. Verification Conditions are proved by SMT provers (Alt-Ergo, CVC4, Z3), a well-known architecture of automatic provers well suited to program verification.

All the techniques used in flow analysis and proof are well-known techniques which have been studied extensively by researchers. The bases for these techniques rest on results from the 60s and 80s. Current research still improves on these bases and the results of this research are included in components of the SPARK technology (in particular the Why3 verification platform and the SMT provers). All the theoretical foundations for the SPARK toolset can be found in published scientific articles in international conferences and journals.

[Reps] Horwitz, Reps and Binkley, Interprocedural slicing using dependence graphs, PLDI 1988
[Floyd] R.W. Floyd, Assigning meaning to programs, AMSSAM 1967
[Hoare] C.A.R Hoare, An axiomatic basis for computer programming, CACM 1969
[Dijkstra] Edsger W. Dijkstra, Guarded commands, nondeterminacy and formal derivation of program, CACM 1975
[Flanagan] C. Flanagan, J.B. Saxe, Avoiding exponential explosion: Generating compact verification conditions, ACM SIGPLAN Notices, 2001
[Filliâtre] J.C. Filliâtre, Why: a multi-language multi-prover verification tool, Research Report 1366, 2003
[Leino] K.R.M. Leino, Efficient weakest preconditions, IPL 2005
