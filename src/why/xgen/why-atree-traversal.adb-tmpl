------------------------------------------------------------------------------
--                                                                          --
--                            GNAT2WHY COMPONENTS                           --
--                                                                          --
--                  W H Y - A T R E E - T R A V E R S A L                   --
--                                                                          --
--                                 B o d y                                  --
--                                                                          --
--                       Copyright (C) 2010-2015, AdaCore                   --
--                                                                          --
-- gnat2why is  free  software;  you can redistribute  it and/or  modify it --
-- under terms of the  GNU General Public License as published  by the Free --
-- Software  Foundation;  either version 3,  or (at your option)  any later --
-- version.  gnat2why is distributed  in the hope that  it will be  useful, --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License for  more details.  You should have  received  a copy of the GNU --
-- General  Public License  distributed with  gnat2why;  see file COPYING3. --
-- If not,  go to  http://www.gnu.org/licenses  for a complete  copy of the --
-- license.                                                                 --
--                                                                          --
-- gnat2why is maintained by AdaCore (http://www.adacore.com)               --
--                                                                          --
------------------------------------------------------------------------------
--  This package is automatically generated by xtree. Do not edit manually.

with Why.Conversions; use Why.Conversions;
with Why.Sinfo;       use Why.Sinfo;

package body Why.Atree.Traversal is

   --------------
   -- Traverse --
   --------------

   procedure Traverse
     (State : in out Traversal_State'Class;
      Node  : Why_Node_Id) is
   begin
      _@Implement_Traverse@_
   end Traverse;

   -------------------
   -- Traverse_List --
   -------------------

   procedure Traverse_List
     (State   : in out Traversal_State'Class;
      List_Id : Why_Node_List)
   is
      use Why_Node_Lists;

      Position : Cursor := List_Table (List_Id).Content.First;

   begin
      if State.Control = Terminate_Immediately then
         return;
      end if;

      if State.Control = Abandon_Siblings then
         return;
      end if;

      while Has_Element (Position) loop
         pragma Assert (Has_Element (Position)
                        and then State.Control /= Abandon_Siblings
                        and then State.Control /= Terminate_Immediately);

         declare
            Node : constant Why_Node_Id := Element (Position);
         begin
            Traverse (State, Node);

            exit when State.Control = Abandon_Siblings
              or else State.Control = Terminate_Immediately;
         end;

         Next (Position);
      end loop;
   end Traverse_List;

end Why.Atree.Traversal;
