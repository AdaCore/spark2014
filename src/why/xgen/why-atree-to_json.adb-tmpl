with GNATCOLL.Symbols; use GNATCOLL;
with GNATCOLL.Utils;
with SPARK_Util;
with Sinput;           use Sinput;
with Common_Containers; use Common_Containers;
with Why.Sinfo; use Why.Sinfo;

package body Why.Atree.To_Json is

   ---------------------
   --  General types  --
   ---------------------

   function Boolean_To_Json (B : Boolean) return JSON_Value;
   function Uint_To_Json (I : Uint) return JSON_Value;
   function Ureal_To_Json (I : Ureal) return JSON_Value;
   function String_Sets_Set_To_Json (S : String_Sets.Set) return JSON_Value;

   function Boolean_To_Json (B : Boolean) return JSON_Value is
     (Create (B));

   function Uint_To_Json (I : Uint) return JSON_Value
      is (Create (UI_Image (I, Decimal)));

   function Ureal_To_Json (I : Ureal) return JSON_Value is
      Res : constant JSON_Value := Create (Empty_Array);
   begin
      Append (Res, Uint_To_Json (Numerator (I)));
      Append (Res, Uint_To_Json (Denominator (I)));
      Append (Res, Create (Integer (Rbase (I))));
      Append (Res, Create (UR_Is_Negative (I)));
      return Res;
   end Ureal_To_Json;

   function String_Sets_Set_To_Json (S : String_Sets.Set) return JSON_Value is
      Res : constant JSON_Value := Create (Empty_Array);
   begin
      for El of S loop
         Append (Res, Create (El));
      end loop;
      return Res;
   end String_Sets_Set_To_Json;

   ------------------
   --  Gnat types  --
   ------------------

   function Node_Id_To_Json (Id : Node_Id) return JSON_Value;
   function Source_Ptr_To_Json (P : Source_Ptr) return JSON_Value;
   function Symbol_To_Json (S : Symbols.Symbol) return JSON_Value;
   function Symbol_Set_To_Json (S : Symbol_Set) return JSON_Value;

   function Node_Id_To_Json (Id : Node_Id) return JSON_Value is
      (Create ("<Node_Id>")); --  TODO

   function Source_Ptr_To_Json (P : Source_Ptr) return JSON_Value is
      Res : constant JSON_Value := Create (Empty_Array);
      File : constant String := SPARK_Util.File_Name (P);
      Line : constant Physical_Line_Number :=
        Get_Physical_Line_Number (P);
   begin
      if P = No_Location then
         return Create;
      else
         Append (Res, Create (File));
         Append (Res, Create (Integer (Line)));
         return Res;
      end if;
   end Source_Ptr_To_Json;

   function Symbol_To_Json (S : Symbols.Symbol) return JSON_Value is
      P : constant GNATCOLL.Utils.Cst_String_Access := Symbols.Get (S);
   begin
      return Create (P.all);
   end Symbol_To_Json;

   function Symbol_Set_To_Json (S : Symbol_Set) return JSON_Value is
      Res : constant JSON_Value := Create (Empty_Array);
   begin
      for El of S loop
         Append (Res, Symbol_To_Json (El));
      end loop;
      return Res;
   end Symbol_Set_To_Json;

   -----------------------------------------
   --  Why nodes types with multiplicity  --
   -----------------------------------------

   function Why_Node_Id_To_Json (Id : Why_Node_Id) return JSON_Value;
   function Why_Node_OId_To_Json (Id : Why_Node_Id) return JSON_Value;
   function Why_Node_OList_To_Json (Id : Why_Node_List) return JSON_Value;
   function Why_Node_List_To_Json (Id : Why_Node_List) return JSON_Value;
   function Why_Node_Set_To_Json (S : Why_Node_Set) return JSON_Value;

   function Why_Node_Id_To_Json (Id : Why_Node_Id) return JSON_Value is
      (Why_Node_To_Json (Get_Node (Id)));

   function Why_Node_OId_To_Json (Id : Why_Node_Id) return JSON_Value is
      (if Id = Why_Empty then
        Create
      else
        Why_Node_Id_To_Json (Id));

   function Why_Node_OList_To_Json (Id : Why_Node_List) return JSON_Value is
      (if Is_Empty (Id) then
        Create
      else
        Why_Node_List_To_Json (Id));

   function Why_Node_List_To_Json (Id : Why_Node_List) return JSON_Value is
      (Why_Node_Lists_List_To_Json (Get_List (Id)));

   function Why_Node_Lists_List_To_Json (L : Why_Node_Lists.List)
   return JSON_Value is
      Res : constant JSON_Value := Create (Empty_Array);
   begin
      for El of L loop
         Append (Res, Why_Node_Id_To_Json (El));
      end loop;
      return Res;
   end Why_Node_Lists_List_To_Json;

   function Why_Node_Set_To_Json (S : Why_Node_Set) return JSON_Value is
      (Create ("<Why_Node_Set>")); --  TODO

   _@Declare_Ada_To_Json@_
end Why.Atree.To_Json;
