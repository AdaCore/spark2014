with GNATCOLL.Symbols;  use GNATCOLL;
with GNATCOLL.Utils;
with SPARK_Util;
with Sinput;            use Sinput;
with Common_Containers; use Common_Containers;
with Why.Sinfo;         use Why.Sinfo;

package body Why.Atree.To_Json is

   ---------------------
   --  General types  --
   ---------------------

   procedure Boolean_To_Json (O : Output_Id; B : Boolean);
   procedure Uint_To_Json (O : Output_Id; I : Uint);
   procedure Ureal_To_Json (O : Output_Id; I : Ureal);
   procedure String_Sets_Set_To_Json (O : Output_Id; S : String_Sets.Set);

   procedure Boolean_To_Json (O : Output_Id; B : Boolean) is
   begin
      if B then
         P (O, "true");
      else
         P (O, "false");
      end if;
   end Boolean_To_Json;

   procedure Uint_To_Json (O : Output_Id; I : Uint) is
   begin
      P (O, UI_Image (I, Decimal), As_String => True);
   end Uint_To_Json;

   procedure Ureal_To_Json (O : Output_Id; I : Ureal) is
   begin
      P (O, "[");
      Uint_To_Json (O, Numerator (I));
      P (O, ",");
      Uint_To_Json (O, Denominator (I));
      P (O, ",");
      P (O, Nat'Image (Rbase (I)));
      P (O, ",");
      Boolean_To_Json (O, UR_Is_Negative (I));
      P (O, "]");
   end Ureal_To_Json;

   procedure String_Sets_Set_To_Json (O : Output_Id; S : String_Sets.Set) is
      First : Boolean := True;
   begin
      P (O, "[");
         for El of S loop
            if First then
               First := False;
            else
               P (O, ",");
            end if;
            P (O, El, As_String => True);
         end loop;
      P (O, "]");
   end String_Sets_Set_To_Json;

   ------------------
   --  Gnat types  --
   ------------------

   procedure Node_Id_To_Json (O : Output_Id; Id : Node_Id);
   procedure Source_Ptr_To_Json (O : Output_Id; X : Source_Ptr);
   procedure Symbol_To_Json (O : Output_Id; S : Symbols.Symbol);
   procedure Symbol_Set_To_Json (O : Output_Id; S : Symbol_Set);

   procedure Node_Id_To_Json (O : Output_Id; Id : Node_Id) is
      pragma Unreferenced (Id);
   begin
      P (O, "<Node_Id>", As_String => True);
   end Node_Id_To_Json;

   procedure Source_Ptr_To_Json (O : Output_Id; X : Source_Ptr) is
      File : constant String               := SPARK_Util.File_Name (X);
      Line : constant Physical_Line_Number := Get_Physical_Line_Number (X);
   begin
      if X = No_Location then
         P (O, "null");
         return;
      end if;
      P (O, "[");
      P (O, File, As_String => True);
      P (O, ",");
      P (O, Physical_Line_Number'Image (Line));
      P (O, "]");
   end Source_Ptr_To_Json;

   procedure Symbol_To_Json (O : Output_Id; S : Symbols.Symbol) is
      X : constant GNATCOLL.Utils.Cst_String_Access := Symbols.Get (S);
   begin
      P (O, X.all, As_String => True);
   end Symbol_To_Json;

   procedure Symbol_Set_To_Json (O : Output_Id; S : Symbol_Set) is
      First : Boolean := True;
   begin
      P (O, "[");
      for El of S loop
         if First then
            First := False;
         else
            P (O, ",");
         end if;
         Symbol_To_Json (O, El);
      end loop;
      P (O, "]");
   end Symbol_Set_To_Json;

   -----------------------------------------
   --  Why nodes types with multiplicity  --
   -----------------------------------------

   procedure Why_Node_Id_To_Json (O : Output_Id; Id : Why_Node_Id);
   procedure Why_Node_OId_To_Json (O : Output_Id; Id : Why_Node_Id);
   procedure Why_Node_OList_To_Json (O : Output_Id; Id : Why_Node_List);
   procedure Why_Node_List_To_Json (O : Output_Id; Id : Why_Node_List);

   procedure Why_Node_Id_To_Json (O : Output_Id; Id : Why_Node_Id) is
   begin
      Why_Node_To_Json (O, Node_Table (Id));
   end Why_Node_Id_To_Json;

   procedure Why_Node_OId_To_Json (O : Output_Id; Id : Why_Node_Id) is
   begin
      if Id = Why_Empty then
         P (O, "null");
      else
         Why_Node_Id_To_Json (O, Id);
      end if;
   end Why_Node_OId_To_Json;

   procedure Why_Node_OList_To_Json (O : Output_Id; Id : Why_Node_List) is
   begin
      if Is_Empty (Id) then
         P (O, "null");
      else
         Why_Node_List_To_Json (O, Id);
      end if;
   end Why_Node_OList_To_Json;

   procedure Why_Node_List_To_Json (O : Output_Id; Id : Why_Node_List) is
   begin
      Why_Node_Lists_List_To_Json (O, List_Table (Id).Content);
   end Why_Node_List_To_Json;

   procedure Why_Node_Lists_List_To_Json
     (O : Output_Id; L : Why_Node_Lists.List)
   is
      First : Boolean := True;
   begin
      P (O, "[");
      for El of L loop
         if First then
            First := False;
         else
            P (O, ",");
         end if;
         Why_Node_Id_To_Json (O, El);
      end loop;
      P (O, "]");
   end Why_Node_Lists_List_To_Json;

   pragma Warnings (Off, "procedure * is not referenced");
   _@Declare_Ada_To_Json@_
   pragma Warnings (On, "procedure * is not referenced");
end Why.Atree.To_Json;
