------------------------------------------------------------------------------
--                                                                          --
--                            GNAT2WHY COMPONENTS                           --
--                                                                          --
--                   W H Y - A T R E E - V A L I D I T Y                    --
--                                                                          --
--                                 S p e c                                  --
--                                                                          --
--                       Copyright (C) 2010-2015, AdaCore                   --
--                                                                          --
-- gnat2why is  free  software;  you can redistribute  it and/or  modify it --
-- under terms of the  GNU General Public License as published  by the Free --
-- Software  Foundation;  either version 3,  or (at your option)  any later --
-- version.  gnat2why is distributed  in the hope that  it will be  useful, --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License for  more details.  You should have  received  a copy of the GNU --
-- General  Public License  distributed with  gnat2why;  see file COPYING3. --
-- If not,  go to  http://www.gnu.org/licenses  for a complete  copy of the --
-- license.                                                                 --
--                                                                          --
-- gnat2why is maintained by AdaCore (http://www.adacore.com)               --
--                                                                          --
------------------------------------------------------------------------------
--  This package is automatically generated by xtree. Do not edit manually.

with Why.Unchecked_Ids;   use Why.Unchecked_Ids;

package Why.Atree.Validity is
   --  Validity checks

   --  Why.Ids defines of the validity of an node id; this package provides an
   --  implementation of validity checks for this property.
   --
   --  Checking the validity of a syntax tree would require to traverse
   --  recursively the whole tree; that would make it harder to use validity
   --  checks in contracts and would introduce a prohibitive cost at execution.
   --  In order to have a reasonable implementation, the validity status of a
   --  subtree is cached in the field Checked of each node.
   --
   --  Each mutator should update this status, and these changes should be
   --  propagated back to the parent (this back-propagation has not been
   --  implemented yet).
   --
   --  In order to use validity checks in contracts, these are defined as
   --  parameterized expressions. The only check for the node validity, and
   --  then for its children validity if needed. In order to implement this,
   --  the validity check is raffined into three different operation:
   --  * a cache check, named <node kind>_Cache_Valid, checks if the node has
   --    already been marked as valid in its field Checked;
   --  * a children check, named <node_kind>_Children_Valid, goes through all
   --    its children and check for their validity; for each children, only a
   --    cache check is done, in order to avoid a full-dept recursive
   --    traversal;
   --  * the regular check, that does first a cache check, then a children
   --    check.
   --
   --  Different checks are provided for each multiplicity "Id", "OId", "List",
   --  "OList" (e.g. depending on whether the empty is OK or not). Some are
   --  also provided for node classes: they dispatch on the "real" check
   --  depending on the actual node kind.

   _@Declare_Checks@_

private

   function Id_Cache_Valid (Id : Why_Node_Id) return Boolean;

   function OId_Cache_Valid (Id : Why_Node_Id) return Boolean;

   function List_Cache_Valid (Id : Why_Node_List) return Boolean;

   function OList_Cache_Valid (Id : Why_Node_List) return Boolean;

   _@Declare_Children_Checks@_

   _@Implement_Checks@_

   function Id_Cache_Valid (Id : Why_Node_Id) return Boolean renames
     Is_Checked;

   function OId_Cache_Valid (Id : Why_Node_Id) return Boolean is
     (Id = Why_Empty or else Id_Cache_Valid (Id));

   function List_Cache_Valid (Id : Why_Node_List) return Boolean is
     (not Is_Empty (Id) and then Is_Checked (Id));

   function OList_Cache_Valid (Id : Why_Node_List) return Boolean is
     (Is_Empty (Id) or else List_Cache_Valid (Id));

   _@Implement_Children_Checks@_

end Why.Atree.Validity;
