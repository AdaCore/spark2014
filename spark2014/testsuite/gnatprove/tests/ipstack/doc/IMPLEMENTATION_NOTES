IPstack implementation notes
============================

1. Concepts and terminology
---------------------------

1.1. Buffers, packets and segments
----------------------------------

Buffers are descriptors for chunks of memory managed by IPstack. Some buffers
("data" buffers) have an associated reserved storage page within IPstack.
Other buffers ("ref" buffers) just point to a memory area provided by the
user.

Buffers may be chained to represent a transmission unit formed by the
concatenation of their contents. Such a chain of buffers is called a "packet".
A packet is the layer 3 (Network layer, IP) PDU.

Layer 4 (Transport layer, UDP and TCP) use packets to transport their own
PDUs. The UDP PDU is a "datagram"; the TCP PDU is a "segment": a segment
is therefore just a packet as seen by TCP. The data structure AIP.TCP.Segment
describes the TCP-specific aspects of a received segment, as determined from
the TCP header contained in the packet as well as the state of the
corresponding TCP connection.

Packets can also be attached to chained lists by the layer 2 (Link layer,
Ethernet) or layer 4 protocols. This is provisioned for by reserving two
chaining pointers in each buffer. Lists of packets are then constituted
by linking together each packet's initial buffer. The resulting lists
are called "packet queues". At any given time, a given packet can be chained
on only one list for each layer.

2. SPARK issues
---------------

2.1. Annoyances
---------------

Seemingly gratuitous restrictions that have proved annoying and don't
seem to serve any useful purpose with respect to proofs.

* A pragma is not allowed in a context clause prior to the first WITH
  clause.

* A nested subprogram may not have a separate declaration (such a declaration
  is compulsory in Ada when following the GNAT style guide, and serves as the
  anchor point to attach a descriptive comment about the subrpogram and its
  formals, which GPS knows to take advantage of).

* Restrictions on usage occurrences of entity names, and absence of USE clauses
  This forces the use of qualified names throughout the code, making it
  harder to read for no clear gain. The resolution rules of Ada are
  non-ambiguous so as far as automatic processing of the program is concerned,
  there is absolutely no gain in these limitations. This seems to be more of
  a matter of style rules, which should not condition the legality of the
  program, but should be enforced separately. The language should provide
  mechanism, not policy.

2.2. Language limitations
-------------------------

Restrictions that would be nice to lift.

* Object renamings. Typical use case:
  procedure Proc (PCB : PCB_Id) is
     My_PCB : PCB_Type renames All_PCBs (PCB);
  ...

  There doesn't seem to be any difficulty in proving properties in the
  presence of such renamings (possibly with some restrictions on the
  expression, e.g. absence of indices that are variable views), and
  allowing them would make the code more clear and concise and less
  error-prone.

* Constant initialization
  Constants with non-static initialization are not permitted, which means
  we have to declare them as variables, actually making the code more
  error-prone and less expressive.

* Generics
  The absence of generics causes lots of code duplication which makes code
  less uniform and less readable, harder to maintain and subject to subtle,
  unexpected inconsistencies.

* Overlapped parameters
  Two distinct components of the same record object cannot be passed as
  actuals for two OUT formals of the same procedure call.

2.2. Limitations on data structures
-----------------------------------

Support for class-wide types would allow elegant code sharing between
Data and Ref buffers, and between UDP and TCP PCBs. SPARK in its current
state does not lend itself well to factorization of structure and behaviour
across classes of objects that share some common aspects. Type extension
must instead be implemented "by hand" in an ad hoc fashion.
