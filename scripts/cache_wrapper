#!/usr/bin/env python
import hashlib
import memcache
import os
import subprocess
import sys
mc = memcache.Client(['127.0.0.1:11211'], debug=0)

def hash_file(hasher, fn):
    BLOCKSIZE = 65536
    with open(fn, 'rb') as afile:
        buf = afile.read(BLOCKSIZE)
        while len(buf) > 0:
            hasher.update(buf)
            buf = afile.read(BLOCKSIZE)

def hash_proof_dir(hasher, root):
    for root, directories, filenames in os.walk(root):
        for filename in filenames:
            if os.path.splitext(filename)[1] == ".mlw":
                hash_file(hasher, os.path.join(root,filename))

def hash_cmd_line(hasher):
    """hash the commandline to avoid hashing different calls to programs. This
    function is specialized to programs cached in SPARK testing (currently
    only gnatwhy3). It does not hash the file argument (we hash the contents
    instead), and some arguments are skipped."""

    #ignore options and their args: --socket, -j
    #ignore options: --debug, --force, -f
    #hash contents of --proof-dir

    skip = False
    proof_dir_arg = False
    why3_conf_arg = False
    for arg in sys.argv[1:-1]:
        if skip:
            skip = False
        else:
            if arg in ["--socket", "-j"]:
                skip = True
            elif arg in ["--debug", "--force", "-f"]:
                pass
            elif arg == "--proof-dir":
                proof_dir_arg = True
            elif arg == "--why3-conf":
                why3_conf_arg = True
            else:
                if proof_dir_arg:
                    hash_proof_dir(hasher, arg)
                    proof_dir_arg = False
                elif why3_conf_arg:
                    hash_file(hasher, arg)
                    why3_conf_arg = False
                else:
                    hasher.update(arg)

assert len(sys.argv) > 2
# we assume that the wrapped command is the first argument and the last
# command is the filename
wrapped_program = sys.argv[1]
file_arg = sys.argv[-1]

def compute_key():
    hasher = hashlib.sha1()
    hash_file(hasher, file_arg)
    hash_cmd_line(hasher)
    return hasher.hexdigest()

key = compute_key()

value = mc.get(key)
if value == None:
    try:
        value = subprocess.check_output(sys.argv[1:],stderr=subprocess.STDOUT)
        mc.set(key, value)
    except subprocess.CalledProcessError as e:
        print "called process error: " + e.output
print value
