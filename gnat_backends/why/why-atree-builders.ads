------------------------------------------------------------------------------
--                                                                          --
--                            GNAT2WHY COMPONENTS                           --
--                                                                          --
--                   W H Y - A T R E E - B U I L D E R S                    --
--                                                                          --
--                                 S p e c                                  --
--                                                                          --
--                       Copyright (C) 2010-2011, AdaCore                   --
--                                                                          --
-- gnat2why is  free  software;  you can redistribute it and/or modify it   --
-- under terms of the  GNU General Public License as published  by the Free --
-- Software Foundation;  either version  2,  or  (at your option) any later --
-- version. gnat2why is distributed in the hope that it will  be  useful,   --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-  --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License  for more details. You  should  have  received a copy of the GNU --
-- General Public License  distributed with GNAT; see file COPYING. If not, --
-- write to the Free Software Foundation,  51 Franklin Street, Fifth Floor, --
-- Boston,                                                                  --
--                                                                          --
-- gnat2why is maintained by AdaCore (http://www.adacore.com)               --
--                                                                          --
------------------------------------------------------------------------------
--  This package is automatically generated by xtree. Do not edit manually.

with Why.Ids;              use Why.Ids;
with Why.Unchecked_Ids;    use Why.Unchecked_Ids;

pragma Warnings (Off);
--  ??? Pre/Post are disabled for now, to ease transition to derived ids
with Why.Atree.Accessors;  use Why.Atree.Accessors;
with Why.Kind_Validity;    use Why.Kind_Validity;
with Why.Atree.Validity;   use Why.Atree.Validity;
with Why.Atree.Properties; use Why.Atree.Properties;
pragma Warnings (On);

package Why.Atree.Builders is
   --  This package provides a set of unchecked builders, generated
   --  automatically from Why.Atree.Why_Node using an ASIS tool

   function New_Identifier
     (Ada_Node : Node_Id := Empty;
      Symbol   : Name_Id;
      Entity   : Why_Node_Id := Why_Empty)
     return W_Identifier_Valid_Id;

   function New_Type_Prop
     (Ada_Node : Node_Id := Empty)
     return W_Type_Prop_Valid_Id;

   function New_Type_Int
     (Ada_Node : Node_Id := Empty)
     return W_Type_Int_Valid_Id;

   function New_Type_Bool
     (Ada_Node : Node_Id := Empty)
     return W_Type_Bool_Valid_Id;

   function New_Type_Real
     (Ada_Node : Node_Id := Empty)
     return W_Type_Real_Valid_Id;

   function New_Type_Unit
     (Ada_Node : Node_Id := Empty)
     return W_Type_Unit_Valid_Id;

   function New_Abstract_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id)
     return W_Abstract_Type_Valid_Id;

   function New_Generic_Formal_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id)
     return W_Generic_Formal_Type_Valid_Id;

   function New_Generic_Actual_Type_Chain
     (Ada_Node   : Node_Id := Empty;
      Type_Chain : W_Primitive_Type_V_Array;
      Name       : W_Identifier_Valid_Id)
     return W_Generic_Actual_Type_Chain_Valid_Id;

   function New_Array_Type
     (Ada_Node       : Node_Id := Empty;
      Component_Type : W_Primitive_Type_Valid_Id)
     return W_Array_Type_Valid_Id;

   function New_Ref_Type
     (Ada_Node     : Node_Id := Empty;
      Aliased_Type : W_Primitive_Type_Valid_Id)
     return W_Ref_Type_Valid_Id;

   function New_Protected_Value_Type
     (Ada_Node   : Node_Id := Empty;
      Value_Type : W_Value_Type_Valid_Id)
     return W_Protected_Value_Type_Valid_Id;

   function New_Arrow_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_OId := Why_Empty;
      Left     : W_Simple_Value_Type_Valid_Id;
      Right    : W_Computation_Type_Valid_Id)
     return W_Arrow_Type_Valid_Id;

   function New_Computation_Spec
     (Ada_Node      : Node_Id := Empty;
      Precondition  : W_Precondition_Valid_OId := Why_Empty;
      Result_Name   : W_Identifier_Valid_OId := Why_Empty;
      Return_Type   : W_Value_Type_Valid_Id;
      Effects       : W_Effects_Valid_Id;
      Postcondition : W_Postcondition_Valid_OId := Why_Empty)
     return W_Computation_Spec_Valid_Id;

   function New_Integer_Constant
     (Ada_Node : Node_Id := Empty;
      Value    : Uint)
     return W_Integer_Constant_Valid_Id;

   function New_Real_Constant
     (Ada_Node : Node_Id := Empty;
      Value    : Ureal)
     return W_Real_Constant_Valid_Id;

   function New_True_Literal
     (Ada_Node : Node_Id := Empty)
     return W_True_Literal_Valid_Id;

   function New_False_Literal
     (Ada_Node : Node_Id := Empty)
     return W_False_Literal_Valid_Id;

   function New_Void_Literal
     (Ada_Node : Node_Id := Empty)
     return W_Void_Literal_Valid_Id;

   function New_Arith_Operation
     (Ada_Node : Node_Id := Empty;
      Left     : W_Term_Valid_Id;
      Op       : W_Arith_Op_Valid_Id;
      Right    : W_Term_Valid_Id)
     return W_Arith_Operation_Valid_Id;

   function New_Negative_Term
     (Ada_Node : Node_Id := Empty;
      Operand  : W_Term_Valid_Id)
     return W_Negative_Term_Valid_Id;

   function New_Term_Identifier
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Label    : W_Identifier_Valid_OId := Why_Empty)
     return W_Term_Identifier_Valid_Id;

   function New_Operation
     (Ada_Node   : Node_Id := Empty;
      Name       : W_Identifier_Valid_Id;
      Parameters : W_Term_V_Array)
     return W_Operation_Valid_Id;

   function New_Named_Term
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Term     : W_Term_Valid_Id)
     return W_Named_Term_Valid_Id;

   function New_Conditional_Term
     (Ada_Node  : Node_Id := Empty;
      Condition : W_Term_Valid_Id;
      Then_Part : W_Term_Valid_Id;
      Else_Part : W_Term_Valid_Id)
     return W_Conditional_Term_Valid_Id;

   function New_Matching_Term
     (Ada_Node : Node_Id := Empty;
      Term     : W_Term_Valid_Id;
      Branches : W_Match_Case_V_Array)
     return W_Matching_Term_Valid_Id;

   function New_Binding_Term
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Def      : W_Term_Valid_Id;
      Context  : W_Term_Valid_Id)
     return W_Binding_Term_Valid_Id;

   function New_Protected_Term
     (Ada_Node : Node_Id := Empty;
      Term     : W_Term_Valid_Id)
     return W_Protected_Term_Valid_Id;

   function New_Op_Add
     (Ada_Node : Node_Id := Empty)
     return W_Op_Add_Valid_Id;

   function New_Op_Substract
     (Ada_Node : Node_Id := Empty)
     return W_Op_Substract_Valid_Id;

   function New_Op_Multiply
     (Ada_Node : Node_Id := Empty)
     return W_Op_Multiply_Valid_Id;

   function New_Op_Divide
     (Ada_Node : Node_Id := Empty)
     return W_Op_Divide_Valid_Id;

   function New_Op_Modulo
     (Ada_Node : Node_Id := Empty)
     return W_Op_Modulo_Valid_Id;

   function New_True_Literal_Pred
     (Ada_Node : Node_Id := Empty)
     return W_True_Literal_Pred_Valid_Id;

   function New_False_Literal_Pred
     (Ada_Node : Node_Id := Empty)
     return W_False_Literal_Pred_Valid_Id;

   function New_Predicate_Identifier
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id)
     return W_Predicate_Identifier_Valid_Id;

   function New_Predicate_Instance
     (Ada_Node   : Node_Id := Empty;
      Name       : W_Identifier_Valid_Id;
      Parameters : W_Term_V_Array)
     return W_Predicate_Instance_Valid_Id;

   function New_Related_Terms
     (Ada_Node : Node_Id := Empty;
      Left     : W_Term_Valid_Id;
      Op       : W_Relation_Valid_Id;
      Right    : W_Term_Valid_Id;
      Op2      : W_Relation_Valid_OId := Why_Empty;
      Right2   : W_Term_Valid_OId := Why_Empty)
     return W_Related_Terms_Valid_Id;

   function New_Implication
     (Ada_Node : Node_Id := Empty;
      Left     : W_Predicate_Valid_Id;
      Right    : W_Predicate_Valid_Id)
     return W_Implication_Valid_Id;

   function New_Equivalence
     (Ada_Node : Node_Id := Empty;
      Left     : W_Predicate_Valid_Id;
      Right    : W_Predicate_Valid_Id)
     return W_Equivalence_Valid_Id;

   function New_Disjunction
     (Ada_Node : Node_Id := Empty;
      Left     : W_Predicate_Valid_Id;
      Right    : W_Predicate_Valid_Id)
     return W_Disjunction_Valid_Id;

   function New_Conjunction
     (Ada_Node : Node_Id := Empty;
      Left     : W_Predicate_Valid_Id;
      Right    : W_Predicate_Valid_Id)
     return W_Conjunction_Valid_Id;

   function New_Negation
     (Ada_Node : Node_Id := Empty;
      Operand  : W_Predicate_Valid_Id)
     return W_Negation_Valid_Id;

   function New_Conditional_Pred
     (Ada_Node  : Node_Id := Empty;
      Condition : W_Term_Valid_Id;
      Then_Part : W_Predicate_Valid_Id;
      Else_Part : W_Predicate_Valid_Id)
     return W_Conditional_Pred_Valid_Id;

   function New_Binding_Pred
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Def      : W_Term_Valid_Id;
      Context  : W_Predicate_Valid_Id)
     return W_Binding_Pred_Valid_Id;

   function New_Universal_Quantif
     (Ada_Node  : Node_Id := Empty;
      Variables : W_Identifier_V_Array;
      Var_Type  : W_Primitive_Type_Valid_Id;
      Triggers  : W_Triggers_Valid_OId := Why_Empty;
      Pred      : W_Predicate_Valid_Id)
     return W_Universal_Quantif_Valid_Id;

   function New_Existential_Quantif
     (Ada_Node  : Node_Id := Empty;
      Variables : W_Identifier_V_Array;
      Var_Type  : W_Primitive_Type_Valid_Id;
      Pred      : W_Predicate_Valid_Id)
     return W_Existential_Quantif_Valid_Id;

   function New_Named_Predicate
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Pred     : W_Predicate_Valid_Id)
     return W_Named_Predicate_Valid_Id;

   function New_Protected_Predicate
     (Ada_Node : Node_Id := Empty;
      Pred     : W_Predicate_Valid_Id)
     return W_Protected_Predicate_Valid_Id;

   function New_Pattern
     (Ada_Node : Node_Id := Empty;
      Constr   : W_Identifier_Valid_Id;
      Args     : W_Identifier_V_Array := (2 .. 1 => <>))
     return W_Pattern_Valid_Id;

   function New_Match_Case
     (Ada_Node : Node_Id := Empty;
      Pattern  : W_Pattern_Valid_Id;
      Term     : W_Term_Valid_Id)
     return W_Match_Case_Valid_Id;

   function New_Triggers
     (Ada_Node : Node_Id := Empty;
      Triggers : W_Trigger_V_Array)
     return W_Triggers_Valid_Id;

   function New_Trigger
     (Ada_Node : Node_Id := Empty;
      Terms    : W_Term_V_Array)
     return W_Trigger_Valid_Id;

   function New_Rel_Eq
     (Ada_Node : Node_Id := Empty)
     return W_Rel_Eq_Valid_Id;

   function New_Rel_Ne
     (Ada_Node : Node_Id := Empty)
     return W_Rel_Ne_Valid_Id;

   function New_Rel_Lt
     (Ada_Node : Node_Id := Empty)
     return W_Rel_Lt_Valid_Id;

   function New_Rel_Le
     (Ada_Node : Node_Id := Empty)
     return W_Rel_Le_Valid_Id;

   function New_Rel_Gt
     (Ada_Node : Node_Id := Empty)
     return W_Rel_Gt_Valid_Id;

   function New_Rel_Ge
     (Ada_Node : Node_Id := Empty)
     return W_Rel_Ge_Valid_Id;

   function New_Type
     (Ada_Node        : Node_Id := Empty;
      External        : W_External_Valid_OId := Why_Empty;
      Type_Parameters : W_Identifier_V_Array := (2 .. 1 => <>);
      Name            : W_Identifier_Valid_Id;
      Definition      : W_Type_Definition_Valid_OId := Why_Empty)
     return W_Type_Valid_Id;

   function New_Logic
     (Ada_Node   : Node_Id := Empty;
      External   : W_External_Valid_OId := Why_Empty;
      Names      : W_Identifier_V_Array;
      Logic_Type : W_Logic_Type_Valid_Id)
     return W_Logic_Valid_Id;

   function New_Function
     (Ada_Node    : Node_Id := Empty;
      Name        : W_Identifier_Valid_Id;
      Binders     : W_Logic_Binder_V_Array;
      Return_Type : W_Primitive_Type_Valid_Id;
      Def         : W_Term_Valid_Id)
     return W_Function_Valid_Id;

   function New_Predicate_Definition
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Binders  : W_Logic_Binder_V_Array;
      Def      : W_Predicate_Valid_Id)
     return W_Predicate_Definition_Valid_Id;

   function New_Inductive
     (Ada_Node   : Node_Id := Empty;
      Name       : W_Identifier_Valid_Id;
      Logic_Type : W_Logic_Type_Valid_Id;
      Def        : W_Inductive_Case_V_Array)
     return W_Inductive_Valid_Id;

   function New_Axiom
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Def      : W_Predicate_Valid_Id)
     return W_Axiom_Valid_Id;

   function New_Goal
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Def      : W_Predicate_Valid_Id)
     return W_Goal_Valid_Id;

   function New_External
     (Ada_Node : Node_Id := Empty)
     return W_External_Valid_Id;

   function New_Logic_Type
     (Ada_Node    : Node_Id := Empty;
      Arg_Types   : W_Logic_Arg_Type_V_Array := (2 .. 1 => <>);
      Return_Type : W_Logic_Return_Type_Valid_Id)
     return W_Logic_Type_Valid_Id;

   function New_Logic_Binder
     (Ada_Node   : Node_Id := Empty;
      Name       : W_Identifier_Valid_Id;
      Param_Type : W_Primitive_Type_Valid_Id)
     return W_Logic_Binder_Valid_Id;

   function New_Inductive_Case
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Pred     : W_Predicate_Valid_Id)
     return W_Inductive_Case_Valid_Id;

   function New_Transparent_Type_Definition
     (Ada_Node        : Node_Id := Empty;
      Type_Definition : W_Primitive_Type_Valid_Id)
     return W_Transparent_Type_Definition_Valid_Id;

   function New_Adt_Definition
     (Ada_Node     : Node_Id := Empty;
      Constructors : W_Constr_Decl_V_Array)
     return W_Adt_Definition_Valid_Id;

   function New_Constr_Decl
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Arg_List : W_Primitive_Type_V_Array := (2 .. 1 => <>))
     return W_Constr_Decl_Valid_Id;

   function New_Effects
     (Ada_Node : Node_Id := Empty;
      Reads    : W_Identifier_V_Array := (2 .. 1 => <>);
      Writes   : W_Identifier_V_Array := (2 .. 1 => <>);
      Raises   : W_Identifier_V_Array := (2 .. 1 => <>))
     return W_Effects_Valid_Id;

   function New_Precondition
     (Ada_Node  : Node_Id := Empty;
      Assertion : W_Assertion_Valid_Id)
     return W_Precondition_Valid_Id;

   function New_Postcondition
     (Ada_Node  : Node_Id := Empty;
      Assertion : W_Assertion_Valid_Id;
      Handlers  : W_Exn_Condition_V_Array := (2 .. 1 => <>))
     return W_Postcondition_Valid_Id;

   function New_Exn_Condition
     (Ada_Node  : Node_Id := Empty;
      Exn_Case  : W_Identifier_Valid_Id;
      Assertion : W_Assertion_Valid_Id)
     return W_Exn_Condition_Valid_Id;

   function New_Assertion
     (Ada_Node : Node_Id := Empty;
      Pred     : W_Predicate_Valid_Id;
      As       : W_Identifier_Valid_OId := Why_Empty)
     return W_Assertion_Valid_Id;

   function New_Prog_Constant
     (Ada_Node : Node_Id := Empty;
      Def      : W_Constant_Valid_Id)
     return W_Prog_Constant_Valid_Id;

   function New_Prog_Identifier
     (Ada_Node : Node_Id := Empty;
      Def      : W_Identifier_Valid_Id)
     return W_Prog_Identifier_Valid_Id;

   function New_Any_Expr
     (Ada_Node : Node_Id := Empty;
      Any_Type : W_Computation_Type_Valid_Id)
     return W_Any_Expr_Valid_Id;

   function New_Deref
     (Ada_Node : Node_Id := Empty;
      Ref      : W_Identifier_Valid_Id)
     return W_Deref_Valid_Id;

   function New_Assignment
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Value    : W_Prog_Valid_Id)
     return W_Assignment_Valid_Id;

   function New_Array_Access
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Index    : W_Prog_Valid_Id)
     return W_Array_Access_Valid_Id;

   function New_Array_Update
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Index    : W_Prog_Valid_Id;
      Value    : W_Prog_Valid_Id)
     return W_Array_Update_Valid_Id;

   function New_Infix_Call
     (Ada_Node : Node_Id := Empty;
      Left     : W_Prog_Valid_Id;
      Infix    : W_Infix_Valid_Id;
      Right    : W_Prog_Valid_Id)
     return W_Infix_Call_Valid_Id;

   function New_Prefix_Call
     (Ada_Node : Node_Id := Empty;
      Prefix   : W_Prefix_Valid_Id;
      Operand  : W_Prog_Valid_Id)
     return W_Prefix_Call_Valid_Id;

   function New_Binding_Prog
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Def      : W_Prog_Valid_Id;
      Context  : W_Prog_Valid_Id)
     return W_Binding_Prog_Valid_Id;

   function New_Binding_Ref
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Def      : W_Prog_Valid_Id;
      Context  : W_Prog_Valid_Id)
     return W_Binding_Ref_Valid_Id;

   function New_Conditional_Prog
     (Ada_Node  : Node_Id := Empty;
      Condition : W_Prog_Valid_Id;
      Then_Part : W_Prog_Valid_Id;
      Else_Part : W_Prog_Valid_OId := Why_Empty)
     return W_Conditional_Prog_Valid_Id;

   function New_While_Loop
     (Ada_Node     : Node_Id := Empty;
      Condition    : W_Prog_Valid_Id;
      Annotation   : W_Loop_Annot_Valid_Id;
      Loop_Content : W_Prog_Valid_Id)
     return W_While_Loop_Valid_Id;

   function New_Statement_Sequence
     (Ada_Node   : Node_Id := Empty;
      Statements : W_Prog_V_Array)
     return W_Statement_Sequence_Valid_Id;

   function New_Label
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Def      : W_Prog_Valid_Id)
     return W_Label_Valid_Id;

   function New_Assert
     (Ada_Node   : Node_Id := Empty;
      Assertions : W_Assertion_V_Array;
      Prog       : W_Prog_Valid_Id)
     return W_Assert_Valid_Id;

   function New_Post_Assertion
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Valid_Id;
      Post     : W_Postcondition_Valid_Id)
     return W_Post_Assertion_Valid_Id;

   function New_Opaque_Assertion
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Valid_Id;
      Post     : W_Postcondition_Valid_Id)
     return W_Opaque_Assertion_Valid_Id;

   function New_Fun_Def
     (Ada_Node : Node_Id := Empty;
      Binders  : W_Binder_V_Array;
      Pre      : W_Precondition_Valid_Id;
      Def      : W_Prog_Valid_Id)
     return W_Fun_Def_Valid_Id;

   function New_Binding_Fun
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Binders  : W_Binder_V_Array;
      Pre      : W_Precondition_Valid_Id;
      Def      : W_Prog_Valid_Id;
      Context  : W_Prog_Valid_Id)
     return W_Binding_Fun_Valid_Id;

   function New_Binding_Rec
     (Ada_Node : Node_Id := Empty;
      Recfun   : W_Recfun_Valid_Id;
      Context  : W_Prog_Valid_Id)
     return W_Binding_Rec_Valid_Id;

   function New_Prog_Call
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Progs    : W_Prog_V_Array)
     return W_Prog_Call_Valid_Id;

   function New_Raise_Statement
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Exn_Type : W_Value_Type_Valid_OId := Why_Empty)
     return W_Raise_Statement_Valid_Id;

   function New_Raise_Statement_With_Parameters
     (Ada_Node  : Node_Id := Empty;
      Name      : W_Identifier_Valid_Id;
      Parameter : W_Term_Valid_Id;
      Exn_Type  : W_Value_Type_Valid_OId := Why_Empty)
     return W_Raise_Statement_With_Parameters_Valid_Id;

   function New_Try_Block
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Valid_Id;
      Handler  : W_Handler_V_Array)
     return W_Try_Block_Valid_Id;

   function New_Unreachable_Code
     (Ada_Node : Node_Id := Empty;
      Exn_Type : W_Value_Type_Valid_OId := Why_Empty)
     return W_Unreachable_Code_Valid_Id;

   function New_Begin_Block
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Valid_Id)
     return W_Begin_Block_Valid_Id;

   function New_Protected_Prog
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Valid_Id)
     return W_Protected_Prog_Valid_Id;

   function New_Op_Add_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Add_Prog_Valid_Id;

   function New_Op_Substract_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Substract_Prog_Valid_Id;

   function New_Op_Multiply_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Multiply_Prog_Valid_Id;

   function New_Op_Divide_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Divide_Prog_Valid_Id;

   function New_Op_Mod_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Mod_Prog_Valid_Id;

   function New_Op_Eq_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Eq_Prog_Valid_Id;

   function New_Op_Ne_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Ne_Prog_Valid_Id;

   function New_Op_Lt_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Lt_Prog_Valid_Id;

   function New_Op_Le_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Le_Prog_Valid_Id;

   function New_Op_Gt_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Gt_Prog_Valid_Id;

   function New_Op_Ge_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Ge_Prog_Valid_Id;

   function New_Op_Or_Else_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Or_Else_Prog_Valid_Id;

   function New_Op_And_Then_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_And_Then_Prog_Valid_Id;

   function New_Op_Minus_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Minus_Prog_Valid_Id;

   function New_Op_Not_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Not_Prog_Valid_Id;

   function New_Binder
     (Ada_Node : Node_Id := Empty;
      Names    : W_Identifier_V_Array;
      Arg_Type : W_Value_Type_Valid_Id)
     return W_Binder_Valid_Id;

   function New_Recfun
     (Ada_Node    : Node_Id := Empty;
      Name        : W_Identifier_Valid_Id;
      Binders     : W_Binder_V_Array;
      Return_Type : W_Prog_Valid_Id;
      Variant     : W_Wf_Arg_Valid_Id;
      Pre         : W_Precondition_Valid_Id;
      Def         : W_Prog_Valid_Id)
     return W_Recfun_Valid_Id;

   function New_Loop_Annot
     (Ada_Node  : Node_Id := Empty;
      Invariant : W_Assertion_Valid_OId := Why_Empty;
      Variant   : W_Wf_Arg_Valid_OId := Why_Empty)
     return W_Loop_Annot_Valid_Id;

   function New_Wf_Arg
     (Ada_Node : Node_Id := Empty;
      Def      : W_Term_Valid_Id;
      For_Id   : W_Identifier_Valid_OId := Why_Empty)
     return W_Wf_Arg_Valid_Id;

   function New_Handler
     (Ada_Node  : Node_Id := Empty;
      Name      : W_Identifier_Valid_Id;
      Parameter : W_Prog_Valid_OId := Why_Empty;
      Def       : W_Prog_Valid_Id)
     return W_Handler_Valid_Id;

   function New_File
     (Ada_Node     : Node_Id := Empty;
      Declarations : W_Declaration_V_Array := (2 .. 1 => <>))
     return W_File_Valid_Id;

   function New_Global_Binding
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id;
      Binders  : W_Binder_V_Array := (2 .. 1 => <>);
      Pre      : W_Precondition_Valid_Id;
      Def      : W_Prog_Valid_Id)
     return W_Global_Binding_Valid_Id;

   function New_Global_Rec_Binding
     (Ada_Node : Node_Id := Empty;
      Name     : W_Recfun_Valid_Id)
     return W_Global_Rec_Binding_Valid_Id;

   function New_Parameter_Declaration
     (Ada_Node       : Node_Id := Empty;
      External       : W_External_Valid_OId := Why_Empty;
      Names          : W_Identifier_V_Array;
      Parameter_Type : W_Value_Type_Valid_Id)
     return W_Parameter_Declaration_Valid_Id;

   function New_Exception_Declaration
     (Ada_Node  : Node_Id := Empty;
      Name      : W_Identifier_Valid_Id;
      Parameter : W_Primitive_Type_Valid_OId := Why_Empty)
     return W_Exception_Declaration_Valid_Id;

   function New_Logic_Declaration
     (Ada_Node : Node_Id := Empty;
      Decl     : W_Logic_Declaration_Class_Valid_Id)
     return W_Logic_Declaration_Valid_Id;

   function New_Include_Declaration
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Valid_Id)
     return W_Include_Declaration_Valid_Id;

   function New_Identifier
     (Ada_Node : Node_Id := Empty;
      Symbol   : Name_Id;
      Entity   : Why_Node_Id := Why_Empty)
     return W_Identifier_Id;
   function New_Type_Prop
     (Ada_Node : Node_Id := Empty)
     return W_Type_Prop_Id;

   function New_Type_Prop
     (Ada_Node : Node_Id := Empty)
     return W_Logic_Return_Type_Id;
   function New_Type_Int
     (Ada_Node : Node_Id := Empty)
     return W_Type_Int_Id;

   function New_Type_Int
     (Ada_Node : Node_Id := Empty)
     return W_Primitive_Type_Id;

   function New_Type_Int
     (Ada_Node : Node_Id := Empty)
     return W_Logic_Return_Type_Id;

   function New_Type_Int
     (Ada_Node : Node_Id := Empty)
     return W_Logic_Arg_Type_Id;

   function New_Type_Int
     (Ada_Node : Node_Id := Empty)
     return W_Simple_Value_Type_Id;

   function New_Type_Int
     (Ada_Node : Node_Id := Empty)
     return W_Value_Type_Id;

   function New_Type_Int
     (Ada_Node : Node_Id := Empty)
     return W_Computation_Type_Id;
   function New_Type_Bool
     (Ada_Node : Node_Id := Empty)
     return W_Type_Bool_Id;

   function New_Type_Bool
     (Ada_Node : Node_Id := Empty)
     return W_Primitive_Type_Id;

   function New_Type_Bool
     (Ada_Node : Node_Id := Empty)
     return W_Logic_Return_Type_Id;

   function New_Type_Bool
     (Ada_Node : Node_Id := Empty)
     return W_Logic_Arg_Type_Id;

   function New_Type_Bool
     (Ada_Node : Node_Id := Empty)
     return W_Simple_Value_Type_Id;

   function New_Type_Bool
     (Ada_Node : Node_Id := Empty)
     return W_Value_Type_Id;

   function New_Type_Bool
     (Ada_Node : Node_Id := Empty)
     return W_Computation_Type_Id;
   function New_Type_Real
     (Ada_Node : Node_Id := Empty)
     return W_Type_Real_Id;

   function New_Type_Real
     (Ada_Node : Node_Id := Empty)
     return W_Primitive_Type_Id;

   function New_Type_Real
     (Ada_Node : Node_Id := Empty)
     return W_Logic_Return_Type_Id;

   function New_Type_Real
     (Ada_Node : Node_Id := Empty)
     return W_Logic_Arg_Type_Id;

   function New_Type_Real
     (Ada_Node : Node_Id := Empty)
     return W_Simple_Value_Type_Id;

   function New_Type_Real
     (Ada_Node : Node_Id := Empty)
     return W_Value_Type_Id;

   function New_Type_Real
     (Ada_Node : Node_Id := Empty)
     return W_Computation_Type_Id;
   function New_Type_Unit
     (Ada_Node : Node_Id := Empty)
     return W_Type_Unit_Id;

   function New_Type_Unit
     (Ada_Node : Node_Id := Empty)
     return W_Primitive_Type_Id;

   function New_Type_Unit
     (Ada_Node : Node_Id := Empty)
     return W_Logic_Return_Type_Id;

   function New_Type_Unit
     (Ada_Node : Node_Id := Empty)
     return W_Logic_Arg_Type_Id;

   function New_Type_Unit
     (Ada_Node : Node_Id := Empty)
     return W_Simple_Value_Type_Id;

   function New_Type_Unit
     (Ada_Node : Node_Id := Empty)
     return W_Value_Type_Id;

   function New_Type_Unit
     (Ada_Node : Node_Id := Empty)
     return W_Computation_Type_Id;
   function New_Abstract_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Abstract_Type_Id;

   function New_Abstract_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Primitive_Type_Id;

   function New_Abstract_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Logic_Return_Type_Id;

   function New_Abstract_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Logic_Arg_Type_Id;

   function New_Abstract_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Simple_Value_Type_Id;

   function New_Abstract_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Value_Type_Id;

   function New_Abstract_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Computation_Type_Id;
   function New_Generic_Formal_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Generic_Formal_Type_Id;

   function New_Generic_Formal_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Primitive_Type_Id;

   function New_Generic_Formal_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Logic_Return_Type_Id;

   function New_Generic_Formal_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Logic_Arg_Type_Id;

   function New_Generic_Formal_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Simple_Value_Type_Id;

   function New_Generic_Formal_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Value_Type_Id;

   function New_Generic_Formal_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Computation_Type_Id;
   function New_Generic_Actual_Type_Chain
     (Ada_Node   : Node_Id := Empty;
      Type_Chain : W_Primitive_Type_Array;
      Name       : W_Identifier_Id)
     return W_Generic_Actual_Type_Chain_Id;

   function New_Generic_Actual_Type_Chain
     (Ada_Node   : Node_Id := Empty;
      Type_Chain : W_Primitive_Type_Array;
      Name       : W_Identifier_Id)
     return W_Primitive_Type_Id;

   function New_Generic_Actual_Type_Chain
     (Ada_Node   : Node_Id := Empty;
      Type_Chain : W_Primitive_Type_Array;
      Name       : W_Identifier_Id)
     return W_Logic_Return_Type_Id;

   function New_Generic_Actual_Type_Chain
     (Ada_Node   : Node_Id := Empty;
      Type_Chain : W_Primitive_Type_Array;
      Name       : W_Identifier_Id)
     return W_Logic_Arg_Type_Id;

   function New_Generic_Actual_Type_Chain
     (Ada_Node   : Node_Id := Empty;
      Type_Chain : W_Primitive_Type_Array;
      Name       : W_Identifier_Id)
     return W_Simple_Value_Type_Id;

   function New_Generic_Actual_Type_Chain
     (Ada_Node   : Node_Id := Empty;
      Type_Chain : W_Primitive_Type_Array;
      Name       : W_Identifier_Id)
     return W_Value_Type_Id;

   function New_Generic_Actual_Type_Chain
     (Ada_Node   : Node_Id := Empty;
      Type_Chain : W_Primitive_Type_Array;
      Name       : W_Identifier_Id)
     return W_Computation_Type_Id;
   function New_Array_Type
     (Ada_Node       : Node_Id := Empty;
      Component_Type : W_Primitive_Type_Id)
     return W_Array_Type_Id;

   function New_Array_Type
     (Ada_Node       : Node_Id := Empty;
      Component_Type : W_Primitive_Type_Id)
     return W_Logic_Arg_Type_Id;

   function New_Array_Type
     (Ada_Node       : Node_Id := Empty;
      Component_Type : W_Primitive_Type_Id)
     return W_Simple_Value_Type_Id;

   function New_Array_Type
     (Ada_Node       : Node_Id := Empty;
      Component_Type : W_Primitive_Type_Id)
     return W_Value_Type_Id;

   function New_Array_Type
     (Ada_Node       : Node_Id := Empty;
      Component_Type : W_Primitive_Type_Id)
     return W_Computation_Type_Id;
   function New_Ref_Type
     (Ada_Node     : Node_Id := Empty;
      Aliased_Type : W_Primitive_Type_Id)
     return W_Ref_Type_Id;

   function New_Ref_Type
     (Ada_Node     : Node_Id := Empty;
      Aliased_Type : W_Primitive_Type_Id)
     return W_Simple_Value_Type_Id;

   function New_Ref_Type
     (Ada_Node     : Node_Id := Empty;
      Aliased_Type : W_Primitive_Type_Id)
     return W_Value_Type_Id;

   function New_Ref_Type
     (Ada_Node     : Node_Id := Empty;
      Aliased_Type : W_Primitive_Type_Id)
     return W_Computation_Type_Id;
   function New_Protected_Value_Type
     (Ada_Node   : Node_Id := Empty;
      Value_Type : W_Value_Type_Id)
     return W_Protected_Value_Type_Id;

   function New_Protected_Value_Type
     (Ada_Node   : Node_Id := Empty;
      Value_Type : W_Value_Type_Id)
     return W_Simple_Value_Type_Id;

   function New_Protected_Value_Type
     (Ada_Node   : Node_Id := Empty;
      Value_Type : W_Value_Type_Id)
     return W_Value_Type_Id;

   function New_Protected_Value_Type
     (Ada_Node   : Node_Id := Empty;
      Value_Type : W_Value_Type_Id)
     return W_Computation_Type_Id;
   function New_Arrow_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_OId := Why_Empty;
      Left     : W_Simple_Value_Type_Id;
      Right    : W_Computation_Type_Id)
     return W_Arrow_Type_Id;

   function New_Arrow_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_OId := Why_Empty;
      Left     : W_Simple_Value_Type_Id;
      Right    : W_Computation_Type_Id)
     return W_Value_Type_Id;

   function New_Arrow_Type
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_OId := Why_Empty;
      Left     : W_Simple_Value_Type_Id;
      Right    : W_Computation_Type_Id)
     return W_Computation_Type_Id;
   function New_Computation_Spec
     (Ada_Node      : Node_Id := Empty;
      Precondition  : W_Precondition_OId := Why_Empty;
      Result_Name   : W_Identifier_OId := Why_Empty;
      Return_Type   : W_Value_Type_Id;
      Effects       : W_Effects_Id;
      Postcondition : W_Postcondition_OId := Why_Empty)
     return W_Computation_Spec_Id;

   function New_Computation_Spec
     (Ada_Node      : Node_Id := Empty;
      Precondition  : W_Precondition_OId := Why_Empty;
      Result_Name   : W_Identifier_OId := Why_Empty;
      Return_Type   : W_Value_Type_Id;
      Effects       : W_Effects_Id;
      Postcondition : W_Postcondition_OId := Why_Empty)
     return W_Computation_Type_Id;
   function New_Integer_Constant
     (Ada_Node : Node_Id := Empty;
      Value    : Uint)
     return W_Integer_Constant_Id;

   function New_Integer_Constant
     (Ada_Node : Node_Id := Empty;
      Value    : Uint)
     return W_Term_Id;

   function New_Integer_Constant
     (Ada_Node : Node_Id := Empty;
      Value    : Uint)
     return W_Constant_Id;
   function New_Real_Constant
     (Ada_Node : Node_Id := Empty;
      Value    : Ureal)
     return W_Real_Constant_Id;

   function New_Real_Constant
     (Ada_Node : Node_Id := Empty;
      Value    : Ureal)
     return W_Term_Id;

   function New_Real_Constant
     (Ada_Node : Node_Id := Empty;
      Value    : Ureal)
     return W_Constant_Id;
   function New_True_Literal
     (Ada_Node : Node_Id := Empty)
     return W_True_Literal_Id;

   function New_True_Literal
     (Ada_Node : Node_Id := Empty)
     return W_Term_Id;

   function New_True_Literal
     (Ada_Node : Node_Id := Empty)
     return W_Constant_Id;
   function New_False_Literal
     (Ada_Node : Node_Id := Empty)
     return W_False_Literal_Id;

   function New_False_Literal
     (Ada_Node : Node_Id := Empty)
     return W_Term_Id;

   function New_False_Literal
     (Ada_Node : Node_Id := Empty)
     return W_Constant_Id;
   function New_Void_Literal
     (Ada_Node : Node_Id := Empty)
     return W_Void_Literal_Id;

   function New_Void_Literal
     (Ada_Node : Node_Id := Empty)
     return W_Term_Id;

   function New_Void_Literal
     (Ada_Node : Node_Id := Empty)
     return W_Constant_Id;
   function New_Arith_Operation
     (Ada_Node : Node_Id := Empty;
      Left     : W_Term_Id;
      Op       : W_Arith_Op_Id;
      Right    : W_Term_Id)
     return W_Arith_Operation_Id;

   function New_Arith_Operation
     (Ada_Node : Node_Id := Empty;
      Left     : W_Term_Id;
      Op       : W_Arith_Op_Id;
      Right    : W_Term_Id)
     return W_Term_Id;
   function New_Negative_Term
     (Ada_Node : Node_Id := Empty;
      Operand  : W_Term_Id)
     return W_Negative_Term_Id;

   function New_Negative_Term
     (Ada_Node : Node_Id := Empty;
      Operand  : W_Term_Id)
     return W_Term_Id;
   function New_Term_Identifier
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Label    : W_Identifier_OId := Why_Empty)
     return W_Term_Identifier_Id;

   function New_Term_Identifier
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Label    : W_Identifier_OId := Why_Empty)
     return W_Term_Id;
   function New_Operation
     (Ada_Node   : Node_Id := Empty;
      Name       : W_Identifier_Id;
      Parameters : W_Term_Array)
     return W_Operation_Id;

   function New_Operation
     (Ada_Node   : Node_Id := Empty;
      Name       : W_Identifier_Id;
      Parameters : W_Term_Array)
     return W_Term_Id;
   function New_Named_Term
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Term     : W_Term_Id)
     return W_Named_Term_Id;

   function New_Named_Term
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Term     : W_Term_Id)
     return W_Term_Id;
   function New_Conditional_Term
     (Ada_Node  : Node_Id := Empty;
      Condition : W_Term_Id;
      Then_Part : W_Term_Id;
      Else_Part : W_Term_Id)
     return W_Conditional_Term_Id;

   function New_Conditional_Term
     (Ada_Node  : Node_Id := Empty;
      Condition : W_Term_Id;
      Then_Part : W_Term_Id;
      Else_Part : W_Term_Id)
     return W_Term_Id;
   function New_Matching_Term
     (Ada_Node : Node_Id := Empty;
      Term     : W_Term_Id;
      Branches : W_Match_Case_Array)
     return W_Matching_Term_Id;

   function New_Matching_Term
     (Ada_Node : Node_Id := Empty;
      Term     : W_Term_Id;
      Branches : W_Match_Case_Array)
     return W_Term_Id;
   function New_Binding_Term
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Def      : W_Term_Id;
      Context  : W_Term_Id)
     return W_Binding_Term_Id;

   function New_Binding_Term
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Def      : W_Term_Id;
      Context  : W_Term_Id)
     return W_Term_Id;
   function New_Protected_Term
     (Ada_Node : Node_Id := Empty;
      Term     : W_Term_Id)
     return W_Protected_Term_Id;

   function New_Protected_Term
     (Ada_Node : Node_Id := Empty;
      Term     : W_Term_Id)
     return W_Term_Id;
   function New_Op_Add
     (Ada_Node : Node_Id := Empty)
     return W_Op_Add_Id;

   function New_Op_Add
     (Ada_Node : Node_Id := Empty)
     return W_Arith_Op_Id;
   function New_Op_Substract
     (Ada_Node : Node_Id := Empty)
     return W_Op_Substract_Id;

   function New_Op_Substract
     (Ada_Node : Node_Id := Empty)
     return W_Arith_Op_Id;
   function New_Op_Multiply
     (Ada_Node : Node_Id := Empty)
     return W_Op_Multiply_Id;

   function New_Op_Multiply
     (Ada_Node : Node_Id := Empty)
     return W_Arith_Op_Id;
   function New_Op_Divide
     (Ada_Node : Node_Id := Empty)
     return W_Op_Divide_Id;

   function New_Op_Divide
     (Ada_Node : Node_Id := Empty)
     return W_Arith_Op_Id;
   function New_Op_Modulo
     (Ada_Node : Node_Id := Empty)
     return W_Op_Modulo_Id;

   function New_Op_Modulo
     (Ada_Node : Node_Id := Empty)
     return W_Arith_Op_Id;
   function New_True_Literal_Pred
     (Ada_Node : Node_Id := Empty)
     return W_True_Literal_Pred_Id;

   function New_True_Literal_Pred
     (Ada_Node : Node_Id := Empty)
     return W_Predicate_Id;
   function New_False_Literal_Pred
     (Ada_Node : Node_Id := Empty)
     return W_False_Literal_Pred_Id;

   function New_False_Literal_Pred
     (Ada_Node : Node_Id := Empty)
     return W_Predicate_Id;
   function New_Predicate_Identifier
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Predicate_Identifier_Id;

   function New_Predicate_Identifier
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Predicate_Id;
   function New_Predicate_Instance
     (Ada_Node   : Node_Id := Empty;
      Name       : W_Identifier_Id;
      Parameters : W_Term_Array)
     return W_Predicate_Instance_Id;

   function New_Predicate_Instance
     (Ada_Node   : Node_Id := Empty;
      Name       : W_Identifier_Id;
      Parameters : W_Term_Array)
     return W_Predicate_Id;
   function New_Related_Terms
     (Ada_Node : Node_Id := Empty;
      Left     : W_Term_Id;
      Op       : W_Relation_Id;
      Right    : W_Term_Id;
      Op2      : W_Relation_OId := Why_Empty;
      Right2   : W_Term_OId := Why_Empty)
     return W_Related_Terms_Id;

   function New_Related_Terms
     (Ada_Node : Node_Id := Empty;
      Left     : W_Term_Id;
      Op       : W_Relation_Id;
      Right    : W_Term_Id;
      Op2      : W_Relation_OId := Why_Empty;
      Right2   : W_Term_OId := Why_Empty)
     return W_Predicate_Id;
   function New_Implication
     (Ada_Node : Node_Id := Empty;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Implication_Id;

   function New_Implication
     (Ada_Node : Node_Id := Empty;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Predicate_Id;
   function New_Equivalence
     (Ada_Node : Node_Id := Empty;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Equivalence_Id;

   function New_Equivalence
     (Ada_Node : Node_Id := Empty;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Predicate_Id;
   function New_Disjunction
     (Ada_Node : Node_Id := Empty;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Disjunction_Id;

   function New_Disjunction
     (Ada_Node : Node_Id := Empty;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Predicate_Id;
   function New_Conjunction
     (Ada_Node : Node_Id := Empty;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Conjunction_Id;

   function New_Conjunction
     (Ada_Node : Node_Id := Empty;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Predicate_Id;
   function New_Negation
     (Ada_Node : Node_Id := Empty;
      Operand  : W_Predicate_Id)
     return W_Negation_Id;

   function New_Negation
     (Ada_Node : Node_Id := Empty;
      Operand  : W_Predicate_Id)
     return W_Predicate_Id;
   function New_Conditional_Pred
     (Ada_Node  : Node_Id := Empty;
      Condition : W_Term_Id;
      Then_Part : W_Predicate_Id;
      Else_Part : W_Predicate_Id)
     return W_Conditional_Pred_Id;

   function New_Conditional_Pred
     (Ada_Node  : Node_Id := Empty;
      Condition : W_Term_Id;
      Then_Part : W_Predicate_Id;
      Else_Part : W_Predicate_Id)
     return W_Predicate_Id;
   function New_Binding_Pred
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Def      : W_Term_Id;
      Context  : W_Predicate_Id)
     return W_Binding_Pred_Id;

   function New_Binding_Pred
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Def      : W_Term_Id;
      Context  : W_Predicate_Id)
     return W_Predicate_Id;
   function New_Universal_Quantif
     (Ada_Node  : Node_Id := Empty;
      Variables : W_Identifier_Array;
      Var_Type  : W_Primitive_Type_Id;
      Triggers  : W_Triggers_OId := Why_Empty;
      Pred      : W_Predicate_Id)
     return W_Universal_Quantif_Id;

   function New_Universal_Quantif
     (Ada_Node  : Node_Id := Empty;
      Variables : W_Identifier_Array;
      Var_Type  : W_Primitive_Type_Id;
      Triggers  : W_Triggers_OId := Why_Empty;
      Pred      : W_Predicate_Id)
     return W_Predicate_Id;
   function New_Existential_Quantif
     (Ada_Node  : Node_Id := Empty;
      Variables : W_Identifier_Array;
      Var_Type  : W_Primitive_Type_Id;
      Pred      : W_Predicate_Id)
     return W_Existential_Quantif_Id;

   function New_Existential_Quantif
     (Ada_Node  : Node_Id := Empty;
      Variables : W_Identifier_Array;
      Var_Type  : W_Primitive_Type_Id;
      Pred      : W_Predicate_Id)
     return W_Predicate_Id;
   function New_Named_Predicate
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Pred     : W_Predicate_Id)
     return W_Named_Predicate_Id;

   function New_Named_Predicate
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Pred     : W_Predicate_Id)
     return W_Predicate_Id;
   function New_Protected_Predicate
     (Ada_Node : Node_Id := Empty;
      Pred     : W_Predicate_Id)
     return W_Protected_Predicate_Id;

   function New_Protected_Predicate
     (Ada_Node : Node_Id := Empty;
      Pred     : W_Predicate_Id)
     return W_Predicate_Id;
   function New_Pattern
     (Ada_Node : Node_Id := Empty;
      Constr   : W_Identifier_Id;
      Args     : W_Identifier_Array := (2 .. 1 => <>))
     return W_Pattern_Id;
   function New_Match_Case
     (Ada_Node : Node_Id := Empty;
      Pattern  : W_Pattern_Id;
      Term     : W_Term_Id)
     return W_Match_Case_Id;
   function New_Triggers
     (Ada_Node : Node_Id := Empty;
      Triggers : W_Trigger_Array)
     return W_Triggers_Id;
   function New_Trigger
     (Ada_Node : Node_Id := Empty;
      Terms    : W_Term_Array)
     return W_Trigger_Id;
   function New_Rel_Eq
     (Ada_Node : Node_Id := Empty)
     return W_Rel_Eq_Id;

   function New_Rel_Eq
     (Ada_Node : Node_Id := Empty)
     return W_Relation_Id;
   function New_Rel_Ne
     (Ada_Node : Node_Id := Empty)
     return W_Rel_Ne_Id;

   function New_Rel_Ne
     (Ada_Node : Node_Id := Empty)
     return W_Relation_Id;
   function New_Rel_Lt
     (Ada_Node : Node_Id := Empty)
     return W_Rel_Lt_Id;

   function New_Rel_Lt
     (Ada_Node : Node_Id := Empty)
     return W_Relation_Id;
   function New_Rel_Le
     (Ada_Node : Node_Id := Empty)
     return W_Rel_Le_Id;

   function New_Rel_Le
     (Ada_Node : Node_Id := Empty)
     return W_Relation_Id;
   function New_Rel_Gt
     (Ada_Node : Node_Id := Empty)
     return W_Rel_Gt_Id;

   function New_Rel_Gt
     (Ada_Node : Node_Id := Empty)
     return W_Relation_Id;
   function New_Rel_Ge
     (Ada_Node : Node_Id := Empty)
     return W_Rel_Ge_Id;

   function New_Rel_Ge
     (Ada_Node : Node_Id := Empty)
     return W_Relation_Id;
   function New_Type
     (Ada_Node        : Node_Id := Empty;
      External        : W_External_OId := Why_Empty;
      Type_Parameters : W_Identifier_Array := (2 .. 1 => <>);
      Name            : W_Identifier_Id;
      Definition      : W_Type_Definition_OId := Why_Empty)
     return W_Type_Id;

   function New_Type
     (Ada_Node        : Node_Id := Empty;
      External        : W_External_OId := Why_Empty;
      Type_Parameters : W_Identifier_Array := (2 .. 1 => <>);
      Name            : W_Identifier_Id;
      Definition      : W_Type_Definition_OId := Why_Empty)
     return W_Logic_Declaration_Class_Id;
   function New_Logic
     (Ada_Node   : Node_Id := Empty;
      External   : W_External_OId := Why_Empty;
      Names      : W_Identifier_Array;
      Logic_Type : W_Logic_Type_Id)
     return W_Logic_Id;

   function New_Logic
     (Ada_Node   : Node_Id := Empty;
      External   : W_External_OId := Why_Empty;
      Names      : W_Identifier_Array;
      Logic_Type : W_Logic_Type_Id)
     return W_Logic_Declaration_Class_Id;
   function New_Function
     (Ada_Node    : Node_Id := Empty;
      Name        : W_Identifier_Id;
      Binders     : W_Logic_Binder_Array;
      Return_Type : W_Primitive_Type_Id;
      Def         : W_Term_Id)
     return W_Function_Id;

   function New_Function
     (Ada_Node    : Node_Id := Empty;
      Name        : W_Identifier_Id;
      Binders     : W_Logic_Binder_Array;
      Return_Type : W_Primitive_Type_Id;
      Def         : W_Term_Id)
     return W_Logic_Declaration_Class_Id;
   function New_Predicate_Definition
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Binders  : W_Logic_Binder_Array;
      Def      : W_Predicate_Id)
     return W_Predicate_Definition_Id;

   function New_Predicate_Definition
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Binders  : W_Logic_Binder_Array;
      Def      : W_Predicate_Id)
     return W_Logic_Declaration_Class_Id;
   function New_Inductive
     (Ada_Node   : Node_Id := Empty;
      Name       : W_Identifier_Id;
      Logic_Type : W_Logic_Type_Id;
      Def        : W_Inductive_Case_Array)
     return W_Inductive_Id;

   function New_Inductive
     (Ada_Node   : Node_Id := Empty;
      Name       : W_Identifier_Id;
      Logic_Type : W_Logic_Type_Id;
      Def        : W_Inductive_Case_Array)
     return W_Logic_Declaration_Class_Id;
   function New_Axiom
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Def      : W_Predicate_Id)
     return W_Axiom_Id;

   function New_Axiom
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Def      : W_Predicate_Id)
     return W_Logic_Declaration_Class_Id;
   function New_Goal
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Def      : W_Predicate_Id)
     return W_Goal_Id;

   function New_Goal
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Def      : W_Predicate_Id)
     return W_Logic_Declaration_Class_Id;
   function New_External
     (Ada_Node : Node_Id := Empty)
     return W_External_Id;
   function New_Logic_Type
     (Ada_Node    : Node_Id := Empty;
      Arg_Types   : W_Logic_Arg_Type_Array := (2 .. 1 => <>);
      Return_Type : W_Logic_Return_Type_Id)
     return W_Logic_Type_Id;
   function New_Logic_Binder
     (Ada_Node   : Node_Id := Empty;
      Name       : W_Identifier_Id;
      Param_Type : W_Primitive_Type_Id)
     return W_Logic_Binder_Id;
   function New_Inductive_Case
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Pred     : W_Predicate_Id)
     return W_Inductive_Case_Id;
   function New_Transparent_Type_Definition
     (Ada_Node        : Node_Id := Empty;
      Type_Definition : W_Primitive_Type_Id)
     return W_Transparent_Type_Definition_Id;

   function New_Transparent_Type_Definition
     (Ada_Node        : Node_Id := Empty;
      Type_Definition : W_Primitive_Type_Id)
     return W_Type_Definition_Id;
   function New_Adt_Definition
     (Ada_Node     : Node_Id := Empty;
      Constructors : W_Constr_Decl_Array)
     return W_Adt_Definition_Id;

   function New_Adt_Definition
     (Ada_Node     : Node_Id := Empty;
      Constructors : W_Constr_Decl_Array)
     return W_Type_Definition_Id;
   function New_Constr_Decl
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Arg_List : W_Primitive_Type_Array := (2 .. 1 => <>))
     return W_Constr_Decl_Id;
   function New_Effects
     (Ada_Node : Node_Id := Empty;
      Reads    : W_Identifier_Array := (2 .. 1 => <>);
      Writes   : W_Identifier_Array := (2 .. 1 => <>);
      Raises   : W_Identifier_Array := (2 .. 1 => <>))
     return W_Effects_Id;
   function New_Precondition
     (Ada_Node  : Node_Id := Empty;
      Assertion : W_Assertion_Id)
     return W_Precondition_Id;
   function New_Postcondition
     (Ada_Node  : Node_Id := Empty;
      Assertion : W_Assertion_Id;
      Handlers  : W_Exn_Condition_Array := (2 .. 1 => <>))
     return W_Postcondition_Id;
   function New_Exn_Condition
     (Ada_Node  : Node_Id := Empty;
      Exn_Case  : W_Identifier_Id;
      Assertion : W_Assertion_Id)
     return W_Exn_Condition_Id;
   function New_Assertion
     (Ada_Node : Node_Id := Empty;
      Pred     : W_Predicate_Id;
      As       : W_Identifier_OId := Why_Empty)
     return W_Assertion_Id;
   function New_Prog_Constant
     (Ada_Node : Node_Id := Empty;
      Def      : W_Constant_Id)
     return W_Prog_Constant_Id;

   function New_Prog_Constant
     (Ada_Node : Node_Id := Empty;
      Def      : W_Constant_Id)
     return W_Prog_Id;
   function New_Prog_Identifier
     (Ada_Node : Node_Id := Empty;
      Def      : W_Identifier_Id)
     return W_Prog_Identifier_Id;

   function New_Prog_Identifier
     (Ada_Node : Node_Id := Empty;
      Def      : W_Identifier_Id)
     return W_Prog_Id;
   function New_Any_Expr
     (Ada_Node : Node_Id := Empty;
      Any_Type : W_Computation_Type_Id)
     return W_Any_Expr_Id;

   function New_Any_Expr
     (Ada_Node : Node_Id := Empty;
      Any_Type : W_Computation_Type_Id)
     return W_Prog_Id;
   function New_Deref
     (Ada_Node : Node_Id := Empty;
      Ref      : W_Identifier_Id)
     return W_Deref_Id;

   function New_Deref
     (Ada_Node : Node_Id := Empty;
      Ref      : W_Identifier_Id)
     return W_Prog_Id;
   function New_Assignment
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Value    : W_Prog_Id)
     return W_Assignment_Id;

   function New_Assignment
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Value    : W_Prog_Id)
     return W_Prog_Id;
   function New_Array_Access
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Index    : W_Prog_Id)
     return W_Array_Access_Id;

   function New_Array_Access
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Index    : W_Prog_Id)
     return W_Prog_Id;
   function New_Array_Update
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Index    : W_Prog_Id;
      Value    : W_Prog_Id)
     return W_Array_Update_Id;

   function New_Array_Update
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Index    : W_Prog_Id;
      Value    : W_Prog_Id)
     return W_Prog_Id;
   function New_Infix_Call
     (Ada_Node : Node_Id := Empty;
      Left     : W_Prog_Id;
      Infix    : W_Infix_Id;
      Right    : W_Prog_Id)
     return W_Infix_Call_Id;

   function New_Infix_Call
     (Ada_Node : Node_Id := Empty;
      Left     : W_Prog_Id;
      Infix    : W_Infix_Id;
      Right    : W_Prog_Id)
     return W_Prog_Id;
   function New_Prefix_Call
     (Ada_Node : Node_Id := Empty;
      Prefix   : W_Prefix_Id;
      Operand  : W_Prog_Id)
     return W_Prefix_Call_Id;

   function New_Prefix_Call
     (Ada_Node : Node_Id := Empty;
      Prefix   : W_Prefix_Id;
      Operand  : W_Prog_Id)
     return W_Prog_Id;
   function New_Binding_Prog
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Def      : W_Prog_Id;
      Context  : W_Prog_Id)
     return W_Binding_Prog_Id;

   function New_Binding_Prog
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Def      : W_Prog_Id;
      Context  : W_Prog_Id)
     return W_Prog_Id;
   function New_Binding_Ref
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Def      : W_Prog_Id;
      Context  : W_Prog_Id)
     return W_Binding_Ref_Id;

   function New_Binding_Ref
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Def      : W_Prog_Id;
      Context  : W_Prog_Id)
     return W_Prog_Id;
   function New_Conditional_Prog
     (Ada_Node  : Node_Id := Empty;
      Condition : W_Prog_Id;
      Then_Part : W_Prog_Id;
      Else_Part : W_Prog_OId := Why_Empty)
     return W_Conditional_Prog_Id;

   function New_Conditional_Prog
     (Ada_Node  : Node_Id := Empty;
      Condition : W_Prog_Id;
      Then_Part : W_Prog_Id;
      Else_Part : W_Prog_OId := Why_Empty)
     return W_Prog_Id;
   function New_While_Loop
     (Ada_Node     : Node_Id := Empty;
      Condition    : W_Prog_Id;
      Annotation   : W_Loop_Annot_Id;
      Loop_Content : W_Prog_Id)
     return W_While_Loop_Id;

   function New_While_Loop
     (Ada_Node     : Node_Id := Empty;
      Condition    : W_Prog_Id;
      Annotation   : W_Loop_Annot_Id;
      Loop_Content : W_Prog_Id)
     return W_Prog_Id;
   function New_Statement_Sequence
     (Ada_Node   : Node_Id := Empty;
      Statements : W_Prog_Array)
     return W_Statement_Sequence_Id;

   function New_Statement_Sequence
     (Ada_Node   : Node_Id := Empty;
      Statements : W_Prog_Array)
     return W_Prog_Id;
   function New_Label
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Def      : W_Prog_Id)
     return W_Label_Id;

   function New_Label
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Def      : W_Prog_Id)
     return W_Prog_Id;
   function New_Assert
     (Ada_Node   : Node_Id := Empty;
      Assertions : W_Assertion_Array;
      Prog       : W_Prog_Id)
     return W_Assert_Id;

   function New_Assert
     (Ada_Node   : Node_Id := Empty;
      Assertions : W_Assertion_Array;
      Prog       : W_Prog_Id)
     return W_Prog_Id;
   function New_Post_Assertion
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Id;
      Post     : W_Postcondition_Id)
     return W_Post_Assertion_Id;

   function New_Post_Assertion
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Id;
      Post     : W_Postcondition_Id)
     return W_Prog_Id;
   function New_Opaque_Assertion
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Id;
      Post     : W_Postcondition_Id)
     return W_Opaque_Assertion_Id;

   function New_Opaque_Assertion
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Id;
      Post     : W_Postcondition_Id)
     return W_Prog_Id;
   function New_Fun_Def
     (Ada_Node : Node_Id := Empty;
      Binders  : W_Binder_Array;
      Pre      : W_Precondition_Id;
      Def      : W_Prog_Id)
     return W_Fun_Def_Id;

   function New_Fun_Def
     (Ada_Node : Node_Id := Empty;
      Binders  : W_Binder_Array;
      Pre      : W_Precondition_Id;
      Def      : W_Prog_Id)
     return W_Prog_Id;
   function New_Binding_Fun
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Binders  : W_Binder_Array;
      Pre      : W_Precondition_Id;
      Def      : W_Prog_Id;
      Context  : W_Prog_Id)
     return W_Binding_Fun_Id;

   function New_Binding_Fun
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Binders  : W_Binder_Array;
      Pre      : W_Precondition_Id;
      Def      : W_Prog_Id;
      Context  : W_Prog_Id)
     return W_Prog_Id;
   function New_Binding_Rec
     (Ada_Node : Node_Id := Empty;
      Recfun   : W_Recfun_Id;
      Context  : W_Prog_Id)
     return W_Binding_Rec_Id;

   function New_Binding_Rec
     (Ada_Node : Node_Id := Empty;
      Recfun   : W_Recfun_Id;
      Context  : W_Prog_Id)
     return W_Prog_Id;
   function New_Prog_Call
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Progs    : W_Prog_Array)
     return W_Prog_Call_Id;

   function New_Prog_Call
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Progs    : W_Prog_Array)
     return W_Prog_Id;
   function New_Raise_Statement
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Exn_Type : W_Value_Type_OId := Why_Empty)
     return W_Raise_Statement_Id;

   function New_Raise_Statement
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Exn_Type : W_Value_Type_OId := Why_Empty)
     return W_Prog_Id;
   function New_Raise_Statement_With_Parameters
     (Ada_Node  : Node_Id := Empty;
      Name      : W_Identifier_Id;
      Parameter : W_Term_Id;
      Exn_Type  : W_Value_Type_OId := Why_Empty)
     return W_Raise_Statement_With_Parameters_Id;

   function New_Raise_Statement_With_Parameters
     (Ada_Node  : Node_Id := Empty;
      Name      : W_Identifier_Id;
      Parameter : W_Term_Id;
      Exn_Type  : W_Value_Type_OId := Why_Empty)
     return W_Prog_Id;
   function New_Try_Block
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Id;
      Handler  : W_Handler_Array)
     return W_Try_Block_Id;

   function New_Try_Block
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Id;
      Handler  : W_Handler_Array)
     return W_Prog_Id;
   function New_Unreachable_Code
     (Ada_Node : Node_Id := Empty;
      Exn_Type : W_Value_Type_OId := Why_Empty)
     return W_Unreachable_Code_Id;

   function New_Unreachable_Code
     (Ada_Node : Node_Id := Empty;
      Exn_Type : W_Value_Type_OId := Why_Empty)
     return W_Prog_Id;
   function New_Begin_Block
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Id)
     return W_Begin_Block_Id;

   function New_Begin_Block
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Id)
     return W_Prog_Id;
   function New_Protected_Prog
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Id)
     return W_Protected_Prog_Id;

   function New_Protected_Prog
     (Ada_Node : Node_Id := Empty;
      Prog     : W_Prog_Id)
     return W_Prog_Id;
   function New_Op_Add_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Add_Prog_Id;

   function New_Op_Add_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Infix_Id;
   function New_Op_Substract_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Substract_Prog_Id;

   function New_Op_Substract_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Infix_Id;
   function New_Op_Multiply_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Multiply_Prog_Id;

   function New_Op_Multiply_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Infix_Id;
   function New_Op_Divide_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Divide_Prog_Id;

   function New_Op_Divide_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Infix_Id;
   function New_Op_Mod_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Mod_Prog_Id;

   function New_Op_Mod_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Infix_Id;
   function New_Op_Eq_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Eq_Prog_Id;

   function New_Op_Eq_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Infix_Id;
   function New_Op_Ne_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Ne_Prog_Id;

   function New_Op_Ne_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Infix_Id;
   function New_Op_Lt_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Lt_Prog_Id;

   function New_Op_Lt_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Infix_Id;
   function New_Op_Le_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Le_Prog_Id;

   function New_Op_Le_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Infix_Id;
   function New_Op_Gt_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Gt_Prog_Id;

   function New_Op_Gt_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Infix_Id;
   function New_Op_Ge_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Ge_Prog_Id;

   function New_Op_Ge_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Infix_Id;
   function New_Op_Or_Else_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Or_Else_Prog_Id;

   function New_Op_Or_Else_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Infix_Id;
   function New_Op_And_Then_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_And_Then_Prog_Id;

   function New_Op_And_Then_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Infix_Id;
   function New_Op_Minus_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Minus_Prog_Id;

   function New_Op_Minus_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Prefix_Id;
   function New_Op_Not_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Op_Not_Prog_Id;

   function New_Op_Not_Prog
     (Ada_Node : Node_Id := Empty)
     return W_Prefix_Id;
   function New_Binder
     (Ada_Node : Node_Id := Empty;
      Names    : W_Identifier_Array;
      Arg_Type : W_Value_Type_Id)
     return W_Binder_Id;
   function New_Recfun
     (Ada_Node    : Node_Id := Empty;
      Name        : W_Identifier_Id;
      Binders     : W_Binder_Array;
      Return_Type : W_Prog_Id;
      Variant     : W_Wf_Arg_Id;
      Pre         : W_Precondition_Id;
      Def         : W_Prog_Id)
     return W_Recfun_Id;
   function New_Loop_Annot
     (Ada_Node  : Node_Id := Empty;
      Invariant : W_Assertion_OId := Why_Empty;
      Variant   : W_Wf_Arg_OId := Why_Empty)
     return W_Loop_Annot_Id;
   function New_Wf_Arg
     (Ada_Node : Node_Id := Empty;
      Def      : W_Term_Id;
      For_Id   : W_Identifier_OId := Why_Empty)
     return W_Wf_Arg_Id;
   function New_Handler
     (Ada_Node  : Node_Id := Empty;
      Name      : W_Identifier_Id;
      Parameter : W_Prog_OId := Why_Empty;
      Def       : W_Prog_Id)
     return W_Handler_Id;
   function New_File
     (Ada_Node     : Node_Id := Empty;
      Declarations : W_Declaration_Array := (2 .. 1 => <>))
     return W_File_Id;
   function New_Global_Binding
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Binders  : W_Binder_Array := (2 .. 1 => <>);
      Pre      : W_Precondition_Id;
      Def      : W_Prog_Id)
     return W_Global_Binding_Id;

   function New_Global_Binding
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id;
      Binders  : W_Binder_Array := (2 .. 1 => <>);
      Pre      : W_Precondition_Id;
      Def      : W_Prog_Id)
     return W_Declaration_Id;
   function New_Global_Rec_Binding
     (Ada_Node : Node_Id := Empty;
      Name     : W_Recfun_Id)
     return W_Global_Rec_Binding_Id;

   function New_Global_Rec_Binding
     (Ada_Node : Node_Id := Empty;
      Name     : W_Recfun_Id)
     return W_Declaration_Id;
   function New_Parameter_Declaration
     (Ada_Node       : Node_Id := Empty;
      External       : W_External_OId := Why_Empty;
      Names          : W_Identifier_Array;
      Parameter_Type : W_Value_Type_Id)
     return W_Parameter_Declaration_Id;

   function New_Parameter_Declaration
     (Ada_Node       : Node_Id := Empty;
      External       : W_External_OId := Why_Empty;
      Names          : W_Identifier_Array;
      Parameter_Type : W_Value_Type_Id)
     return W_Declaration_Id;
   function New_Exception_Declaration
     (Ada_Node  : Node_Id := Empty;
      Name      : W_Identifier_Id;
      Parameter : W_Primitive_Type_OId := Why_Empty)
     return W_Exception_Declaration_Id;

   function New_Exception_Declaration
     (Ada_Node  : Node_Id := Empty;
      Name      : W_Identifier_Id;
      Parameter : W_Primitive_Type_OId := Why_Empty)
     return W_Declaration_Id;
   function New_Logic_Declaration
     (Ada_Node : Node_Id := Empty;
      Decl     : W_Logic_Declaration_Class_Id)
     return W_Logic_Declaration_Id;

   function New_Logic_Declaration
     (Ada_Node : Node_Id := Empty;
      Decl     : W_Logic_Declaration_Class_Id)
     return W_Declaration_Id;
   function New_Include_Declaration
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Include_Declaration_Id;

   function New_Include_Declaration
     (Ada_Node : Node_Id := Empty;
      Name     : W_Identifier_Id)
     return W_Declaration_Id;

   function New_Unchecked_Identifier
     (Symbol : Name_Id)
     return W_Identifier_Unchecked_Id;

   function New_Unchecked_Type_Prop
     return W_Type_Prop_Unchecked_Id;

   function New_Unchecked_Type_Int
     return W_Type_Int_Unchecked_Id;

   function New_Unchecked_Type_Bool
     return W_Type_Bool_Unchecked_Id;

   function New_Unchecked_Type_Real
     return W_Type_Real_Unchecked_Id;

   function New_Unchecked_Type_Unit
     return W_Type_Unit_Unchecked_Id;

   function New_Unchecked_Abstract_Type
     return W_Abstract_Type_Unchecked_Id;

   function New_Unchecked_Generic_Formal_Type
     return W_Generic_Formal_Type_Unchecked_Id;

   function New_Unchecked_Generic_Actual_Type_Chain
     return W_Generic_Actual_Type_Chain_Unchecked_Id;

   function New_Unchecked_Array_Type
     return W_Array_Type_Unchecked_Id;

   function New_Unchecked_Ref_Type
     return W_Ref_Type_Unchecked_Id;

   function New_Unchecked_Protected_Value_Type
     return W_Protected_Value_Type_Unchecked_Id;

   function New_Unchecked_Arrow_Type
     return W_Arrow_Type_Unchecked_Id;

   function New_Unchecked_Computation_Spec
     return W_Computation_Spec_Unchecked_Id;

   function New_Unchecked_Integer_Constant
     (Value : Uint)
     return W_Integer_Constant_Unchecked_Id;

   function New_Unchecked_Real_Constant
     (Value : Ureal)
     return W_Real_Constant_Unchecked_Id;

   function New_Unchecked_True_Literal
     return W_True_Literal_Unchecked_Id;

   function New_Unchecked_False_Literal
     return W_False_Literal_Unchecked_Id;

   function New_Unchecked_Void_Literal
     return W_Void_Literal_Unchecked_Id;

   function New_Unchecked_Arith_Operation
     return W_Arith_Operation_Unchecked_Id;

   function New_Unchecked_Negative_Term
     return W_Negative_Term_Unchecked_Id;

   function New_Unchecked_Term_Identifier
     return W_Term_Identifier_Unchecked_Id;

   function New_Unchecked_Operation
     return W_Operation_Unchecked_Id;

   function New_Unchecked_Named_Term
     return W_Named_Term_Unchecked_Id;

   function New_Unchecked_Conditional_Term
     return W_Conditional_Term_Unchecked_Id;

   function New_Unchecked_Matching_Term
     return W_Matching_Term_Unchecked_Id;

   function New_Unchecked_Binding_Term
     return W_Binding_Term_Unchecked_Id;

   function New_Unchecked_Protected_Term
     return W_Protected_Term_Unchecked_Id;

   function New_Unchecked_Op_Add
     return W_Op_Add_Unchecked_Id;

   function New_Unchecked_Op_Substract
     return W_Op_Substract_Unchecked_Id;

   function New_Unchecked_Op_Multiply
     return W_Op_Multiply_Unchecked_Id;

   function New_Unchecked_Op_Divide
     return W_Op_Divide_Unchecked_Id;

   function New_Unchecked_Op_Modulo
     return W_Op_Modulo_Unchecked_Id;

   function New_Unchecked_True_Literal_Pred
     return W_True_Literal_Pred_Unchecked_Id;

   function New_Unchecked_False_Literal_Pred
     return W_False_Literal_Pred_Unchecked_Id;

   function New_Unchecked_Predicate_Identifier
     return W_Predicate_Identifier_Unchecked_Id;

   function New_Unchecked_Predicate_Instance
     return W_Predicate_Instance_Unchecked_Id;

   function New_Unchecked_Related_Terms
     return W_Related_Terms_Unchecked_Id;

   function New_Unchecked_Implication
     return W_Implication_Unchecked_Id;

   function New_Unchecked_Equivalence
     return W_Equivalence_Unchecked_Id;

   function New_Unchecked_Disjunction
     return W_Disjunction_Unchecked_Id;

   function New_Unchecked_Conjunction
     return W_Conjunction_Unchecked_Id;

   function New_Unchecked_Negation
     return W_Negation_Unchecked_Id;

   function New_Unchecked_Conditional_Pred
     return W_Conditional_Pred_Unchecked_Id;

   function New_Unchecked_Binding_Pred
     return W_Binding_Pred_Unchecked_Id;

   function New_Unchecked_Universal_Quantif
     return W_Universal_Quantif_Unchecked_Id;

   function New_Unchecked_Existential_Quantif
     return W_Existential_Quantif_Unchecked_Id;

   function New_Unchecked_Named_Predicate
     return W_Named_Predicate_Unchecked_Id;

   function New_Unchecked_Protected_Predicate
     return W_Protected_Predicate_Unchecked_Id;

   function New_Unchecked_Pattern
     return W_Pattern_Unchecked_Id;

   function New_Unchecked_Match_Case
     return W_Match_Case_Unchecked_Id;

   function New_Unchecked_Triggers
     return W_Triggers_Unchecked_Id;

   function New_Unchecked_Trigger
     return W_Trigger_Unchecked_Id;

   function New_Unchecked_Rel_Eq
     return W_Rel_Eq_Unchecked_Id;

   function New_Unchecked_Rel_Ne
     return W_Rel_Ne_Unchecked_Id;

   function New_Unchecked_Rel_Lt
     return W_Rel_Lt_Unchecked_Id;

   function New_Unchecked_Rel_Le
     return W_Rel_Le_Unchecked_Id;

   function New_Unchecked_Rel_Gt
     return W_Rel_Gt_Unchecked_Id;

   function New_Unchecked_Rel_Ge
     return W_Rel_Ge_Unchecked_Id;

   function New_Unchecked_Type
     return W_Type_Unchecked_Id;

   function New_Unchecked_Logic
     return W_Logic_Unchecked_Id;

   function New_Unchecked_Function
     return W_Function_Unchecked_Id;

   function New_Unchecked_Predicate_Definition
     return W_Predicate_Definition_Unchecked_Id;

   function New_Unchecked_Inductive
     return W_Inductive_Unchecked_Id;

   function New_Unchecked_Axiom
     return W_Axiom_Unchecked_Id;

   function New_Unchecked_Goal
     return W_Goal_Unchecked_Id;

   function New_Unchecked_External
     return W_External_Unchecked_Id;

   function New_Unchecked_Logic_Type
     return W_Logic_Type_Unchecked_Id;

   function New_Unchecked_Logic_Binder
     return W_Logic_Binder_Unchecked_Id;

   function New_Unchecked_Inductive_Case
     return W_Inductive_Case_Unchecked_Id;

   function New_Unchecked_Transparent_Type_Definition
     return W_Transparent_Type_Definition_Unchecked_Id;

   function New_Unchecked_Adt_Definition
     return W_Adt_Definition_Unchecked_Id;

   function New_Unchecked_Constr_Decl
     return W_Constr_Decl_Unchecked_Id;

   function New_Unchecked_Effects
     return W_Effects_Unchecked_Id;

   function New_Unchecked_Precondition
     return W_Precondition_Unchecked_Id;

   function New_Unchecked_Postcondition
     return W_Postcondition_Unchecked_Id;

   function New_Unchecked_Exn_Condition
     return W_Exn_Condition_Unchecked_Id;

   function New_Unchecked_Assertion
     return W_Assertion_Unchecked_Id;

   function New_Unchecked_Prog_Constant
     return W_Prog_Constant_Unchecked_Id;

   function New_Unchecked_Prog_Identifier
     return W_Prog_Identifier_Unchecked_Id;

   function New_Unchecked_Any_Expr
     return W_Any_Expr_Unchecked_Id;

   function New_Unchecked_Deref
     return W_Deref_Unchecked_Id;

   function New_Unchecked_Assignment
     return W_Assignment_Unchecked_Id;

   function New_Unchecked_Array_Access
     return W_Array_Access_Unchecked_Id;

   function New_Unchecked_Array_Update
     return W_Array_Update_Unchecked_Id;

   function New_Unchecked_Infix_Call
     return W_Infix_Call_Unchecked_Id;

   function New_Unchecked_Prefix_Call
     return W_Prefix_Call_Unchecked_Id;

   function New_Unchecked_Binding_Prog
     return W_Binding_Prog_Unchecked_Id;

   function New_Unchecked_Binding_Ref
     return W_Binding_Ref_Unchecked_Id;

   function New_Unchecked_Conditional_Prog
     return W_Conditional_Prog_Unchecked_Id;

   function New_Unchecked_While_Loop
     return W_While_Loop_Unchecked_Id;

   function New_Unchecked_Statement_Sequence
     return W_Statement_Sequence_Unchecked_Id;

   function New_Unchecked_Label
     return W_Label_Unchecked_Id;

   function New_Unchecked_Assert
     return W_Assert_Unchecked_Id;

   function New_Unchecked_Post_Assertion
     return W_Post_Assertion_Unchecked_Id;

   function New_Unchecked_Opaque_Assertion
     return W_Opaque_Assertion_Unchecked_Id;

   function New_Unchecked_Fun_Def
     return W_Fun_Def_Unchecked_Id;

   function New_Unchecked_Binding_Fun
     return W_Binding_Fun_Unchecked_Id;

   function New_Unchecked_Binding_Rec
     return W_Binding_Rec_Unchecked_Id;

   function New_Unchecked_Prog_Call
     return W_Prog_Call_Unchecked_Id;

   function New_Unchecked_Raise_Statement
     return W_Raise_Statement_Unchecked_Id;

   function New_Unchecked_Raise_Statement_With_Parameters
     return W_Raise_Statement_With_Parameters_Unchecked_Id;

   function New_Unchecked_Try_Block
     return W_Try_Block_Unchecked_Id;

   function New_Unchecked_Unreachable_Code
     return W_Unreachable_Code_Unchecked_Id;

   function New_Unchecked_Begin_Block
     return W_Begin_Block_Unchecked_Id;

   function New_Unchecked_Protected_Prog
     return W_Protected_Prog_Unchecked_Id;

   function New_Unchecked_Op_Add_Prog
     return W_Op_Add_Prog_Unchecked_Id;

   function New_Unchecked_Op_Substract_Prog
     return W_Op_Substract_Prog_Unchecked_Id;

   function New_Unchecked_Op_Multiply_Prog
     return W_Op_Multiply_Prog_Unchecked_Id;

   function New_Unchecked_Op_Divide_Prog
     return W_Op_Divide_Prog_Unchecked_Id;

   function New_Unchecked_Op_Mod_Prog
     return W_Op_Mod_Prog_Unchecked_Id;

   function New_Unchecked_Op_Eq_Prog
     return W_Op_Eq_Prog_Unchecked_Id;

   function New_Unchecked_Op_Ne_Prog
     return W_Op_Ne_Prog_Unchecked_Id;

   function New_Unchecked_Op_Lt_Prog
     return W_Op_Lt_Prog_Unchecked_Id;

   function New_Unchecked_Op_Le_Prog
     return W_Op_Le_Prog_Unchecked_Id;

   function New_Unchecked_Op_Gt_Prog
     return W_Op_Gt_Prog_Unchecked_Id;

   function New_Unchecked_Op_Ge_Prog
     return W_Op_Ge_Prog_Unchecked_Id;

   function New_Unchecked_Op_Or_Else_Prog
     return W_Op_Or_Else_Prog_Unchecked_Id;

   function New_Unchecked_Op_And_Then_Prog
     return W_Op_And_Then_Prog_Unchecked_Id;

   function New_Unchecked_Op_Minus_Prog
     return W_Op_Minus_Prog_Unchecked_Id;

   function New_Unchecked_Op_Not_Prog
     return W_Op_Not_Prog_Unchecked_Id;

   function New_Unchecked_Binder
     return W_Binder_Unchecked_Id;

   function New_Unchecked_Recfun
     return W_Recfun_Unchecked_Id;

   function New_Unchecked_Loop_Annot
     return W_Loop_Annot_Unchecked_Id;

   function New_Unchecked_Wf_Arg
     return W_Wf_Arg_Unchecked_Id;

   function New_Unchecked_Handler
     return W_Handler_Unchecked_Id;

   function New_Unchecked_File
     return W_File_Unchecked_Id;

   function New_Unchecked_Global_Binding
     return W_Global_Binding_Unchecked_Id;

   function New_Unchecked_Global_Rec_Binding
     return W_Global_Rec_Binding_Unchecked_Id;

   function New_Unchecked_Parameter_Declaration
     return W_Parameter_Declaration_Unchecked_Id;

   function New_Unchecked_Exception_Declaration
     return W_Exception_Declaration_Unchecked_Id;

   function New_Unchecked_Logic_Declaration
     return W_Logic_Declaration_Unchecked_Id;

   function New_Unchecked_Include_Declaration
     return W_Include_Declaration_Unchecked_Id;

   function Duplicate_Identifier
     (Ada_Node : Node_Id := Empty;
      Id       : W_Identifier_Valid_OId)
     return W_Identifier_Valid_Id;

   function Duplicate_Type_Prop
     (Ada_Node : Node_Id := Empty;
      Id       : W_Type_Prop_Valid_OId)
     return W_Type_Prop_Valid_Id;

   function Duplicate_Type_Int
     (Ada_Node : Node_Id := Empty;
      Id       : W_Type_Int_Valid_OId)
     return W_Type_Int_Valid_Id;

   function Duplicate_Type_Bool
     (Ada_Node : Node_Id := Empty;
      Id       : W_Type_Bool_Valid_OId)
     return W_Type_Bool_Valid_Id;

   function Duplicate_Type_Real
     (Ada_Node : Node_Id := Empty;
      Id       : W_Type_Real_Valid_OId)
     return W_Type_Real_Valid_Id;

   function Duplicate_Type_Unit
     (Ada_Node : Node_Id := Empty;
      Id       : W_Type_Unit_Valid_OId)
     return W_Type_Unit_Valid_Id;

   function Duplicate_Abstract_Type
     (Ada_Node : Node_Id := Empty;
      Id       : W_Abstract_Type_Valid_OId)
     return W_Abstract_Type_Valid_Id;

   function Duplicate_Generic_Formal_Type
     (Ada_Node : Node_Id := Empty;
      Id       : W_Generic_Formal_Type_Valid_OId)
     return W_Generic_Formal_Type_Valid_Id;

   function Duplicate_Generic_Actual_Type_Chain
     (Ada_Node : Node_Id := Empty;
      Id       : W_Generic_Actual_Type_Chain_Valid_OId)
     return W_Generic_Actual_Type_Chain_Valid_Id;

   function Duplicate_Array_Type
     (Ada_Node : Node_Id := Empty;
      Id       : W_Array_Type_Valid_OId)
     return W_Array_Type_Valid_Id;

   function Duplicate_Ref_Type
     (Ada_Node : Node_Id := Empty;
      Id       : W_Ref_Type_Valid_OId)
     return W_Ref_Type_Valid_Id;

   function Duplicate_Protected_Value_Type
     (Ada_Node : Node_Id := Empty;
      Id       : W_Protected_Value_Type_Valid_OId)
     return W_Protected_Value_Type_Valid_Id;

   function Duplicate_Arrow_Type
     (Ada_Node : Node_Id := Empty;
      Id       : W_Arrow_Type_Valid_OId)
     return W_Arrow_Type_Valid_Id;

   function Duplicate_Computation_Spec
     (Ada_Node : Node_Id := Empty;
      Id       : W_Computation_Spec_Valid_OId)
     return W_Computation_Spec_Valid_Id;

   function Duplicate_Integer_Constant
     (Ada_Node : Node_Id := Empty;
      Id       : W_Integer_Constant_Valid_OId)
     return W_Integer_Constant_Valid_Id;

   function Duplicate_Real_Constant
     (Ada_Node : Node_Id := Empty;
      Id       : W_Real_Constant_Valid_OId)
     return W_Real_Constant_Valid_Id;

   function Duplicate_True_Literal
     (Ada_Node : Node_Id := Empty;
      Id       : W_True_Literal_Valid_OId)
     return W_True_Literal_Valid_Id;

   function Duplicate_False_Literal
     (Ada_Node : Node_Id := Empty;
      Id       : W_False_Literal_Valid_OId)
     return W_False_Literal_Valid_Id;

   function Duplicate_Void_Literal
     (Ada_Node : Node_Id := Empty;
      Id       : W_Void_Literal_Valid_OId)
     return W_Void_Literal_Valid_Id;

   function Duplicate_Arith_Operation
     (Ada_Node : Node_Id := Empty;
      Id       : W_Arith_Operation_Valid_OId)
     return W_Arith_Operation_Valid_Id;

   function Duplicate_Negative_Term
     (Ada_Node : Node_Id := Empty;
      Id       : W_Negative_Term_Valid_OId)
     return W_Negative_Term_Valid_Id;

   function Duplicate_Term_Identifier
     (Ada_Node : Node_Id := Empty;
      Id       : W_Term_Identifier_Valid_OId)
     return W_Term_Identifier_Valid_Id;

   function Duplicate_Operation
     (Ada_Node : Node_Id := Empty;
      Id       : W_Operation_Valid_OId)
     return W_Operation_Valid_Id;

   function Duplicate_Named_Term
     (Ada_Node : Node_Id := Empty;
      Id       : W_Named_Term_Valid_OId)
     return W_Named_Term_Valid_Id;

   function Duplicate_Conditional_Term
     (Ada_Node : Node_Id := Empty;
      Id       : W_Conditional_Term_Valid_OId)
     return W_Conditional_Term_Valid_Id;

   function Duplicate_Matching_Term
     (Ada_Node : Node_Id := Empty;
      Id       : W_Matching_Term_Valid_OId)
     return W_Matching_Term_Valid_Id;

   function Duplicate_Binding_Term
     (Ada_Node : Node_Id := Empty;
      Id       : W_Binding_Term_Valid_OId)
     return W_Binding_Term_Valid_Id;

   function Duplicate_Protected_Term
     (Ada_Node : Node_Id := Empty;
      Id       : W_Protected_Term_Valid_OId)
     return W_Protected_Term_Valid_Id;

   function Duplicate_Op_Add
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Add_Valid_OId)
     return W_Op_Add_Valid_Id;

   function Duplicate_Op_Substract
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Substract_Valid_OId)
     return W_Op_Substract_Valid_Id;

   function Duplicate_Op_Multiply
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Multiply_Valid_OId)
     return W_Op_Multiply_Valid_Id;

   function Duplicate_Op_Divide
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Divide_Valid_OId)
     return W_Op_Divide_Valid_Id;

   function Duplicate_Op_Modulo
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Modulo_Valid_OId)
     return W_Op_Modulo_Valid_Id;

   function Duplicate_True_Literal_Pred
     (Ada_Node : Node_Id := Empty;
      Id       : W_True_Literal_Pred_Valid_OId)
     return W_True_Literal_Pred_Valid_Id;

   function Duplicate_False_Literal_Pred
     (Ada_Node : Node_Id := Empty;
      Id       : W_False_Literal_Pred_Valid_OId)
     return W_False_Literal_Pred_Valid_Id;

   function Duplicate_Predicate_Identifier
     (Ada_Node : Node_Id := Empty;
      Id       : W_Predicate_Identifier_Valid_OId)
     return W_Predicate_Identifier_Valid_Id;

   function Duplicate_Predicate_Instance
     (Ada_Node : Node_Id := Empty;
      Id       : W_Predicate_Instance_Valid_OId)
     return W_Predicate_Instance_Valid_Id;

   function Duplicate_Related_Terms
     (Ada_Node : Node_Id := Empty;
      Id       : W_Related_Terms_Valid_OId)
     return W_Related_Terms_Valid_Id;

   function Duplicate_Implication
     (Ada_Node : Node_Id := Empty;
      Id       : W_Implication_Valid_OId)
     return W_Implication_Valid_Id;

   function Duplicate_Equivalence
     (Ada_Node : Node_Id := Empty;
      Id       : W_Equivalence_Valid_OId)
     return W_Equivalence_Valid_Id;

   function Duplicate_Disjunction
     (Ada_Node : Node_Id := Empty;
      Id       : W_Disjunction_Valid_OId)
     return W_Disjunction_Valid_Id;

   function Duplicate_Conjunction
     (Ada_Node : Node_Id := Empty;
      Id       : W_Conjunction_Valid_OId)
     return W_Conjunction_Valid_Id;

   function Duplicate_Negation
     (Ada_Node : Node_Id := Empty;
      Id       : W_Negation_Valid_OId)
     return W_Negation_Valid_Id;

   function Duplicate_Conditional_Pred
     (Ada_Node : Node_Id := Empty;
      Id       : W_Conditional_Pred_Valid_OId)
     return W_Conditional_Pred_Valid_Id;

   function Duplicate_Binding_Pred
     (Ada_Node : Node_Id := Empty;
      Id       : W_Binding_Pred_Valid_OId)
     return W_Binding_Pred_Valid_Id;

   function Duplicate_Universal_Quantif
     (Ada_Node : Node_Id := Empty;
      Id       : W_Universal_Quantif_Valid_OId)
     return W_Universal_Quantif_Valid_Id;

   function Duplicate_Existential_Quantif
     (Ada_Node : Node_Id := Empty;
      Id       : W_Existential_Quantif_Valid_OId)
     return W_Existential_Quantif_Valid_Id;

   function Duplicate_Named_Predicate
     (Ada_Node : Node_Id := Empty;
      Id       : W_Named_Predicate_Valid_OId)
     return W_Named_Predicate_Valid_Id;

   function Duplicate_Protected_Predicate
     (Ada_Node : Node_Id := Empty;
      Id       : W_Protected_Predicate_Valid_OId)
     return W_Protected_Predicate_Valid_Id;

   function Duplicate_Pattern
     (Ada_Node : Node_Id := Empty;
      Id       : W_Pattern_Valid_OId)
     return W_Pattern_Valid_Id;

   function Duplicate_Match_Case
     (Ada_Node : Node_Id := Empty;
      Id       : W_Match_Case_Valid_OId)
     return W_Match_Case_Valid_Id;

   function Duplicate_Triggers
     (Ada_Node : Node_Id := Empty;
      Id       : W_Triggers_Valid_OId)
     return W_Triggers_Valid_Id;

   function Duplicate_Trigger
     (Ada_Node : Node_Id := Empty;
      Id       : W_Trigger_Valid_OId)
     return W_Trigger_Valid_Id;

   function Duplicate_Rel_Eq
     (Ada_Node : Node_Id := Empty;
      Id       : W_Rel_Eq_Valid_OId)
     return W_Rel_Eq_Valid_Id;

   function Duplicate_Rel_Ne
     (Ada_Node : Node_Id := Empty;
      Id       : W_Rel_Ne_Valid_OId)
     return W_Rel_Ne_Valid_Id;

   function Duplicate_Rel_Lt
     (Ada_Node : Node_Id := Empty;
      Id       : W_Rel_Lt_Valid_OId)
     return W_Rel_Lt_Valid_Id;

   function Duplicate_Rel_Le
     (Ada_Node : Node_Id := Empty;
      Id       : W_Rel_Le_Valid_OId)
     return W_Rel_Le_Valid_Id;

   function Duplicate_Rel_Gt
     (Ada_Node : Node_Id := Empty;
      Id       : W_Rel_Gt_Valid_OId)
     return W_Rel_Gt_Valid_Id;

   function Duplicate_Rel_Ge
     (Ada_Node : Node_Id := Empty;
      Id       : W_Rel_Ge_Valid_OId)
     return W_Rel_Ge_Valid_Id;

   function Duplicate_Type
     (Ada_Node : Node_Id := Empty;
      Id       : W_Type_Valid_OId)
     return W_Type_Valid_Id;

   function Duplicate_Logic
     (Ada_Node : Node_Id := Empty;
      Id       : W_Logic_Valid_OId)
     return W_Logic_Valid_Id;

   function Duplicate_Function
     (Ada_Node : Node_Id := Empty;
      Id       : W_Function_Valid_OId)
     return W_Function_Valid_Id;

   function Duplicate_Predicate_Definition
     (Ada_Node : Node_Id := Empty;
      Id       : W_Predicate_Definition_Valid_OId)
     return W_Predicate_Definition_Valid_Id;

   function Duplicate_Inductive
     (Ada_Node : Node_Id := Empty;
      Id       : W_Inductive_Valid_OId)
     return W_Inductive_Valid_Id;

   function Duplicate_Axiom
     (Ada_Node : Node_Id := Empty;
      Id       : W_Axiom_Valid_OId)
     return W_Axiom_Valid_Id;

   function Duplicate_Goal
     (Ada_Node : Node_Id := Empty;
      Id       : W_Goal_Valid_OId)
     return W_Goal_Valid_Id;

   function Duplicate_External
     (Ada_Node : Node_Id := Empty;
      Id       : W_External_Valid_OId)
     return W_External_Valid_Id;

   function Duplicate_Logic_Type
     (Ada_Node : Node_Id := Empty;
      Id       : W_Logic_Type_Valid_OId)
     return W_Logic_Type_Valid_Id;

   function Duplicate_Logic_Binder
     (Ada_Node : Node_Id := Empty;
      Id       : W_Logic_Binder_Valid_OId)
     return W_Logic_Binder_Valid_Id;

   function Duplicate_Inductive_Case
     (Ada_Node : Node_Id := Empty;
      Id       : W_Inductive_Case_Valid_OId)
     return W_Inductive_Case_Valid_Id;

   function Duplicate_Transparent_Type_Definition
     (Ada_Node : Node_Id := Empty;
      Id       : W_Transparent_Type_Definition_Valid_OId)
     return W_Transparent_Type_Definition_Valid_Id;

   function Duplicate_Adt_Definition
     (Ada_Node : Node_Id := Empty;
      Id       : W_Adt_Definition_Valid_OId)
     return W_Adt_Definition_Valid_Id;

   function Duplicate_Constr_Decl
     (Ada_Node : Node_Id := Empty;
      Id       : W_Constr_Decl_Valid_OId)
     return W_Constr_Decl_Valid_Id;

   function Duplicate_Effects
     (Ada_Node : Node_Id := Empty;
      Id       : W_Effects_Valid_OId)
     return W_Effects_Valid_Id;

   function Duplicate_Precondition
     (Ada_Node : Node_Id := Empty;
      Id       : W_Precondition_Valid_OId)
     return W_Precondition_Valid_Id;

   function Duplicate_Postcondition
     (Ada_Node : Node_Id := Empty;
      Id       : W_Postcondition_Valid_OId)
     return W_Postcondition_Valid_Id;

   function Duplicate_Exn_Condition
     (Ada_Node : Node_Id := Empty;
      Id       : W_Exn_Condition_Valid_OId)
     return W_Exn_Condition_Valid_Id;

   function Duplicate_Assertion
     (Ada_Node : Node_Id := Empty;
      Id       : W_Assertion_Valid_OId)
     return W_Assertion_Valid_Id;

   function Duplicate_Prog_Constant
     (Ada_Node : Node_Id := Empty;
      Id       : W_Prog_Constant_Valid_OId)
     return W_Prog_Constant_Valid_Id;

   function Duplicate_Prog_Identifier
     (Ada_Node : Node_Id := Empty;
      Id       : W_Prog_Identifier_Valid_OId)
     return W_Prog_Identifier_Valid_Id;

   function Duplicate_Any_Expr
     (Ada_Node : Node_Id := Empty;
      Id       : W_Any_Expr_Valid_OId)
     return W_Any_Expr_Valid_Id;

   function Duplicate_Deref
     (Ada_Node : Node_Id := Empty;
      Id       : W_Deref_Valid_OId)
     return W_Deref_Valid_Id;

   function Duplicate_Assignment
     (Ada_Node : Node_Id := Empty;
      Id       : W_Assignment_Valid_OId)
     return W_Assignment_Valid_Id;

   function Duplicate_Array_Access
     (Ada_Node : Node_Id := Empty;
      Id       : W_Array_Access_Valid_OId)
     return W_Array_Access_Valid_Id;

   function Duplicate_Array_Update
     (Ada_Node : Node_Id := Empty;
      Id       : W_Array_Update_Valid_OId)
     return W_Array_Update_Valid_Id;

   function Duplicate_Infix_Call
     (Ada_Node : Node_Id := Empty;
      Id       : W_Infix_Call_Valid_OId)
     return W_Infix_Call_Valid_Id;

   function Duplicate_Prefix_Call
     (Ada_Node : Node_Id := Empty;
      Id       : W_Prefix_Call_Valid_OId)
     return W_Prefix_Call_Valid_Id;

   function Duplicate_Binding_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Binding_Prog_Valid_OId)
     return W_Binding_Prog_Valid_Id;

   function Duplicate_Binding_Ref
     (Ada_Node : Node_Id := Empty;
      Id       : W_Binding_Ref_Valid_OId)
     return W_Binding_Ref_Valid_Id;

   function Duplicate_Conditional_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Conditional_Prog_Valid_OId)
     return W_Conditional_Prog_Valid_Id;

   function Duplicate_While_Loop
     (Ada_Node : Node_Id := Empty;
      Id       : W_While_Loop_Valid_OId)
     return W_While_Loop_Valid_Id;

   function Duplicate_Statement_Sequence
     (Ada_Node : Node_Id := Empty;
      Id       : W_Statement_Sequence_Valid_OId)
     return W_Statement_Sequence_Valid_Id;

   function Duplicate_Label
     (Ada_Node : Node_Id := Empty;
      Id       : W_Label_Valid_OId)
     return W_Label_Valid_Id;

   function Duplicate_Assert
     (Ada_Node : Node_Id := Empty;
      Id       : W_Assert_Valid_OId)
     return W_Assert_Valid_Id;

   function Duplicate_Post_Assertion
     (Ada_Node : Node_Id := Empty;
      Id       : W_Post_Assertion_Valid_OId)
     return W_Post_Assertion_Valid_Id;

   function Duplicate_Opaque_Assertion
     (Ada_Node : Node_Id := Empty;
      Id       : W_Opaque_Assertion_Valid_OId)
     return W_Opaque_Assertion_Valid_Id;

   function Duplicate_Fun_Def
     (Ada_Node : Node_Id := Empty;
      Id       : W_Fun_Def_Valid_OId)
     return W_Fun_Def_Valid_Id;

   function Duplicate_Binding_Fun
     (Ada_Node : Node_Id := Empty;
      Id       : W_Binding_Fun_Valid_OId)
     return W_Binding_Fun_Valid_Id;

   function Duplicate_Binding_Rec
     (Ada_Node : Node_Id := Empty;
      Id       : W_Binding_Rec_Valid_OId)
     return W_Binding_Rec_Valid_Id;

   function Duplicate_Prog_Call
     (Ada_Node : Node_Id := Empty;
      Id       : W_Prog_Call_Valid_OId)
     return W_Prog_Call_Valid_Id;

   function Duplicate_Raise_Statement
     (Ada_Node : Node_Id := Empty;
      Id       : W_Raise_Statement_Valid_OId)
     return W_Raise_Statement_Valid_Id;

   function Duplicate_Raise_Statement_With_Parameters
     (Ada_Node : Node_Id := Empty;
      Id       : W_Raise_Statement_With_Parameters_Valid_OId)
     return W_Raise_Statement_With_Parameters_Valid_Id;

   function Duplicate_Try_Block
     (Ada_Node : Node_Id := Empty;
      Id       : W_Try_Block_Valid_OId)
     return W_Try_Block_Valid_Id;

   function Duplicate_Unreachable_Code
     (Ada_Node : Node_Id := Empty;
      Id       : W_Unreachable_Code_Valid_OId)
     return W_Unreachable_Code_Valid_Id;

   function Duplicate_Begin_Block
     (Ada_Node : Node_Id := Empty;
      Id       : W_Begin_Block_Valid_OId)
     return W_Begin_Block_Valid_Id;

   function Duplicate_Protected_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Protected_Prog_Valid_OId)
     return W_Protected_Prog_Valid_Id;

   function Duplicate_Op_Add_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Add_Prog_Valid_OId)
     return W_Op_Add_Prog_Valid_Id;

   function Duplicate_Op_Substract_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Substract_Prog_Valid_OId)
     return W_Op_Substract_Prog_Valid_Id;

   function Duplicate_Op_Multiply_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Multiply_Prog_Valid_OId)
     return W_Op_Multiply_Prog_Valid_Id;

   function Duplicate_Op_Divide_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Divide_Prog_Valid_OId)
     return W_Op_Divide_Prog_Valid_Id;

   function Duplicate_Op_Mod_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Mod_Prog_Valid_OId)
     return W_Op_Mod_Prog_Valid_Id;

   function Duplicate_Op_Eq_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Eq_Prog_Valid_OId)
     return W_Op_Eq_Prog_Valid_Id;

   function Duplicate_Op_Ne_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Ne_Prog_Valid_OId)
     return W_Op_Ne_Prog_Valid_Id;

   function Duplicate_Op_Lt_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Lt_Prog_Valid_OId)
     return W_Op_Lt_Prog_Valid_Id;

   function Duplicate_Op_Le_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Le_Prog_Valid_OId)
     return W_Op_Le_Prog_Valid_Id;

   function Duplicate_Op_Gt_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Gt_Prog_Valid_OId)
     return W_Op_Gt_Prog_Valid_Id;

   function Duplicate_Op_Ge_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Ge_Prog_Valid_OId)
     return W_Op_Ge_Prog_Valid_Id;

   function Duplicate_Op_Or_Else_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Or_Else_Prog_Valid_OId)
     return W_Op_Or_Else_Prog_Valid_Id;

   function Duplicate_Op_And_Then_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_And_Then_Prog_Valid_OId)
     return W_Op_And_Then_Prog_Valid_Id;

   function Duplicate_Op_Minus_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Minus_Prog_Valid_OId)
     return W_Op_Minus_Prog_Valid_Id;

   function Duplicate_Op_Not_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Op_Not_Prog_Valid_OId)
     return W_Op_Not_Prog_Valid_Id;

   function Duplicate_Binder
     (Ada_Node : Node_Id := Empty;
      Id       : W_Binder_Valid_OId)
     return W_Binder_Valid_Id;

   function Duplicate_Recfun
     (Ada_Node : Node_Id := Empty;
      Id       : W_Recfun_Valid_OId)
     return W_Recfun_Valid_Id;

   function Duplicate_Loop_Annot
     (Ada_Node : Node_Id := Empty;
      Id       : W_Loop_Annot_Valid_OId)
     return W_Loop_Annot_Valid_Id;

   function Duplicate_Wf_Arg
     (Ada_Node : Node_Id := Empty;
      Id       : W_Wf_Arg_Valid_OId)
     return W_Wf_Arg_Valid_Id;

   function Duplicate_Handler
     (Ada_Node : Node_Id := Empty;
      Id       : W_Handler_Valid_OId)
     return W_Handler_Valid_Id;

   function Duplicate_File
     (Ada_Node : Node_Id := Empty;
      Id       : W_File_Valid_OId)
     return W_File_Valid_Id;

   function Duplicate_Global_Binding
     (Ada_Node : Node_Id := Empty;
      Id       : W_Global_Binding_Valid_OId)
     return W_Global_Binding_Valid_Id;

   function Duplicate_Global_Rec_Binding
     (Ada_Node : Node_Id := Empty;
      Id       : W_Global_Rec_Binding_Valid_OId)
     return W_Global_Rec_Binding_Valid_Id;

   function Duplicate_Parameter_Declaration
     (Ada_Node : Node_Id := Empty;
      Id       : W_Parameter_Declaration_Valid_OId)
     return W_Parameter_Declaration_Valid_Id;

   function Duplicate_Exception_Declaration
     (Ada_Node : Node_Id := Empty;
      Id       : W_Exception_Declaration_Valid_OId)
     return W_Exception_Declaration_Valid_Id;

   function Duplicate_Logic_Declaration
     (Ada_Node : Node_Id := Empty;
      Id       : W_Logic_Declaration_Valid_OId)
     return W_Logic_Declaration_Valid_Id;

   function Duplicate_Include_Declaration
     (Ada_Node : Node_Id := Empty;
      Id       : W_Include_Declaration_Valid_OId)
     return W_Include_Declaration_Valid_Id;

   function Duplicate_Term
     (Ada_Node : Node_Id := Empty;
      Id       : W_Term_Valid_Id)
     return W_Term_Valid_Id;

   function Duplicate_Constant
     (Ada_Node : Node_Id := Empty;
      Id       : W_Constant_Valid_Id)
     return W_Constant_Valid_Id;

   function Duplicate_Arith_Op
     (Ada_Node : Node_Id := Empty;
      Id       : W_Arith_Op_Valid_Id)
     return W_Arith_Op_Valid_Id;

   function Duplicate_Predicate
     (Ada_Node : Node_Id := Empty;
      Id       : W_Predicate_Valid_Id)
     return W_Predicate_Valid_Id;

   function Duplicate_Primitive_Type
     (Ada_Node : Node_Id := Empty;
      Id       : W_Primitive_Type_Valid_Id)
     return W_Primitive_Type_Valid_Id;

   function Duplicate_Relation
     (Ada_Node : Node_Id := Empty;
      Id       : W_Relation_Valid_Id)
     return W_Relation_Valid_Id;

   function Duplicate_Logic_Declaration_Class
     (Ada_Node : Node_Id := Empty;
      Id       : W_Logic_Declaration_Class_Valid_Id)
     return W_Logic_Declaration_Class_Valid_Id;

   function Duplicate_Logic_Return_Type
     (Ada_Node : Node_Id := Empty;
      Id       : W_Logic_Return_Type_Valid_Id)
     return W_Logic_Return_Type_Valid_Id;

   function Duplicate_Logic_Arg_Type
     (Ada_Node : Node_Id := Empty;
      Id       : W_Logic_Arg_Type_Valid_Id)
     return W_Logic_Arg_Type_Valid_Id;

   function Duplicate_Simple_Value_Type
     (Ada_Node : Node_Id := Empty;
      Id       : W_Simple_Value_Type_Valid_Id)
     return W_Simple_Value_Type_Valid_Id;

   function Duplicate_Value_Type
     (Ada_Node : Node_Id := Empty;
      Id       : W_Value_Type_Valid_Id)
     return W_Value_Type_Valid_Id;

   function Duplicate_Computation_Type
     (Ada_Node : Node_Id := Empty;
      Id       : W_Computation_Type_Valid_Id)
     return W_Computation_Type_Valid_Id;

   function Duplicate_Prog
     (Ada_Node : Node_Id := Empty;
      Id       : W_Prog_Valid_Id)
     return W_Prog_Valid_Id;

   function Duplicate_Infix
     (Ada_Node : Node_Id := Empty;
      Id       : W_Infix_Valid_Id)
     return W_Infix_Valid_Id;

   function Duplicate_Prefix
     (Ada_Node : Node_Id := Empty;
      Id       : W_Prefix_Valid_Id)
     return W_Prefix_Valid_Id;

   function Duplicate_Declaration
     (Ada_Node : Node_Id := Empty;
      Id       : W_Declaration_Valid_Id)
     return W_Declaration_Valid_Id;

   function Duplicate_Any_Node
     (Ada_Node : Node_Id := Empty;
      Id       : W_Any_Node_Valid_Id)
     return W_Any_Node_Valid_Id;

   function Duplicate_Type_Definition
     (Ada_Node : Node_Id := Empty;
      Id       : W_Type_Definition_Valid_Id)
     return W_Type_Definition_Valid_Id;

end Why.Atree.Builders;
