------------------------------------------------------------------------------
--                                                                          --
--                            GNAT2WHY COMPONENTS                           --
--                                                                          --
--                   W H Y - A T R E E - B U I L D E R S                    --
--                                                                          --
--                                 S p e c                                  --
--                                                                          --
--                       Copyright (C) 2010, AdaCore                        --
--                                                                          --
-- gnat2why is  free  software;  you can redistribute it and/or modify it   --
-- under terms of the  GNU General Public License as published  by the Free --
-- Software Foundation;  either version  2,  or  (at your option) any later --
-- version. gnat2why is distributed in the hope that it will  be  useful,   --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-  --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License  for more details. You  should  have  received a copy of the GNU --
-- General Public License  distributed with GNAT; see file COPYING. If not, --
-- write to the Free Software Foundation,  51 Franklin Street, Fifth Floor, --
-- Boston,                                                                  --
--                                                                          --
-- gnat2why is maintained by AdaCore (http://www.adacore.com)               --
--                                                                          --
------------------------------------------------------------------------------
--  This package is automatically generated by xtree. Do not edit manually.

with Why.Ids;             use Why.Ids;
with Why.Unchecked_Ids;   use Why.Unchecked_Ids;
with Why.Atree.Tables;    use Why.Atree.Tables;
with Why.Atree.Accessors; use Why.Atree.Accessors;

package Why.Atree.Builders is
   --  This package provides a set of unchecked builders, generated
   --  automatically from Why.Atree.Why_Node using an ASIS tool

   function New_Identifier
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Symbol   : Name_Id;
      Entity   : Why_Node_Id)
     return W_Identifier_Id;
   pragma Postcondition
     (Get_Kind
       (New_Identifier'Result)
       = W_Identifier
      and then
        Get_Ada_Node
        (New_Identifier'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Identifier'Result)
        = Link
      and then
        Identifier_Get_Symbol
        (New_Identifier'Result)
        = Symbol
      and then
        Identifier_Get_Entity
        (New_Identifier'Result)
        = Entity);

   function New_Type_Prop
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Type_Prop_Id;
   pragma Postcondition
     (Get_Kind
       (New_Type_Prop'Result)
       = W_Type_Prop
      and then
        Get_Ada_Node
        (New_Type_Prop'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Type_Prop'Result)
        = Link);

   function New_Type_Int
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Type_Int_Id;
   pragma Postcondition
     (Get_Kind
       (New_Type_Int'Result)
       = W_Type_Int
      and then
        Get_Ada_Node
        (New_Type_Int'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Type_Int'Result)
        = Link);

   function New_Type_Bool
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Type_Bool_Id;
   pragma Postcondition
     (Get_Kind
       (New_Type_Bool'Result)
       = W_Type_Bool
      and then
        Get_Ada_Node
        (New_Type_Bool'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Type_Bool'Result)
        = Link);

   function New_Type_Real
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Type_Real_Id;
   pragma Postcondition
     (Get_Kind
       (New_Type_Real'Result)
       = W_Type_Real
      and then
        Get_Ada_Node
        (New_Type_Real'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Type_Real'Result)
        = Link);

   function New_Type_Unit
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Type_Unit_Id;
   pragma Postcondition
     (Get_Kind
       (New_Type_Unit'Result)
       = W_Type_Unit
      and then
        Get_Ada_Node
        (New_Type_Unit'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Type_Unit'Result)
        = Link);

   function New_Abstract_Type
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id)
     return W_Abstract_Type_Id;
   pragma Postcondition
     (Get_Kind
       (New_Abstract_Type'Result)
       = W_Abstract_Type
      and then
        Get_Ada_Node
        (New_Abstract_Type'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Abstract_Type'Result)
        = Link
      and then
        Abstract_Type_Get_Name
        (New_Abstract_Type'Result)
        = Name);

   function New_Generic_Formal_Type
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id)
     return W_Generic_Formal_Type_Id;
   pragma Postcondition
     (Get_Kind
       (New_Generic_Formal_Type'Result)
       = W_Generic_Formal_Type
      and then
        Get_Ada_Node
        (New_Generic_Formal_Type'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Generic_Formal_Type'Result)
        = Link
      and then
        Generic_Formal_Type_Get_Name
        (New_Generic_Formal_Type'Result)
        = Name);

   function New_Generic_Actual_Type_Chain
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Set;
      Type_Chain : W_Primitive_Type_List;
      Name       : W_Identifier_Id)
     return W_Generic_Actual_Type_Chain_Id;
   pragma Postcondition
     (Get_Kind
       (New_Generic_Actual_Type_Chain'Result)
       = W_Generic_Actual_Type_Chain
      and then
        Get_Ada_Node
        (New_Generic_Actual_Type_Chain'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Generic_Actual_Type_Chain'Result)
        = Link
      and then
        Generic_Actual_Type_Chain_Get_Type_Chain
        (New_Generic_Actual_Type_Chain'Result)
        = Type_Chain
      and then
        Generic_Actual_Type_Chain_Get_Name
        (New_Generic_Actual_Type_Chain'Result)
        = Name);

   function New_Array_Type
     (Ada_Node       : Node_Id;
      Link           : Why_Node_Set;
      Component_Type : W_Primitive_Type_Id)
     return W_Array_Type_Id;
   pragma Postcondition
     (Get_Kind
       (New_Array_Type'Result)
       = W_Array_Type
      and then
        Get_Ada_Node
        (New_Array_Type'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Array_Type'Result)
        = Link
      and then
        Array_Type_Get_Component_Type
        (New_Array_Type'Result)
        = Component_Type);

   function New_Ref_Type
     (Ada_Node     : Node_Id;
      Link         : Why_Node_Set;
      Aliased_Type : W_Primitive_Type_Id)
     return W_Ref_Type_Id;
   pragma Postcondition
     (Get_Kind
       (New_Ref_Type'Result)
       = W_Ref_Type
      and then
        Get_Ada_Node
        (New_Ref_Type'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Ref_Type'Result)
        = Link
      and then
        Ref_Type_Get_Aliased_Type
        (New_Ref_Type'Result)
        = Aliased_Type);

   function New_Protected_Value_Type
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Set;
      Value_Type : W_Value_Type_Id)
     return W_Protected_Value_Type_Id;
   pragma Postcondition
     (Get_Kind
       (New_Protected_Value_Type'Result)
       = W_Protected_Value_Type
      and then
        Get_Ada_Node
        (New_Protected_Value_Type'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Protected_Value_Type'Result)
        = Link
      and then
        Protected_Value_Type_Get_Value_Type
        (New_Protected_Value_Type'Result)
        = Value_Type);

   function New_Anonymous_Arrow_Type
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Left     : W_Simple_Value_Type_Id;
      Right    : W_Computation_Type_Id)
     return W_Anonymous_Arrow_Type_Id;
   pragma Postcondition
     (Get_Kind
       (New_Anonymous_Arrow_Type'Result)
       = W_Anonymous_Arrow_Type
      and then
        Get_Ada_Node
        (New_Anonymous_Arrow_Type'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Anonymous_Arrow_Type'Result)
        = Link
      and then
        Anonymous_Arrow_Type_Get_Left
        (New_Anonymous_Arrow_Type'Result)
        = Left
      and then
        Anonymous_Arrow_Type_Get_Right
        (New_Anonymous_Arrow_Type'Result)
        = Right);

   function New_Named_Arrow_Type
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Left     : W_Simple_Value_Type_Id;
      Right    : W_Computation_Type_Id)
     return W_Named_Arrow_Type_Id;
   pragma Postcondition
     (Get_Kind
       (New_Named_Arrow_Type'Result)
       = W_Named_Arrow_Type
      and then
        Get_Ada_Node
        (New_Named_Arrow_Type'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Named_Arrow_Type'Result)
        = Link
      and then
        Named_Arrow_Type_Get_Name
        (New_Named_Arrow_Type'Result)
        = Name
      and then
        Named_Arrow_Type_Get_Left
        (New_Named_Arrow_Type'Result)
        = Left
      and then
        Named_Arrow_Type_Get_Right
        (New_Named_Arrow_Type'Result)
        = Right);

   function New_Computation_Spec
     (Ada_Node      : Node_Id;
      Link          : Why_Node_Set;
      Precondition  : W_Precondition_OId;
      Result_Name   : W_Identifier_OId;
      Return_Type   : W_Value_Type_Id;
      Effects       : W_Effects_Id;
      Postcondition : W_Postcondition_OId)
     return W_Computation_Spec_Id;
   pragma Postcondition
     (Get_Kind
       (New_Computation_Spec'Result)
       = W_Computation_Spec
      and then
        Get_Ada_Node
        (New_Computation_Spec'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Computation_Spec'Result)
        = Link
      and then
        Computation_Spec_Get_Precondition
        (New_Computation_Spec'Result)
        = Precondition
      and then
        Computation_Spec_Get_Result_Name
        (New_Computation_Spec'Result)
        = Result_Name
      and then
        Computation_Spec_Get_Return_Type
        (New_Computation_Spec'Result)
        = Return_Type
      and then
        Computation_Spec_Get_Effects
        (New_Computation_Spec'Result)
        = Effects
      and then
        Computation_Spec_Get_Postcondition
        (New_Computation_Spec'Result)
        = Postcondition);

   function New_Integer_Constant
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Value    : Uint)
     return W_Integer_Constant_Id;
   pragma Postcondition
     (Get_Kind
       (New_Integer_Constant'Result)
       = W_Integer_Constant
      and then
        Get_Ada_Node
        (New_Integer_Constant'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Integer_Constant'Result)
        = Link
      and then
        Integer_Constant_Get_Value
        (New_Integer_Constant'Result)
        = Value);

   function New_Real_Constant
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Value    : Ureal)
     return W_Real_Constant_Id;
   pragma Postcondition
     (Get_Kind
       (New_Real_Constant'Result)
       = W_Real_Constant
      and then
        Get_Ada_Node
        (New_Real_Constant'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Real_Constant'Result)
        = Link
      and then
        Real_Constant_Get_Value
        (New_Real_Constant'Result)
        = Value);

   function New_True_Literal
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_True_Literal_Id;
   pragma Postcondition
     (Get_Kind
       (New_True_Literal'Result)
       = W_True_Literal
      and then
        Get_Ada_Node
        (New_True_Literal'Result)
        = Ada_Node
      and then
        Get_Link
        (New_True_Literal'Result)
        = Link);

   function New_False_Literal
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_False_Literal_Id;
   pragma Postcondition
     (Get_Kind
       (New_False_Literal'Result)
       = W_False_Literal
      and then
        Get_Ada_Node
        (New_False_Literal'Result)
        = Ada_Node
      and then
        Get_Link
        (New_False_Literal'Result)
        = Link);

   function New_Void_Literal
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Void_Literal_Id;
   pragma Postcondition
     (Get_Kind
       (New_Void_Literal'Result)
       = W_Void_Literal
      and then
        Get_Ada_Node
        (New_Void_Literal'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Void_Literal'Result)
        = Link);

   function New_Arith_Operation
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Left     : W_Term_Id;
      Op       : W_Arith_Op_Id;
      Right    : W_Term_Id)
     return W_Arith_Operation_Id;
   pragma Postcondition
     (Get_Kind
       (New_Arith_Operation'Result)
       = W_Arith_Operation
      and then
        Get_Ada_Node
        (New_Arith_Operation'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Arith_Operation'Result)
        = Link
      and then
        Arith_Operation_Get_Left
        (New_Arith_Operation'Result)
        = Left
      and then
        Arith_Operation_Get_Op
        (New_Arith_Operation'Result)
        = Op
      and then
        Arith_Operation_Get_Right
        (New_Arith_Operation'Result)
        = Right);

   function New_Negative_Term
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Operand  : W_Term_Id)
     return W_Negative_Term_Id;
   pragma Postcondition
     (Get_Kind
       (New_Negative_Term'Result)
       = W_Negative_Term
      and then
        Get_Ada_Node
        (New_Negative_Term'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Negative_Term'Result)
        = Link
      and then
        Negative_Term_Get_Operand
        (New_Negative_Term'Result)
        = Operand);

   function New_Label_Identifier
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Label    : W_Identifier_OId)
     return W_Label_Identifier_Id;
   pragma Postcondition
     (Get_Kind
       (New_Label_Identifier'Result)
       = W_Label_Identifier
      and then
        Get_Ada_Node
        (New_Label_Identifier'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Label_Identifier'Result)
        = Link
      and then
        Label_Identifier_Get_Name
        (New_Label_Identifier'Result)
        = Name
      and then
        Label_Identifier_Get_Label
        (New_Label_Identifier'Result)
        = Label);

   function New_Operation
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Set;
      Name       : W_Identifier_Id;
      Parameters : W_Term_List)
     return W_Operation_Id;
   pragma Postcondition
     (Get_Kind
       (New_Operation'Result)
       = W_Operation
      and then
        Get_Ada_Node
        (New_Operation'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Operation'Result)
        = Link
      and then
        Operation_Get_Name
        (New_Operation'Result)
        = Name
      and then
        Operation_Get_Parameters
        (New_Operation'Result)
        = Parameters);

   function New_Named_Term
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Label_Identifier_Id;
      Term     : W_Term_Id)
     return W_Named_Term_Id;
   pragma Postcondition
     (Get_Kind
       (New_Named_Term'Result)
       = W_Named_Term
      and then
        Get_Ada_Node
        (New_Named_Term'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Named_Term'Result)
        = Link
      and then
        Named_Term_Get_Name
        (New_Named_Term'Result)
        = Name
      and then
        Named_Term_Get_Term
        (New_Named_Term'Result)
        = Term);

   function New_Conditional_Term
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Set;
      Condition : W_Term_Id;
      Then_Part : W_Term_Id;
      Else_Part : W_Term_Id)
     return W_Conditional_Term_Id;
   pragma Postcondition
     (Get_Kind
       (New_Conditional_Term'Result)
       = W_Conditional_Term
      and then
        Get_Ada_Node
        (New_Conditional_Term'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Conditional_Term'Result)
        = Link
      and then
        Conditional_Term_Get_Condition
        (New_Conditional_Term'Result)
        = Condition
      and then
        Conditional_Term_Get_Then_Part
        (New_Conditional_Term'Result)
        = Then_Part
      and then
        Conditional_Term_Get_Else_Part
        (New_Conditional_Term'Result)
        = Else_Part);

   function New_Binding_Term
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Def      : W_Term_Id;
      Context  : W_Term_Id)
     return W_Binding_Term_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binding_Term'Result)
       = W_Binding_Term
      and then
        Get_Ada_Node
        (New_Binding_Term'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Binding_Term'Result)
        = Link
      and then
        Binding_Term_Get_Name
        (New_Binding_Term'Result)
        = Name
      and then
        Binding_Term_Get_Def
        (New_Binding_Term'Result)
        = Def
      and then
        Binding_Term_Get_Context
        (New_Binding_Term'Result)
        = Context);

   function New_Protected_Term
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Term     : W_Term_Id)
     return W_Protected_Term_Id;
   pragma Postcondition
     (Get_Kind
       (New_Protected_Term'Result)
       = W_Protected_Term
      and then
        Get_Ada_Node
        (New_Protected_Term'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Protected_Term'Result)
        = Link
      and then
        Protected_Term_Get_Term
        (New_Protected_Term'Result)
        = Term);

   function New_Op_Add
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Add_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Add'Result)
       = W_Op_Add
      and then
        Get_Ada_Node
        (New_Op_Add'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Add'Result)
        = Link);

   function New_Op_Substract
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Substract_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Substract'Result)
       = W_Op_Substract
      and then
        Get_Ada_Node
        (New_Op_Substract'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Substract'Result)
        = Link);

   function New_Op_Multiply
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Multiply_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Multiply'Result)
       = W_Op_Multiply
      and then
        Get_Ada_Node
        (New_Op_Multiply'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Multiply'Result)
        = Link);

   function New_Op_Divide
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Divide_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Divide'Result)
       = W_Op_Divide
      and then
        Get_Ada_Node
        (New_Op_Divide'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Divide'Result)
        = Link);

   function New_Op_Modulo
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Modulo_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Modulo'Result)
       = W_Op_Modulo
      and then
        Get_Ada_Node
        (New_Op_Modulo'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Modulo'Result)
        = Link);

   function New_True_Literal_Pred
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_True_Literal_Pred_Id;
   pragma Postcondition
     (Get_Kind
       (New_True_Literal_Pred'Result)
       = W_True_Literal_Pred
      and then
        Get_Ada_Node
        (New_True_Literal_Pred'Result)
        = Ada_Node
      and then
        Get_Link
        (New_True_Literal_Pred'Result)
        = Link);

   function New_False_Literal_Pred
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_False_Literal_Pred_Id;
   pragma Postcondition
     (Get_Kind
       (New_False_Literal_Pred'Result)
       = W_False_Literal_Pred
      and then
        Get_Ada_Node
        (New_False_Literal_Pred'Result)
        = Ada_Node
      and then
        Get_Link
        (New_False_Literal_Pred'Result)
        = Link);

   function New_Predicate_Identifier
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id)
     return W_Predicate_Identifier_Id;
   pragma Postcondition
     (Get_Kind
       (New_Predicate_Identifier'Result)
       = W_Predicate_Identifier
      and then
        Get_Ada_Node
        (New_Predicate_Identifier'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Predicate_Identifier'Result)
        = Link
      and then
        Predicate_Identifier_Get_Name
        (New_Predicate_Identifier'Result)
        = Name);

   function New_Predicate_Instance
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Set;
      Name       : W_Identifier_Id;
      Parameters : W_Term_List)
     return W_Predicate_Instance_Id;
   pragma Postcondition
     (Get_Kind
       (New_Predicate_Instance'Result)
       = W_Predicate_Instance
      and then
        Get_Ada_Node
        (New_Predicate_Instance'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Predicate_Instance'Result)
        = Link
      and then
        Predicate_Instance_Get_Name
        (New_Predicate_Instance'Result)
        = Name
      and then
        Predicate_Instance_Get_Parameters
        (New_Predicate_Instance'Result)
        = Parameters);

   function New_Related_Terms
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Left     : W_Term_Id;
      Op       : W_Relation_Id;
      Right    : W_Term_Id;
      Op2      : W_Relation_OId;
      Right2   : W_Term_OId)
     return W_Related_Terms_Id;
   pragma Postcondition
     (Get_Kind
       (New_Related_Terms'Result)
       = W_Related_Terms
      and then
        Get_Ada_Node
        (New_Related_Terms'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Related_Terms'Result)
        = Link
      and then
        Related_Terms_Get_Left
        (New_Related_Terms'Result)
        = Left
      and then
        Related_Terms_Get_Op
        (New_Related_Terms'Result)
        = Op
      and then
        Related_Terms_Get_Right
        (New_Related_Terms'Result)
        = Right
      and then
        Related_Terms_Get_Op2
        (New_Related_Terms'Result)
        = Op2
      and then
        Related_Terms_Get_Right2
        (New_Related_Terms'Result)
        = Right2);

   function New_Implication
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Implication_Id;
   pragma Postcondition
     (Get_Kind
       (New_Implication'Result)
       = W_Implication
      and then
        Get_Ada_Node
        (New_Implication'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Implication'Result)
        = Link
      and then
        Implication_Get_Left
        (New_Implication'Result)
        = Left
      and then
        Implication_Get_Right
        (New_Implication'Result)
        = Right);

   function New_Equivalence
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Equivalence_Id;
   pragma Postcondition
     (Get_Kind
       (New_Equivalence'Result)
       = W_Equivalence
      and then
        Get_Ada_Node
        (New_Equivalence'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Equivalence'Result)
        = Link
      and then
        Equivalence_Get_Left
        (New_Equivalence'Result)
        = Left
      and then
        Equivalence_Get_Right
        (New_Equivalence'Result)
        = Right);

   function New_Disjonction
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Disjonction_Id;
   pragma Postcondition
     (Get_Kind
       (New_Disjonction'Result)
       = W_Disjonction
      and then
        Get_Ada_Node
        (New_Disjonction'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Disjonction'Result)
        = Link
      and then
        Disjonction_Get_Left
        (New_Disjonction'Result)
        = Left
      and then
        Disjonction_Get_Right
        (New_Disjonction'Result)
        = Right);

   function New_Conjonction
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Conjonction_Id;
   pragma Postcondition
     (Get_Kind
       (New_Conjonction'Result)
       = W_Conjonction
      and then
        Get_Ada_Node
        (New_Conjonction'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Conjonction'Result)
        = Link
      and then
        Conjonction_Get_Left
        (New_Conjonction'Result)
        = Left
      and then
        Conjonction_Get_Right
        (New_Conjonction'Result)
        = Right);

   function New_Negation
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Operand  : W_Predicate_Id)
     return W_Negation_Id;
   pragma Postcondition
     (Get_Kind
       (New_Negation'Result)
       = W_Negation
      and then
        Get_Ada_Node
        (New_Negation'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Negation'Result)
        = Link
      and then
        Negation_Get_Operand
        (New_Negation'Result)
        = Operand);

   function New_Conditional_Pred
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Set;
      Condition : W_Term_Id;
      Then_Part : W_Predicate_Id;
      Else_Part : W_Predicate_Id)
     return W_Conditional_Pred_Id;
   pragma Postcondition
     (Get_Kind
       (New_Conditional_Pred'Result)
       = W_Conditional_Pred
      and then
        Get_Ada_Node
        (New_Conditional_Pred'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Conditional_Pred'Result)
        = Link
      and then
        Conditional_Pred_Get_Condition
        (New_Conditional_Pred'Result)
        = Condition
      and then
        Conditional_Pred_Get_Then_Part
        (New_Conditional_Pred'Result)
        = Then_Part
      and then
        Conditional_Pred_Get_Else_Part
        (New_Conditional_Pred'Result)
        = Else_Part);

   function New_Binding_Pred
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Def      : W_Term_Id;
      Context  : W_Predicate_Id)
     return W_Binding_Pred_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binding_Pred'Result)
       = W_Binding_Pred
      and then
        Get_Ada_Node
        (New_Binding_Pred'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Binding_Pred'Result)
        = Link
      and then
        Binding_Pred_Get_Name
        (New_Binding_Pred'Result)
        = Name
      and then
        Binding_Pred_Get_Def
        (New_Binding_Pred'Result)
        = Def
      and then
        Binding_Pred_Get_Context
        (New_Binding_Pred'Result)
        = Context);

   function New_Universal_Quantif
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Set;
      Variables : W_Identifier_List;
      Var_Type  : W_Primitive_Type_Id;
      Triggers  : W_Triggers_OId;
      Pred      : W_Predicate_Id)
     return W_Universal_Quantif_Id;
   pragma Postcondition
     (Get_Kind
       (New_Universal_Quantif'Result)
       = W_Universal_Quantif
      and then
        Get_Ada_Node
        (New_Universal_Quantif'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Universal_Quantif'Result)
        = Link
      and then
        Universal_Quantif_Get_Variables
        (New_Universal_Quantif'Result)
        = Variables
      and then
        Universal_Quantif_Get_Var_Type
        (New_Universal_Quantif'Result)
        = Var_Type
      and then
        Universal_Quantif_Get_Triggers
        (New_Universal_Quantif'Result)
        = Triggers
      and then
        Universal_Quantif_Get_Pred
        (New_Universal_Quantif'Result)
        = Pred);

   function New_Existential_Quantif
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Set;
      Variables : W_Identifier_List;
      Var_Type  : W_Primitive_Type_Id;
      Pred      : W_Predicate_Id)
     return W_Existential_Quantif_Id;
   pragma Postcondition
     (Get_Kind
       (New_Existential_Quantif'Result)
       = W_Existential_Quantif
      and then
        Get_Ada_Node
        (New_Existential_Quantif'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Existential_Quantif'Result)
        = Link
      and then
        Existential_Quantif_Get_Variables
        (New_Existential_Quantif'Result)
        = Variables
      and then
        Existential_Quantif_Get_Var_Type
        (New_Existential_Quantif'Result)
        = Var_Type
      and then
        Existential_Quantif_Get_Pred
        (New_Existential_Quantif'Result)
        = Pred);

   function New_Named_Predicate
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Pred     : W_Predicate_Id)
     return W_Named_Predicate_Id;
   pragma Postcondition
     (Get_Kind
       (New_Named_Predicate'Result)
       = W_Named_Predicate
      and then
        Get_Ada_Node
        (New_Named_Predicate'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Named_Predicate'Result)
        = Link
      and then
        Named_Predicate_Get_Name
        (New_Named_Predicate'Result)
        = Name
      and then
        Named_Predicate_Get_Pred
        (New_Named_Predicate'Result)
        = Pred);

   function New_Protected_Predicate
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Pred     : W_Predicate_Id)
     return W_Protected_Predicate_Id;
   pragma Postcondition
     (Get_Kind
       (New_Protected_Predicate'Result)
       = W_Protected_Predicate
      and then
        Get_Ada_Node
        (New_Protected_Predicate'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Protected_Predicate'Result)
        = Link
      and then
        Protected_Predicate_Get_Pred
        (New_Protected_Predicate'Result)
        = Pred);

   function New_Triggers
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Triggers : W_Trigger_List)
     return W_Triggers_Id;
   pragma Postcondition
     (Get_Kind
       (New_Triggers'Result)
       = W_Triggers
      and then
        Get_Ada_Node
        (New_Triggers'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Triggers'Result)
        = Link
      and then
        Triggers_Get_Triggers
        (New_Triggers'Result)
        = Triggers);

   function New_Trigger
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Terms    : W_Term_List)
     return W_Trigger_Id;
   pragma Postcondition
     (Get_Kind
       (New_Trigger'Result)
       = W_Trigger
      and then
        Get_Ada_Node
        (New_Trigger'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Trigger'Result)
        = Link
      and then
        Trigger_Get_Terms
        (New_Trigger'Result)
        = Terms);

   function New_Rel_Eq
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Rel_Eq_Id;
   pragma Postcondition
     (Get_Kind
       (New_Rel_Eq'Result)
       = W_Rel_Eq
      and then
        Get_Ada_Node
        (New_Rel_Eq'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Rel_Eq'Result)
        = Link);

   function New_Rel_Ne
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Rel_Ne_Id;
   pragma Postcondition
     (Get_Kind
       (New_Rel_Ne'Result)
       = W_Rel_Ne
      and then
        Get_Ada_Node
        (New_Rel_Ne'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Rel_Ne'Result)
        = Link);

   function New_Rel_Lt
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Rel_Lt_Id;
   pragma Postcondition
     (Get_Kind
       (New_Rel_Lt'Result)
       = W_Rel_Lt
      and then
        Get_Ada_Node
        (New_Rel_Lt'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Rel_Lt'Result)
        = Link);

   function New_Rel_Le
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Rel_Le_Id;
   pragma Postcondition
     (Get_Kind
       (New_Rel_Le'Result)
       = W_Rel_Le
      and then
        Get_Ada_Node
        (New_Rel_Le'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Rel_Le'Result)
        = Link);

   function New_Rel_Gt
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Rel_Gt_Id;
   pragma Postcondition
     (Get_Kind
       (New_Rel_Gt'Result)
       = W_Rel_Gt
      and then
        Get_Ada_Node
        (New_Rel_Gt'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Rel_Gt'Result)
        = Link);

   function New_Rel_Ge
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Rel_Ge_Id;
   pragma Postcondition
     (Get_Kind
       (New_Rel_Ge'Result)
       = W_Rel_Ge
      and then
        Get_Ada_Node
        (New_Rel_Ge'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Rel_Ge'Result)
        = Link);

   function New_Type
     (Ada_Node        : Node_Id;
      Link            : Why_Node_Set;
      External        : W_External_OId;
      Type_Parameters : W_Identifier_OList;
      Name            : W_Identifier_Id)
     return W_Type_Id;
   pragma Postcondition
     (Get_Kind
       (New_Type'Result)
       = W_Type
      and then
        Get_Ada_Node
        (New_Type'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Type'Result)
        = Link
      and then
        Type_Get_External
        (New_Type'Result)
        = External
      and then
        Type_Get_Type_Parameters
        (New_Type'Result)
        = Type_Parameters
      and then
        Type_Get_Name
        (New_Type'Result)
        = Name);

   function New_Logic
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Set;
      External   : W_External_OId;
      Names      : W_Identifier_List;
      Logic_Type : W_Logic_Type_Id)
     return W_Logic_Id;
   pragma Postcondition
     (Get_Kind
       (New_Logic'Result)
       = W_Logic
      and then
        Get_Ada_Node
        (New_Logic'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Logic'Result)
        = Link
      and then
        Logic_Get_External
        (New_Logic'Result)
        = External
      and then
        Logic_Get_Names
        (New_Logic'Result)
        = Names
      and then
        Logic_Get_Logic_Type
        (New_Logic'Result)
        = Logic_Type);

   function New_Function
     (Ada_Node    : Node_Id;
      Link        : Why_Node_Set;
      Name        : W_Identifier_Id;
      Binders     : W_Logic_Binder_List;
      Return_Type : W_Primitive_Type_Id;
      Def         : W_Term_Id)
     return W_Function_Id;
   pragma Postcondition
     (Get_Kind
       (New_Function'Result)
       = W_Function
      and then
        Get_Ada_Node
        (New_Function'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Function'Result)
        = Link
      and then
        Function_Get_Name
        (New_Function'Result)
        = Name
      and then
        Function_Get_Binders
        (New_Function'Result)
        = Binders
      and then
        Function_Get_Return_Type
        (New_Function'Result)
        = Return_Type
      and then
        Function_Get_Def
        (New_Function'Result)
        = Def);

   function New_Predicate_Definition
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Binders  : W_Logic_Binder_List;
      Def      : W_Predicate_Id)
     return W_Predicate_Definition_Id;
   pragma Postcondition
     (Get_Kind
       (New_Predicate_Definition'Result)
       = W_Predicate_Definition
      and then
        Get_Ada_Node
        (New_Predicate_Definition'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Predicate_Definition'Result)
        = Link
      and then
        Predicate_Definition_Get_Name
        (New_Predicate_Definition'Result)
        = Name
      and then
        Predicate_Definition_Get_Binders
        (New_Predicate_Definition'Result)
        = Binders
      and then
        Predicate_Definition_Get_Def
        (New_Predicate_Definition'Result)
        = Def);

   function New_Inductive
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Set;
      Name       : W_Identifier_Id;
      Logic_Type : W_Logic_Type_Id;
      Def        : W_Inductive_Case_List)
     return W_Inductive_Id;
   pragma Postcondition
     (Get_Kind
       (New_Inductive'Result)
       = W_Inductive
      and then
        Get_Ada_Node
        (New_Inductive'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Inductive'Result)
        = Link
      and then
        Inductive_Get_Name
        (New_Inductive'Result)
        = Name
      and then
        Inductive_Get_Logic_Type
        (New_Inductive'Result)
        = Logic_Type
      and then
        Inductive_Get_Def
        (New_Inductive'Result)
        = Def);

   function New_Axiom
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Def      : W_Predicate_Id)
     return W_Axiom_Id;
   pragma Postcondition
     (Get_Kind
       (New_Axiom'Result)
       = W_Axiom
      and then
        Get_Ada_Node
        (New_Axiom'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Axiom'Result)
        = Link
      and then
        Axiom_Get_Name
        (New_Axiom'Result)
        = Name
      and then
        Axiom_Get_Def
        (New_Axiom'Result)
        = Def);

   function New_Goal
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Def      : W_Predicate_Id)
     return W_Goal_Id;
   pragma Postcondition
     (Get_Kind
       (New_Goal'Result)
       = W_Goal
      and then
        Get_Ada_Node
        (New_Goal'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Goal'Result)
        = Link
      and then
        Goal_Get_Name
        (New_Goal'Result)
        = Name
      and then
        Goal_Get_Def
        (New_Goal'Result)
        = Def);

   function New_External
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_External_Id;
   pragma Postcondition
     (Get_Kind
       (New_External'Result)
       = W_External
      and then
        Get_Ada_Node
        (New_External'Result)
        = Ada_Node
      and then
        Get_Link
        (New_External'Result)
        = Link);

   function New_Logic_Type
     (Ada_Node    : Node_Id;
      Link        : Why_Node_Set;
      Arg_Types   : W_Logic_Arg_Type_List;
      Return_Type : W_Logic_Return_Type_List)
     return W_Logic_Type_Id;
   pragma Postcondition
     (Get_Kind
       (New_Logic_Type'Result)
       = W_Logic_Type
      and then
        Get_Ada_Node
        (New_Logic_Type'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Logic_Type'Result)
        = Link
      and then
        Logic_Type_Get_Arg_Types
        (New_Logic_Type'Result)
        = Arg_Types
      and then
        Logic_Type_Get_Return_Type
        (New_Logic_Type'Result)
        = Return_Type);

   function New_Logic_Binder
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Set;
      Name       : W_Identifier_Id;
      Param_Type : W_Primitive_Type_Id)
     return W_Logic_Binder_Id;
   pragma Postcondition
     (Get_Kind
       (New_Logic_Binder'Result)
       = W_Logic_Binder
      and then
        Get_Ada_Node
        (New_Logic_Binder'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Logic_Binder'Result)
        = Link
      and then
        Logic_Binder_Get_Name
        (New_Logic_Binder'Result)
        = Name
      and then
        Logic_Binder_Get_Param_Type
        (New_Logic_Binder'Result)
        = Param_Type);

   function New_Inductive_Case
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Pred     : W_Predicate_Id)
     return W_Inductive_Case_Id;
   pragma Postcondition
     (Get_Kind
       (New_Inductive_Case'Result)
       = W_Inductive_Case
      and then
        Get_Ada_Node
        (New_Inductive_Case'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Inductive_Case'Result)
        = Link
      and then
        Inductive_Case_Get_Name
        (New_Inductive_Case'Result)
        = Name
      and then
        Inductive_Case_Get_Pred
        (New_Inductive_Case'Result)
        = Pred);

   function New_Effects
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Reads    : W_Identifier_OList;
      Writes   : W_Identifier_OList;
      Raises   : W_Identifier_OList)
     return W_Effects_Id;
   pragma Postcondition
     (Get_Kind
       (New_Effects'Result)
       = W_Effects
      and then
        Get_Ada_Node
        (New_Effects'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Effects'Result)
        = Link
      and then
        Effects_Get_Reads
        (New_Effects'Result)
        = Reads
      and then
        Effects_Get_Writes
        (New_Effects'Result)
        = Writes
      and then
        Effects_Get_Raises
        (New_Effects'Result)
        = Raises);

   function New_Precondition
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Set;
      Assertion : W_Assertion_Id)
     return W_Precondition_Id;
   pragma Postcondition
     (Get_Kind
       (New_Precondition'Result)
       = W_Precondition
      and then
        Get_Ada_Node
        (New_Precondition'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Precondition'Result)
        = Link
      and then
        Precondition_Get_Assertion
        (New_Precondition'Result)
        = Assertion);

   function New_Postcondition
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Set;
      Assertion : W_Assertion_Id;
      Handlers  : W_Exn_Condition_OList)
     return W_Postcondition_Id;
   pragma Postcondition
     (Get_Kind
       (New_Postcondition'Result)
       = W_Postcondition
      and then
        Get_Ada_Node
        (New_Postcondition'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Postcondition'Result)
        = Link
      and then
        Postcondition_Get_Assertion
        (New_Postcondition'Result)
        = Assertion
      and then
        Postcondition_Get_Handlers
        (New_Postcondition'Result)
        = Handlers);

   function New_Exn_Condition
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Set;
      Exn_Case  : W_Identifier_Id;
      Assertion : W_Assertion_Id)
     return W_Exn_Condition_Id;
   pragma Postcondition
     (Get_Kind
       (New_Exn_Condition'Result)
       = W_Exn_Condition
      and then
        Get_Ada_Node
        (New_Exn_Condition'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Exn_Condition'Result)
        = Link
      and then
        Exn_Condition_Get_Exn_Case
        (New_Exn_Condition'Result)
        = Exn_Case
      and then
        Exn_Condition_Get_Assertion
        (New_Exn_Condition'Result)
        = Assertion);

   function New_Assertion
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Pred     : W_Predicate_Id;
      As       : W_Identifier_OId)
     return W_Assertion_Id;
   pragma Postcondition
     (Get_Kind
       (New_Assertion'Result)
       = W_Assertion
      and then
        Get_Ada_Node
        (New_Assertion'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Assertion'Result)
        = Link
      and then
        Assertion_Get_Pred
        (New_Assertion'Result)
        = Pred
      and then
        Assertion_Get_As
        (New_Assertion'Result)
        = As);

   function New_Prog_Constant
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Def      : W_Constant_Id)
     return W_Prog_Constant_Id;
   pragma Postcondition
     (Get_Kind
       (New_Prog_Constant'Result)
       = W_Prog_Constant
      and then
        Get_Ada_Node
        (New_Prog_Constant'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Prog_Constant'Result)
        = Link
      and then
        Prog_Constant_Get_Def
        (New_Prog_Constant'Result)
        = Def);

   function New_Prog_Identifier
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Def      : W_Identifier_Id)
     return W_Prog_Identifier_Id;
   pragma Postcondition
     (Get_Kind
       (New_Prog_Identifier'Result)
       = W_Prog_Identifier
      and then
        Get_Ada_Node
        (New_Prog_Identifier'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Prog_Identifier'Result)
        = Link
      and then
        Prog_Identifier_Get_Def
        (New_Prog_Identifier'Result)
        = Def);

   function New_Deref
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Ref      : W_Identifier_Id)
     return W_Deref_Id;
   pragma Postcondition
     (Get_Kind
       (New_Deref'Result)
       = W_Deref
      and then
        Get_Ada_Node
        (New_Deref'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Deref'Result)
        = Link
      and then
        Deref_Get_Ref
        (New_Deref'Result)
        = Ref);

   function New_Assignment
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Value    : W_Prog_Id)
     return W_Assignment_Id;
   pragma Postcondition
     (Get_Kind
       (New_Assignment'Result)
       = W_Assignment
      and then
        Get_Ada_Node
        (New_Assignment'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Assignment'Result)
        = Link
      and then
        Assignment_Get_Name
        (New_Assignment'Result)
        = Name
      and then
        Assignment_Get_Value
        (New_Assignment'Result)
        = Value);

   function New_Array_Access
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Index    : W_Prog_Id)
     return W_Array_Access_Id;
   pragma Postcondition
     (Get_Kind
       (New_Array_Access'Result)
       = W_Array_Access
      and then
        Get_Ada_Node
        (New_Array_Access'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Array_Access'Result)
        = Link
      and then
        Array_Access_Get_Name
        (New_Array_Access'Result)
        = Name
      and then
        Array_Access_Get_Index
        (New_Array_Access'Result)
        = Index);

   function New_Array_Update
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Index    : W_Prog_Id;
      Value    : W_Prog_Id)
     return W_Array_Update_Id;
   pragma Postcondition
     (Get_Kind
       (New_Array_Update'Result)
       = W_Array_Update
      and then
        Get_Ada_Node
        (New_Array_Update'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Array_Update'Result)
        = Link
      and then
        Array_Update_Get_Name
        (New_Array_Update'Result)
        = Name
      and then
        Array_Update_Get_Index
        (New_Array_Update'Result)
        = Index
      and then
        Array_Update_Get_Value
        (New_Array_Update'Result)
        = Value);

   function New_Infix_Call
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Left     : W_Prog_Id;
      Infix    : W_Infix_Id;
      Right    : W_Prog_Id)
     return W_Infix_Call_Id;
   pragma Postcondition
     (Get_Kind
       (New_Infix_Call'Result)
       = W_Infix_Call
      and then
        Get_Ada_Node
        (New_Infix_Call'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Infix_Call'Result)
        = Link
      and then
        Infix_Call_Get_Left
        (New_Infix_Call'Result)
        = Left
      and then
        Infix_Call_Get_Infix
        (New_Infix_Call'Result)
        = Infix
      and then
        Infix_Call_Get_Right
        (New_Infix_Call'Result)
        = Right);

   function New_Prefix_Call
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Prefix   : W_Prefix_Id;
      Operand  : W_Prog_Id)
     return W_Prefix_Call_Id;
   pragma Postcondition
     (Get_Kind
       (New_Prefix_Call'Result)
       = W_Prefix_Call
      and then
        Get_Ada_Node
        (New_Prefix_Call'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Prefix_Call'Result)
        = Link
      and then
        Prefix_Call_Get_Prefix
        (New_Prefix_Call'Result)
        = Prefix
      and then
        Prefix_Call_Get_Operand
        (New_Prefix_Call'Result)
        = Operand);

   function New_Binding_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Def      : W_Prog_Id;
      Context  : W_Prog_Id)
     return W_Binding_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binding_Prog'Result)
       = W_Binding_Prog
      and then
        Get_Ada_Node
        (New_Binding_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Binding_Prog'Result)
        = Link
      and then
        Binding_Prog_Get_Name
        (New_Binding_Prog'Result)
        = Name
      and then
        Binding_Prog_Get_Def
        (New_Binding_Prog'Result)
        = Def
      and then
        Binding_Prog_Get_Context
        (New_Binding_Prog'Result)
        = Context);

   function New_Binding_Ref
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Def      : W_Prog_Id;
      Context  : W_Prog_Id)
     return W_Binding_Ref_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binding_Ref'Result)
       = W_Binding_Ref
      and then
        Get_Ada_Node
        (New_Binding_Ref'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Binding_Ref'Result)
        = Link
      and then
        Binding_Ref_Get_Name
        (New_Binding_Ref'Result)
        = Name
      and then
        Binding_Ref_Get_Def
        (New_Binding_Ref'Result)
        = Def
      and then
        Binding_Ref_Get_Context
        (New_Binding_Ref'Result)
        = Context);

   function New_Conditional_Prog
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Set;
      Condition : W_Prog_Id;
      Then_Part : W_Prog_Id;
      Else_Part : W_Prog_OId)
     return W_Conditional_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Conditional_Prog'Result)
       = W_Conditional_Prog
      and then
        Get_Ada_Node
        (New_Conditional_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Conditional_Prog'Result)
        = Link
      and then
        Conditional_Prog_Get_Condition
        (New_Conditional_Prog'Result)
        = Condition
      and then
        Conditional_Prog_Get_Then_Part
        (New_Conditional_Prog'Result)
        = Then_Part
      and then
        Conditional_Prog_Get_Else_Part
        (New_Conditional_Prog'Result)
        = Else_Part);

   function New_While_Loop
     (Ada_Node     : Node_Id;
      Link         : Why_Node_Set;
      Condition    : W_Prog_Id;
      Annotation   : W_Loop_Annot_Id;
      Loop_Content : W_Prog_Id)
     return W_While_Loop_Id;
   pragma Postcondition
     (Get_Kind
       (New_While_Loop'Result)
       = W_While_Loop
      and then
        Get_Ada_Node
        (New_While_Loop'Result)
        = Ada_Node
      and then
        Get_Link
        (New_While_Loop'Result)
        = Link
      and then
        While_Loop_Get_Condition
        (New_While_Loop'Result)
        = Condition
      and then
        While_Loop_Get_Annotation
        (New_While_Loop'Result)
        = Annotation
      and then
        While_Loop_Get_Loop_Content
        (New_While_Loop'Result)
        = Loop_Content);

   function New_Statement_Sequence
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Set;
      Statements : W_Prog_List)
     return W_Statement_Sequence_Id;
   pragma Postcondition
     (Get_Kind
       (New_Statement_Sequence'Result)
       = W_Statement_Sequence
      and then
        Get_Ada_Node
        (New_Statement_Sequence'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Statement_Sequence'Result)
        = Link
      and then
        Statement_Sequence_Get_Statements
        (New_Statement_Sequence'Result)
        = Statements);

   function New_Label
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Def      : W_Prog_Id)
     return W_Label_Id;
   pragma Postcondition
     (Get_Kind
       (New_Label'Result)
       = W_Label
      and then
        Get_Ada_Node
        (New_Label'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Label'Result)
        = Link
      and then
        Label_Get_Name
        (New_Label'Result)
        = Name
      and then
        Label_Get_Def
        (New_Label'Result)
        = Def);

   function New_Assert
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Set;
      Assertions : W_Assertion_List;
      Prog       : W_Prog_Id)
     return W_Assert_Id;
   pragma Postcondition
     (Get_Kind
       (New_Assert'Result)
       = W_Assert
      and then
        Get_Ada_Node
        (New_Assert'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Assert'Result)
        = Link
      and then
        Assert_Get_Assertions
        (New_Assert'Result)
        = Assertions
      and then
        Assert_Get_Prog
        (New_Assert'Result)
        = Prog);

   function New_Post_Assertion
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Prog     : W_Prog_Id;
      Post     : W_Postcondition_Id)
     return W_Post_Assertion_Id;
   pragma Postcondition
     (Get_Kind
       (New_Post_Assertion'Result)
       = W_Post_Assertion
      and then
        Get_Ada_Node
        (New_Post_Assertion'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Post_Assertion'Result)
        = Link
      and then
        Post_Assertion_Get_Prog
        (New_Post_Assertion'Result)
        = Prog
      and then
        Post_Assertion_Get_Post
        (New_Post_Assertion'Result)
        = Post);

   function New_Opaque_Assertion
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Prog     : W_Prog_Id;
      Post     : W_Postcondition_Id)
     return W_Opaque_Assertion_Id;
   pragma Postcondition
     (Get_Kind
       (New_Opaque_Assertion'Result)
       = W_Opaque_Assertion
      and then
        Get_Ada_Node
        (New_Opaque_Assertion'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Opaque_Assertion'Result)
        = Link
      and then
        Opaque_Assertion_Get_Prog
        (New_Opaque_Assertion'Result)
        = Prog
      and then
        Opaque_Assertion_Get_Post
        (New_Opaque_Assertion'Result)
        = Post);

   function New_Fun_Def
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Binders  : W_Binders_Id;
      Def      : W_Prog_Id)
     return W_Fun_Def_Id;
   pragma Postcondition
     (Get_Kind
       (New_Fun_Def'Result)
       = W_Fun_Def
      and then
        Get_Ada_Node
        (New_Fun_Def'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Fun_Def'Result)
        = Link
      and then
        Fun_Def_Get_Binders
        (New_Fun_Def'Result)
        = Binders
      and then
        Fun_Def_Get_Def
        (New_Fun_Def'Result)
        = Def);

   function New_Binding_Fun
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Binders  : W_Binders_Id;
      Def      : W_Prog_Id;
      Context  : W_Prog_Id)
     return W_Binding_Fun_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binding_Fun'Result)
       = W_Binding_Fun
      and then
        Get_Ada_Node
        (New_Binding_Fun'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Binding_Fun'Result)
        = Link
      and then
        Binding_Fun_Get_Name
        (New_Binding_Fun'Result)
        = Name
      and then
        Binding_Fun_Get_Binders
        (New_Binding_Fun'Result)
        = Binders
      and then
        Binding_Fun_Get_Def
        (New_Binding_Fun'Result)
        = Def
      and then
        Binding_Fun_Get_Context
        (New_Binding_Fun'Result)
        = Context);

   function New_Binding_Rec
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Recfun   : W_Recfun_Id;
      Context  : W_Prog_Id)
     return W_Binding_Rec_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binding_Rec'Result)
       = W_Binding_Rec
      and then
        Get_Ada_Node
        (New_Binding_Rec'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Binding_Rec'Result)
        = Link
      and then
        Binding_Rec_Get_Recfun
        (New_Binding_Rec'Result)
        = Recfun
      and then
        Binding_Rec_Get_Context
        (New_Binding_Rec'Result)
        = Context);

   function New_Prog_Sequence
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Progs    : W_Prog_List)
     return W_Prog_Sequence_Id;
   pragma Postcondition
     (Get_Kind
       (New_Prog_Sequence'Result)
       = W_Prog_Sequence
      and then
        Get_Ada_Node
        (New_Prog_Sequence'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Prog_Sequence'Result)
        = Link
      and then
        Prog_Sequence_Get_Progs
        (New_Prog_Sequence'Result)
        = Progs);

   function New_Raise_Statement
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Exn_Type : W_Value_Type_OId)
     return W_Raise_Statement_Id;
   pragma Postcondition
     (Get_Kind
       (New_Raise_Statement'Result)
       = W_Raise_Statement
      and then
        Get_Ada_Node
        (New_Raise_Statement'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Raise_Statement'Result)
        = Link
      and then
        Raise_Statement_Get_Name
        (New_Raise_Statement'Result)
        = Name
      and then
        Raise_Statement_Get_Exn_Type
        (New_Raise_Statement'Result)
        = Exn_Type);

   function New_Raise_Statement_With_Parameters
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Set;
      Name      : W_Identifier_Id;
      Parameter : W_Term_Id;
      Exn_Type  : W_Value_Type_OId)
     return W_Raise_Statement_With_Parameters_Id;
   pragma Postcondition
     (Get_Kind
       (New_Raise_Statement_With_Parameters'Result)
       = W_Raise_Statement_With_Parameters
      and then
        Get_Ada_Node
        (New_Raise_Statement_With_Parameters'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Raise_Statement_With_Parameters'Result)
        = Link
      and then
        Raise_Statement_With_Parameters_Get_Name
        (New_Raise_Statement_With_Parameters'Result)
        = Name
      and then
        Raise_Statement_With_Parameters_Get_Parameter
        (New_Raise_Statement_With_Parameters'Result)
        = Parameter
      and then
        Raise_Statement_With_Parameters_Get_Exn_Type
        (New_Raise_Statement_With_Parameters'Result)
        = Exn_Type);

   function New_Try_Block
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Prog     : W_Prog_Id;
      Handler  : W_Handler_List)
     return W_Try_Block_Id;
   pragma Postcondition
     (Get_Kind
       (New_Try_Block'Result)
       = W_Try_Block
      and then
        Get_Ada_Node
        (New_Try_Block'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Try_Block'Result)
        = Link
      and then
        Try_Block_Get_Prog
        (New_Try_Block'Result)
        = Prog
      and then
        Try_Block_Get_Handler
        (New_Try_Block'Result)
        = Handler);

   function New_Unreachable_Code
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Exn_Type : W_Value_Type_OId)
     return W_Unreachable_Code_Id;
   pragma Postcondition
     (Get_Kind
       (New_Unreachable_Code'Result)
       = W_Unreachable_Code
      and then
        Get_Ada_Node
        (New_Unreachable_Code'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Unreachable_Code'Result)
        = Link
      and then
        Unreachable_Code_Get_Exn_Type
        (New_Unreachable_Code'Result)
        = Exn_Type);

   function New_Begin_Block
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Prog     : W_Prog_Id)
     return W_Begin_Block_Id;
   pragma Postcondition
     (Get_Kind
       (New_Begin_Block'Result)
       = W_Begin_Block
      and then
        Get_Ada_Node
        (New_Begin_Block'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Begin_Block'Result)
        = Link
      and then
        Begin_Block_Get_Prog
        (New_Begin_Block'Result)
        = Prog);

   function New_Protected_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Prog     : W_Prog_Id)
     return W_Protected_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Protected_Prog'Result)
       = W_Protected_Prog
      and then
        Get_Ada_Node
        (New_Protected_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Protected_Prog'Result)
        = Link
      and then
        Protected_Prog_Get_Prog
        (New_Protected_Prog'Result)
        = Prog);

   function New_Op_Add_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Add_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Add_Prog'Result)
       = W_Op_Add_Prog
      and then
        Get_Ada_Node
        (New_Op_Add_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Add_Prog'Result)
        = Link);

   function New_Op_Substract_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Substract_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Substract_Prog'Result)
       = W_Op_Substract_Prog
      and then
        Get_Ada_Node
        (New_Op_Substract_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Substract_Prog'Result)
        = Link);

   function New_Op_Multiply_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Multiply_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Multiply_Prog'Result)
       = W_Op_Multiply_Prog
      and then
        Get_Ada_Node
        (New_Op_Multiply_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Multiply_Prog'Result)
        = Link);

   function New_Op_Divide_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Divide_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Divide_Prog'Result)
       = W_Op_Divide_Prog
      and then
        Get_Ada_Node
        (New_Op_Divide_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Divide_Prog'Result)
        = Link);

   function New_Op_Mod_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Mod_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Mod_Prog'Result)
       = W_Op_Mod_Prog
      and then
        Get_Ada_Node
        (New_Op_Mod_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Mod_Prog'Result)
        = Link);

   function New_Op_Eq_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Eq_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Eq_Prog'Result)
       = W_Op_Eq_Prog
      and then
        Get_Ada_Node
        (New_Op_Eq_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Eq_Prog'Result)
        = Link);

   function New_Op_Ne_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Ne_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Ne_Prog'Result)
       = W_Op_Ne_Prog
      and then
        Get_Ada_Node
        (New_Op_Ne_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Ne_Prog'Result)
        = Link);

   function New_Op_Lt_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Lt_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Lt_Prog'Result)
       = W_Op_Lt_Prog
      and then
        Get_Ada_Node
        (New_Op_Lt_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Lt_Prog'Result)
        = Link);

   function New_Op_Le_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Le_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Le_Prog'Result)
       = W_Op_Le_Prog
      and then
        Get_Ada_Node
        (New_Op_Le_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Le_Prog'Result)
        = Link);

   function New_Op_Gt_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Gt_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Gt_Prog'Result)
       = W_Op_Gt_Prog
      and then
        Get_Ada_Node
        (New_Op_Gt_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Gt_Prog'Result)
        = Link);

   function New_Op_Ge_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Ge_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Ge_Prog'Result)
       = W_Op_Ge_Prog
      and then
        Get_Ada_Node
        (New_Op_Ge_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Ge_Prog'Result)
        = Link);

   function New_Op_Or_Else_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Or_Else_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Or_Else_Prog'Result)
       = W_Op_Or_Else_Prog
      and then
        Get_Ada_Node
        (New_Op_Or_Else_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Or_Else_Prog'Result)
        = Link);

   function New_Op_And_Then_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_And_Then_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_And_Then_Prog'Result)
       = W_Op_And_Then_Prog
      and then
        Get_Ada_Node
        (New_Op_And_Then_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_And_Then_Prog'Result)
        = Link);

   function New_Op_Minus_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Minus_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Minus_Prog'Result)
       = W_Op_Minus_Prog
      and then
        Get_Ada_Node
        (New_Op_Minus_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Minus_Prog'Result)
        = Link);

   function New_Op_Not_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set)
     return W_Op_Not_Prog_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Not_Prog'Result)
       = W_Op_Not_Prog
      and then
        Get_Ada_Node
        (New_Op_Not_Prog'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Op_Not_Prog'Result)
        = Link);

   function New_Binders
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Binders  : W_Binders_List)
     return W_Binders_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binders'Result)
       = W_Binders
      and then
        Get_Ada_Node
        (New_Binders'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Binders'Result)
        = Link
      and then
        Binders_Get_Binders
        (New_Binders'Result)
        = Binders);

   function New_Binder
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Names    : W_Identifier_List;
      Arg_Type : W_Value_Type_Id)
     return W_Binder_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binder'Result)
       = W_Binder
      and then
        Get_Ada_Node
        (New_Binder'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Binder'Result)
        = Link
      and then
        Binder_Get_Names
        (New_Binder'Result)
        = Names
      and then
        Binder_Get_Arg_Type
        (New_Binder'Result)
        = Arg_Type);

   function New_Recfun
     (Ada_Node    : Node_Id;
      Link        : Why_Node_Set;
      Name        : W_Identifier_Id;
      Binders     : W_Binders_Id;
      Return_Type : W_Prog_Id;
      Variant     : W_Wf_Arg_Id;
      Def         : W_Prog_Id)
     return W_Recfun_Id;
   pragma Postcondition
     (Get_Kind
       (New_Recfun'Result)
       = W_Recfun
      and then
        Get_Ada_Node
        (New_Recfun'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Recfun'Result)
        = Link
      and then
        Recfun_Get_Name
        (New_Recfun'Result)
        = Name
      and then
        Recfun_Get_Binders
        (New_Recfun'Result)
        = Binders
      and then
        Recfun_Get_Return_Type
        (New_Recfun'Result)
        = Return_Type
      and then
        Recfun_Get_Variant
        (New_Recfun'Result)
        = Variant
      and then
        Recfun_Get_Def
        (New_Recfun'Result)
        = Def);

   function New_Loop_Annot
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Set;
      Invariant : W_Assertion_OId;
      Variant   : W_Wf_Arg_OId)
     return W_Loop_Annot_Id;
   pragma Postcondition
     (Get_Kind
       (New_Loop_Annot'Result)
       = W_Loop_Annot
      and then
        Get_Ada_Node
        (New_Loop_Annot'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Loop_Annot'Result)
        = Link
      and then
        Loop_Annot_Get_Invariant
        (New_Loop_Annot'Result)
        = Invariant
      and then
        Loop_Annot_Get_Variant
        (New_Loop_Annot'Result)
        = Variant);

   function New_Wf_Arg
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Def      : W_Term_Id;
      For_Id   : W_Identifier_OId)
     return W_Wf_Arg_Id;
   pragma Postcondition
     (Get_Kind
       (New_Wf_Arg'Result)
       = W_Wf_Arg
      and then
        Get_Ada_Node
        (New_Wf_Arg'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Wf_Arg'Result)
        = Link
      and then
        Wf_Arg_Get_Def
        (New_Wf_Arg'Result)
        = Def
      and then
        Wf_Arg_Get_For_Id
        (New_Wf_Arg'Result)
        = For_Id);

   function New_Handler
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Set;
      Name      : W_Identifier_Id;
      Parameter : W_Prog_OId;
      Def       : W_Prog_Id)
     return W_Handler_Id;
   pragma Postcondition
     (Get_Kind
       (New_Handler'Result)
       = W_Handler
      and then
        Get_Ada_Node
        (New_Handler'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Handler'Result)
        = Link
      and then
        Handler_Get_Name
        (New_Handler'Result)
        = Name
      and then
        Handler_Get_Parameter
        (New_Handler'Result)
        = Parameter
      and then
        Handler_Get_Def
        (New_Handler'Result)
        = Def);

   function New_File
     (Ada_Node     : Node_Id;
      Link         : Why_Node_Set;
      Declarations : W_Declaration_OList)
     return W_File_Id;
   pragma Postcondition
     (Get_Kind
       (New_File'Result)
       = W_File
      and then
        Get_Ada_Node
        (New_File'Result)
        = Ada_Node
      and then
        Get_Link
        (New_File'Result)
        = Link
      and then
        File_Get_Declarations
        (New_File'Result)
        = Declarations);

   function New_Global_Binding
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Identifier_Id;
      Binders  : W_Binders_OId;
      Def      : W_Prog_Id)
     return W_Global_Binding_Id;
   pragma Postcondition
     (Get_Kind
       (New_Global_Binding'Result)
       = W_Global_Binding
      and then
        Get_Ada_Node
        (New_Global_Binding'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Global_Binding'Result)
        = Link
      and then
        Global_Binding_Get_Name
        (New_Global_Binding'Result)
        = Name
      and then
        Global_Binding_Get_Binders
        (New_Global_Binding'Result)
        = Binders
      and then
        Global_Binding_Get_Def
        (New_Global_Binding'Result)
        = Def);

   function New_Global_Rec_Binding
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Name     : W_Recfun_Id)
     return W_Global_Rec_Binding_Id;
   pragma Postcondition
     (Get_Kind
       (New_Global_Rec_Binding'Result)
       = W_Global_Rec_Binding
      and then
        Get_Ada_Node
        (New_Global_Rec_Binding'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Global_Rec_Binding'Result)
        = Link
      and then
        Global_Rec_Binding_Get_Name
        (New_Global_Rec_Binding'Result)
        = Name);

   function New_Parameter_Declaration
     (Ada_Node       : Node_Id;
      Link           : Why_Node_Set;
      External       : W_External_Id;
      Names          : W_Identifier_List;
      Parameter_Type : W_Value_Type_Id)
     return W_Parameter_Declaration_Id;
   pragma Postcondition
     (Get_Kind
       (New_Parameter_Declaration'Result)
       = W_Parameter_Declaration
      and then
        Get_Ada_Node
        (New_Parameter_Declaration'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Parameter_Declaration'Result)
        = Link
      and then
        Parameter_Declaration_Get_External
        (New_Parameter_Declaration'Result)
        = External
      and then
        Parameter_Declaration_Get_Names
        (New_Parameter_Declaration'Result)
        = Names
      and then
        Parameter_Declaration_Get_Parameter_Type
        (New_Parameter_Declaration'Result)
        = Parameter_Type);

   function New_Exception_Declaration
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Set;
      Name      : W_Identifier_Id;
      Parameter : W_Primitive_Type_OId)
     return W_Exception_Declaration_Id;
   pragma Postcondition
     (Get_Kind
       (New_Exception_Declaration'Result)
       = W_Exception_Declaration
      and then
        Get_Ada_Node
        (New_Exception_Declaration'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Exception_Declaration'Result)
        = Link
      and then
        Exception_Declaration_Get_Name
        (New_Exception_Declaration'Result)
        = Name
      and then
        Exception_Declaration_Get_Parameter
        (New_Exception_Declaration'Result)
        = Parameter);

   function New_Logic_Declaration
     (Ada_Node : Node_Id;
      Link     : Why_Node_Set;
      Decl     : W_Logic_Id)
     return W_Logic_Declaration_Id;
   pragma Postcondition
     (Get_Kind
       (New_Logic_Declaration'Result)
       = W_Logic_Declaration
      and then
        Get_Ada_Node
        (New_Logic_Declaration'Result)
        = Ada_Node
      and then
        Get_Link
        (New_Logic_Declaration'Result)
        = Link
      and then
        Logic_Declaration_Get_Decl
        (New_Logic_Declaration'Result)
        = Decl);

   function New_Identifier
     (Symbol : Name_Id)
     return W_Identifier_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Identifier'Result)
       = W_Identifier
     );

   function New_Type_Prop
     return W_Type_Prop_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Type_Prop'Result)
       = W_Type_Prop
     );

   function New_Type_Int
     return W_Type_Int_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Type_Int'Result)
       = W_Type_Int
     );

   function New_Type_Bool
     return W_Type_Bool_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Type_Bool'Result)
       = W_Type_Bool
     );

   function New_Type_Real
     return W_Type_Real_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Type_Real'Result)
       = W_Type_Real
     );

   function New_Type_Unit
     return W_Type_Unit_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Type_Unit'Result)
       = W_Type_Unit
     );

   function New_Abstract_Type
     return W_Abstract_Type_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Abstract_Type'Result)
       = W_Abstract_Type
     );

   function New_Generic_Formal_Type
     return W_Generic_Formal_Type_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Generic_Formal_Type'Result)
       = W_Generic_Formal_Type
     );

   function New_Generic_Actual_Type_Chain
     return W_Generic_Actual_Type_Chain_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Generic_Actual_Type_Chain'Result)
       = W_Generic_Actual_Type_Chain
     );

   function New_Array_Type
     return W_Array_Type_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Array_Type'Result)
       = W_Array_Type
     );

   function New_Ref_Type
     return W_Ref_Type_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Ref_Type'Result)
       = W_Ref_Type
     );

   function New_Protected_Value_Type
     return W_Protected_Value_Type_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Protected_Value_Type'Result)
       = W_Protected_Value_Type
     );

   function New_Anonymous_Arrow_Type
     return W_Anonymous_Arrow_Type_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Anonymous_Arrow_Type'Result)
       = W_Anonymous_Arrow_Type
     );

   function New_Named_Arrow_Type
     return W_Named_Arrow_Type_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Named_Arrow_Type'Result)
       = W_Named_Arrow_Type
     );

   function New_Computation_Spec
     return W_Computation_Spec_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Computation_Spec'Result)
       = W_Computation_Spec
     );

   function New_Integer_Constant
     (Value : Uint)
     return W_Integer_Constant_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Integer_Constant'Result)
       = W_Integer_Constant
     );

   function New_Real_Constant
     (Value : Ureal)
     return W_Real_Constant_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Real_Constant'Result)
       = W_Real_Constant
     );

   function New_True_Literal
     return W_True_Literal_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_True_Literal'Result)
       = W_True_Literal
     );

   function New_False_Literal
     return W_False_Literal_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_False_Literal'Result)
       = W_False_Literal
     );

   function New_Void_Literal
     return W_Void_Literal_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Void_Literal'Result)
       = W_Void_Literal
     );

   function New_Arith_Operation
     return W_Arith_Operation_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Arith_Operation'Result)
       = W_Arith_Operation
     );

   function New_Negative_Term
     return W_Negative_Term_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Negative_Term'Result)
       = W_Negative_Term
     );

   function New_Label_Identifier
     return W_Label_Identifier_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Label_Identifier'Result)
       = W_Label_Identifier
     );

   function New_Operation
     return W_Operation_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Operation'Result)
       = W_Operation
     );

   function New_Named_Term
     return W_Named_Term_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Named_Term'Result)
       = W_Named_Term
     );

   function New_Conditional_Term
     return W_Conditional_Term_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Conditional_Term'Result)
       = W_Conditional_Term
     );

   function New_Binding_Term
     return W_Binding_Term_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binding_Term'Result)
       = W_Binding_Term
     );

   function New_Protected_Term
     return W_Protected_Term_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Protected_Term'Result)
       = W_Protected_Term
     );

   function New_Op_Add
     return W_Op_Add_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Add'Result)
       = W_Op_Add
     );

   function New_Op_Substract
     return W_Op_Substract_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Substract'Result)
       = W_Op_Substract
     );

   function New_Op_Multiply
     return W_Op_Multiply_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Multiply'Result)
       = W_Op_Multiply
     );

   function New_Op_Divide
     return W_Op_Divide_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Divide'Result)
       = W_Op_Divide
     );

   function New_Op_Modulo
     return W_Op_Modulo_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Modulo'Result)
       = W_Op_Modulo
     );

   function New_True_Literal_Pred
     return W_True_Literal_Pred_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_True_Literal_Pred'Result)
       = W_True_Literal_Pred
     );

   function New_False_Literal_Pred
     return W_False_Literal_Pred_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_False_Literal_Pred'Result)
       = W_False_Literal_Pred
     );

   function New_Predicate_Identifier
     return W_Predicate_Identifier_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Predicate_Identifier'Result)
       = W_Predicate_Identifier
     );

   function New_Predicate_Instance
     return W_Predicate_Instance_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Predicate_Instance'Result)
       = W_Predicate_Instance
     );

   function New_Related_Terms
     return W_Related_Terms_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Related_Terms'Result)
       = W_Related_Terms
     );

   function New_Implication
     return W_Implication_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Implication'Result)
       = W_Implication
     );

   function New_Equivalence
     return W_Equivalence_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Equivalence'Result)
       = W_Equivalence
     );

   function New_Disjonction
     return W_Disjonction_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Disjonction'Result)
       = W_Disjonction
     );

   function New_Conjonction
     return W_Conjonction_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Conjonction'Result)
       = W_Conjonction
     );

   function New_Negation
     return W_Negation_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Negation'Result)
       = W_Negation
     );

   function New_Conditional_Pred
     return W_Conditional_Pred_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Conditional_Pred'Result)
       = W_Conditional_Pred
     );

   function New_Binding_Pred
     return W_Binding_Pred_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binding_Pred'Result)
       = W_Binding_Pred
     );

   function New_Universal_Quantif
     return W_Universal_Quantif_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Universal_Quantif'Result)
       = W_Universal_Quantif
     );

   function New_Existential_Quantif
     return W_Existential_Quantif_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Existential_Quantif'Result)
       = W_Existential_Quantif
     );

   function New_Named_Predicate
     return W_Named_Predicate_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Named_Predicate'Result)
       = W_Named_Predicate
     );

   function New_Protected_Predicate
     return W_Protected_Predicate_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Protected_Predicate'Result)
       = W_Protected_Predicate
     );

   function New_Triggers
     return W_Triggers_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Triggers'Result)
       = W_Triggers
     );

   function New_Trigger
     return W_Trigger_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Trigger'Result)
       = W_Trigger
     );

   function New_Rel_Eq
     return W_Rel_Eq_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Rel_Eq'Result)
       = W_Rel_Eq
     );

   function New_Rel_Ne
     return W_Rel_Ne_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Rel_Ne'Result)
       = W_Rel_Ne
     );

   function New_Rel_Lt
     return W_Rel_Lt_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Rel_Lt'Result)
       = W_Rel_Lt
     );

   function New_Rel_Le
     return W_Rel_Le_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Rel_Le'Result)
       = W_Rel_Le
     );

   function New_Rel_Gt
     return W_Rel_Gt_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Rel_Gt'Result)
       = W_Rel_Gt
     );

   function New_Rel_Ge
     return W_Rel_Ge_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Rel_Ge'Result)
       = W_Rel_Ge
     );

   function New_Type
     return W_Type_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Type'Result)
       = W_Type
     );

   function New_Logic
     return W_Logic_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Logic'Result)
       = W_Logic
     );

   function New_Function
     return W_Function_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Function'Result)
       = W_Function
     );

   function New_Predicate_Definition
     return W_Predicate_Definition_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Predicate_Definition'Result)
       = W_Predicate_Definition
     );

   function New_Inductive
     return W_Inductive_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Inductive'Result)
       = W_Inductive
     );

   function New_Axiom
     return W_Axiom_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Axiom'Result)
       = W_Axiom
     );

   function New_Goal
     return W_Goal_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Goal'Result)
       = W_Goal
     );

   function New_External
     return W_External_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_External'Result)
       = W_External
     );

   function New_Logic_Type
     return W_Logic_Type_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Logic_Type'Result)
       = W_Logic_Type
     );

   function New_Logic_Binder
     return W_Logic_Binder_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Logic_Binder'Result)
       = W_Logic_Binder
     );

   function New_Inductive_Case
     return W_Inductive_Case_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Inductive_Case'Result)
       = W_Inductive_Case
     );

   function New_Effects
     return W_Effects_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Effects'Result)
       = W_Effects
     );

   function New_Precondition
     return W_Precondition_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Precondition'Result)
       = W_Precondition
     );

   function New_Postcondition
     return W_Postcondition_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Postcondition'Result)
       = W_Postcondition
     );

   function New_Exn_Condition
     return W_Exn_Condition_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Exn_Condition'Result)
       = W_Exn_Condition
     );

   function New_Assertion
     return W_Assertion_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Assertion'Result)
       = W_Assertion
     );

   function New_Prog_Constant
     return W_Prog_Constant_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Prog_Constant'Result)
       = W_Prog_Constant
     );

   function New_Prog_Identifier
     return W_Prog_Identifier_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Prog_Identifier'Result)
       = W_Prog_Identifier
     );

   function New_Deref
     return W_Deref_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Deref'Result)
       = W_Deref
     );

   function New_Assignment
     return W_Assignment_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Assignment'Result)
       = W_Assignment
     );

   function New_Array_Access
     return W_Array_Access_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Array_Access'Result)
       = W_Array_Access
     );

   function New_Array_Update
     return W_Array_Update_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Array_Update'Result)
       = W_Array_Update
     );

   function New_Infix_Call
     return W_Infix_Call_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Infix_Call'Result)
       = W_Infix_Call
     );

   function New_Prefix_Call
     return W_Prefix_Call_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Prefix_Call'Result)
       = W_Prefix_Call
     );

   function New_Binding_Prog
     return W_Binding_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binding_Prog'Result)
       = W_Binding_Prog
     );

   function New_Binding_Ref
     return W_Binding_Ref_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binding_Ref'Result)
       = W_Binding_Ref
     );

   function New_Conditional_Prog
     return W_Conditional_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Conditional_Prog'Result)
       = W_Conditional_Prog
     );

   function New_While_Loop
     return W_While_Loop_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_While_Loop'Result)
       = W_While_Loop
     );

   function New_Statement_Sequence
     return W_Statement_Sequence_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Statement_Sequence'Result)
       = W_Statement_Sequence
     );

   function New_Label
     return W_Label_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Label'Result)
       = W_Label
     );

   function New_Assert
     return W_Assert_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Assert'Result)
       = W_Assert
     );

   function New_Post_Assertion
     return W_Post_Assertion_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Post_Assertion'Result)
       = W_Post_Assertion
     );

   function New_Opaque_Assertion
     return W_Opaque_Assertion_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Opaque_Assertion'Result)
       = W_Opaque_Assertion
     );

   function New_Fun_Def
     return W_Fun_Def_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Fun_Def'Result)
       = W_Fun_Def
     );

   function New_Binding_Fun
     return W_Binding_Fun_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binding_Fun'Result)
       = W_Binding_Fun
     );

   function New_Binding_Rec
     return W_Binding_Rec_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binding_Rec'Result)
       = W_Binding_Rec
     );

   function New_Prog_Sequence
     return W_Prog_Sequence_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Prog_Sequence'Result)
       = W_Prog_Sequence
     );

   function New_Raise_Statement
     return W_Raise_Statement_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Raise_Statement'Result)
       = W_Raise_Statement
     );

   function New_Raise_Statement_With_Parameters
     return W_Raise_Statement_With_Parameters_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Raise_Statement_With_Parameters'Result)
       = W_Raise_Statement_With_Parameters
     );

   function New_Try_Block
     return W_Try_Block_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Try_Block'Result)
       = W_Try_Block
     );

   function New_Unreachable_Code
     return W_Unreachable_Code_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Unreachable_Code'Result)
       = W_Unreachable_Code
     );

   function New_Begin_Block
     return W_Begin_Block_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Begin_Block'Result)
       = W_Begin_Block
     );

   function New_Protected_Prog
     return W_Protected_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Protected_Prog'Result)
       = W_Protected_Prog
     );

   function New_Op_Add_Prog
     return W_Op_Add_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Add_Prog'Result)
       = W_Op_Add_Prog
     );

   function New_Op_Substract_Prog
     return W_Op_Substract_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Substract_Prog'Result)
       = W_Op_Substract_Prog
     );

   function New_Op_Multiply_Prog
     return W_Op_Multiply_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Multiply_Prog'Result)
       = W_Op_Multiply_Prog
     );

   function New_Op_Divide_Prog
     return W_Op_Divide_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Divide_Prog'Result)
       = W_Op_Divide_Prog
     );

   function New_Op_Mod_Prog
     return W_Op_Mod_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Mod_Prog'Result)
       = W_Op_Mod_Prog
     );

   function New_Op_Eq_Prog
     return W_Op_Eq_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Eq_Prog'Result)
       = W_Op_Eq_Prog
     );

   function New_Op_Ne_Prog
     return W_Op_Ne_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Ne_Prog'Result)
       = W_Op_Ne_Prog
     );

   function New_Op_Lt_Prog
     return W_Op_Lt_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Lt_Prog'Result)
       = W_Op_Lt_Prog
     );

   function New_Op_Le_Prog
     return W_Op_Le_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Le_Prog'Result)
       = W_Op_Le_Prog
     );

   function New_Op_Gt_Prog
     return W_Op_Gt_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Gt_Prog'Result)
       = W_Op_Gt_Prog
     );

   function New_Op_Ge_Prog
     return W_Op_Ge_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Ge_Prog'Result)
       = W_Op_Ge_Prog
     );

   function New_Op_Or_Else_Prog
     return W_Op_Or_Else_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Or_Else_Prog'Result)
       = W_Op_Or_Else_Prog
     );

   function New_Op_And_Then_Prog
     return W_Op_And_Then_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_And_Then_Prog'Result)
       = W_Op_And_Then_Prog
     );

   function New_Op_Minus_Prog
     return W_Op_Minus_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Minus_Prog'Result)
       = W_Op_Minus_Prog
     );

   function New_Op_Not_Prog
     return W_Op_Not_Prog_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Op_Not_Prog'Result)
       = W_Op_Not_Prog
     );

   function New_Binders
     return W_Binders_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binders'Result)
       = W_Binders
     );

   function New_Binder
     return W_Binder_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Binder'Result)
       = W_Binder
     );

   function New_Recfun
     return W_Recfun_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Recfun'Result)
       = W_Recfun
     );

   function New_Loop_Annot
     return W_Loop_Annot_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Loop_Annot'Result)
       = W_Loop_Annot
     );

   function New_Wf_Arg
     return W_Wf_Arg_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Wf_Arg'Result)
       = W_Wf_Arg
     );

   function New_Handler
     return W_Handler_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Handler'Result)
       = W_Handler
     );

   function New_File
     return W_File_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_File'Result)
       = W_File
     );

   function New_Global_Binding
     return W_Global_Binding_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Global_Binding'Result)
       = W_Global_Binding
     );

   function New_Global_Rec_Binding
     return W_Global_Rec_Binding_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Global_Rec_Binding'Result)
       = W_Global_Rec_Binding
     );

   function New_Parameter_Declaration
     return W_Parameter_Declaration_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Parameter_Declaration'Result)
       = W_Parameter_Declaration
     );

   function New_Exception_Declaration
     return W_Exception_Declaration_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Exception_Declaration'Result)
       = W_Exception_Declaration
     );

   function New_Logic_Declaration
     return W_Logic_Declaration_Unchecked_Id;
   pragma Postcondition
     (Get_Kind
       (New_Logic_Declaration'Result)
       = W_Logic_Declaration
     );

end Why.Atree.Builders;
