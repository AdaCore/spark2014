------------------------------------------------------------------------------
--                                                                          --
--                            GNAT2WHY COMPONENTS                           --
--                                                                          --
--                     W H Y - A T R E E - T R E E P R                      --
--                                                                          --
--                                 B o d y                                  --
--                                                                          --
--                       Copyright (C) 2010-2011, AdaCore                   --
--                                                                          --
-- gnat2why is  free  software;  you can redistribute it and/or modify it   --
-- under terms of the  GNU General Public License as published  by the Free --
-- Software Foundation;  either version  2,  or  (at your option) any later --
-- version. gnat2why is distributed in the hope that it will  be  useful,   --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-  --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License  for more details. You  should  have  received a copy of the GNU --
-- General Public License  distributed with GNAT; see file COPYING. If not, --
-- write to the Free Software Foundation,  51 Franklin Street, Fifth Floor, --
-- Boston,                                                                  --
--                                                                          --
-- gnat2why is maintained by AdaCore (http://www.adacore.com)               --
--                                                                          --
------------------------------------------------------------------------------
--  This package is automatically generated by xtree. Do not edit manually.

with Outputs;          use Outputs;
with Why.Atree.Tables; use Why.Atree.Tables;
with Why.Images;       use Why.Images;

package body Why.Atree.Treepr is

   O : constant Output_Id := Stdout;

   ---------
   -- wpn --
   ---------

   procedure wpn (Node : Why_Node_Id) is
   begin
      wpt (Node, 1);
   end wpn;

   ---------
   -- wpt --
   ---------

   procedure wpt (Node : Why_Node_Id; Depth : Nat) is
      TPS : Tree_Printer_State := (Control => Continue, Depth => Depth);
   begin
      Traverse (TPS, Node);
   end wpt;

   -----------------------
   -- Identifier_Pre_Op --
   -----------------------

   procedure Identifier_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Identifier_Valid_Id)
   is
   begin
      P (O, "W_Identifier");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Symbol: ");
         Relative_Indent (O, 1);
         PL (O, Img (Get_Node (Node).Symbol));
         Relative_Indent (O, -1);
         P (O, "Entity: ");
         Relative_Indent (O, 1);
         PL (O, Img (Get_Node (Node).Entity));
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Identifier_Pre_Op;

   ------------------------
   -- Identifier_Post_Op --
   ------------------------

   procedure Identifier_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Identifier_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Identifier_Post_Op;

   ----------------------
   -- Type_Prop_Pre_Op --
   ----------------------

   procedure Type_Prop_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Type_Prop_Valid_Id)
   is
   begin
      P (O, "W_Type_Prop");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Type_Prop_Pre_Op;

   -----------------------
   -- Type_Prop_Post_Op --
   -----------------------

   procedure Type_Prop_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Type_Prop_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Type_Prop_Post_Op;

   ---------------------
   -- Type_Int_Pre_Op --
   ---------------------

   procedure Type_Int_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Type_Int_Valid_Id)
   is
   begin
      P (O, "W_Type_Int");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Type_Int_Pre_Op;

   ----------------------
   -- Type_Int_Post_Op --
   ----------------------

   procedure Type_Int_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Type_Int_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Type_Int_Post_Op;

   ----------------------
   -- Type_Bool_Pre_Op --
   ----------------------

   procedure Type_Bool_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Type_Bool_Valid_Id)
   is
   begin
      P (O, "W_Type_Bool");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Type_Bool_Pre_Op;

   -----------------------
   -- Type_Bool_Post_Op --
   -----------------------

   procedure Type_Bool_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Type_Bool_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Type_Bool_Post_Op;

   ----------------------
   -- Type_Real_Pre_Op --
   ----------------------

   procedure Type_Real_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Type_Real_Valid_Id)
   is
   begin
      P (O, "W_Type_Real");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Type_Real_Pre_Op;

   -----------------------
   -- Type_Real_Post_Op --
   -----------------------

   procedure Type_Real_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Type_Real_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Type_Real_Post_Op;

   ----------------------
   -- Type_Unit_Pre_Op --
   ----------------------

   procedure Type_Unit_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Type_Unit_Valid_Id)
   is
   begin
      P (O, "W_Type_Unit");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Type_Unit_Pre_Op;

   -----------------------
   -- Type_Unit_Post_Op --
   -----------------------

   procedure Type_Unit_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Type_Unit_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Type_Unit_Post_Op;

   --------------------------
   -- Abstract_Type_Pre_Op --
   --------------------------

   procedure Abstract_Type_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Abstract_Type_Valid_Id)
   is
   begin
      P (O, "W_Abstract_Type");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).AT_Name);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Abstract_Type_Pre_Op;

   ---------------------------
   -- Abstract_Type_Post_Op --
   ---------------------------

   procedure Abstract_Type_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Abstract_Type_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Abstract_Type_Post_Op;

   --------------------------------
   -- Generic_Formal_Type_Pre_Op --
   --------------------------------

   procedure Generic_Formal_Type_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Generic_Formal_Type_Valid_Id)
   is
   begin
      P (O, "W_Generic_Formal_Type");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).GFT_Name);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Generic_Formal_Type_Pre_Op;

   ---------------------------------
   -- Generic_Formal_Type_Post_Op --
   ---------------------------------

   procedure Generic_Formal_Type_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Generic_Formal_Type_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Generic_Formal_Type_Post_Op;

   --------------------------------------
   -- Generic_Actual_Type_Chain_Pre_Op --
   --------------------------------------

   procedure Generic_Actual_Type_Chain_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Generic_Actual_Type_Chain_Valid_Id)
   is
   begin
      P (O, "W_Generic_Actual_Type_Chain");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Type_Chain: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).GATC_Type_Chain);
         Relative_Indent (O, -1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).GATC_Name);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Generic_Actual_Type_Chain_Pre_Op;

   ---------------------------------------
   -- Generic_Actual_Type_Chain_Post_Op --
   ---------------------------------------

   procedure Generic_Actual_Type_Chain_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Generic_Actual_Type_Chain_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Generic_Actual_Type_Chain_Post_Op;

   -----------------------
   -- Array_Type_Pre_Op --
   -----------------------

   procedure Array_Type_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Array_Type_Valid_Id)
   is
   begin
      P (O, "W_Array_Type");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Component_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).AT_Component_Type);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Array_Type_Pre_Op;

   ------------------------
   -- Array_Type_Post_Op --
   ------------------------

   procedure Array_Type_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Array_Type_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Array_Type_Post_Op;

   ---------------------
   -- Ref_Type_Pre_Op --
   ---------------------

   procedure Ref_Type_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Ref_Type_Valid_Id)
   is
   begin
      P (O, "W_Ref_Type");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Aliased_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).RT_Aliased_Type);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Ref_Type_Pre_Op;

   ----------------------
   -- Ref_Type_Post_Op --
   ----------------------

   procedure Ref_Type_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Ref_Type_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Ref_Type_Post_Op;

   -----------------------------
   -- Computation_Type_Pre_Op --
   -----------------------------

   procedure Computation_Type_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Computation_Type_Valid_Id)
   is
   begin
      P (O, "W_Computation_Type");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         if not Is_Empty (Get_Node (Node).CS_Binders) then
            P (O, "Binders: ");
            Relative_Indent (O, 1);
            Traverse_List
              (State,
               Get_Node (Node).CS_Binders);
            Relative_Indent (O, -1);
         end if;
         if Get_Node (Node).CS_Precondition /= Why_Empty then
            P (O, "Precondition: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).CS_Precondition);
            Relative_Indent (O, -1);
         end if;
         if Get_Node (Node).CS_Result_Name /= Why_Empty then
            P (O, "Result_Name: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).CS_Result_Name);
            Relative_Indent (O, -1);
         end if;
         P (O, "Return_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).CS_Return_Type);
         Relative_Indent (O, -1);
         P (O, "Effects: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).CS_Effects);
         Relative_Indent (O, -1);
         if Get_Node (Node).CS_Postcondition /= Why_Empty then
            P (O, "Postcondition: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).CS_Postcondition);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Computation_Type_Pre_Op;

   ------------------------------
   -- Computation_Type_Post_Op --
   ------------------------------

   procedure Computation_Type_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Computation_Type_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Computation_Type_Post_Op;

   -----------------------------
   -- Integer_Constant_Pre_Op --
   -----------------------------

   procedure Integer_Constant_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Integer_Constant_Valid_Id)
   is
   begin
      P (O, "W_Integer_Constant");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Value: ");
         Relative_Indent (O, 1);
         PL (O, Img (Get_Node (Node).IC_Value));
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Integer_Constant_Pre_Op;

   ------------------------------
   -- Integer_Constant_Post_Op --
   ------------------------------

   procedure Integer_Constant_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Integer_Constant_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Integer_Constant_Post_Op;

   --------------------------
   -- Real_Constant_Pre_Op --
   --------------------------

   procedure Real_Constant_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Real_Constant_Valid_Id)
   is
   begin
      P (O, "W_Real_Constant");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Value: ");
         Relative_Indent (O, 1);
         PL (O, Img (Get_Node (Node).RC_Value));
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Real_Constant_Pre_Op;

   ---------------------------
   -- Real_Constant_Post_Op --
   ---------------------------

   procedure Real_Constant_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Real_Constant_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Real_Constant_Post_Op;

   -------------------------
   -- True_Literal_Pre_Op --
   -------------------------

   procedure True_Literal_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_True_Literal_Valid_Id)
   is
   begin
      P (O, "W_True_Literal");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end True_Literal_Pre_Op;

   --------------------------
   -- True_Literal_Post_Op --
   --------------------------

   procedure True_Literal_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_True_Literal_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end True_Literal_Post_Op;

   --------------------------
   -- False_Literal_Pre_Op --
   --------------------------

   procedure False_Literal_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_False_Literal_Valid_Id)
   is
   begin
      P (O, "W_False_Literal");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end False_Literal_Pre_Op;

   ---------------------------
   -- False_Literal_Post_Op --
   ---------------------------

   procedure False_Literal_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_False_Literal_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end False_Literal_Post_Op;

   -------------------------
   -- Void_Literal_Pre_Op --
   -------------------------

   procedure Void_Literal_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Void_Literal_Valid_Id)
   is
   begin
      P (O, "W_Void_Literal");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Void_Literal_Pre_Op;

   --------------------------
   -- Void_Literal_Post_Op --
   --------------------------

   procedure Void_Literal_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Void_Literal_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Void_Literal_Post_Op;

   ----------------------------
   -- Arith_Operation_Pre_Op --
   ----------------------------

   procedure Arith_Operation_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Arith_Operation_Valid_Id)
   is
   begin
      P (O, "W_Arith_Operation");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Left: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).AO_Left);
         Relative_Indent (O, -1);
         P (O, "Op: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).AO_Op);
         Relative_Indent (O, -1);
         P (O, "Right: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).AO_Right);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Arith_Operation_Pre_Op;

   -----------------------------
   -- Arith_Operation_Post_Op --
   -----------------------------

   procedure Arith_Operation_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Arith_Operation_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Arith_Operation_Post_Op;

   --------------------------
   -- Negative_Term_Pre_Op --
   --------------------------

   procedure Negative_Term_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Negative_Term_Valid_Id)
   is
   begin
      P (O, "W_Negative_Term");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Operand: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).NT_Operand);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Negative_Term_Pre_Op;

   ---------------------------
   -- Negative_Term_Post_Op --
   ---------------------------

   procedure Negative_Term_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Negative_Term_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Negative_Term_Post_Op;

   ----------------------------
   -- Term_Identifier_Pre_Op --
   ----------------------------

   procedure Term_Identifier_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Term_Identifier_Valid_Id)
   is
   begin
      P (O, "W_Term_Identifier");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).TIL_Name);
         Relative_Indent (O, -1);
         if Get_Node (Node).TIL_Label /= Why_Empty then
            P (O, "Label: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).TIL_Label);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Term_Identifier_Pre_Op;

   -----------------------------
   -- Term_Identifier_Post_Op --
   -----------------------------

   procedure Term_Identifier_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Term_Identifier_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Term_Identifier_Post_Op;

   ----------------------
   -- Operation_Pre_Op --
   ----------------------

   procedure Operation_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Operation_Valid_Id)
   is
   begin
      P (O, "W_Operation");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).O_Name);
         Relative_Indent (O, -1);
         P (O, "Parameters: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).O_Parameters);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Operation_Pre_Op;

   -----------------------
   -- Operation_Post_Op --
   -----------------------

   procedure Operation_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Operation_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Operation_Post_Op;

   -----------------------
   -- Named_Term_Pre_Op --
   -----------------------

   procedure Named_Term_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Named_Term_Valid_Id)
   is
   begin
      P (O, "W_Named_Term");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).NT_Name);
         Relative_Indent (O, -1);
         P (O, "Term: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).NT_Term);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Named_Term_Pre_Op;

   ------------------------
   -- Named_Term_Post_Op --
   ------------------------

   procedure Named_Term_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Named_Term_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Named_Term_Post_Op;

   -----------------------------
   -- Conditional_Term_Pre_Op --
   -----------------------------

   procedure Conditional_Term_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Conditional_Term_Valid_Id)
   is
   begin
      P (O, "W_Conditional_Term");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Condition: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).CT_Condition);
         Relative_Indent (O, -1);
         P (O, "Then_Part: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).CT_Then_Part);
         Relative_Indent (O, -1);
         P (O, "Else_Part: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).CT_Else_Part);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Conditional_Term_Pre_Op;

   ------------------------------
   -- Conditional_Term_Post_Op --
   ------------------------------

   procedure Conditional_Term_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Conditional_Term_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Conditional_Term_Post_Op;

   --------------------------
   -- Matching_Term_Pre_Op --
   --------------------------

   procedure Matching_Term_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Matching_Term_Valid_Id)
   is
   begin
      P (O, "W_Matching_Term");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Term: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).MT_Term);
         Relative_Indent (O, -1);
         P (O, "Branches: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).MT_Branches);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Matching_Term_Pre_Op;

   ---------------------------
   -- Matching_Term_Post_Op --
   ---------------------------

   procedure Matching_Term_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Matching_Term_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Matching_Term_Post_Op;

   -------------------------
   -- Binding_Term_Pre_Op --
   -------------------------

   procedure Binding_Term_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Binding_Term_Valid_Id)
   is
   begin
      P (O, "W_Binding_Term");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BT_Name);
         Relative_Indent (O, -1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BT_Def);
         Relative_Indent (O, -1);
         P (O, "Context: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BT_Context);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Binding_Term_Pre_Op;

   --------------------------
   -- Binding_Term_Post_Op --
   --------------------------

   procedure Binding_Term_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Binding_Term_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Binding_Term_Post_Op;

   ---------------------------
   -- Protected_Term_Pre_Op --
   ---------------------------

   procedure Protected_Term_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Protected_Term_Valid_Id)
   is
   begin
      P (O, "W_Protected_Term");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Term: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BT_Term);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Protected_Term_Pre_Op;

   ----------------------------
   -- Protected_Term_Post_Op --
   ----------------------------

   procedure Protected_Term_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Protected_Term_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Protected_Term_Post_Op;

   -------------------
   -- Op_Add_Pre_Op --
   -------------------

   procedure Op_Add_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Add_Valid_Id)
   is
   begin
      P (O, "W_Op_Add");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Add_Pre_Op;

   --------------------
   -- Op_Add_Post_Op --
   --------------------

   procedure Op_Add_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Add_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Add_Post_Op;

   -------------------------
   -- Op_Substract_Pre_Op --
   -------------------------

   procedure Op_Substract_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Substract_Valid_Id)
   is
   begin
      P (O, "W_Op_Substract");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Substract_Pre_Op;

   --------------------------
   -- Op_Substract_Post_Op --
   --------------------------

   procedure Op_Substract_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Substract_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Substract_Post_Op;

   ------------------------
   -- Op_Multiply_Pre_Op --
   ------------------------

   procedure Op_Multiply_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Multiply_Valid_Id)
   is
   begin
      P (O, "W_Op_Multiply");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Multiply_Pre_Op;

   -------------------------
   -- Op_Multiply_Post_Op --
   -------------------------

   procedure Op_Multiply_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Multiply_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Multiply_Post_Op;

   ----------------------
   -- Op_Divide_Pre_Op --
   ----------------------

   procedure Op_Divide_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Divide_Valid_Id)
   is
   begin
      P (O, "W_Op_Divide");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Divide_Pre_Op;

   -----------------------
   -- Op_Divide_Post_Op --
   -----------------------

   procedure Op_Divide_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Divide_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Divide_Post_Op;

   ----------------------
   -- Op_Modulo_Pre_Op --
   ----------------------

   procedure Op_Modulo_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Modulo_Valid_Id)
   is
   begin
      P (O, "W_Op_Modulo");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Modulo_Pre_Op;

   -----------------------
   -- Op_Modulo_Post_Op --
   -----------------------

   procedure Op_Modulo_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Modulo_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Modulo_Post_Op;

   ------------------------------
   -- True_Literal_Pred_Pre_Op --
   ------------------------------

   procedure True_Literal_Pred_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_True_Literal_Pred_Valid_Id)
   is
   begin
      P (O, "W_True_Literal_Pred");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end True_Literal_Pred_Pre_Op;

   -------------------------------
   -- True_Literal_Pred_Post_Op --
   -------------------------------

   procedure True_Literal_Pred_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_True_Literal_Pred_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end True_Literal_Pred_Post_Op;

   -------------------------------
   -- False_Literal_Pred_Pre_Op --
   -------------------------------

   procedure False_Literal_Pred_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_False_Literal_Pred_Valid_Id)
   is
   begin
      P (O, "W_False_Literal_Pred");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end False_Literal_Pred_Pre_Op;

   --------------------------------
   -- False_Literal_Pred_Post_Op --
   --------------------------------

   procedure False_Literal_Pred_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_False_Literal_Pred_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end False_Literal_Pred_Post_Op;

   ---------------------------------
   -- Predicate_Identifier_Pre_Op --
   ---------------------------------

   procedure Predicate_Identifier_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Predicate_Identifier_Valid_Id)
   is
   begin
      P (O, "W_Predicate_Identifier");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PID_Name);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Predicate_Identifier_Pre_Op;

   ----------------------------------
   -- Predicate_Identifier_Post_Op --
   ----------------------------------

   procedure Predicate_Identifier_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Predicate_Identifier_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Predicate_Identifier_Post_Op;

   -------------------------------
   -- Predicate_Instance_Pre_Op --
   -------------------------------

   procedure Predicate_Instance_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Predicate_Instance_Valid_Id)
   is
   begin
      P (O, "W_Predicate_Instance");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PIN_Name);
         Relative_Indent (O, -1);
         P (O, "Parameters: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).PIN_Parameters);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Predicate_Instance_Pre_Op;

   --------------------------------
   -- Predicate_Instance_Post_Op --
   --------------------------------

   procedure Predicate_Instance_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Predicate_Instance_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Predicate_Instance_Post_Op;

   --------------------------
   -- Related_Terms_Pre_Op --
   --------------------------

   procedure Related_Terms_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Related_Terms_Valid_Id)
   is
   begin
      P (O, "W_Related_Terms");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Left: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).RT_Left);
         Relative_Indent (O, -1);
         P (O, "Op: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).RT_Op);
         Relative_Indent (O, -1);
         P (O, "Right: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).RT_Right);
         Relative_Indent (O, -1);
         if Get_Node (Node).RT_Op2 /= Why_Empty then
            P (O, "Op2: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).RT_Op2);
            Relative_Indent (O, -1);
         end if;
         if Get_Node (Node).RT_Right2 /= Why_Empty then
            P (O, "Right2: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).RT_Right2);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Related_Terms_Pre_Op;

   ---------------------------
   -- Related_Terms_Post_Op --
   ---------------------------

   procedure Related_Terms_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Related_Terms_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Related_Terms_Post_Op;

   ------------------------
   -- Implication_Pre_Op --
   ------------------------

   procedure Implication_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Implication_Valid_Id)
   is
   begin
      P (O, "W_Implication");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Left: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).ITOC_Left);
         Relative_Indent (O, -1);
         P (O, "Right: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).ITOC_Right);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Implication_Pre_Op;

   -------------------------
   -- Implication_Post_Op --
   -------------------------

   procedure Implication_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Implication_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Implication_Post_Op;

   ------------------------
   -- Equivalence_Pre_Op --
   ------------------------

   procedure Equivalence_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Equivalence_Valid_Id)
   is
   begin
      P (O, "W_Equivalence");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Left: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).ITOC_Left);
         Relative_Indent (O, -1);
         P (O, "Right: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).ITOC_Right);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Equivalence_Pre_Op;

   -------------------------
   -- Equivalence_Post_Op --
   -------------------------

   procedure Equivalence_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Equivalence_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Equivalence_Post_Op;

   ------------------------
   -- Disjunction_Pre_Op --
   ------------------------

   procedure Disjunction_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Disjunction_Valid_Id)
   is
   begin
      P (O, "W_Disjunction");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Left: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).ITOC_Left);
         Relative_Indent (O, -1);
         P (O, "Right: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).ITOC_Right);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Disjunction_Pre_Op;

   -------------------------
   -- Disjunction_Post_Op --
   -------------------------

   procedure Disjunction_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Disjunction_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Disjunction_Post_Op;

   ------------------------
   -- Conjunction_Pre_Op --
   ------------------------

   procedure Conjunction_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Conjunction_Valid_Id)
   is
   begin
      P (O, "W_Conjunction");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Left: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).ITOC_Left);
         Relative_Indent (O, -1);
         P (O, "Right: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).ITOC_Right);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Conjunction_Pre_Op;

   -------------------------
   -- Conjunction_Post_Op --
   -------------------------

   procedure Conjunction_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Conjunction_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Conjunction_Post_Op;

   ---------------------
   -- Negation_Pre_Op --
   ---------------------

   procedure Negation_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Negation_Valid_Id)
   is
   begin
      P (O, "W_Negation");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Operand: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).N_Operand);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Negation_Pre_Op;

   ----------------------
   -- Negation_Post_Op --
   ----------------------

   procedure Negation_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Negation_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Negation_Post_Op;

   -----------------------------
   -- Conditional_Pred_Pre_Op --
   -----------------------------

   procedure Conditional_Pred_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Conditional_Pred_Valid_Id)
   is
   begin
      P (O, "W_Conditional_Pred");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Condition: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).CPD_Condition);
         Relative_Indent (O, -1);
         P (O, "Then_Part: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).CPD_Then_Part);
         Relative_Indent (O, -1);
         P (O, "Else_Part: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).CPD_Else_Part);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Conditional_Pred_Pre_Op;

   ------------------------------
   -- Conditional_Pred_Post_Op --
   ------------------------------

   procedure Conditional_Pred_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Conditional_Pred_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Conditional_Pred_Post_Op;

   -------------------------
   -- Binding_Pred_Pre_Op --
   -------------------------

   procedure Binding_Pred_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Binding_Pred_Valid_Id)
   is
   begin
      P (O, "W_Binding_Pred");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BPD_Name);
         Relative_Indent (O, -1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BPD_Def);
         Relative_Indent (O, -1);
         P (O, "Context: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BPD_Context);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Binding_Pred_Pre_Op;

   --------------------------
   -- Binding_Pred_Post_Op --
   --------------------------

   procedure Binding_Pred_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Binding_Pred_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Binding_Pred_Post_Op;

   ------------------------------
   -- Universal_Quantif_Pre_Op --
   ------------------------------

   procedure Universal_Quantif_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Universal_Quantif_Valid_Id)
   is
   begin
      P (O, "W_Universal_Quantif");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Variables: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).UQ_Variables);
         Relative_Indent (O, -1);
         P (O, "Var_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).UQ_Var_Type);
         Relative_Indent (O, -1);
         if Get_Node (Node).UQ_Triggers /= Why_Empty then
            P (O, "Triggers: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).UQ_Triggers);
            Relative_Indent (O, -1);
         end if;
         P (O, "Pred: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).UQ_Pred);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Universal_Quantif_Pre_Op;

   -------------------------------
   -- Universal_Quantif_Post_Op --
   -------------------------------

   procedure Universal_Quantif_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Universal_Quantif_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Universal_Quantif_Post_Op;

   --------------------------------
   -- Existential_Quantif_Pre_Op --
   --------------------------------

   procedure Existential_Quantif_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Existential_Quantif_Valid_Id)
   is
   begin
      P (O, "W_Existential_Quantif");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Variables: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).EQ_Variables);
         Relative_Indent (O, -1);
         P (O, "Var_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).EQ_Var_Type);
         Relative_Indent (O, -1);
         P (O, "Pred: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).EQ_Pred);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Existential_Quantif_Pre_Op;

   ---------------------------------
   -- Existential_Quantif_Post_Op --
   ---------------------------------

   procedure Existential_Quantif_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Existential_Quantif_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Existential_Quantif_Post_Op;

   ----------------------------
   -- Named_Predicate_Pre_Op --
   ----------------------------

   procedure Named_Predicate_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Named_Predicate_Valid_Id)
   is
   begin
      P (O, "W_Named_Predicate");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).NP_Name);
         Relative_Indent (O, -1);
         P (O, "Pred: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).NP_Pred);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Named_Predicate_Pre_Op;

   -----------------------------
   -- Named_Predicate_Post_Op --
   -----------------------------

   procedure Named_Predicate_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Named_Predicate_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Named_Predicate_Post_Op;

   --------------------------------
   -- Protected_Predicate_Pre_Op --
   --------------------------------

   procedure Protected_Predicate_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Protected_Predicate_Valid_Id)
   is
   begin
      P (O, "W_Protected_Predicate");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Pred: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PP_Pred);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Protected_Predicate_Pre_Op;

   ---------------------------------
   -- Protected_Predicate_Post_Op --
   ---------------------------------

   procedure Protected_Predicate_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Protected_Predicate_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Protected_Predicate_Post_Op;

   --------------------
   -- Pattern_Pre_Op --
   --------------------

   procedure Pattern_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Pattern_Valid_Id)
   is
   begin
      P (O, "W_Pattern");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Constr: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PAT_Constr);
         Relative_Indent (O, -1);
         if not Is_Empty (Get_Node (Node).PAT_Args) then
            P (O, "Args: ");
            Relative_Indent (O, 1);
            Traverse_List
              (State,
               Get_Node (Node).PAT_Args);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Pattern_Pre_Op;

   ---------------------
   -- Pattern_Post_Op --
   ---------------------

   procedure Pattern_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Pattern_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Pattern_Post_Op;

   -----------------------
   -- Match_Case_Pre_Op --
   -----------------------

   procedure Match_Case_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Match_Case_Valid_Id)
   is
   begin
      P (O, "W_Match_Case");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Pattern: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).MC_Pattern);
         Relative_Indent (O, -1);
         P (O, "Term: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).MC_Term);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Match_Case_Pre_Op;

   ------------------------
   -- Match_Case_Post_Op --
   ------------------------

   procedure Match_Case_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Match_Case_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Match_Case_Post_Op;

   ---------------------
   -- Triggers_Pre_Op --
   ---------------------

   procedure Triggers_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Triggers_Valid_Id)
   is
   begin
      P (O, "W_Triggers");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Triggers: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).TRS_Triggers);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Triggers_Pre_Op;

   ----------------------
   -- Triggers_Post_Op --
   ----------------------

   procedure Triggers_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Triggers_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Triggers_Post_Op;

   --------------------
   -- Trigger_Pre_Op --
   --------------------

   procedure Trigger_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Trigger_Valid_Id)
   is
   begin
      P (O, "W_Trigger");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Terms: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).TRI_Terms);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Trigger_Pre_Op;

   ---------------------
   -- Trigger_Post_Op --
   ---------------------

   procedure Trigger_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Trigger_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Trigger_Post_Op;

   -------------------
   -- Rel_Eq_Pre_Op --
   -------------------

   procedure Rel_Eq_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Rel_Eq_Valid_Id)
   is
   begin
      P (O, "W_Rel_Eq");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Rel_Eq_Pre_Op;

   --------------------
   -- Rel_Eq_Post_Op --
   --------------------

   procedure Rel_Eq_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Rel_Eq_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Rel_Eq_Post_Op;

   -------------------
   -- Rel_Ne_Pre_Op --
   -------------------

   procedure Rel_Ne_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Rel_Ne_Valid_Id)
   is
   begin
      P (O, "W_Rel_Ne");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Rel_Ne_Pre_Op;

   --------------------
   -- Rel_Ne_Post_Op --
   --------------------

   procedure Rel_Ne_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Rel_Ne_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Rel_Ne_Post_Op;

   -------------------
   -- Rel_Lt_Pre_Op --
   -------------------

   procedure Rel_Lt_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Rel_Lt_Valid_Id)
   is
   begin
      P (O, "W_Rel_Lt");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Rel_Lt_Pre_Op;

   --------------------
   -- Rel_Lt_Post_Op --
   --------------------

   procedure Rel_Lt_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Rel_Lt_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Rel_Lt_Post_Op;

   -------------------
   -- Rel_Le_Pre_Op --
   -------------------

   procedure Rel_Le_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Rel_Le_Valid_Id)
   is
   begin
      P (O, "W_Rel_Le");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Rel_Le_Pre_Op;

   --------------------
   -- Rel_Le_Post_Op --
   --------------------

   procedure Rel_Le_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Rel_Le_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Rel_Le_Post_Op;

   -------------------
   -- Rel_Gt_Pre_Op --
   -------------------

   procedure Rel_Gt_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Rel_Gt_Valid_Id)
   is
   begin
      P (O, "W_Rel_Gt");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Rel_Gt_Pre_Op;

   --------------------
   -- Rel_Gt_Post_Op --
   --------------------

   procedure Rel_Gt_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Rel_Gt_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Rel_Gt_Post_Op;

   -------------------
   -- Rel_Ge_Pre_Op --
   -------------------

   procedure Rel_Ge_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Rel_Ge_Valid_Id)
   is
   begin
      P (O, "W_Rel_Ge");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Rel_Ge_Pre_Op;

   --------------------
   -- Rel_Ge_Post_Op --
   --------------------

   procedure Rel_Ge_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Rel_Ge_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Rel_Ge_Post_Op;

   -----------------
   -- Type_Pre_Op --
   -----------------

   procedure Type_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Type_Valid_Id)
   is
   begin
      P (O, "W_Type");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         if Get_Node (Node).T_External /= Why_Empty then
            P (O, "External: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).T_External);
            Relative_Indent (O, -1);
         end if;
         if not Is_Empty (Get_Node (Node).T_Type_Parameters) then
            P (O, "Type_Parameters: ");
            Relative_Indent (O, 1);
            Traverse_List
              (State,
               Get_Node (Node).T_Type_Parameters);
            Relative_Indent (O, -1);
         end if;
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).T_Name);
         Relative_Indent (O, -1);
         if Get_Node (Node).T_Definition /= Why_Empty then
            P (O, "Definition: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).T_Definition);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Type_Pre_Op;

   ------------------
   -- Type_Post_Op --
   ------------------

   procedure Type_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Type_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Type_Post_Op;

   ------------------
   -- Logic_Pre_Op --
   ------------------

   procedure Logic_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Logic_Valid_Id)
   is
   begin
      P (O, "W_Logic");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         if Get_Node (Node).L_External /= Why_Empty then
            P (O, "External: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).L_External);
            Relative_Indent (O, -1);
         end if;
         P (O, "Names: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).L_Names);
         Relative_Indent (O, -1);
         P (O, "Logic_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).L_Logic_Type);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Logic_Pre_Op;

   -------------------
   -- Logic_Post_Op --
   -------------------

   procedure Logic_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Logic_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Logic_Post_Op;

   ---------------------
   -- Function_Pre_Op --
   ---------------------

   procedure Function_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Function_Valid_Id)
   is
   begin
      P (O, "W_Function");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).F_Name);
         Relative_Indent (O, -1);
         P (O, "Binders: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).F_Binders);
         Relative_Indent (O, -1);
         P (O, "Return_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).F_Return_Type);
         Relative_Indent (O, -1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).F_Def);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Function_Pre_Op;

   ----------------------
   -- Function_Post_Op --
   ----------------------

   procedure Function_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Function_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Function_Post_Op;

   ---------------------------------
   -- Predicate_Definition_Pre_Op --
   ---------------------------------

   procedure Predicate_Definition_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Predicate_Definition_Valid_Id)
   is
   begin
      P (O, "W_Predicate_Definition");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).P_Name);
         Relative_Indent (O, -1);
         P (O, "Binders: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).P_Binders);
         Relative_Indent (O, -1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).P_Def);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Predicate_Definition_Pre_Op;

   ----------------------------------
   -- Predicate_Definition_Post_Op --
   ----------------------------------

   procedure Predicate_Definition_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Predicate_Definition_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Predicate_Definition_Post_Op;

   ----------------------
   -- Inductive_Pre_Op --
   ----------------------

   procedure Inductive_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Inductive_Valid_Id)
   is
   begin
      P (O, "W_Inductive");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).I_Name);
         Relative_Indent (O, -1);
         P (O, "Logic_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).I_Logic_Type);
         Relative_Indent (O, -1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).I_Def);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Inductive_Pre_Op;

   -----------------------
   -- Inductive_Post_Op --
   -----------------------

   procedure Inductive_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Inductive_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Inductive_Post_Op;

   ------------------
   -- Axiom_Pre_Op --
   ------------------

   procedure Axiom_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Axiom_Valid_Id)
   is
   begin
      P (O, "W_Axiom");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).AX_Name);
         Relative_Indent (O, -1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).AX_Def);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Axiom_Pre_Op;

   -------------------
   -- Axiom_Post_Op --
   -------------------

   procedure Axiom_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Axiom_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Axiom_Post_Op;

   -----------------
   -- Goal_Pre_Op --
   -----------------

   procedure Goal_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Goal_Valid_Id)
   is
   begin
      P (O, "W_Goal");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).G_Name);
         Relative_Indent (O, -1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).G_Def);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Goal_Pre_Op;

   ------------------
   -- Goal_Post_Op --
   ------------------

   procedure Goal_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Goal_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Goal_Post_Op;

   ---------------------
   -- External_Pre_Op --
   ---------------------

   procedure External_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_External_Valid_Id)
   is
   begin
      P (O, "W_External");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end External_Pre_Op;

   ----------------------
   -- External_Post_Op --
   ----------------------

   procedure External_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_External_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end External_Post_Op;

   -----------------------
   -- Logic_Type_Pre_Op --
   -----------------------

   procedure Logic_Type_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Logic_Type_Valid_Id)
   is
   begin
      P (O, "W_Logic_Type");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         if not Is_Empty (Get_Node (Node).LT_Arg_Types) then
            P (O, "Arg_Types: ");
            Relative_Indent (O, 1);
            Traverse_List
              (State,
               Get_Node (Node).LT_Arg_Types);
            Relative_Indent (O, -1);
         end if;
         P (O, "Return_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).LT_Return_Type);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Logic_Type_Pre_Op;

   ------------------------
   -- Logic_Type_Post_Op --
   ------------------------

   procedure Logic_Type_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Logic_Type_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Logic_Type_Post_Op;

   -------------------------
   -- Logic_Binder_Pre_Op --
   -------------------------

   procedure Logic_Binder_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Logic_Binder_Valid_Id)
   is
   begin
      P (O, "W_Logic_Binder");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).LB_Name);
         Relative_Indent (O, -1);
         P (O, "Param_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).LB_Param_Type);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Logic_Binder_Pre_Op;

   --------------------------
   -- Logic_Binder_Post_Op --
   --------------------------

   procedure Logic_Binder_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Logic_Binder_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Logic_Binder_Post_Op;

   ---------------------------
   -- Inductive_Case_Pre_Op --
   ---------------------------

   procedure Inductive_Case_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Inductive_Case_Valid_Id)
   is
   begin
      P (O, "W_Inductive_Case");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).IC_Name);
         Relative_Indent (O, -1);
         P (O, "Pred: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).IC_Pred);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Inductive_Case_Pre_Op;

   ----------------------------
   -- Inductive_Case_Post_Op --
   ----------------------------

   procedure Inductive_Case_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Inductive_Case_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Inductive_Case_Post_Op;

   ----------------------------------------
   -- Transparent_Type_Definition_Pre_Op --
   ----------------------------------------

   procedure Transparent_Type_Definition_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Transparent_Type_Definition_Valid_Id)
   is
   begin
      P (O, "W_Transparent_Type_Definition");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Type_Definition: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).Tr_Type_Definition);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Transparent_Type_Definition_Pre_Op;

   -----------------------------------------
   -- Transparent_Type_Definition_Post_Op --
   -----------------------------------------

   procedure Transparent_Type_Definition_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Transparent_Type_Definition_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Transparent_Type_Definition_Post_Op;

   ---------------------------
   -- Adt_Definition_Pre_Op --
   ---------------------------

   procedure Adt_Definition_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Adt_Definition_Valid_Id)
   is
   begin
      P (O, "W_Adt_Definition");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Constructors: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).Adt_Constructors);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Adt_Definition_Pre_Op;

   ----------------------------
   -- Adt_Definition_Post_Op --
   ----------------------------

   procedure Adt_Definition_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Adt_Definition_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Adt_Definition_Post_Op;

   ------------------------
   -- Constr_Decl_Pre_Op --
   ------------------------

   procedure Constr_Decl_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Constr_Decl_Valid_Id)
   is
   begin
      P (O, "W_Constr_Decl");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).C_Name);
         Relative_Indent (O, -1);
         if not Is_Empty (Get_Node (Node).C_Arg_List) then
            P (O, "Arg_List: ");
            Relative_Indent (O, 1);
            Traverse_List
              (State,
               Get_Node (Node).C_Arg_List);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Constr_Decl_Pre_Op;

   -------------------------
   -- Constr_Decl_Post_Op --
   -------------------------

   procedure Constr_Decl_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Constr_Decl_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Constr_Decl_Post_Op;

   --------------------
   -- Effects_Pre_Op --
   --------------------

   procedure Effects_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Effects_Valid_Id)
   is
   begin
      P (O, "W_Effects");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         if not Is_Empty (Get_Node (Node).E_Reads) then
            P (O, "Reads: ");
            Relative_Indent (O, 1);
            Traverse_List
              (State,
               Get_Node (Node).E_Reads);
            Relative_Indent (O, -1);
         end if;
         if not Is_Empty (Get_Node (Node).E_Writes) then
            P (O, "Writes: ");
            Relative_Indent (O, 1);
            Traverse_List
              (State,
               Get_Node (Node).E_Writes);
            Relative_Indent (O, -1);
         end if;
         if not Is_Empty (Get_Node (Node).E_Raises) then
            P (O, "Raises: ");
            Relative_Indent (O, 1);
            Traverse_List
              (State,
               Get_Node (Node).E_Raises);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Effects_Pre_Op;

   ---------------------
   -- Effects_Post_Op --
   ---------------------

   procedure Effects_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Effects_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Effects_Post_Op;

   -------------------------
   -- Precondition_Pre_Op --
   -------------------------

   procedure Precondition_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Precondition_Valid_Id)
   is
   begin
      P (O, "W_Precondition");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Pred: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PRE_Pred);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Precondition_Pre_Op;

   --------------------------
   -- Precondition_Post_Op --
   --------------------------

   procedure Precondition_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Precondition_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Precondition_Post_Op;

   --------------------------
   -- Postcondition_Pre_Op --
   --------------------------

   procedure Postcondition_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Postcondition_Valid_Id)
   is
   begin
      P (O, "W_Postcondition");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Pred: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).POST_Pred);
         Relative_Indent (O, -1);
         if not Is_Empty (Get_Node (Node).POST_Handlers) then
            P (O, "Handlers: ");
            Relative_Indent (O, 1);
            Traverse_List
              (State,
               Get_Node (Node).POST_Handlers);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Postcondition_Pre_Op;

   ---------------------------
   -- Postcondition_Post_Op --
   ---------------------------

   procedure Postcondition_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Postcondition_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Postcondition_Post_Op;

   --------------------------
   -- Exn_Condition_Pre_Op --
   --------------------------

   procedure Exn_Condition_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Exn_Condition_Valid_Id)
   is
   begin
      P (O, "W_Exn_Condition");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Exn_Case: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).EC_Exn_Case);
         Relative_Indent (O, -1);
         P (O, "Pred: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).EC_Pred);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Exn_Condition_Pre_Op;

   ---------------------------
   -- Exn_Condition_Post_Op --
   ---------------------------

   procedure Exn_Condition_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Exn_Condition_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Exn_Condition_Post_Op;

   --------------------------
   -- Prog_Constant_Pre_Op --
   --------------------------

   procedure Prog_Constant_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Prog_Constant_Valid_Id)
   is
   begin
      P (O, "W_Prog_Constant");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PC_Def);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Prog_Constant_Pre_Op;

   ---------------------------
   -- Prog_Constant_Post_Op --
   ---------------------------

   procedure Prog_Constant_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Prog_Constant_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Prog_Constant_Post_Op;

   ----------------------------
   -- Prog_Identifier_Pre_Op --
   ----------------------------

   procedure Prog_Identifier_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Prog_Identifier_Valid_Id)
   is
   begin
      P (O, "W_Prog_Identifier");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PI_Def);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Prog_Identifier_Pre_Op;

   -----------------------------
   -- Prog_Identifier_Post_Op --
   -----------------------------

   procedure Prog_Identifier_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Prog_Identifier_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Prog_Identifier_Post_Op;

   ---------------------
   -- Any_Expr_Pre_Op --
   ---------------------

   procedure Any_Expr_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Any_Expr_Valid_Id)
   is
   begin
      P (O, "W_Any_Expr");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Any_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).AE_Any_Type);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Any_Expr_Pre_Op;

   ----------------------
   -- Any_Expr_Post_Op --
   ----------------------

   procedure Any_Expr_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Any_Expr_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Any_Expr_Post_Op;

   ------------------
   -- Deref_Pre_Op --
   ------------------

   procedure Deref_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Deref_Valid_Id)
   is
   begin
      P (O, "W_Deref");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Ref: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).D_Ref);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Deref_Pre_Op;

   -------------------
   -- Deref_Post_Op --
   -------------------

   procedure Deref_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Deref_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Deref_Post_Op;

   -----------------------
   -- Assignment_Pre_Op --
   -----------------------

   procedure Assignment_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Assignment_Valid_Id)
   is
   begin
      P (O, "W_Assignment");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).A_Name);
         Relative_Indent (O, -1);
         P (O, "Value: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).A_Value);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Assignment_Pre_Op;

   ------------------------
   -- Assignment_Post_Op --
   ------------------------

   procedure Assignment_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Assignment_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Assignment_Post_Op;

   -------------------------
   -- Array_Access_Pre_Op --
   -------------------------

   procedure Array_Access_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Array_Access_Valid_Id)
   is
   begin
      P (O, "W_Array_Access");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).AA_Name);
         Relative_Indent (O, -1);
         P (O, "Index: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).AA_Index);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Array_Access_Pre_Op;

   --------------------------
   -- Array_Access_Post_Op --
   --------------------------

   procedure Array_Access_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Array_Access_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Array_Access_Post_Op;

   -------------------------
   -- Array_Update_Pre_Op --
   -------------------------

   procedure Array_Update_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Array_Update_Valid_Id)
   is
   begin
      P (O, "W_Array_Update");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).AU_Name);
         Relative_Indent (O, -1);
         P (O, "Index: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).AU_Index);
         Relative_Indent (O, -1);
         P (O, "Value: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).AU_Value);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Array_Update_Pre_Op;

   --------------------------
   -- Array_Update_Post_Op --
   --------------------------

   procedure Array_Update_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Array_Update_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Array_Update_Post_Op;

   -----------------------
   -- Infix_Call_Pre_Op --
   -----------------------

   procedure Infix_Call_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Infix_Call_Valid_Id)
   is
   begin
      P (O, "W_Infix_Call");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Left: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).IC_Left);
         Relative_Indent (O, -1);
         P (O, "Infix: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).IC_Infix);
         Relative_Indent (O, -1);
         P (O, "Right: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).IC_Right);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Infix_Call_Pre_Op;

   ------------------------
   -- Infix_Call_Post_Op --
   ------------------------

   procedure Infix_Call_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Infix_Call_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Infix_Call_Post_Op;

   ------------------------
   -- Prefix_Call_Pre_Op --
   ------------------------

   procedure Prefix_Call_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Prefix_Call_Valid_Id)
   is
   begin
      P (O, "W_Prefix_Call");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Prefix: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PC_Prefix);
         Relative_Indent (O, -1);
         P (O, "Operand: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PC_Operand);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Prefix_Call_Pre_Op;

   -------------------------
   -- Prefix_Call_Post_Op --
   -------------------------

   procedure Prefix_Call_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Prefix_Call_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Prefix_Call_Post_Op;

   -------------------------
   -- Binding_Prog_Pre_Op --
   -------------------------

   procedure Binding_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Binding_Prog_Valid_Id)
   is
   begin
      P (O, "W_Binding_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BPG_Name);
         Relative_Indent (O, -1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BPG_Def);
         Relative_Indent (O, -1);
         P (O, "Context: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BPG_Context);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Binding_Prog_Pre_Op;

   --------------------------
   -- Binding_Prog_Post_Op --
   --------------------------

   procedure Binding_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Binding_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Binding_Prog_Post_Op;

   ------------------------
   -- Binding_Ref_Pre_Op --
   ------------------------

   procedure Binding_Ref_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Binding_Ref_Valid_Id)
   is
   begin
      P (O, "W_Binding_Ref");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BPG_Name);
         Relative_Indent (O, -1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BPG_Def);
         Relative_Indent (O, -1);
         P (O, "Context: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BPG_Context);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Binding_Ref_Pre_Op;

   -------------------------
   -- Binding_Ref_Post_Op --
   -------------------------

   procedure Binding_Ref_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Binding_Ref_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Binding_Ref_Post_Op;

   -----------------------------
   -- Conditional_Prog_Pre_Op --
   -----------------------------

   procedure Conditional_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Conditional_Prog_Valid_Id)
   is
   begin
      P (O, "W_Conditional_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Condition: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).CPG_Condition);
         Relative_Indent (O, -1);
         P (O, "Then_Part: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).CPG_Then_Part);
         Relative_Indent (O, -1);
         if Get_Node (Node).CPG_Else_Part /= Why_Empty then
            P (O, "Else_Part: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).CPG_Else_Part);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Conditional_Prog_Pre_Op;

   ------------------------------
   -- Conditional_Prog_Post_Op --
   ------------------------------

   procedure Conditional_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Conditional_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Conditional_Prog_Post_Op;

   -----------------------
   -- While_Loop_Pre_Op --
   -----------------------

   procedure While_Loop_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_While_Loop_Valid_Id)
   is
   begin
      P (O, "W_While_Loop");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Condition: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).WL_Condition);
         Relative_Indent (O, -1);
         P (O, "Annotation: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).WL_Annotation);
         Relative_Indent (O, -1);
         P (O, "Loop_Content: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).WL_Loop_Content);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end While_Loop_Pre_Op;

   ------------------------
   -- While_Loop_Post_Op --
   ------------------------

   procedure While_Loop_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_While_Loop_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end While_Loop_Post_Op;

   -------------------------------
   -- Statement_Sequence_Pre_Op --
   -------------------------------

   procedure Statement_Sequence_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Statement_Sequence_Valid_Id)
   is
   begin
      P (O, "W_Statement_Sequence");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Statements: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).SS_Statements);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Statement_Sequence_Pre_Op;

   --------------------------------
   -- Statement_Sequence_Post_Op --
   --------------------------------

   procedure Statement_Sequence_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Statement_Sequence_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Statement_Sequence_Post_Op;

   ------------------
   -- Label_Pre_Op --
   ------------------

   procedure Label_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Label_Valid_Id)
   is
   begin
      P (O, "W_Label");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).L_Name);
         Relative_Indent (O, -1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).L_Def);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Label_Pre_Op;

   -------------------
   -- Label_Post_Op --
   -------------------

   procedure Label_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Label_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Label_Post_Op;

   -------------------
   -- Assert_Pre_Op --
   -------------------

   procedure Assert_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Assert_Valid_Id)
   is
   begin
      P (O, "W_Assert");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Preds: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).AS_Preds);
         Relative_Indent (O, -1);
         P (O, "Prog: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).AS_Prog);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Assert_Pre_Op;

   --------------------
   -- Assert_Post_Op --
   --------------------

   procedure Assert_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Assert_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Assert_Post_Op;

   ---------------------------
   -- Post_Assertion_Pre_Op --
   ---------------------------

   procedure Post_Assertion_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Post_Assertion_Valid_Id)
   is
   begin
      P (O, "W_Post_Assertion");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Prog: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PA_Prog);
         Relative_Indent (O, -1);
         P (O, "Post: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PA_Post);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Post_Assertion_Pre_Op;

   ----------------------------
   -- Post_Assertion_Post_Op --
   ----------------------------

   procedure Post_Assertion_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Post_Assertion_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Post_Assertion_Post_Op;

   -----------------------------
   -- Opaque_Assertion_Pre_Op --
   -----------------------------

   procedure Opaque_Assertion_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Opaque_Assertion_Valid_Id)
   is
   begin
      P (O, "W_Opaque_Assertion");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Prog: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PA_Prog);
         Relative_Indent (O, -1);
         P (O, "Post: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PA_Post);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Opaque_Assertion_Pre_Op;

   ------------------------------
   -- Opaque_Assertion_Post_Op --
   ------------------------------

   procedure Opaque_Assertion_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Opaque_Assertion_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Opaque_Assertion_Post_Op;

   --------------------
   -- Fun_Def_Pre_Op --
   --------------------

   procedure Fun_Def_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Fun_Def_Valid_Id)
   is
   begin
      P (O, "W_Fun_Def");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Binders: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).FD_Binders);
         Relative_Indent (O, -1);
         P (O, "Pre: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).FD_Pre);
         Relative_Indent (O, -1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).FD_Def);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Fun_Def_Pre_Op;

   ---------------------
   -- Fun_Def_Post_Op --
   ---------------------

   procedure Fun_Def_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Fun_Def_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Fun_Def_Post_Op;

   ------------------------
   -- Binding_Fun_Pre_Op --
   ------------------------

   procedure Binding_Fun_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Binding_Fun_Valid_Id)
   is
   begin
      P (O, "W_Binding_Fun");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BF_Name);
         Relative_Indent (O, -1);
         P (O, "Binders: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).BF_Binders);
         Relative_Indent (O, -1);
         P (O, "Pre: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BF_Pre);
         Relative_Indent (O, -1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BF_Def);
         Relative_Indent (O, -1);
         P (O, "Context: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BF_Context);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Binding_Fun_Pre_Op;

   -------------------------
   -- Binding_Fun_Post_Op --
   -------------------------

   procedure Binding_Fun_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Binding_Fun_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Binding_Fun_Post_Op;

   ------------------------
   -- Binding_Rec_Pre_Op --
   ------------------------

   procedure Binding_Rec_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Binding_Rec_Valid_Id)
   is
   begin
      P (O, "W_Binding_Rec");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Recfun: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BR_Recfun);
         Relative_Indent (O, -1);
         P (O, "Context: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BR_Context);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Binding_Rec_Pre_Op;

   -------------------------
   -- Binding_Rec_Post_Op --
   -------------------------

   procedure Binding_Rec_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Binding_Rec_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Binding_Rec_Post_Op;

   ----------------------
   -- Prog_Call_Pre_Op --
   ----------------------

   procedure Prog_Call_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Prog_Call_Valid_Id)
   is
   begin
      P (O, "W_Prog_Call");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PS_Name);
         Relative_Indent (O, -1);
         P (O, "Progs: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).PS_Progs);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Prog_Call_Pre_Op;

   -----------------------
   -- Prog_Call_Post_Op --
   -----------------------

   procedure Prog_Call_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Prog_Call_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Prog_Call_Post_Op;

   ----------------------------
   -- Raise_Statement_Pre_Op --
   ----------------------------

   procedure Raise_Statement_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Raise_Statement_Valid_Id)
   is
   begin
      P (O, "W_Raise_Statement");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).RS_Name);
         Relative_Indent (O, -1);
         if Get_Node (Node).RS_Exn_Type /= Why_Empty then
            P (O, "Exn_Type: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).RS_Exn_Type);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Raise_Statement_Pre_Op;

   -----------------------------
   -- Raise_Statement_Post_Op --
   -----------------------------

   procedure Raise_Statement_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Raise_Statement_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Raise_Statement_Post_Op;

   --------------------------------------------
   -- Raise_Statement_With_Parameters_Pre_Op --
   --------------------------------------------

   procedure Raise_Statement_With_Parameters_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Raise_Statement_With_Parameters_Valid_Id)
   is
   begin
      P (O, "W_Raise_Statement_With_Parameters");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).RSWP_Name);
         Relative_Indent (O, -1);
         P (O, "Parameter: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).RSWP_Parameter);
         Relative_Indent (O, -1);
         if Get_Node (Node).RSWP_Exn_Type /= Why_Empty then
            P (O, "Exn_Type: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).RSWP_Exn_Type);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Raise_Statement_With_Parameters_Pre_Op;

   ---------------------------------------------
   -- Raise_Statement_With_Parameters_Post_Op --
   ---------------------------------------------

   procedure Raise_Statement_With_Parameters_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Raise_Statement_With_Parameters_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Raise_Statement_With_Parameters_Post_Op;

   ----------------------
   -- Try_Block_Pre_Op --
   ----------------------

   procedure Try_Block_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Try_Block_Valid_Id)
   is
   begin
      P (O, "W_Try_Block");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Prog: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).TB_Prog);
         Relative_Indent (O, -1);
         P (O, "Handler: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).TB_Handler);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Try_Block_Pre_Op;

   -----------------------
   -- Try_Block_Post_Op --
   -----------------------

   procedure Try_Block_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Try_Block_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Try_Block_Post_Op;

   -----------------------------
   -- Unreachable_Code_Pre_Op --
   -----------------------------

   procedure Unreachable_Code_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Unreachable_Code_Valid_Id)
   is
   begin
      P (O, "W_Unreachable_Code");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         if Get_Node (Node).UC_Exn_Type /= Why_Empty then
            P (O, "Exn_Type: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).UC_Exn_Type);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Unreachable_Code_Pre_Op;

   ------------------------------
   -- Unreachable_Code_Post_Op --
   ------------------------------

   procedure Unreachable_Code_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Unreachable_Code_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Unreachable_Code_Post_Op;

   ------------------------
   -- Begin_Block_Pre_Op --
   ------------------------

   procedure Begin_Block_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Begin_Block_Valid_Id)
   is
   begin
      P (O, "W_Begin_Block");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Prog: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BB_Prog);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Begin_Block_Pre_Op;

   -------------------------
   -- Begin_Block_Post_Op --
   -------------------------

   procedure Begin_Block_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Begin_Block_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Begin_Block_Post_Op;

   ---------------------------
   -- Protected_Prog_Pre_Op --
   ---------------------------

   procedure Protected_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Protected_Prog_Valid_Id)
   is
   begin
      P (O, "W_Protected_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Prog: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).BB_Prog);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Protected_Prog_Pre_Op;

   ----------------------------
   -- Protected_Prog_Post_Op --
   ----------------------------

   procedure Protected_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Protected_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Protected_Prog_Post_Op;

   ------------------------
   -- Op_Add_Prog_Pre_Op --
   ------------------------

   procedure Op_Add_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Add_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_Add_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Add_Prog_Pre_Op;

   -------------------------
   -- Op_Add_Prog_Post_Op --
   -------------------------

   procedure Op_Add_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Add_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Add_Prog_Post_Op;

   ------------------------------
   -- Op_Substract_Prog_Pre_Op --
   ------------------------------

   procedure Op_Substract_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Substract_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_Substract_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Substract_Prog_Pre_Op;

   -------------------------------
   -- Op_Substract_Prog_Post_Op --
   -------------------------------

   procedure Op_Substract_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Substract_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Substract_Prog_Post_Op;

   -----------------------------
   -- Op_Multiply_Prog_Pre_Op --
   -----------------------------

   procedure Op_Multiply_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Multiply_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_Multiply_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Multiply_Prog_Pre_Op;

   ------------------------------
   -- Op_Multiply_Prog_Post_Op --
   ------------------------------

   procedure Op_Multiply_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Multiply_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Multiply_Prog_Post_Op;

   ---------------------------
   -- Op_Divide_Prog_Pre_Op --
   ---------------------------

   procedure Op_Divide_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Divide_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_Divide_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Divide_Prog_Pre_Op;

   ----------------------------
   -- Op_Divide_Prog_Post_Op --
   ----------------------------

   procedure Op_Divide_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Divide_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Divide_Prog_Post_Op;

   ------------------------
   -- Op_Mod_Prog_Pre_Op --
   ------------------------

   procedure Op_Mod_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Mod_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_Mod_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Mod_Prog_Pre_Op;

   -------------------------
   -- Op_Mod_Prog_Post_Op --
   -------------------------

   procedure Op_Mod_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Mod_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Mod_Prog_Post_Op;

   -----------------------
   -- Op_Eq_Prog_Pre_Op --
   -----------------------

   procedure Op_Eq_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Eq_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_Eq_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Eq_Prog_Pre_Op;

   ------------------------
   -- Op_Eq_Prog_Post_Op --
   ------------------------

   procedure Op_Eq_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Eq_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Eq_Prog_Post_Op;

   -----------------------
   -- Op_Ne_Prog_Pre_Op --
   -----------------------

   procedure Op_Ne_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Ne_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_Ne_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Ne_Prog_Pre_Op;

   ------------------------
   -- Op_Ne_Prog_Post_Op --
   ------------------------

   procedure Op_Ne_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Ne_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Ne_Prog_Post_Op;

   -----------------------
   -- Op_Lt_Prog_Pre_Op --
   -----------------------

   procedure Op_Lt_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Lt_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_Lt_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Lt_Prog_Pre_Op;

   ------------------------
   -- Op_Lt_Prog_Post_Op --
   ------------------------

   procedure Op_Lt_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Lt_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Lt_Prog_Post_Op;

   -----------------------
   -- Op_Le_Prog_Pre_Op --
   -----------------------

   procedure Op_Le_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Le_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_Le_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Le_Prog_Pre_Op;

   ------------------------
   -- Op_Le_Prog_Post_Op --
   ------------------------

   procedure Op_Le_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Le_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Le_Prog_Post_Op;

   -----------------------
   -- Op_Gt_Prog_Pre_Op --
   -----------------------

   procedure Op_Gt_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Gt_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_Gt_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Gt_Prog_Pre_Op;

   ------------------------
   -- Op_Gt_Prog_Post_Op --
   ------------------------

   procedure Op_Gt_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Gt_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Gt_Prog_Post_Op;

   -----------------------
   -- Op_Ge_Prog_Pre_Op --
   -----------------------

   procedure Op_Ge_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Ge_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_Ge_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Ge_Prog_Pre_Op;

   ------------------------
   -- Op_Ge_Prog_Post_Op --
   ------------------------

   procedure Op_Ge_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Ge_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Ge_Prog_Post_Op;

   ----------------------------
   -- Op_Or_Else_Prog_Pre_Op --
   ----------------------------

   procedure Op_Or_Else_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Or_Else_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_Or_Else_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Or_Else_Prog_Pre_Op;

   -----------------------------
   -- Op_Or_Else_Prog_Post_Op --
   -----------------------------

   procedure Op_Or_Else_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Or_Else_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Or_Else_Prog_Post_Op;

   -----------------------------
   -- Op_And_Then_Prog_Pre_Op --
   -----------------------------

   procedure Op_And_Then_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_And_Then_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_And_Then_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_And_Then_Prog_Pre_Op;

   ------------------------------
   -- Op_And_Then_Prog_Post_Op --
   ------------------------------

   procedure Op_And_Then_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_And_Then_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_And_Then_Prog_Post_Op;

   --------------------------
   -- Op_Minus_Prog_Pre_Op --
   --------------------------

   procedure Op_Minus_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Minus_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_Minus_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Minus_Prog_Pre_Op;

   ---------------------------
   -- Op_Minus_Prog_Post_Op --
   ---------------------------

   procedure Op_Minus_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Minus_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Minus_Prog_Post_Op;

   ------------------------
   -- Op_Not_Prog_Pre_Op --
   ------------------------

   procedure Op_Not_Prog_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Not_Prog_Valid_Id)
   is
   begin
      P (O, "W_Op_Not_Prog");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Op_Not_Prog_Pre_Op;

   -------------------------
   -- Op_Not_Prog_Post_Op --
   -------------------------

   procedure Op_Not_Prog_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Op_Not_Prog_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Op_Not_Prog_Post_Op;

   -------------------
   -- Binder_Pre_Op --
   -------------------

   procedure Binder_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Binder_Valid_Id)
   is
   begin
      P (O, "W_Binder");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Names: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).B_Names);
         Relative_Indent (O, -1);
         P (O, "Arg_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).B_Arg_Type);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Binder_Pre_Op;

   --------------------
   -- Binder_Post_Op --
   --------------------

   procedure Binder_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Binder_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Binder_Post_Op;

   -------------------
   -- Recfun_Pre_Op --
   -------------------

   procedure Recfun_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Recfun_Valid_Id)
   is
   begin
      P (O, "W_Recfun");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).RF_Name);
         Relative_Indent (O, -1);
         P (O, "Binders: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).RF_Binders);
         Relative_Indent (O, -1);
         P (O, "Return_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).RF_Return_Type);
         Relative_Indent (O, -1);
         P (O, "Variant: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).RF_Variant);
         Relative_Indent (O, -1);
         P (O, "Pre: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).RF_Pre);
         Relative_Indent (O, -1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).RF_Def);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Recfun_Pre_Op;

   --------------------
   -- Recfun_Post_Op --
   --------------------

   procedure Recfun_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Recfun_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Recfun_Post_Op;

   -----------------------
   -- Loop_Annot_Pre_Op --
   -----------------------

   procedure Loop_Annot_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Loop_Annot_Valid_Id)
   is
   begin
      P (O, "W_Loop_Annot");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         if Get_Node (Node).LA_Invariant /= Why_Empty then
            P (O, "Invariant: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).LA_Invariant);
            Relative_Indent (O, -1);
         end if;
         if Get_Node (Node).LA_Variant /= Why_Empty then
            P (O, "Variant: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).LA_Variant);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Loop_Annot_Pre_Op;

   ------------------------
   -- Loop_Annot_Post_Op --
   ------------------------

   procedure Loop_Annot_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Loop_Annot_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Loop_Annot_Post_Op;

   -------------------
   -- Wf_Arg_Pre_Op --
   -------------------

   procedure Wf_Arg_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Wf_Arg_Valid_Id)
   is
   begin
      P (O, "W_Wf_Arg");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).WA_Def);
         Relative_Indent (O, -1);
         if Get_Node (Node).WA_For_Id /= Why_Empty then
            P (O, "For_Id: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).WA_For_Id);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Wf_Arg_Pre_Op;

   --------------------
   -- Wf_Arg_Post_Op --
   --------------------

   procedure Wf_Arg_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Wf_Arg_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Wf_Arg_Post_Op;

   --------------------
   -- Handler_Pre_Op --
   --------------------

   procedure Handler_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Handler_Valid_Id)
   is
   begin
      P (O, "W_Handler");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).H_Name);
         Relative_Indent (O, -1);
         if Get_Node (Node).H_Parameter /= Why_Empty then
            P (O, "Parameter: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).H_Parameter);
            Relative_Indent (O, -1);
         end if;
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).H_Def);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Handler_Pre_Op;

   ---------------------
   -- Handler_Post_Op --
   ---------------------

   procedure Handler_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Handler_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Handler_Post_Op;

   -----------------
   -- File_Pre_Op --
   -----------------

   procedure File_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_File_Valid_Id)
   is
   begin
      P (O, "W_File");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         if not Is_Empty (Get_Node (Node).F_Declarations) then
            P (O, "Declarations: ");
            Relative_Indent (O, 1);
            Traverse_List
              (State,
               Get_Node (Node).F_Declarations);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end File_Pre_Op;

   ------------------
   -- File_Post_Op --
   ------------------

   procedure File_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_File_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end File_Post_Op;

   ---------------------------
   -- Global_Binding_Pre_Op --
   ---------------------------

   procedure Global_Binding_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Global_Binding_Valid_Id)
   is
   begin
      P (O, "W_Global_Binding");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).GB_Name);
         Relative_Indent (O, -1);
         if not Is_Empty (Get_Node (Node).GB_Binders) then
            P (O, "Binders: ");
            Relative_Indent (O, 1);
            Traverse_List
              (State,
               Get_Node (Node).GB_Binders);
            Relative_Indent (O, -1);
         end if;
         P (O, "Pre: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).GB_Pre);
         Relative_Indent (O, -1);
         P (O, "Def: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).GB_Def);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Global_Binding_Pre_Op;

   ----------------------------
   -- Global_Binding_Post_Op --
   ----------------------------

   procedure Global_Binding_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Global_Binding_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Global_Binding_Post_Op;

   -------------------------------
   -- Global_Rec_Binding_Pre_Op --
   -------------------------------

   procedure Global_Rec_Binding_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Global_Rec_Binding_Valid_Id)
   is
   begin
      P (O, "W_Global_Rec_Binding");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).GRB_Name);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Global_Rec_Binding_Pre_Op;

   --------------------------------
   -- Global_Rec_Binding_Post_Op --
   --------------------------------

   procedure Global_Rec_Binding_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Global_Rec_Binding_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Global_Rec_Binding_Post_Op;

   ----------------------------------
   -- Parameter_Declaration_Pre_Op --
   ----------------------------------

   procedure Parameter_Declaration_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Parameter_Declaration_Valid_Id)
   is
   begin
      P (O, "W_Parameter_Declaration");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         if Get_Node (Node).PD_External /= Why_Empty then
            P (O, "External: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).PD_External);
            Relative_Indent (O, -1);
         end if;
         P (O, "Names: ");
         Relative_Indent (O, 1);
         Traverse_List
           (State,
            Get_Node (Node).PD_Names);
         Relative_Indent (O, -1);
         P (O, "Parameter_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).PD_Parameter_Type);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Parameter_Declaration_Pre_Op;

   -----------------------------------
   -- Parameter_Declaration_Post_Op --
   -----------------------------------

   procedure Parameter_Declaration_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Parameter_Declaration_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Parameter_Declaration_Post_Op;

   -----------------------------------
   -- Global_Ref_Declaration_Pre_Op --
   -----------------------------------

   procedure Global_Ref_Declaration_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Global_Ref_Declaration_Valid_Id)
   is
   begin
      P (O, "W_Global_Ref_Declaration");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).GR_Name);
         Relative_Indent (O, -1);
         P (O, "Parameter_Type: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).GR_Parameter_Type);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Global_Ref_Declaration_Pre_Op;

   ------------------------------------
   -- Global_Ref_Declaration_Post_Op --
   ------------------------------------

   procedure Global_Ref_Declaration_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Global_Ref_Declaration_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Global_Ref_Declaration_Post_Op;

   ----------------------------------
   -- Exception_Declaration_Pre_Op --
   ----------------------------------

   procedure Exception_Declaration_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Exception_Declaration_Valid_Id)
   is
   begin
      P (O, "W_Exception_Declaration");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).ED_Name);
         Relative_Indent (O, -1);
         if Get_Node (Node).ED_Parameter /= Why_Empty then
            P (O, "Parameter: ");
            Relative_Indent (O, 1);
            Traverse
              (State,
               Get_Node (Node).ED_Parameter);
            Relative_Indent (O, -1);
         end if;
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Exception_Declaration_Pre_Op;

   -----------------------------------
   -- Exception_Declaration_Post_Op --
   -----------------------------------

   procedure Exception_Declaration_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Exception_Declaration_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Exception_Declaration_Post_Op;

   ------------------------------
   -- Logic_Declaration_Pre_Op --
   ------------------------------

   procedure Logic_Declaration_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Logic_Declaration_Valid_Id)
   is
   begin
      P (O, "W_Logic_Declaration");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Decl: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).LD_Decl);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Logic_Declaration_Pre_Op;

   -------------------------------
   -- Logic_Declaration_Post_Op --
   -------------------------------

   procedure Logic_Declaration_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Logic_Declaration_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Logic_Declaration_Post_Op;

   --------------------------------
   -- Include_Declaration_Pre_Op --
   --------------------------------

   procedure Include_Declaration_Pre_Op
     (State : in out Tree_Printer_State;
      Node  : W_Include_Declaration_Valid_Id)
   is
   begin
      P (O, "W_Include_Declaration");
      P (O, " (Node_Id=" & Img (Why_Node_Id (Node)) & ")");
      NL (O);
      if State.Depth /= 0 then
         State.Depth := State.Depth - 1;
         Relative_Indent (O, 1);
         P (O, "Name: ");
         Relative_Indent (O, 1);
         Traverse
           (State,
            Get_Node (Node).ID_Name);
         Relative_Indent (O, -1);
         Relative_Indent (O, -1);
         State.Depth := State.Depth + 1;
      end if;
      State.Control := Abandon_Children;
   end Include_Declaration_Pre_Op;

   ---------------------------------
   -- Include_Declaration_Post_Op --
   ---------------------------------

   procedure Include_Declaration_Post_Op
     (State : in out Tree_Printer_State;
      Node  : W_Include_Declaration_Valid_Id)
   is
      pragma Unreferenced (Node);
      pragma Unreferenced (State);
   begin
      null;
   end Include_Declaration_Post_Op;

end Why.Atree.Treepr;
