------------------------------------------------------------------------------
--                                                                          --
--                            GNAT2WHY COMPONENTS                           --
--                                                                          --
--                  W H Y - A T R E E - T R A V E R S A L                   --
--                                                                          --
--                                 B o d y                                  --
--                                                                          --
--                       Copyright (C) 2010-2011, AdaCore                   --
--                                                                          --
-- gnat2why is  free  software;  you can redistribute it and/or modify it   --
-- under terms of the  GNU General Public License as published  by the Free --
-- Software Foundation;  either version  2,  or  (at your option) any later --
-- version. gnat2why is distributed in the hope that it will  be  useful,   --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-  --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License  for more details. You  should  have  received a copy of the GNU --
-- General Public License  distributed with GNAT; see file COPYING. If not, --
-- write to the Free Software Foundation,  51 Franklin Street, Fifth Floor, --
-- Boston,                                                                  --
--                                                                          --
-- gnat2why is maintained by AdaCore (http://www.adacore.com)               --
--                                                                          --
------------------------------------------------------------------------------
--  This package is automatically generated by xtree. Do not edit manually.

with Why.Sinfo;           use Why.Sinfo;
with Why.Atree.Tables;    use Why.Atree.Tables;

package body Why.Atree.Traversal is

   --------------
   -- Traverse --
   --------------

   procedure Traverse
     (State : in out Traversal_State'Class;
      Node  : Why_Node_Id) is
   begin
      if State.Control = Terminate_Immediately then
         return;
      end if;

      if State.Control = Abandon_Siblings then
         return;
      end if;

      if Node = Why_Empty then
         return;
      end if;

      case Get_Kind (Node) is
         when W_Identifier =>
            Identifier_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Identifier_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Type_Prop =>
            Type_Prop_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Type_Prop_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Type_Int =>
            Type_Int_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Type_Int_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Type_Bool =>
            Type_Bool_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Type_Bool_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Type_Real =>
            Type_Real_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Type_Real_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Type_Unit =>
            Type_Unit_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Type_Unit_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Abstract_Type =>
            Abstract_Type_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).AT_Name);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Abstract_Type_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Generic_Formal_Type =>
            Generic_Formal_Type_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).GFT_Name);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Generic_Formal_Type_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Generic_Actual_Type_Chain =>
            Generic_Actual_Type_Chain_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse_List
              (State,
               Get_Node  (Node).GATC_Type_Chain);
            Traverse
              (State,
               Get_Node  (Node).GATC_Name);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Generic_Actual_Type_Chain_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Array_Type =>
            Array_Type_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).AT_Component_Type);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Array_Type_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Ref_Type =>
            Ref_Type_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).RT_Aliased_Type);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Ref_Type_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Computation_Type =>
            Computation_Type_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse_List
              (State,
               Get_Node  (Node).CS_Binders);
            Traverse
              (State,
               Get_Node  (Node).CS_Precondition);
            Traverse
              (State,
               Get_Node  (Node).CS_Result_Name);
            Traverse
              (State,
               Get_Node  (Node).CS_Return_Type);
            Traverse
              (State,
               Get_Node  (Node).CS_Effects);
            Traverse
              (State,
               Get_Node  (Node).CS_Postcondition);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Computation_Type_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Integer_Constant =>
            Integer_Constant_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Integer_Constant_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Real_Constant =>
            Real_Constant_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Real_Constant_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_True_Literal =>
            True_Literal_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            True_Literal_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_False_Literal =>
            False_Literal_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            False_Literal_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Void_Literal =>
            Void_Literal_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Void_Literal_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Arith_Operation =>
            Arith_Operation_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).AO_Left);
            Traverse
              (State,
               Get_Node  (Node).AO_Op);
            Traverse
              (State,
               Get_Node  (Node).AO_Right);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Arith_Operation_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Negative_Term =>
            Negative_Term_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).NT_Operand);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Negative_Term_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Term_Identifier =>
            Term_Identifier_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).TIL_Name);
            Traverse
              (State,
               Get_Node  (Node).TIL_Label);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Term_Identifier_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Operation =>
            Operation_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).O_Name);
            Traverse_List
              (State,
               Get_Node  (Node).O_Parameters);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Operation_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Named_Term =>
            Named_Term_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).NT_Name);
            Traverse
              (State,
               Get_Node  (Node).NT_Term);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Named_Term_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Conditional_Term =>
            Conditional_Term_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).CT_Condition);
            Traverse
              (State,
               Get_Node  (Node).CT_Then_Part);
            Traverse
              (State,
               Get_Node  (Node).CT_Else_Part);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Conditional_Term_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Matching_Term =>
            Matching_Term_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).MT_Term);
            Traverse_List
              (State,
               Get_Node  (Node).MT_Branches);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Matching_Term_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Binding_Term =>
            Binding_Term_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).BT_Name);
            Traverse
              (State,
               Get_Node  (Node).BT_Def);
            Traverse
              (State,
               Get_Node  (Node).BT_Context);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Binding_Term_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Protected_Term =>
            Protected_Term_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).BT_Term);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Protected_Term_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Add =>
            Op_Add_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Add_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Substract =>
            Op_Substract_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Substract_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Multiply =>
            Op_Multiply_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Multiply_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Divide =>
            Op_Divide_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Divide_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Modulo =>
            Op_Modulo_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Modulo_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_True_Literal_Pred =>
            True_Literal_Pred_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            True_Literal_Pred_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_False_Literal_Pred =>
            False_Literal_Pred_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            False_Literal_Pred_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Predicate_Identifier =>
            Predicate_Identifier_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).PID_Name);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Predicate_Identifier_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Predicate_Instance =>
            Predicate_Instance_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).PIN_Name);
            Traverse_List
              (State,
               Get_Node  (Node).PIN_Parameters);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Predicate_Instance_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Related_Terms =>
            Related_Terms_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).RT_Left);
            Traverse
              (State,
               Get_Node  (Node).RT_Op);
            Traverse
              (State,
               Get_Node  (Node).RT_Right);
            Traverse
              (State,
               Get_Node  (Node).RT_Op2);
            Traverse
              (State,
               Get_Node  (Node).RT_Right2);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Related_Terms_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Implication =>
            Implication_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).ITOC_Left);
            Traverse
              (State,
               Get_Node  (Node).ITOC_Right);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Implication_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Equivalence =>
            Equivalence_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).ITOC_Left);
            Traverse
              (State,
               Get_Node  (Node).ITOC_Right);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Equivalence_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Disjunction =>
            Disjunction_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).ITOC_Left);
            Traverse
              (State,
               Get_Node  (Node).ITOC_Right);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Disjunction_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Conjunction =>
            Conjunction_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).ITOC_Left);
            Traverse
              (State,
               Get_Node  (Node).ITOC_Right);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Conjunction_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Negation =>
            Negation_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).N_Operand);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Negation_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Conditional_Pred =>
            Conditional_Pred_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).CPD_Condition);
            Traverse
              (State,
               Get_Node  (Node).CPD_Then_Part);
            Traverse
              (State,
               Get_Node  (Node).CPD_Else_Part);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Conditional_Pred_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Binding_Pred =>
            Binding_Pred_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).BPD_Name);
            Traverse
              (State,
               Get_Node  (Node).BPD_Def);
            Traverse
              (State,
               Get_Node  (Node).BPD_Context);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Binding_Pred_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Universal_Quantif =>
            Universal_Quantif_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse_List
              (State,
               Get_Node  (Node).UQ_Variables);
            Traverse
              (State,
               Get_Node  (Node).UQ_Var_Type);
            Traverse
              (State,
               Get_Node  (Node).UQ_Triggers);
            Traverse
              (State,
               Get_Node  (Node).UQ_Pred);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Universal_Quantif_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Existential_Quantif =>
            Existential_Quantif_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse_List
              (State,
               Get_Node  (Node).EQ_Variables);
            Traverse
              (State,
               Get_Node  (Node).EQ_Var_Type);
            Traverse
              (State,
               Get_Node  (Node).EQ_Pred);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Existential_Quantif_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Named_Predicate =>
            Named_Predicate_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).NP_Name);
            Traverse
              (State,
               Get_Node  (Node).NP_Pred);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Named_Predicate_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Protected_Predicate =>
            Protected_Predicate_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).PP_Pred);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Protected_Predicate_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Pattern =>
            Pattern_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).PAT_Constr);
            Traverse_List
              (State,
               Get_Node  (Node).PAT_Args);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Pattern_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Match_Case =>
            Match_Case_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).MC_Pattern);
            Traverse
              (State,
               Get_Node  (Node).MC_Term);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Match_Case_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Triggers =>
            Triggers_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse_List
              (State,
               Get_Node  (Node).TRS_Triggers);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Triggers_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Trigger =>
            Trigger_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse_List
              (State,
               Get_Node  (Node).TRI_Terms);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Trigger_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Rel_Eq =>
            Rel_Eq_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Rel_Eq_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Rel_Ne =>
            Rel_Ne_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Rel_Ne_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Rel_Lt =>
            Rel_Lt_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Rel_Lt_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Rel_Le =>
            Rel_Le_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Rel_Le_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Rel_Gt =>
            Rel_Gt_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Rel_Gt_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Rel_Ge =>
            Rel_Ge_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Rel_Ge_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Type =>
            Type_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).T_External);
            Traverse_List
              (State,
               Get_Node  (Node).T_Type_Parameters);
            Traverse
              (State,
               Get_Node  (Node).T_Name);
            Traverse
              (State,
               Get_Node  (Node).T_Definition);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Type_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Logic =>
            Logic_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).L_External);
            Traverse_List
              (State,
               Get_Node  (Node).L_Names);
            Traverse
              (State,
               Get_Node  (Node).L_Logic_Type);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Logic_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Function =>
            Function_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).F_Name);
            Traverse_List
              (State,
               Get_Node  (Node).F_Binders);
            Traverse
              (State,
               Get_Node  (Node).F_Return_Type);
            Traverse
              (State,
               Get_Node  (Node).F_Def);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Function_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Predicate_Definition =>
            Predicate_Definition_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).P_Name);
            Traverse_List
              (State,
               Get_Node  (Node).P_Binders);
            Traverse
              (State,
               Get_Node  (Node).P_Def);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Predicate_Definition_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Inductive =>
            Inductive_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).I_Name);
            Traverse
              (State,
               Get_Node  (Node).I_Logic_Type);
            Traverse_List
              (State,
               Get_Node  (Node).I_Def);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Inductive_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Axiom =>
            Axiom_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).AX_Name);
            Traverse
              (State,
               Get_Node  (Node).AX_Def);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Axiom_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Goal =>
            Goal_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).G_Name);
            Traverse
              (State,
               Get_Node  (Node).G_Def);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Goal_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_External =>
            External_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            External_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Logic_Type =>
            Logic_Type_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse_List
              (State,
               Get_Node  (Node).LT_Arg_Types);
            Traverse
              (State,
               Get_Node  (Node).LT_Return_Type);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Logic_Type_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Logic_Binder =>
            Logic_Binder_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).LB_Name);
            Traverse
              (State,
               Get_Node  (Node).LB_Param_Type);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Logic_Binder_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Inductive_Case =>
            Inductive_Case_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).IC_Name);
            Traverse
              (State,
               Get_Node  (Node).IC_Pred);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Inductive_Case_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Transparent_Type_Definition =>
            Transparent_Type_Definition_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).Tr_Type_Definition);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Transparent_Type_Definition_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Adt_Definition =>
            Adt_Definition_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse_List
              (State,
               Get_Node  (Node).Adt_Constructors);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Adt_Definition_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Constr_Decl =>
            Constr_Decl_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).C_Name);
            Traverse_List
              (State,
               Get_Node  (Node).C_Arg_List);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Constr_Decl_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Effects =>
            Effects_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse_List
              (State,
               Get_Node  (Node).E_Reads);
            Traverse_List
              (State,
               Get_Node  (Node).E_Writes);
            Traverse_List
              (State,
               Get_Node  (Node).E_Raises);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Effects_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Precondition =>
            Precondition_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).PRE_Pred);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Precondition_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Postcondition =>
            Postcondition_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).POST_Pred);
            Traverse_List
              (State,
               Get_Node  (Node).POST_Handlers);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Postcondition_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Exn_Condition =>
            Exn_Condition_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).EC_Exn_Case);
            Traverse
              (State,
               Get_Node  (Node).EC_Pred);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Exn_Condition_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Prog_Constant =>
            Prog_Constant_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).PC_Def);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Prog_Constant_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Prog_Identifier =>
            Prog_Identifier_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).PI_Def);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Prog_Identifier_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Any_Expr =>
            Any_Expr_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).AE_Any_Type);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Any_Expr_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Deref =>
            Deref_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).D_Ref);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Deref_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Assignment =>
            Assignment_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).A_Name);
            Traverse
              (State,
               Get_Node  (Node).A_Value);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Assignment_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Array_Access =>
            Array_Access_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).AA_Name);
            Traverse
              (State,
               Get_Node  (Node).AA_Index);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Array_Access_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Array_Update =>
            Array_Update_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).AU_Name);
            Traverse
              (State,
               Get_Node  (Node).AU_Index);
            Traverse
              (State,
               Get_Node  (Node).AU_Value);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Array_Update_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Infix_Call =>
            Infix_Call_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).IC_Left);
            Traverse
              (State,
               Get_Node  (Node).IC_Infix);
            Traverse
              (State,
               Get_Node  (Node).IC_Right);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Infix_Call_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Prefix_Call =>
            Prefix_Call_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).PC_Prefix);
            Traverse
              (State,
               Get_Node  (Node).PC_Operand);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Prefix_Call_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Binding_Prog =>
            Binding_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).BPG_Name);
            Traverse
              (State,
               Get_Node  (Node).BPG_Def);
            Traverse
              (State,
               Get_Node  (Node).BPG_Context);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Binding_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Binding_Ref =>
            Binding_Ref_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).BPG_Name);
            Traverse
              (State,
               Get_Node  (Node).BPG_Def);
            Traverse
              (State,
               Get_Node  (Node).BPG_Context);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Binding_Ref_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Conditional_Prog =>
            Conditional_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).CPG_Condition);
            Traverse
              (State,
               Get_Node  (Node).CPG_Then_Part);
            Traverse
              (State,
               Get_Node  (Node).CPG_Else_Part);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Conditional_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_While_Loop =>
            While_Loop_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).WL_Condition);
            Traverse
              (State,
               Get_Node  (Node).WL_Annotation);
            Traverse
              (State,
               Get_Node  (Node).WL_Loop_Content);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            While_Loop_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Statement_Sequence =>
            Statement_Sequence_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse_List
              (State,
               Get_Node  (Node).SS_Statements);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Statement_Sequence_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Label =>
            Label_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).L_Name);
            Traverse
              (State,
               Get_Node  (Node).L_Def);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Label_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Assert =>
            Assert_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse_List
              (State,
               Get_Node  (Node).AS_Preds);
            Traverse
              (State,
               Get_Node  (Node).AS_Prog);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Assert_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Post_Assertion =>
            Post_Assertion_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).PA_Prog);
            Traverse
              (State,
               Get_Node  (Node).PA_Post);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Post_Assertion_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Opaque_Assertion =>
            Opaque_Assertion_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).PA_Prog);
            Traverse
              (State,
               Get_Node  (Node).PA_Post);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Opaque_Assertion_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Fun_Def =>
            Fun_Def_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse_List
              (State,
               Get_Node  (Node).FD_Binders);
            Traverse
              (State,
               Get_Node  (Node).FD_Pre);
            Traverse
              (State,
               Get_Node  (Node).FD_Def);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Fun_Def_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Binding_Fun =>
            Binding_Fun_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).BF_Name);
            Traverse_List
              (State,
               Get_Node  (Node).BF_Binders);
            Traverse
              (State,
               Get_Node  (Node).BF_Pre);
            Traverse
              (State,
               Get_Node  (Node).BF_Def);
            Traverse
              (State,
               Get_Node  (Node).BF_Context);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Binding_Fun_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Binding_Rec =>
            Binding_Rec_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).BR_Recfun);
            Traverse
              (State,
               Get_Node  (Node).BR_Context);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Binding_Rec_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Prog_Call =>
            Prog_Call_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).PS_Name);
            Traverse_List
              (State,
               Get_Node  (Node).PS_Progs);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Prog_Call_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Raise_Statement =>
            Raise_Statement_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).RS_Name);
            Traverse
              (State,
               Get_Node  (Node).RS_Exn_Type);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Raise_Statement_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Raise_Statement_With_Parameters =>
            Raise_Statement_With_Parameters_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).RSWP_Name);
            Traverse
              (State,
               Get_Node  (Node).RSWP_Parameter);
            Traverse
              (State,
               Get_Node  (Node).RSWP_Exn_Type);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Raise_Statement_With_Parameters_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Try_Block =>
            Try_Block_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).TB_Prog);
            Traverse_List
              (State,
               Get_Node  (Node).TB_Handler);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Try_Block_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Unreachable_Code =>
            Unreachable_Code_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).UC_Exn_Type);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Unreachable_Code_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Begin_Block =>
            Begin_Block_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).BB_Prog);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Begin_Block_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Protected_Prog =>
            Protected_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).BB_Prog);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Protected_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Add_Prog =>
            Op_Add_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Add_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Substract_Prog =>
            Op_Substract_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Substract_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Multiply_Prog =>
            Op_Multiply_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Multiply_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Divide_Prog =>
            Op_Divide_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Divide_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Mod_Prog =>
            Op_Mod_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Mod_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Eq_Prog =>
            Op_Eq_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Eq_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Ne_Prog =>
            Op_Ne_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Ne_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Lt_Prog =>
            Op_Lt_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Lt_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Le_Prog =>
            Op_Le_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Le_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Gt_Prog =>
            Op_Gt_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Gt_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Ge_Prog =>
            Op_Ge_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Ge_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Or_Else_Prog =>
            Op_Or_Else_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Or_Else_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_And_Then_Prog =>
            Op_And_Then_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_And_Then_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Minus_Prog =>
            Op_Minus_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Minus_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Op_Not_Prog =>
            Op_Not_Prog_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Op_Not_Prog_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Binder =>
            Binder_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse_List
              (State,
               Get_Node  (Node).B_Names);
            Traverse
              (State,
               Get_Node  (Node).B_Arg_Type);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Binder_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Recfun =>
            Recfun_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).RF_Name);
            Traverse_List
              (State,
               Get_Node  (Node).RF_Binders);
            Traverse
              (State,
               Get_Node  (Node).RF_Return_Type);
            Traverse
              (State,
               Get_Node  (Node).RF_Variant);
            Traverse
              (State,
               Get_Node  (Node).RF_Pre);
            Traverse
              (State,
               Get_Node  (Node).RF_Def);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Recfun_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Loop_Annot =>
            Loop_Annot_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).LA_Invariant);
            Traverse
              (State,
               Get_Node  (Node).LA_Variant);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Loop_Annot_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Wf_Arg =>
            Wf_Arg_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).WA_Def);
            Traverse
              (State,
               Get_Node  (Node).WA_For_Id);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Wf_Arg_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Handler =>
            Handler_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).H_Name);
            Traverse
              (State,
               Get_Node  (Node).H_Parameter);
            Traverse
              (State,
               Get_Node  (Node).H_Def);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Handler_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_File =>
            File_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse_List
              (State,
               Get_Node  (Node).F_Declarations);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            File_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Global_Binding =>
            Global_Binding_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).GB_Name);
            Traverse_List
              (State,
               Get_Node  (Node).GB_Binders);
            Traverse
              (State,
               Get_Node  (Node).GB_Pre);
            Traverse
              (State,
               Get_Node  (Node).GB_Def);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Global_Binding_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Global_Rec_Binding =>
            Global_Rec_Binding_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).GRB_Name);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Global_Rec_Binding_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Parameter_Declaration =>
            Parameter_Declaration_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).PD_External);
            Traverse_List
              (State,
               Get_Node  (Node).PD_Names);
            Traverse
              (State,
               Get_Node  (Node).PD_Parameter_Type);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Parameter_Declaration_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Global_Ref_Declaration =>
            Global_Ref_Declaration_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).GR_Name);
            Traverse
              (State,
               Get_Node  (Node).GR_Parameter_Type);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Global_Ref_Declaration_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Exception_Declaration =>
            Exception_Declaration_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).ED_Name);
            Traverse
              (State,
               Get_Node  (Node).ED_Parameter);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Exception_Declaration_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Logic_Declaration =>
            Logic_Declaration_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).LD_Decl);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Logic_Declaration_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when W_Include_Declaration =>
            Include_Declaration_Pre_Op (State, Node);

            if State.Control = Abandon_Children then
               State.Control := Continue;
               return;
            end if;

            if State.Control = Abandon_Siblings then
               return;
            end if;

            Traverse
              (State,
               Get_Node  (Node).ID_Name);

            if State.Control = Terminate_Immediately then
               return;
            end if;

            Include_Declaration_Post_Op (State, Node);

            if State.Control = Abandon_Siblings then
               State.Control := Continue;
            end if;

            if State.Control = Terminate_Immediately then
               return;
            end if;

         when others =>
            pragma Assert (False);
      end case;
   end Traverse;

   -------------------
   -- Traverse_List --
   -------------------

   procedure Traverse_List
     (State   : in out Traversal_State'Class;
      List_Id : Why_Node_List)
   is
      use Node_Lists;

      L        : constant List := Get_List (List_Id);
      Position : Cursor := First (L);
   begin
      while Position /= No_Element loop
         pragma Assert (Has_Element (Position)
                        and then State.Control /= Abandon_Siblings
                        and then State.Control /= Terminate_Immediately);

         declare
            Node : constant Why_Node_Id := Element (Position);
         begin
            exit when State.Control = Abandon_Siblings
              or else State.Control = Terminate_Immediately;

            Traverse (State, Node);
         end;

         Next (Position);
      end loop;
   end Traverse_List;

end Why.Atree.Traversal;
