------------------------------------------------------------------------------
--                                                                          --
--                            GNAT2WHY COMPONENTS                           --
--                                                                          --
--                            W H Y - S I N F O                             --
--                                                                          --
--                                 S p e c                                  --
--                                                                          --
--                       Copyright (C) 2010-2011, AdaCore                   --
--                                                                          --
-- gnat2why is  free  software;  you can redistribute it and/or modify it   --
-- under terms of the  GNU General Public License as published  by the Free --
-- Software Foundation;  either version  2,  or  (at your option) any later --
-- version. gnat2why is distributed in the hope that it will  be  useful,   --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-  --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License  for more details. You  should  have  received a copy of the GNU --
-- General Public License  distributed with GNAT; see file COPYING. If not, --
-- write to the Free Software Foundation,  51 Franklin Street, Fifth Floor, --
-- Boston,                                                                  --
--                                                                          --
-- gnat2why is maintained by AdaCore (http://www.adacore.com)               --
--                                                                          --
------------------------------------------------------------------------------
--  This package is automatically generated by xtree. Do not edit manually.
--  See xtree_sinfo.ads for more information.

package Why.Sinfo is
   pragma Pure;

   type Why_Node_Kind is
     (
      W_Unused_At_Start,
      W_Identifier,
      W_Type_Prop,
      W_Type_Int,
      W_Type_Bool,
      W_Type_Real,
      W_Type_Unit,
      W_Abstract_Type,
      W_Generic_Formal_Type,
      W_Generic_Actual_Type_Chain,
      W_Array_Type,
      W_Ref_Type,
      W_Computation_Type,
      W_Integer_Constant,
      W_Real_Constant,
      W_True_Literal,
      W_False_Literal,
      W_Void_Literal,
      W_Arith_Operation,
      W_Negative_Term,
      W_Term_Identifier,
      W_Operation,
      W_Named_Term,
      W_Conditional_Term,
      W_Matching_Term,
      W_Binding_Term,
      W_Protected_Term,
      W_Op_Add,
      W_Op_Substract,
      W_Op_Multiply,
      W_Op_Divide,
      W_Op_Modulo,
      W_True_Literal_Pred,
      W_False_Literal_Pred,
      W_Predicate_Identifier,
      W_Predicate_Instance,
      W_Related_Terms,
      W_Implication,
      W_Equivalence,
      W_Disjunction,
      W_Conjunction,
      W_Negation,
      W_Conditional_Pred,
      W_Binding_Pred,
      W_Universal_Quantif,
      W_Existential_Quantif,
      W_Named_Predicate,
      W_Protected_Predicate,
      W_Pattern,
      W_Match_Case,
      W_Triggers,
      W_Trigger,
      W_Rel_Eq,
      W_Rel_Ne,
      W_Rel_Lt,
      W_Rel_Le,
      W_Rel_Gt,
      W_Rel_Ge,
      W_Type,
      W_Logic,
      W_Function,
      W_Predicate_Definition,
      W_Inductive,
      W_Axiom,
      W_Goal,
      W_External,
      W_Logic_Type,
      W_Logic_Binder,
      W_Inductive_Case,
      W_Transparent_Type_Definition,
      W_Adt_Definition,
      W_Constr_Decl,
      W_Effects,
      W_Postcondition,
      W_Exn_Condition,
      W_Prog_Constant,
      W_Prog_Identifier,
      W_Any_Expr,
      W_Deref,
      W_Assignment,
      W_Array_Access,
      W_Array_Update,
      W_Infix_Call,
      W_Prefix_Call,
      W_Binding_Prog,
      W_Binding_Ref,
      W_Conditional_Prog,
      W_While_Loop,
      W_Statement_Sequence,
      W_Label,
      W_Assert,
      W_Post_Assertion,
      W_Opaque_Assertion,
      W_Fun_Def,
      W_Binding_Fun,
      W_Binding_Rec,
      W_Prog_Call,
      W_Raise_Statement,
      W_Raise_Statement_With_Parameters,
      W_Try_Block,
      W_Unreachable_Code,
      W_Begin_Block,
      W_Protected_Prog,
      W_Op_Add_Prog,
      W_Op_Substract_Prog,
      W_Op_Multiply_Prog,
      W_Op_Divide_Prog,
      W_Op_Mod_Prog,
      W_Op_Eq_Prog,
      W_Op_Ne_Prog,
      W_Op_Lt_Prog,
      W_Op_Le_Prog,
      W_Op_Gt_Prog,
      W_Op_Ge_Prog,
      W_Op_Or_Else_Prog,
      W_Op_And_Then_Prog,
      W_Op_Minus_Prog,
      W_Op_Not_Prog,
      W_Binder,
      W_Recfun,
      W_Loop_Annot,
      W_Wf_Arg,
      W_Handler,
      W_File,
      W_Global_Binding,
      W_Global_Rec_Binding,
      W_Parameter_Declaration,
      W_Global_Ref_Declaration,
      W_Exception_Declaration,
      W_Logic_Declaration,
      W_Include_Declaration);

   ----------------------------
   -- Node Class Definitions --
   ----------------------------

   subtype W_Term is Why_Node_Kind range
     W_Integer_Constant ..
     W_Protected_Term;

   subtype W_Constant is Why_Node_Kind range
     W_Integer_Constant ..
     W_Void_Literal;

   subtype W_Arith_Op is Why_Node_Kind range
     W_Op_Add ..
     W_Op_Modulo;

   subtype W_Predicate is Why_Node_Kind range
     W_True_Literal_Pred ..
     W_Protected_Predicate;

   subtype W_Primitive_Type is Why_Node_Kind range
     W_Type_Int ..
     W_Generic_Actual_Type_Chain;

   subtype W_Relation is Why_Node_Kind range
     W_Rel_Eq ..
     W_Rel_Ge;

   subtype W_Logic_Declaration_Class is Why_Node_Kind range
     W_Type ..
     W_Goal;

   subtype W_Logic_Return_Type is Why_Node_Kind range
     W_Type_Prop ..
     W_Generic_Actual_Type_Chain;

   subtype W_Logic_Arg_Type is Why_Node_Kind range
     W_Type_Int ..
     W_Array_Type;

   subtype W_Simple_Value_Type is Why_Node_Kind range
     W_Type_Int ..
     W_Ref_Type;

   subtype W_Prog is Why_Node_Kind range
     W_Prog_Constant ..
     W_Protected_Prog;

   subtype W_Infix is Why_Node_Kind range
     W_Op_Add_Prog ..
     W_Op_And_Then_Prog;

   subtype W_Prefix is Why_Node_Kind range
     W_Op_Minus_Prog ..
     W_Op_Not_Prog;

   subtype W_Declaration is Why_Node_Kind range
     W_Global_Binding ..
     W_Include_Declaration;

   subtype W_Any_Node is Why_Node_Kind range
     W_Identifier ..
     W_Include_Declaration;

   subtype W_Type_Definition is Why_Node_Kind range
     W_Transparent_Type_Definition ..
     W_Adt_Definition;

end Why.Sinfo;
