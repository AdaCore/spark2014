------------------------------------------------------------------------------
--                                                                          --
--                            GNAT2WHY COMPONENTS                           --
--                                                                          --
--                   W H Y - A T R E E - M U T A T O R S                    --
--                                                                          --
--                                 B o d y                                  --
--                                                                          --
--                       Copyright (C) 2010, AdaCore                        --
--                                                                          --
-- gnat2why is  free  software;  you can redistribute it and/or modify it   --
-- under terms of the  GNU General Public License as published  by the Free --
-- Software Foundation;  either version  2,  or  (at your option) any later --
-- version. gnat2why is distributed in the hope that it will  be  useful,   --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-  --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License  for more details. You  should  have  received a copy of the GNU --
-- General Public License  distributed with GNAT; see file COPYING. If not, --
-- write to the Free Software Foundation,  51 Franklin Street, Fifth Floor, --
-- Boston,                                                                  --
--                                                                          --
-- gnat2why is maintained by AdaCore (http://www.adacore.com)               --
--                                                                          --
------------------------------------------------------------------------------
--  This package is automatically generated by xtree. Do not edit manually.

with Why.Atree.Tables; use Why.Atree.Tables;

package body Why.Atree.Mutators is

   ------------------
   -- Set_Ada_Node --
   ------------------

   procedure Set_Ada_Node
     (Id       : Why_Node_Id;
      Ada_Node : Node_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.Ada_Node := Ada_Node;
      Set_Node (Id, Node);
   end Set_Ada_Node;

   --------------
   -- Set_Link --
   --------------

   procedure Set_Link
     (Id   : Why_Node_Id;
      Link : Why_Node_Set)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.Link := Link;
      Set_Node (Id, Node);
   end Set_Link;

   ---------------------------
   -- Identifier_Set_Symbol --
   ---------------------------

   procedure Identifier_Set_Symbol
     (Id     : W_Identifier_Unchecked_Id;
      Symbol : Name_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.Symbol := Symbol;
      Set_Node (Id, Node);
   end Identifier_Set_Symbol;

   ---------------------------
   -- Identifier_Set_Entity --
   ---------------------------

   procedure Identifier_Set_Entity
     (Id     : W_Identifier_Unchecked_Id;
      Entity : Why_Node_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.Entity := Entity;
      Set_Node (Id, Node);
   end Identifier_Set_Entity;

   ----------------------------
   -- Abstract_Type_Set_Name --
   ----------------------------

   procedure Abstract_Type_Set_Name
     (Id   : W_Abstract_Type_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AT_Name := Name;
      Set_Node (Id, Node);
   end Abstract_Type_Set_Name;

   ----------------------------------
   -- Generic_Formal_Type_Set_Name --
   ----------------------------------

   procedure Generic_Formal_Type_Set_Name
     (Id   : W_Generic_Formal_Type_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.GFT_Name := Name;
      Set_Node (Id, Node);
   end Generic_Formal_Type_Set_Name;

   ----------------------------------------------
   -- Generic_Actual_Type_Chain_Set_Type_Chain --
   ----------------------------------------------

   procedure Generic_Actual_Type_Chain_Set_Type_Chain
     (Id         : W_Generic_Actual_Type_Chain_Unchecked_Id;
      Type_Chain : W_Primitive_Type_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.GATC_Type_Chain := Type_Chain;
      Set_Node (Id, Node);
   end Generic_Actual_Type_Chain_Set_Type_Chain;

   ----------------------------------------
   -- Generic_Actual_Type_Chain_Set_Name --
   ----------------------------------------

   procedure Generic_Actual_Type_Chain_Set_Name
     (Id   : W_Generic_Actual_Type_Chain_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.GATC_Name := Name;
      Set_Node (Id, Node);
   end Generic_Actual_Type_Chain_Set_Name;

   -----------------------------------
   -- Array_Type_Set_Component_Type --
   -----------------------------------

   procedure Array_Type_Set_Component_Type
     (Id             : W_Array_Type_Unchecked_Id;
      Component_Type : W_Primitive_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AT_Component_Type := Component_Type;
      Set_Node (Id, Node);
   end Array_Type_Set_Component_Type;

   -------------------------------
   -- Ref_Type_Set_Aliased_Type --
   -------------------------------

   procedure Ref_Type_Set_Aliased_Type
     (Id           : W_Ref_Type_Unchecked_Id;
      Aliased_Type : W_Primitive_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RT_Aliased_Type := Aliased_Type;
      Set_Node (Id, Node);
   end Ref_Type_Set_Aliased_Type;

   -----------------------------------------
   -- Protected_Value_Type_Set_Value_Type --
   -----------------------------------------

   procedure Protected_Value_Type_Set_Value_Type
     (Id         : W_Protected_Value_Type_Unchecked_Id;
      Value_Type : W_Value_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PVT_Value_Type := Value_Type;
      Set_Node (Id, Node);
   end Protected_Value_Type_Set_Value_Type;

   -----------------------------------
   -- Anonymous_Arrow_Type_Set_Left --
   -----------------------------------

   procedure Anonymous_Arrow_Type_Set_Left
     (Id   : W_Anonymous_Arrow_Type_Unchecked_Id;
      Left : W_Simple_Value_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AAT_Left := Left;
      Set_Node (Id, Node);
   end Anonymous_Arrow_Type_Set_Left;

   ------------------------------------
   -- Anonymous_Arrow_Type_Set_Right --
   ------------------------------------

   procedure Anonymous_Arrow_Type_Set_Right
     (Id    : W_Anonymous_Arrow_Type_Unchecked_Id;
      Right : W_Computation_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AAT_Right := Right;
      Set_Node (Id, Node);
   end Anonymous_Arrow_Type_Set_Right;

   -------------------------------
   -- Named_Arrow_Type_Set_Name --
   -------------------------------

   procedure Named_Arrow_Type_Set_Name
     (Id   : W_Named_Arrow_Type_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.NA_Name := Name;
      Set_Node (Id, Node);
   end Named_Arrow_Type_Set_Name;

   -------------------------------
   -- Named_Arrow_Type_Set_Left --
   -------------------------------

   procedure Named_Arrow_Type_Set_Left
     (Id   : W_Named_Arrow_Type_Unchecked_Id;
      Left : W_Simple_Value_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.NA_Left := Left;
      Set_Node (Id, Node);
   end Named_Arrow_Type_Set_Left;

   --------------------------------
   -- Named_Arrow_Type_Set_Right --
   --------------------------------

   procedure Named_Arrow_Type_Set_Right
     (Id    : W_Named_Arrow_Type_Unchecked_Id;
      Right : W_Computation_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.NA_Right := Right;
      Set_Node (Id, Node);
   end Named_Arrow_Type_Set_Right;

   ---------------------------------------
   -- Computation_Spec_Set_Precondition --
   ---------------------------------------

   procedure Computation_Spec_Set_Precondition
     (Id           : W_Computation_Spec_Unchecked_Id;
      Precondition : W_Precondition_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.CS_Precondition := Precondition;
      Set_Node (Id, Node);
   end Computation_Spec_Set_Precondition;

   --------------------------------------
   -- Computation_Spec_Set_Result_Name --
   --------------------------------------

   procedure Computation_Spec_Set_Result_Name
     (Id          : W_Computation_Spec_Unchecked_Id;
      Result_Name : W_Identifier_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.CS_Result_Name := Result_Name;
      Set_Node (Id, Node);
   end Computation_Spec_Set_Result_Name;

   --------------------------------------
   -- Computation_Spec_Set_Return_Type --
   --------------------------------------

   procedure Computation_Spec_Set_Return_Type
     (Id          : W_Computation_Spec_Unchecked_Id;
      Return_Type : W_Value_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.CS_Return_Type := Return_Type;
      Set_Node (Id, Node);
   end Computation_Spec_Set_Return_Type;

   ----------------------------------
   -- Computation_Spec_Set_Effects --
   ----------------------------------

   procedure Computation_Spec_Set_Effects
     (Id      : W_Computation_Spec_Unchecked_Id;
      Effects : W_Effects_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.CS_Effects := Effects;
      Set_Node (Id, Node);
   end Computation_Spec_Set_Effects;

   ----------------------------------------
   -- Computation_Spec_Set_Postcondition --
   ----------------------------------------

   procedure Computation_Spec_Set_Postcondition
     (Id            : W_Computation_Spec_Unchecked_Id;
      Postcondition : W_Postcondition_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.CS_Postcondition := Postcondition;
      Set_Node (Id, Node);
   end Computation_Spec_Set_Postcondition;

   --------------------------------
   -- Integer_Constant_Set_Value --
   --------------------------------

   procedure Integer_Constant_Set_Value
     (Id    : W_Integer_Constant_Unchecked_Id;
      Value : Uint)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.IC_Value := Value;
      Set_Node (Id, Node);
   end Integer_Constant_Set_Value;

   -----------------------------
   -- Real_Constant_Set_Value --
   -----------------------------

   procedure Real_Constant_Set_Value
     (Id    : W_Real_Constant_Unchecked_Id;
      Value : Ureal)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RC_Value := Value;
      Set_Node (Id, Node);
   end Real_Constant_Set_Value;

   ------------------------------
   -- Arith_Operation_Set_Left --
   ------------------------------

   procedure Arith_Operation_Set_Left
     (Id   : W_Arith_Operation_Unchecked_Id;
      Left : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AO_Left := Left;
      Set_Node (Id, Node);
   end Arith_Operation_Set_Left;

   ----------------------------
   -- Arith_Operation_Set_Op --
   ----------------------------

   procedure Arith_Operation_Set_Op
     (Id : W_Arith_Operation_Unchecked_Id;
      Op : W_Arith_Op_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AO_Op := Op;
      Set_Node (Id, Node);
   end Arith_Operation_Set_Op;

   -------------------------------
   -- Arith_Operation_Set_Right --
   -------------------------------

   procedure Arith_Operation_Set_Right
     (Id    : W_Arith_Operation_Unchecked_Id;
      Right : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AO_Right := Right;
      Set_Node (Id, Node);
   end Arith_Operation_Set_Right;

   -------------------------------
   -- Negative_Term_Set_Operand --
   -------------------------------

   procedure Negative_Term_Set_Operand
     (Id      : W_Negative_Term_Unchecked_Id;
      Operand : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.NT_Operand := Operand;
      Set_Node (Id, Node);
   end Negative_Term_Set_Operand;

   -------------------------------
   -- Label_Identifier_Set_Name --
   -------------------------------

   procedure Label_Identifier_Set_Name
     (Id   : W_Label_Identifier_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.TI_Name := Name;
      Set_Node (Id, Node);
   end Label_Identifier_Set_Name;

   --------------------------------
   -- Label_Identifier_Set_Label --
   --------------------------------

   procedure Label_Identifier_Set_Label
     (Id    : W_Label_Identifier_Unchecked_Id;
      Label : W_Identifier_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.TI_Label := Label;
      Set_Node (Id, Node);
   end Label_Identifier_Set_Label;

   ------------------------
   -- Operation_Set_Name --
   ------------------------

   procedure Operation_Set_Name
     (Id   : W_Operation_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.O_Name := Name;
      Set_Node (Id, Node);
   end Operation_Set_Name;

   ------------------------------
   -- Operation_Set_Parameters --
   ------------------------------

   procedure Operation_Set_Parameters
     (Id         : W_Operation_Unchecked_Id;
      Parameters : W_Term_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.O_Parameters := Parameters;
      Set_Node (Id, Node);
   end Operation_Set_Parameters;

   -------------------------
   -- Named_Term_Set_Name --
   -------------------------

   procedure Named_Term_Set_Name
     (Id   : W_Named_Term_Unchecked_Id;
      Name : W_Label_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.NT_Name := Name;
      Set_Node (Id, Node);
   end Named_Term_Set_Name;

   -------------------------
   -- Named_Term_Set_Term --
   -------------------------

   procedure Named_Term_Set_Term
     (Id   : W_Named_Term_Unchecked_Id;
      Term : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.NT_Term := Term;
      Set_Node (Id, Node);
   end Named_Term_Set_Term;

   ------------------------------------
   -- Conditional_Term_Set_Condition --
   ------------------------------------

   procedure Conditional_Term_Set_Condition
     (Id        : W_Conditional_Term_Unchecked_Id;
      Condition : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.CT_Condition := Condition;
      Set_Node (Id, Node);
   end Conditional_Term_Set_Condition;

   ------------------------------------
   -- Conditional_Term_Set_Then_Part --
   ------------------------------------

   procedure Conditional_Term_Set_Then_Part
     (Id        : W_Conditional_Term_Unchecked_Id;
      Then_Part : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.CT_Then_Part := Then_Part;
      Set_Node (Id, Node);
   end Conditional_Term_Set_Then_Part;

   ------------------------------------
   -- Conditional_Term_Set_Else_Part --
   ------------------------------------

   procedure Conditional_Term_Set_Else_Part
     (Id        : W_Conditional_Term_Unchecked_Id;
      Else_Part : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.CT_Else_Part := Else_Part;
      Set_Node (Id, Node);
   end Conditional_Term_Set_Else_Part;

   ---------------------------
   -- Binding_Term_Set_Name --
   ---------------------------

   procedure Binding_Term_Set_Name
     (Id   : W_Binding_Term_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BT_Name := Name;
      Set_Node (Id, Node);
   end Binding_Term_Set_Name;

   --------------------------
   -- Binding_Term_Set_Def --
   --------------------------

   procedure Binding_Term_Set_Def
     (Id  : W_Binding_Term_Unchecked_Id;
      Def : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BT_Def := Def;
      Set_Node (Id, Node);
   end Binding_Term_Set_Def;

   ------------------------------
   -- Binding_Term_Set_Context --
   ------------------------------

   procedure Binding_Term_Set_Context
     (Id      : W_Binding_Term_Unchecked_Id;
      Context : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BT_Context := Context;
      Set_Node (Id, Node);
   end Binding_Term_Set_Context;

   -----------------------------
   -- Protected_Term_Set_Term --
   -----------------------------

   procedure Protected_Term_Set_Term
     (Id   : W_Protected_Term_Unchecked_Id;
      Term : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BT_Term := Term;
      Set_Node (Id, Node);
   end Protected_Term_Set_Term;

   -----------------------------------
   -- Predicate_Identifier_Set_Name --
   -----------------------------------

   procedure Predicate_Identifier_Set_Name
     (Id   : W_Predicate_Identifier_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PID_Name := Name;
      Set_Node (Id, Node);
   end Predicate_Identifier_Set_Name;

   ---------------------------------
   -- Predicate_Instance_Set_Name --
   ---------------------------------

   procedure Predicate_Instance_Set_Name
     (Id   : W_Predicate_Instance_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PIN_Name := Name;
      Set_Node (Id, Node);
   end Predicate_Instance_Set_Name;

   ---------------------------------------
   -- Predicate_Instance_Set_Parameters --
   ---------------------------------------

   procedure Predicate_Instance_Set_Parameters
     (Id         : W_Predicate_Instance_Unchecked_Id;
      Parameters : W_Term_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PIN_Parameters := Parameters;
      Set_Node (Id, Node);
   end Predicate_Instance_Set_Parameters;

   ----------------------------
   -- Related_Terms_Set_Left --
   ----------------------------

   procedure Related_Terms_Set_Left
     (Id   : W_Related_Terms_Unchecked_Id;
      Left : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RT_Left := Left;
      Set_Node (Id, Node);
   end Related_Terms_Set_Left;

   --------------------------
   -- Related_Terms_Set_Op --
   --------------------------

   procedure Related_Terms_Set_Op
     (Id : W_Related_Terms_Unchecked_Id;
      Op : W_Relation_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RT_Op := Op;
      Set_Node (Id, Node);
   end Related_Terms_Set_Op;

   -----------------------------
   -- Related_Terms_Set_Right --
   -----------------------------

   procedure Related_Terms_Set_Right
     (Id    : W_Related_Terms_Unchecked_Id;
      Right : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RT_Right := Right;
      Set_Node (Id, Node);
   end Related_Terms_Set_Right;

   ---------------------------
   -- Related_Terms_Set_Op2 --
   ---------------------------

   procedure Related_Terms_Set_Op2
     (Id  : W_Related_Terms_Unchecked_Id;
      Op2 : W_Relation_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RT_Op2 := Op2;
      Set_Node (Id, Node);
   end Related_Terms_Set_Op2;

   ------------------------------
   -- Related_Terms_Set_Right2 --
   ------------------------------

   procedure Related_Terms_Set_Right2
     (Id     : W_Related_Terms_Unchecked_Id;
      Right2 : W_Term_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RT_Right2 := Right2;
      Set_Node (Id, Node);
   end Related_Terms_Set_Right2;

   --------------------------
   -- Implication_Set_Left --
   --------------------------

   procedure Implication_Set_Left
     (Id   : W_Implication_Unchecked_Id;
      Left : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.ITOC_Left := Left;
      Set_Node (Id, Node);
   end Implication_Set_Left;

   ---------------------------
   -- Implication_Set_Right --
   ---------------------------

   procedure Implication_Set_Right
     (Id    : W_Implication_Unchecked_Id;
      Right : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.ITOC_Right := Right;
      Set_Node (Id, Node);
   end Implication_Set_Right;

   --------------------------
   -- Equivalence_Set_Left --
   --------------------------

   procedure Equivalence_Set_Left
     (Id   : W_Equivalence_Unchecked_Id;
      Left : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.ITOC_Left := Left;
      Set_Node (Id, Node);
   end Equivalence_Set_Left;

   ---------------------------
   -- Equivalence_Set_Right --
   ---------------------------

   procedure Equivalence_Set_Right
     (Id    : W_Equivalence_Unchecked_Id;
      Right : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.ITOC_Right := Right;
      Set_Node (Id, Node);
   end Equivalence_Set_Right;

   --------------------------
   -- Disjonction_Set_Left --
   --------------------------

   procedure Disjonction_Set_Left
     (Id   : W_Disjonction_Unchecked_Id;
      Left : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.ITOC_Left := Left;
      Set_Node (Id, Node);
   end Disjonction_Set_Left;

   ---------------------------
   -- Disjonction_Set_Right --
   ---------------------------

   procedure Disjonction_Set_Right
     (Id    : W_Disjonction_Unchecked_Id;
      Right : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.ITOC_Right := Right;
      Set_Node (Id, Node);
   end Disjonction_Set_Right;

   --------------------------
   -- Conjonction_Set_Left --
   --------------------------

   procedure Conjonction_Set_Left
     (Id   : W_Conjonction_Unchecked_Id;
      Left : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.ITOC_Left := Left;
      Set_Node (Id, Node);
   end Conjonction_Set_Left;

   ---------------------------
   -- Conjonction_Set_Right --
   ---------------------------

   procedure Conjonction_Set_Right
     (Id    : W_Conjonction_Unchecked_Id;
      Right : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.ITOC_Right := Right;
      Set_Node (Id, Node);
   end Conjonction_Set_Right;

   --------------------------
   -- Negation_Set_Operand --
   --------------------------

   procedure Negation_Set_Operand
     (Id      : W_Negation_Unchecked_Id;
      Operand : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.N_Operand := Operand;
      Set_Node (Id, Node);
   end Negation_Set_Operand;

   ------------------------------------
   -- Conditional_Pred_Set_Condition --
   ------------------------------------

   procedure Conditional_Pred_Set_Condition
     (Id        : W_Conditional_Pred_Unchecked_Id;
      Condition : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.CPD_Condition := Condition;
      Set_Node (Id, Node);
   end Conditional_Pred_Set_Condition;

   ------------------------------------
   -- Conditional_Pred_Set_Then_Part --
   ------------------------------------

   procedure Conditional_Pred_Set_Then_Part
     (Id        : W_Conditional_Pred_Unchecked_Id;
      Then_Part : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.CPD_Then_Part := Then_Part;
      Set_Node (Id, Node);
   end Conditional_Pred_Set_Then_Part;

   ------------------------------------
   -- Conditional_Pred_Set_Else_Part --
   ------------------------------------

   procedure Conditional_Pred_Set_Else_Part
     (Id        : W_Conditional_Pred_Unchecked_Id;
      Else_Part : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.CPD_Else_Part := Else_Part;
      Set_Node (Id, Node);
   end Conditional_Pred_Set_Else_Part;

   ---------------------------
   -- Binding_Pred_Set_Name --
   ---------------------------

   procedure Binding_Pred_Set_Name
     (Id   : W_Binding_Pred_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BPD_Name := Name;
      Set_Node (Id, Node);
   end Binding_Pred_Set_Name;

   --------------------------
   -- Binding_Pred_Set_Def --
   --------------------------

   procedure Binding_Pred_Set_Def
     (Id  : W_Binding_Pred_Unchecked_Id;
      Def : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BPD_Def := Def;
      Set_Node (Id, Node);
   end Binding_Pred_Set_Def;

   ------------------------------
   -- Binding_Pred_Set_Context --
   ------------------------------

   procedure Binding_Pred_Set_Context
     (Id      : W_Binding_Pred_Unchecked_Id;
      Context : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BPD_Context := Context;
      Set_Node (Id, Node);
   end Binding_Pred_Set_Context;

   -------------------------------------
   -- Universal_Quantif_Set_Variables --
   -------------------------------------

   procedure Universal_Quantif_Set_Variables
     (Id        : W_Universal_Quantif_Unchecked_Id;
      Variables : W_Identifier_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.UQ_Variables := Variables;
      Set_Node (Id, Node);
   end Universal_Quantif_Set_Variables;

   ------------------------------------
   -- Universal_Quantif_Set_Var_Type --
   ------------------------------------

   procedure Universal_Quantif_Set_Var_Type
     (Id       : W_Universal_Quantif_Unchecked_Id;
      Var_Type : W_Primitive_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.UQ_Var_Type := Var_Type;
      Set_Node (Id, Node);
   end Universal_Quantif_Set_Var_Type;

   ------------------------------------
   -- Universal_Quantif_Set_Triggers --
   ------------------------------------

   procedure Universal_Quantif_Set_Triggers
     (Id       : W_Universal_Quantif_Unchecked_Id;
      Triggers : W_Triggers_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.UQ_Triggers := Triggers;
      Set_Node (Id, Node);
   end Universal_Quantif_Set_Triggers;

   --------------------------------
   -- Universal_Quantif_Set_Pred --
   --------------------------------

   procedure Universal_Quantif_Set_Pred
     (Id   : W_Universal_Quantif_Unchecked_Id;
      Pred : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.UQ_Pred := Pred;
      Set_Node (Id, Node);
   end Universal_Quantif_Set_Pred;

   ---------------------------------------
   -- Existential_Quantif_Set_Variables --
   ---------------------------------------

   procedure Existential_Quantif_Set_Variables
     (Id        : W_Existential_Quantif_Unchecked_Id;
      Variables : W_Identifier_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.EQ_Variables := Variables;
      Set_Node (Id, Node);
   end Existential_Quantif_Set_Variables;

   --------------------------------------
   -- Existential_Quantif_Set_Var_Type --
   --------------------------------------

   procedure Existential_Quantif_Set_Var_Type
     (Id       : W_Existential_Quantif_Unchecked_Id;
      Var_Type : W_Primitive_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.EQ_Var_Type := Var_Type;
      Set_Node (Id, Node);
   end Existential_Quantif_Set_Var_Type;

   ----------------------------------
   -- Existential_Quantif_Set_Pred --
   ----------------------------------

   procedure Existential_Quantif_Set_Pred
     (Id   : W_Existential_Quantif_Unchecked_Id;
      Pred : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.EQ_Pred := Pred;
      Set_Node (Id, Node);
   end Existential_Quantif_Set_Pred;

   ------------------------------
   -- Named_Predicate_Set_Name --
   ------------------------------

   procedure Named_Predicate_Set_Name
     (Id   : W_Named_Predicate_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.NP_Name := Name;
      Set_Node (Id, Node);
   end Named_Predicate_Set_Name;

   ------------------------------
   -- Named_Predicate_Set_Pred --
   ------------------------------

   procedure Named_Predicate_Set_Pred
     (Id   : W_Named_Predicate_Unchecked_Id;
      Pred : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.NP_Pred := Pred;
      Set_Node (Id, Node);
   end Named_Predicate_Set_Pred;

   ----------------------------------
   -- Protected_Predicate_Set_Pred --
   ----------------------------------

   procedure Protected_Predicate_Set_Pred
     (Id   : W_Protected_Predicate_Unchecked_Id;
      Pred : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PP_Pred := Pred;
      Set_Node (Id, Node);
   end Protected_Predicate_Set_Pred;

   ---------------------------
   -- Triggers_Set_Triggers --
   ---------------------------

   procedure Triggers_Set_Triggers
     (Id       : W_Triggers_Unchecked_Id;
      Triggers : W_Trigger_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.TRS_Triggers := Triggers;
      Set_Node (Id, Node);
   end Triggers_Set_Triggers;

   -----------------------
   -- Trigger_Set_Terms --
   -----------------------

   procedure Trigger_Set_Terms
     (Id    : W_Trigger_Unchecked_Id;
      Terms : W_Term_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.TRI_Terms := Terms;
      Set_Node (Id, Node);
   end Trigger_Set_Terms;

   -----------------------
   -- Type_Set_External --
   -----------------------

   procedure Type_Set_External
     (Id       : W_Type_Unchecked_Id;
      External : W_External_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.T_External := External;
      Set_Node (Id, Node);
   end Type_Set_External;

   ------------------------------
   -- Type_Set_Type_Parameters --
   ------------------------------

   procedure Type_Set_Type_Parameters
     (Id              : W_Type_Unchecked_Id;
      Type_Parameters : W_Identifier_Unchecked_OList)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.T_Type_Parameters := Type_Parameters;
      Set_Node (Id, Node);
   end Type_Set_Type_Parameters;

   -------------------
   -- Type_Set_Name --
   -------------------

   procedure Type_Set_Name
     (Id   : W_Type_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.T_Name := Name;
      Set_Node (Id, Node);
   end Type_Set_Name;

   ------------------------
   -- Logic_Set_External --
   ------------------------

   procedure Logic_Set_External
     (Id       : W_Logic_Unchecked_Id;
      External : W_External_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.L_External := External;
      Set_Node (Id, Node);
   end Logic_Set_External;

   ---------------------
   -- Logic_Set_Names --
   ---------------------

   procedure Logic_Set_Names
     (Id    : W_Logic_Unchecked_Id;
      Names : W_Identifier_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.L_Names := Names;
      Set_Node (Id, Node);
   end Logic_Set_Names;

   --------------------------
   -- Logic_Set_Logic_Type --
   --------------------------

   procedure Logic_Set_Logic_Type
     (Id         : W_Logic_Unchecked_Id;
      Logic_Type : W_Logic_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.L_Logic_Type := Logic_Type;
      Set_Node (Id, Node);
   end Logic_Set_Logic_Type;

   -----------------------
   -- Function_Set_Name --
   -----------------------

   procedure Function_Set_Name
     (Id   : W_Function_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.F_Name := Name;
      Set_Node (Id, Node);
   end Function_Set_Name;

   --------------------------
   -- Function_Set_Binders --
   --------------------------

   procedure Function_Set_Binders
     (Id      : W_Function_Unchecked_Id;
      Binders : W_Logic_Binder_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.F_Binders := Binders;
      Set_Node (Id, Node);
   end Function_Set_Binders;

   ------------------------------
   -- Function_Set_Return_Type --
   ------------------------------

   procedure Function_Set_Return_Type
     (Id          : W_Function_Unchecked_Id;
      Return_Type : W_Primitive_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.F_Return_Type := Return_Type;
      Set_Node (Id, Node);
   end Function_Set_Return_Type;

   ----------------------
   -- Function_Set_Def --
   ----------------------

   procedure Function_Set_Def
     (Id  : W_Function_Unchecked_Id;
      Def : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.F_Def := Def;
      Set_Node (Id, Node);
   end Function_Set_Def;

   -----------------------------------
   -- Predicate_Definition_Set_Name --
   -----------------------------------

   procedure Predicate_Definition_Set_Name
     (Id   : W_Predicate_Definition_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.P_Name := Name;
      Set_Node (Id, Node);
   end Predicate_Definition_Set_Name;

   --------------------------------------
   -- Predicate_Definition_Set_Binders --
   --------------------------------------

   procedure Predicate_Definition_Set_Binders
     (Id      : W_Predicate_Definition_Unchecked_Id;
      Binders : W_Logic_Binder_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.P_Binders := Binders;
      Set_Node (Id, Node);
   end Predicate_Definition_Set_Binders;

   ----------------------------------
   -- Predicate_Definition_Set_Def --
   ----------------------------------

   procedure Predicate_Definition_Set_Def
     (Id  : W_Predicate_Definition_Unchecked_Id;
      Def : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.P_Def := Def;
      Set_Node (Id, Node);
   end Predicate_Definition_Set_Def;

   ------------------------
   -- Inductive_Set_Name --
   ------------------------

   procedure Inductive_Set_Name
     (Id   : W_Inductive_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.I_Name := Name;
      Set_Node (Id, Node);
   end Inductive_Set_Name;

   ------------------------------
   -- Inductive_Set_Logic_Type --
   ------------------------------

   procedure Inductive_Set_Logic_Type
     (Id         : W_Inductive_Unchecked_Id;
      Logic_Type : W_Logic_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.I_Logic_Type := Logic_Type;
      Set_Node (Id, Node);
   end Inductive_Set_Logic_Type;

   -----------------------
   -- Inductive_Set_Def --
   -----------------------

   procedure Inductive_Set_Def
     (Id  : W_Inductive_Unchecked_Id;
      Def : W_Inductive_Case_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.I_Def := Def;
      Set_Node (Id, Node);
   end Inductive_Set_Def;

   --------------------
   -- Axiom_Set_Name --
   --------------------

   procedure Axiom_Set_Name
     (Id   : W_Axiom_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AX_Name := Name;
      Set_Node (Id, Node);
   end Axiom_Set_Name;

   -------------------
   -- Axiom_Set_Def --
   -------------------

   procedure Axiom_Set_Def
     (Id  : W_Axiom_Unchecked_Id;
      Def : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AX_Def := Def;
      Set_Node (Id, Node);
   end Axiom_Set_Def;

   -------------------
   -- Goal_Set_Name --
   -------------------

   procedure Goal_Set_Name
     (Id   : W_Goal_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.G_Name := Name;
      Set_Node (Id, Node);
   end Goal_Set_Name;

   ------------------
   -- Goal_Set_Def --
   ------------------

   procedure Goal_Set_Def
     (Id  : W_Goal_Unchecked_Id;
      Def : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.G_Def := Def;
      Set_Node (Id, Node);
   end Goal_Set_Def;

   ------------------------------
   -- Logic_Type_Set_Arg_Types --
   ------------------------------

   procedure Logic_Type_Set_Arg_Types
     (Id        : W_Logic_Type_Unchecked_Id;
      Arg_Types : W_Logic_Arg_Type_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.LT_Arg_Types := Arg_Types;
      Set_Node (Id, Node);
   end Logic_Type_Set_Arg_Types;

   --------------------------------
   -- Logic_Type_Set_Return_Type --
   --------------------------------

   procedure Logic_Type_Set_Return_Type
     (Id          : W_Logic_Type_Unchecked_Id;
      Return_Type : W_Logic_Return_Type_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.LT_Return_Type := Return_Type;
      Set_Node (Id, Node);
   end Logic_Type_Set_Return_Type;

   ---------------------------
   -- Logic_Binder_Set_Name --
   ---------------------------

   procedure Logic_Binder_Set_Name
     (Id   : W_Logic_Binder_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.LB_Name := Name;
      Set_Node (Id, Node);
   end Logic_Binder_Set_Name;

   ---------------------------------
   -- Logic_Binder_Set_Param_Type --
   ---------------------------------

   procedure Logic_Binder_Set_Param_Type
     (Id         : W_Logic_Binder_Unchecked_Id;
      Param_Type : W_Primitive_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.LB_Param_Type := Param_Type;
      Set_Node (Id, Node);
   end Logic_Binder_Set_Param_Type;

   -----------------------------
   -- Inductive_Case_Set_Name --
   -----------------------------

   procedure Inductive_Case_Set_Name
     (Id   : W_Inductive_Case_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.IC_Name := Name;
      Set_Node (Id, Node);
   end Inductive_Case_Set_Name;

   -----------------------------
   -- Inductive_Case_Set_Pred --
   -----------------------------

   procedure Inductive_Case_Set_Pred
     (Id   : W_Inductive_Case_Unchecked_Id;
      Pred : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.IC_Pred := Pred;
      Set_Node (Id, Node);
   end Inductive_Case_Set_Pred;

   -----------------------
   -- Effects_Set_Reads --
   -----------------------

   procedure Effects_Set_Reads
     (Id    : W_Effects_Unchecked_Id;
      Reads : W_Identifier_Unchecked_OList)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.E_Reads := Reads;
      Set_Node (Id, Node);
   end Effects_Set_Reads;

   ------------------------
   -- Effects_Set_Writes --
   ------------------------

   procedure Effects_Set_Writes
     (Id     : W_Effects_Unchecked_Id;
      Writes : W_Identifier_Unchecked_OList)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.E_Writes := Writes;
      Set_Node (Id, Node);
   end Effects_Set_Writes;

   ------------------------
   -- Effects_Set_Raises --
   ------------------------

   procedure Effects_Set_Raises
     (Id     : W_Effects_Unchecked_Id;
      Raises : W_Identifier_Unchecked_OList)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.E_Raises := Raises;
      Set_Node (Id, Node);
   end Effects_Set_Raises;

   --------------------------------
   -- Precondition_Set_Assertion --
   --------------------------------

   procedure Precondition_Set_Assertion
     (Id        : W_Precondition_Unchecked_Id;
      Assertion : W_Assertion_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PRE_Assertion := Assertion;
      Set_Node (Id, Node);
   end Precondition_Set_Assertion;

   ---------------------------------
   -- Postcondition_Set_Assertion --
   ---------------------------------

   procedure Postcondition_Set_Assertion
     (Id        : W_Postcondition_Unchecked_Id;
      Assertion : W_Assertion_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.POST_Assertion := Assertion;
      Set_Node (Id, Node);
   end Postcondition_Set_Assertion;

   --------------------------------
   -- Postcondition_Set_Handlers --
   --------------------------------

   procedure Postcondition_Set_Handlers
     (Id       : W_Postcondition_Unchecked_Id;
      Handlers : W_Exn_Condition_Unchecked_OList)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.POST_Handlers := Handlers;
      Set_Node (Id, Node);
   end Postcondition_Set_Handlers;

   --------------------------------
   -- Exn_Condition_Set_Exn_Case --
   --------------------------------

   procedure Exn_Condition_Set_Exn_Case
     (Id       : W_Exn_Condition_Unchecked_Id;
      Exn_Case : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.EC_Exn_Case := Exn_Case;
      Set_Node (Id, Node);
   end Exn_Condition_Set_Exn_Case;

   ---------------------------------
   -- Exn_Condition_Set_Assertion --
   ---------------------------------

   procedure Exn_Condition_Set_Assertion
     (Id        : W_Exn_Condition_Unchecked_Id;
      Assertion : W_Assertion_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.EC_Assertion := Assertion;
      Set_Node (Id, Node);
   end Exn_Condition_Set_Assertion;

   ------------------------
   -- Assertion_Set_Pred --
   ------------------------

   procedure Assertion_Set_Pred
     (Id   : W_Assertion_Unchecked_Id;
      Pred : W_Predicate_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.A_Pred := Pred;
      Set_Node (Id, Node);
   end Assertion_Set_Pred;

   ----------------------
   -- Assertion_Set_As --
   ----------------------

   procedure Assertion_Set_As
     (Id : W_Assertion_Unchecked_Id;
      As : W_Identifier_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.A_As := As;
      Set_Node (Id, Node);
   end Assertion_Set_As;

   ---------------------------
   -- Prog_Constant_Set_Def --
   ---------------------------

   procedure Prog_Constant_Set_Def
     (Id  : W_Prog_Constant_Unchecked_Id;
      Def : W_Constant_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PC_Def := Def;
      Set_Node (Id, Node);
   end Prog_Constant_Set_Def;

   -----------------------------
   -- Prog_Identifier_Set_Def --
   -----------------------------

   procedure Prog_Identifier_Set_Def
     (Id  : W_Prog_Identifier_Unchecked_Id;
      Def : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PI_Def := Def;
      Set_Node (Id, Node);
   end Prog_Identifier_Set_Def;

   -------------------
   -- Deref_Set_Ref --
   -------------------

   procedure Deref_Set_Ref
     (Id  : W_Deref_Unchecked_Id;
      Ref : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.D_Ref := Ref;
      Set_Node (Id, Node);
   end Deref_Set_Ref;

   -------------------------
   -- Assignment_Set_Name --
   -------------------------

   procedure Assignment_Set_Name
     (Id   : W_Assignment_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.A_Name := Name;
      Set_Node (Id, Node);
   end Assignment_Set_Name;

   --------------------------
   -- Assignment_Set_Value --
   --------------------------

   procedure Assignment_Set_Value
     (Id    : W_Assignment_Unchecked_Id;
      Value : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.A_Value := Value;
      Set_Node (Id, Node);
   end Assignment_Set_Value;

   ---------------------------
   -- Array_Access_Set_Name --
   ---------------------------

   procedure Array_Access_Set_Name
     (Id   : W_Array_Access_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AA_Name := Name;
      Set_Node (Id, Node);
   end Array_Access_Set_Name;

   ----------------------------
   -- Array_Access_Set_Index --
   ----------------------------

   procedure Array_Access_Set_Index
     (Id    : W_Array_Access_Unchecked_Id;
      Index : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AA_Index := Index;
      Set_Node (Id, Node);
   end Array_Access_Set_Index;

   ---------------------------
   -- Array_Update_Set_Name --
   ---------------------------

   procedure Array_Update_Set_Name
     (Id   : W_Array_Update_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AU_Name := Name;
      Set_Node (Id, Node);
   end Array_Update_Set_Name;

   ----------------------------
   -- Array_Update_Set_Index --
   ----------------------------

   procedure Array_Update_Set_Index
     (Id    : W_Array_Update_Unchecked_Id;
      Index : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AU_Index := Index;
      Set_Node (Id, Node);
   end Array_Update_Set_Index;

   ----------------------------
   -- Array_Update_Set_Value --
   ----------------------------

   procedure Array_Update_Set_Value
     (Id    : W_Array_Update_Unchecked_Id;
      Value : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AU_Value := Value;
      Set_Node (Id, Node);
   end Array_Update_Set_Value;

   -------------------------
   -- Infix_Call_Set_Left --
   -------------------------

   procedure Infix_Call_Set_Left
     (Id   : W_Infix_Call_Unchecked_Id;
      Left : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.IC_Left := Left;
      Set_Node (Id, Node);
   end Infix_Call_Set_Left;

   --------------------------
   -- Infix_Call_Set_Infix --
   --------------------------

   procedure Infix_Call_Set_Infix
     (Id    : W_Infix_Call_Unchecked_Id;
      Infix : W_Infix_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.IC_Infix := Infix;
      Set_Node (Id, Node);
   end Infix_Call_Set_Infix;

   --------------------------
   -- Infix_Call_Set_Right --
   --------------------------

   procedure Infix_Call_Set_Right
     (Id    : W_Infix_Call_Unchecked_Id;
      Right : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.IC_Right := Right;
      Set_Node (Id, Node);
   end Infix_Call_Set_Right;

   ----------------------------
   -- Prefix_Call_Set_Prefix --
   ----------------------------

   procedure Prefix_Call_Set_Prefix
     (Id     : W_Prefix_Call_Unchecked_Id;
      Prefix : W_Prefix_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PC_Prefix := Prefix;
      Set_Node (Id, Node);
   end Prefix_Call_Set_Prefix;

   -----------------------------
   -- Prefix_Call_Set_Operand --
   -----------------------------

   procedure Prefix_Call_Set_Operand
     (Id      : W_Prefix_Call_Unchecked_Id;
      Operand : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PC_Operand := Operand;
      Set_Node (Id, Node);
   end Prefix_Call_Set_Operand;

   ---------------------------
   -- Binding_Prog_Set_Name --
   ---------------------------

   procedure Binding_Prog_Set_Name
     (Id   : W_Binding_Prog_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BPG_Name := Name;
      Set_Node (Id, Node);
   end Binding_Prog_Set_Name;

   --------------------------
   -- Binding_Prog_Set_Def --
   --------------------------

   procedure Binding_Prog_Set_Def
     (Id  : W_Binding_Prog_Unchecked_Id;
      Def : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BPG_Def := Def;
      Set_Node (Id, Node);
   end Binding_Prog_Set_Def;

   ------------------------------
   -- Binding_Prog_Set_Context --
   ------------------------------

   procedure Binding_Prog_Set_Context
     (Id      : W_Binding_Prog_Unchecked_Id;
      Context : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BPG_Context := Context;
      Set_Node (Id, Node);
   end Binding_Prog_Set_Context;

   --------------------------
   -- Binding_Ref_Set_Name --
   --------------------------

   procedure Binding_Ref_Set_Name
     (Id   : W_Binding_Ref_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BPG_Name := Name;
      Set_Node (Id, Node);
   end Binding_Ref_Set_Name;

   -------------------------
   -- Binding_Ref_Set_Def --
   -------------------------

   procedure Binding_Ref_Set_Def
     (Id  : W_Binding_Ref_Unchecked_Id;
      Def : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BPG_Def := Def;
      Set_Node (Id, Node);
   end Binding_Ref_Set_Def;

   -----------------------------
   -- Binding_Ref_Set_Context --
   -----------------------------

   procedure Binding_Ref_Set_Context
     (Id      : W_Binding_Ref_Unchecked_Id;
      Context : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BPG_Context := Context;
      Set_Node (Id, Node);
   end Binding_Ref_Set_Context;

   ------------------------------------
   -- Conditional_Prog_Set_Condition --
   ------------------------------------

   procedure Conditional_Prog_Set_Condition
     (Id        : W_Conditional_Prog_Unchecked_Id;
      Condition : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.CPG_Condition := Condition;
      Set_Node (Id, Node);
   end Conditional_Prog_Set_Condition;

   ------------------------------------
   -- Conditional_Prog_Set_Then_Part --
   ------------------------------------

   procedure Conditional_Prog_Set_Then_Part
     (Id        : W_Conditional_Prog_Unchecked_Id;
      Then_Part : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.CPG_Then_Part := Then_Part;
      Set_Node (Id, Node);
   end Conditional_Prog_Set_Then_Part;

   ------------------------------------
   -- Conditional_Prog_Set_Else_Part --
   ------------------------------------

   procedure Conditional_Prog_Set_Else_Part
     (Id        : W_Conditional_Prog_Unchecked_Id;
      Else_Part : W_Prog_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.CPG_Else_Part := Else_Part;
      Set_Node (Id, Node);
   end Conditional_Prog_Set_Else_Part;

   ------------------------------
   -- While_Loop_Set_Condition --
   ------------------------------

   procedure While_Loop_Set_Condition
     (Id        : W_While_Loop_Unchecked_Id;
      Condition : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.WL_Condition := Condition;
      Set_Node (Id, Node);
   end While_Loop_Set_Condition;

   -------------------------------
   -- While_Loop_Set_Annotation --
   -------------------------------

   procedure While_Loop_Set_Annotation
     (Id         : W_While_Loop_Unchecked_Id;
      Annotation : W_Loop_Annot_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.WL_Annotation := Annotation;
      Set_Node (Id, Node);
   end While_Loop_Set_Annotation;

   ---------------------------------
   -- While_Loop_Set_Loop_Content --
   ---------------------------------

   procedure While_Loop_Set_Loop_Content
     (Id           : W_While_Loop_Unchecked_Id;
      Loop_Content : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.WL_Loop_Content := Loop_Content;
      Set_Node (Id, Node);
   end While_Loop_Set_Loop_Content;

   ---------------------------------------
   -- Statement_Sequence_Set_Statements --
   ---------------------------------------

   procedure Statement_Sequence_Set_Statements
     (Id         : W_Statement_Sequence_Unchecked_Id;
      Statements : W_Prog_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.SS_Statements := Statements;
      Set_Node (Id, Node);
   end Statement_Sequence_Set_Statements;

   --------------------
   -- Label_Set_Name --
   --------------------

   procedure Label_Set_Name
     (Id   : W_Label_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.L_Name := Name;
      Set_Node (Id, Node);
   end Label_Set_Name;

   -------------------
   -- Label_Set_Def --
   -------------------

   procedure Label_Set_Def
     (Id  : W_Label_Unchecked_Id;
      Def : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.L_Def := Def;
      Set_Node (Id, Node);
   end Label_Set_Def;

   ---------------------------
   -- Assert_Set_Assertions --
   ---------------------------

   procedure Assert_Set_Assertions
     (Id         : W_Assert_Unchecked_Id;
      Assertions : W_Assertion_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AS_Assertions := Assertions;
      Set_Node (Id, Node);
   end Assert_Set_Assertions;

   ---------------------
   -- Assert_Set_Prog --
   ---------------------

   procedure Assert_Set_Prog
     (Id   : W_Assert_Unchecked_Id;
      Prog : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.AS_Prog := Prog;
      Set_Node (Id, Node);
   end Assert_Set_Prog;

   -----------------------------
   -- Post_Assertion_Set_Prog --
   -----------------------------

   procedure Post_Assertion_Set_Prog
     (Id   : W_Post_Assertion_Unchecked_Id;
      Prog : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PA_Prog := Prog;
      Set_Node (Id, Node);
   end Post_Assertion_Set_Prog;

   -----------------------------
   -- Post_Assertion_Set_Post --
   -----------------------------

   procedure Post_Assertion_Set_Post
     (Id   : W_Post_Assertion_Unchecked_Id;
      Post : W_Postcondition_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PA_Post := Post;
      Set_Node (Id, Node);
   end Post_Assertion_Set_Post;

   -------------------------------
   -- Opaque_Assertion_Set_Prog --
   -------------------------------

   procedure Opaque_Assertion_Set_Prog
     (Id   : W_Opaque_Assertion_Unchecked_Id;
      Prog : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PA_Prog := Prog;
      Set_Node (Id, Node);
   end Opaque_Assertion_Set_Prog;

   -------------------------------
   -- Opaque_Assertion_Set_Post --
   -------------------------------

   procedure Opaque_Assertion_Set_Post
     (Id   : W_Opaque_Assertion_Unchecked_Id;
      Post : W_Postcondition_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PA_Post := Post;
      Set_Node (Id, Node);
   end Opaque_Assertion_Set_Post;

   -------------------------
   -- Fun_Def_Set_Binders --
   -------------------------

   procedure Fun_Def_Set_Binders
     (Id      : W_Fun_Def_Unchecked_Id;
      Binders : W_Binders_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.FD_Binders := Binders;
      Set_Node (Id, Node);
   end Fun_Def_Set_Binders;

   ---------------------
   -- Fun_Def_Set_Def --
   ---------------------

   procedure Fun_Def_Set_Def
     (Id  : W_Fun_Def_Unchecked_Id;
      Def : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.FD_Def := Def;
      Set_Node (Id, Node);
   end Fun_Def_Set_Def;

   --------------------------
   -- Binding_Fun_Set_Name --
   --------------------------

   procedure Binding_Fun_Set_Name
     (Id   : W_Binding_Fun_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BF_Name := Name;
      Set_Node (Id, Node);
   end Binding_Fun_Set_Name;

   -----------------------------
   -- Binding_Fun_Set_Binders --
   -----------------------------

   procedure Binding_Fun_Set_Binders
     (Id      : W_Binding_Fun_Unchecked_Id;
      Binders : W_Binders_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BF_Binders := Binders;
      Set_Node (Id, Node);
   end Binding_Fun_Set_Binders;

   -------------------------
   -- Binding_Fun_Set_Def --
   -------------------------

   procedure Binding_Fun_Set_Def
     (Id  : W_Binding_Fun_Unchecked_Id;
      Def : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BF_Def := Def;
      Set_Node (Id, Node);
   end Binding_Fun_Set_Def;

   -----------------------------
   -- Binding_Fun_Set_Context --
   -----------------------------

   procedure Binding_Fun_Set_Context
     (Id      : W_Binding_Fun_Unchecked_Id;
      Context : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BF_Context := Context;
      Set_Node (Id, Node);
   end Binding_Fun_Set_Context;

   ----------------------------
   -- Binding_Rec_Set_Recfun --
   ----------------------------

   procedure Binding_Rec_Set_Recfun
     (Id     : W_Binding_Rec_Unchecked_Id;
      Recfun : W_Recfun_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BR_Recfun := Recfun;
      Set_Node (Id, Node);
   end Binding_Rec_Set_Recfun;

   -----------------------------
   -- Binding_Rec_Set_Context --
   -----------------------------

   procedure Binding_Rec_Set_Context
     (Id      : W_Binding_Rec_Unchecked_Id;
      Context : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BR_Context := Context;
      Set_Node (Id, Node);
   end Binding_Rec_Set_Context;

   -----------------------------
   -- Prog_Sequence_Set_Progs --
   -----------------------------

   procedure Prog_Sequence_Set_Progs
     (Id    : W_Prog_Sequence_Unchecked_Id;
      Progs : W_Prog_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PS_Progs := Progs;
      Set_Node (Id, Node);
   end Prog_Sequence_Set_Progs;

   ------------------------------
   -- Raise_Statement_Set_Name --
   ------------------------------

   procedure Raise_Statement_Set_Name
     (Id   : W_Raise_Statement_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RS_Name := Name;
      Set_Node (Id, Node);
   end Raise_Statement_Set_Name;

   ----------------------------------
   -- Raise_Statement_Set_Exn_Type --
   ----------------------------------

   procedure Raise_Statement_Set_Exn_Type
     (Id       : W_Raise_Statement_Unchecked_Id;
      Exn_Type : W_Value_Type_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RS_Exn_Type := Exn_Type;
      Set_Node (Id, Node);
   end Raise_Statement_Set_Exn_Type;

   ----------------------------------------------
   -- Raise_Statement_With_Parameters_Set_Name --
   ----------------------------------------------

   procedure Raise_Statement_With_Parameters_Set_Name
     (Id   : W_Raise_Statement_With_Parameters_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RSWP_Name := Name;
      Set_Node (Id, Node);
   end Raise_Statement_With_Parameters_Set_Name;

   ---------------------------------------------------
   -- Raise_Statement_With_Parameters_Set_Parameter --
   ---------------------------------------------------

   procedure Raise_Statement_With_Parameters_Set_Parameter
     (Id        : W_Raise_Statement_With_Parameters_Unchecked_Id;
      Parameter : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RSWP_Parameter := Parameter;
      Set_Node (Id, Node);
   end Raise_Statement_With_Parameters_Set_Parameter;

   --------------------------------------------------
   -- Raise_Statement_With_Parameters_Set_Exn_Type --
   --------------------------------------------------

   procedure Raise_Statement_With_Parameters_Set_Exn_Type
     (Id       : W_Raise_Statement_With_Parameters_Unchecked_Id;
      Exn_Type : W_Value_Type_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RSWP_Exn_Type := Exn_Type;
      Set_Node (Id, Node);
   end Raise_Statement_With_Parameters_Set_Exn_Type;

   ------------------------
   -- Try_Block_Set_Prog --
   ------------------------

   procedure Try_Block_Set_Prog
     (Id   : W_Try_Block_Unchecked_Id;
      Prog : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.TB_Prog := Prog;
      Set_Node (Id, Node);
   end Try_Block_Set_Prog;

   ---------------------------
   -- Try_Block_Set_Handler --
   ---------------------------

   procedure Try_Block_Set_Handler
     (Id      : W_Try_Block_Unchecked_Id;
      Handler : W_Handler_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.TB_Handler := Handler;
      Set_Node (Id, Node);
   end Try_Block_Set_Handler;

   -----------------------------------
   -- Unreachable_Code_Set_Exn_Type --
   -----------------------------------

   procedure Unreachable_Code_Set_Exn_Type
     (Id       : W_Unreachable_Code_Unchecked_Id;
      Exn_Type : W_Value_Type_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.UC_Exn_Type := Exn_Type;
      Set_Node (Id, Node);
   end Unreachable_Code_Set_Exn_Type;

   --------------------------
   -- Begin_Block_Set_Prog --
   --------------------------

   procedure Begin_Block_Set_Prog
     (Id   : W_Begin_Block_Unchecked_Id;
      Prog : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BB_Prog := Prog;
      Set_Node (Id, Node);
   end Begin_Block_Set_Prog;

   -----------------------------
   -- Protected_Prog_Set_Prog --
   -----------------------------

   procedure Protected_Prog_Set_Prog
     (Id   : W_Protected_Prog_Unchecked_Id;
      Prog : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BB_Prog := Prog;
      Set_Node (Id, Node);
   end Protected_Prog_Set_Prog;

   -------------------------
   -- Binders_Set_Binders --
   -------------------------

   procedure Binders_Set_Binders
     (Id      : W_Binders_Unchecked_Id;
      Binders : W_Binders_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.BS_Binders := Binders;
      Set_Node (Id, Node);
   end Binders_Set_Binders;

   ----------------------
   -- Binder_Set_Names --
   ----------------------

   procedure Binder_Set_Names
     (Id    : W_Binder_Unchecked_Id;
      Names : W_Identifier_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.B_Names := Names;
      Set_Node (Id, Node);
   end Binder_Set_Names;

   -------------------------
   -- Binder_Set_Arg_Type --
   -------------------------

   procedure Binder_Set_Arg_Type
     (Id       : W_Binder_Unchecked_Id;
      Arg_Type : W_Value_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.B_Arg_Type := Arg_Type;
      Set_Node (Id, Node);
   end Binder_Set_Arg_Type;

   ---------------------
   -- Recfun_Set_Name --
   ---------------------

   procedure Recfun_Set_Name
     (Id   : W_Recfun_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RF_Name := Name;
      Set_Node (Id, Node);
   end Recfun_Set_Name;

   ------------------------
   -- Recfun_Set_Binders --
   ------------------------

   procedure Recfun_Set_Binders
     (Id      : W_Recfun_Unchecked_Id;
      Binders : W_Binders_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RF_Binders := Binders;
      Set_Node (Id, Node);
   end Recfun_Set_Binders;

   ----------------------------
   -- Recfun_Set_Return_Type --
   ----------------------------

   procedure Recfun_Set_Return_Type
     (Id          : W_Recfun_Unchecked_Id;
      Return_Type : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RF_Return_Type := Return_Type;
      Set_Node (Id, Node);
   end Recfun_Set_Return_Type;

   ------------------------
   -- Recfun_Set_Variant --
   ------------------------

   procedure Recfun_Set_Variant
     (Id      : W_Recfun_Unchecked_Id;
      Variant : W_Wf_Arg_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RF_Variant := Variant;
      Set_Node (Id, Node);
   end Recfun_Set_Variant;

   --------------------
   -- Recfun_Set_Def --
   --------------------

   procedure Recfun_Set_Def
     (Id  : W_Recfun_Unchecked_Id;
      Def : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.RF_Def := Def;
      Set_Node (Id, Node);
   end Recfun_Set_Def;

   ------------------------------
   -- Loop_Annot_Set_Invariant --
   ------------------------------

   procedure Loop_Annot_Set_Invariant
     (Id        : W_Loop_Annot_Unchecked_Id;
      Invariant : W_Assertion_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.LA_Invariant := Invariant;
      Set_Node (Id, Node);
   end Loop_Annot_Set_Invariant;

   ----------------------------
   -- Loop_Annot_Set_Variant --
   ----------------------------

   procedure Loop_Annot_Set_Variant
     (Id      : W_Loop_Annot_Unchecked_Id;
      Variant : W_Wf_Arg_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.LA_Variant := Variant;
      Set_Node (Id, Node);
   end Loop_Annot_Set_Variant;

   --------------------
   -- Wf_Arg_Set_Def --
   --------------------

   procedure Wf_Arg_Set_Def
     (Id  : W_Wf_Arg_Unchecked_Id;
      Def : W_Term_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.WA_Def := Def;
      Set_Node (Id, Node);
   end Wf_Arg_Set_Def;

   -----------------------
   -- Wf_Arg_Set_For_Id --
   -----------------------

   procedure Wf_Arg_Set_For_Id
     (Id     : W_Wf_Arg_Unchecked_Id;
      For_Id : W_Identifier_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.WA_For_Id := For_Id;
      Set_Node (Id, Node);
   end Wf_Arg_Set_For_Id;

   ----------------------
   -- Handler_Set_Name --
   ----------------------

   procedure Handler_Set_Name
     (Id   : W_Handler_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.H_Name := Name;
      Set_Node (Id, Node);
   end Handler_Set_Name;

   ---------------------------
   -- Handler_Set_Parameter --
   ---------------------------

   procedure Handler_Set_Parameter
     (Id        : W_Handler_Unchecked_Id;
      Parameter : W_Prog_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.H_Parameter := Parameter;
      Set_Node (Id, Node);
   end Handler_Set_Parameter;

   ---------------------
   -- Handler_Set_Def --
   ---------------------

   procedure Handler_Set_Def
     (Id  : W_Handler_Unchecked_Id;
      Def : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.H_Def := Def;
      Set_Node (Id, Node);
   end Handler_Set_Def;

   ---------------------------
   -- File_Set_Declarations --
   ---------------------------

   procedure File_Set_Declarations
     (Id           : W_File_Unchecked_Id;
      Declarations : W_Declaration_Unchecked_OList)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.F_Declarations := Declarations;
      Set_Node (Id, Node);
   end File_Set_Declarations;

   -----------------------------
   -- Global_Binding_Set_Name --
   -----------------------------

   procedure Global_Binding_Set_Name
     (Id   : W_Global_Binding_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.GB_Name := Name;
      Set_Node (Id, Node);
   end Global_Binding_Set_Name;

   --------------------------------
   -- Global_Binding_Set_Binders --
   --------------------------------

   procedure Global_Binding_Set_Binders
     (Id      : W_Global_Binding_Unchecked_Id;
      Binders : W_Binders_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.GB_Binders := Binders;
      Set_Node (Id, Node);
   end Global_Binding_Set_Binders;

   ----------------------------
   -- Global_Binding_Set_Def --
   ----------------------------

   procedure Global_Binding_Set_Def
     (Id  : W_Global_Binding_Unchecked_Id;
      Def : W_Prog_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.GB_Def := Def;
      Set_Node (Id, Node);
   end Global_Binding_Set_Def;

   ---------------------------------
   -- Global_Rec_Binding_Set_Name --
   ---------------------------------

   procedure Global_Rec_Binding_Set_Name
     (Id   : W_Global_Rec_Binding_Unchecked_Id;
      Name : W_Recfun_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.GRB_Name := Name;
      Set_Node (Id, Node);
   end Global_Rec_Binding_Set_Name;

   ----------------------------------------
   -- Parameter_Declaration_Set_External --
   ----------------------------------------

   procedure Parameter_Declaration_Set_External
     (Id       : W_Parameter_Declaration_Unchecked_Id;
      External : W_External_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PD_External := External;
      Set_Node (Id, Node);
   end Parameter_Declaration_Set_External;

   -------------------------------------
   -- Parameter_Declaration_Set_Names --
   -------------------------------------

   procedure Parameter_Declaration_Set_Names
     (Id    : W_Parameter_Declaration_Unchecked_Id;
      Names : W_Identifier_Unchecked_List)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PD_Names := Names;
      Set_Node (Id, Node);
   end Parameter_Declaration_Set_Names;

   ----------------------------------------------
   -- Parameter_Declaration_Set_Parameter_Type --
   ----------------------------------------------

   procedure Parameter_Declaration_Set_Parameter_Type
     (Id             : W_Parameter_Declaration_Unchecked_Id;
      Parameter_Type : W_Value_Type_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.PD_Parameter_Type := Parameter_Type;
      Set_Node (Id, Node);
   end Parameter_Declaration_Set_Parameter_Type;

   ------------------------------------
   -- Exception_Declaration_Set_Name --
   ------------------------------------

   procedure Exception_Declaration_Set_Name
     (Id   : W_Exception_Declaration_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.ED_Name := Name;
      Set_Node (Id, Node);
   end Exception_Declaration_Set_Name;

   -----------------------------------------
   -- Exception_Declaration_Set_Parameter --
   -----------------------------------------

   procedure Exception_Declaration_Set_Parameter
     (Id        : W_Exception_Declaration_Unchecked_Id;
      Parameter : W_Primitive_Type_Unchecked_OId)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.ED_Parameter := Parameter;
      Set_Node (Id, Node);
   end Exception_Declaration_Set_Parameter;

   --------------------------------
   -- Logic_Declaration_Set_Decl --
   --------------------------------

   procedure Logic_Declaration_Set_Decl
     (Id   : W_Logic_Declaration_Unchecked_Id;
      Decl : W_Logic_Unchecked_Id)
   is
      Node : Why_Node := Get_Node (Id);
   begin
      Node.LD_Decl := Decl;
      Set_Node (Id, Node);
   end Logic_Declaration_Set_Decl;

end Why.Atree.Mutators;
