------------------------------------------------------------------------------
--                                                                          --
--                            GNAT2WHY COMPONENTS                           --
--                                                                          --
--                   W H Y - A T R E E - M U T A T O R S                    --
--                                                                          --
--                                 B o d y                                  --
--                                                                          --
--                       Copyright (C) 2010-2011, AdaCore                   --
--                                                                          --
-- gnat2why is  free  software;  you can redistribute it and/or modify it   --
-- under terms of the  GNU General Public License as published  by the Free --
-- Software Foundation;  either version  2,  or  (at your option) any later --
-- version. gnat2why is distributed in the hope that it will  be  useful,   --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-  --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License  for more details. You  should  have  received a copy of the GNU --
-- General Public License  distributed with GNAT; see file COPYING. If not, --
-- write to the Free Software Foundation,  51 Franklin Street, Fifth Floor, --
-- Boston,                                                                  --
--                                                                          --
-- gnat2why is maintained by AdaCore (http://www.adacore.com)               --
--                                                                          --
------------------------------------------------------------------------------
--  This package is automatically generated by xtree. Do not edit manually.

with Why.Atree.Tables;   use Why.Atree.Tables;
with Why.Atree.Validity; use Why.Atree.Validity;

package body Why.Atree.Mutators is

   ------------------
   -- Set_Ada_Node --
   ------------------

   procedure Set_Ada_Node
     (Id       : Why_Node_Id;
      Ada_Node : Node_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.Ada_Node := Ada_Node;
      Set_Node (+Id, Node);
   end Set_Ada_Node;

   ---------------------------
   -- Identifier_Set_Symbol --
   ---------------------------

   procedure Identifier_Set_Symbol
     (Id     : W_Identifier_Unchecked_Id;
      Symbol : Name_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.Symbol := Symbol;
      Set_Node (+Id, Node);
   end Identifier_Set_Symbol;

   ---------------------------
   -- Identifier_Set_Symbol --
   ---------------------------

   procedure Identifier_Set_Symbol
     (Id     : W_Identifier_Id;
      Symbol : Name_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.Symbol := Symbol;
      Set_Node (+Id, Node);
   end Identifier_Set_Symbol;

   ---------------------------
   -- Identifier_Set_Entity --
   ---------------------------

   procedure Identifier_Set_Entity
     (Id     : W_Identifier_Unchecked_Id;
      Entity : Why_Node_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.Entity := Entity;
      Set_Node (+Id, Node);
   end Identifier_Set_Entity;

   ---------------------------
   -- Identifier_Set_Entity --
   ---------------------------

   procedure Identifier_Set_Entity
     (Id     : W_Identifier_Id;
      Entity : Why_Node_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.Entity := Entity;
      Set_Node (+Id, Node);
   end Identifier_Set_Entity;

   ----------------------------
   -- Abstract_Type_Set_Name --
   ----------------------------

   procedure Abstract_Type_Set_Name
     (Id   : W_Abstract_Type_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AT_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Abstract_Type_Id_Valid (Why_Node_Id (Id)));
   end Abstract_Type_Set_Name;

   ----------------------------
   -- Abstract_Type_Set_Name --
   ----------------------------

   procedure Abstract_Type_Set_Name
     (Id   : W_Abstract_Type_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AT_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Abstract_Type_Id_Valid (Why_Node_Id (Id)));
   end Abstract_Type_Set_Name;

   ----------------------------------
   -- Generic_Formal_Type_Set_Name --
   ----------------------------------

   procedure Generic_Formal_Type_Set_Name
     (Id   : W_Generic_Formal_Type_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GFT_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Generic_Formal_Type_Id_Valid (Why_Node_Id (Id)));
   end Generic_Formal_Type_Set_Name;

   ----------------------------------
   -- Generic_Formal_Type_Set_Name --
   ----------------------------------

   procedure Generic_Formal_Type_Set_Name
     (Id   : W_Generic_Formal_Type_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GFT_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Generic_Formal_Type_Id_Valid (Why_Node_Id (Id)));
   end Generic_Formal_Type_Set_Name;

   ----------------------------------------------------
   -- Generic_Actual_Type_Chain_Append_To_Type_Chain --
   ----------------------------------------------------

   procedure Generic_Actual_Type_Chain_Append_To_Type_Chain
     (Id       : W_Generic_Actual_Type_Chain_Unchecked_Id;
      New_Item : W_Primitive_Type_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.GATC_Type_Chain, +New_Item);
      Update_Validity_Status
        (+Id,
         Generic_Actual_Type_Chain_Id_Valid (Why_Node_Id (Id)));
   end Generic_Actual_Type_Chain_Append_To_Type_Chain;

   -----------------------------------------------------
   -- Generic_Actual_Type_Chain_Prepend_To_Type_Chain --
   -----------------------------------------------------

   procedure Generic_Actual_Type_Chain_Prepend_To_Type_Chain
     (Id       : W_Generic_Actual_Type_Chain_Unchecked_Id;
      New_Item : W_Primitive_Type_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.GATC_Type_Chain, +New_Item);
      Update_Validity_Status
        (+Id,
         Generic_Actual_Type_Chain_Id_Valid (Why_Node_Id (Id)));
   end Generic_Actual_Type_Chain_Prepend_To_Type_Chain;

   ----------------------------------------------------
   -- Generic_Actual_Type_Chain_Append_To_Type_Chain --
   ----------------------------------------------------

   procedure Generic_Actual_Type_Chain_Append_To_Type_Chain
     (Id       : W_Generic_Actual_Type_Chain_Id;
      New_Item : W_Primitive_Type_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.GATC_Type_Chain, +New_Item);
      Update_Validity_Status
        (+Id,
         Generic_Actual_Type_Chain_Id_Valid (Why_Node_Id (Id)));
   end Generic_Actual_Type_Chain_Append_To_Type_Chain;

   -----------------------------------------------------
   -- Generic_Actual_Type_Chain_Prepend_To_Type_Chain --
   -----------------------------------------------------

   procedure Generic_Actual_Type_Chain_Prepend_To_Type_Chain
     (Id       : W_Generic_Actual_Type_Chain_Id;
      New_Item : W_Primitive_Type_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.GATC_Type_Chain, +New_Item);
      Update_Validity_Status
        (+Id,
         Generic_Actual_Type_Chain_Id_Valid (Why_Node_Id (Id)));
   end Generic_Actual_Type_Chain_Prepend_To_Type_Chain;

   ----------------------------------------
   -- Generic_Actual_Type_Chain_Set_Name --
   ----------------------------------------

   procedure Generic_Actual_Type_Chain_Set_Name
     (Id   : W_Generic_Actual_Type_Chain_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GATC_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Generic_Actual_Type_Chain_Id_Valid (Why_Node_Id (Id)));
   end Generic_Actual_Type_Chain_Set_Name;

   ----------------------------------------
   -- Generic_Actual_Type_Chain_Set_Name --
   ----------------------------------------

   procedure Generic_Actual_Type_Chain_Set_Name
     (Id   : W_Generic_Actual_Type_Chain_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GATC_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Generic_Actual_Type_Chain_Id_Valid (Why_Node_Id (Id)));
   end Generic_Actual_Type_Chain_Set_Name;

   -----------------------------------
   -- Array_Type_Set_Component_Type --
   -----------------------------------

   procedure Array_Type_Set_Component_Type
     (Id             : W_Array_Type_Unchecked_Id;
      Component_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AT_Component_Type := +Component_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Component_Type), +Id);
      Update_Validity_Status
        (+Id,
         Array_Type_Id_Valid (Why_Node_Id (Id)));
   end Array_Type_Set_Component_Type;

   -----------------------------------
   -- Array_Type_Set_Component_Type --
   -----------------------------------

   procedure Array_Type_Set_Component_Type
     (Id             : W_Array_Type_Id;
      Component_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AT_Component_Type := +Component_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Component_Type), +Id);
      Update_Validity_Status
        (+Id,
         Array_Type_Id_Valid (Why_Node_Id (Id)));
   end Array_Type_Set_Component_Type;

   -------------------------------
   -- Ref_Type_Set_Aliased_Type --
   -------------------------------

   procedure Ref_Type_Set_Aliased_Type
     (Id           : W_Ref_Type_Unchecked_Id;
      Aliased_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RT_Aliased_Type := +Aliased_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Aliased_Type), +Id);
      Update_Validity_Status
        (+Id,
         Ref_Type_Id_Valid (Why_Node_Id (Id)));
   end Ref_Type_Set_Aliased_Type;

   -------------------------------
   -- Ref_Type_Set_Aliased_Type --
   -------------------------------

   procedure Ref_Type_Set_Aliased_Type
     (Id           : W_Ref_Type_Id;
      Aliased_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RT_Aliased_Type := +Aliased_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Aliased_Type), +Id);
      Update_Validity_Status
        (+Id,
         Ref_Type_Id_Valid (Why_Node_Id (Id)));
   end Ref_Type_Set_Aliased_Type;

   ----------------------------------------
   -- Computation_Type_Append_To_Binders --
   ----------------------------------------

   procedure Computation_Type_Append_To_Binders
     (Id       : W_Computation_Type_Unchecked_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.CS_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Computation_Type_Id_Valid (Why_Node_Id (Id)));
   end Computation_Type_Append_To_Binders;

   -----------------------------------------
   -- Computation_Type_Prepend_To_Binders --
   -----------------------------------------

   procedure Computation_Type_Prepend_To_Binders
     (Id       : W_Computation_Type_Unchecked_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.CS_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Computation_Type_Id_Valid (Why_Node_Id (Id)));
   end Computation_Type_Prepend_To_Binders;

   ----------------------------------------
   -- Computation_Type_Append_To_Binders --
   ----------------------------------------

   procedure Computation_Type_Append_To_Binders
     (Id       : W_Computation_Type_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.CS_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Computation_Type_Id_Valid (Why_Node_Id (Id)));
   end Computation_Type_Append_To_Binders;

   -----------------------------------------
   -- Computation_Type_Prepend_To_Binders --
   -----------------------------------------

   procedure Computation_Type_Prepend_To_Binders
     (Id       : W_Computation_Type_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.CS_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Computation_Type_Id_Valid (Why_Node_Id (Id)));
   end Computation_Type_Prepend_To_Binders;

   ---------------------------------------
   -- Computation_Type_Set_Precondition --
   ---------------------------------------

   procedure Computation_Type_Set_Precondition
     (Id           : W_Computation_Type_Unchecked_Id;
      Precondition : W_Predicate_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CS_Precondition := +Precondition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Precondition), +Id);
      Update_Validity_Status
        (+Id,
         Computation_Type_Id_Valid (Why_Node_Id (Id)));
   end Computation_Type_Set_Precondition;

   ---------------------------------------
   -- Computation_Type_Set_Precondition --
   ---------------------------------------

   procedure Computation_Type_Set_Precondition
     (Id           : W_Computation_Type_Id;
      Precondition : W_Predicate_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CS_Precondition := +Precondition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Precondition), +Id);
      Update_Validity_Status
        (+Id,
         Computation_Type_Id_Valid (Why_Node_Id (Id)));
   end Computation_Type_Set_Precondition;

   --------------------------------------
   -- Computation_Type_Set_Result_Name --
   --------------------------------------

   procedure Computation_Type_Set_Result_Name
     (Id          : W_Computation_Type_Unchecked_Id;
      Result_Name : W_Identifier_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CS_Result_Name := +Result_Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Result_Name), +Id);
      Update_Validity_Status
        (+Id,
         Computation_Type_Id_Valid (Why_Node_Id (Id)));
   end Computation_Type_Set_Result_Name;

   --------------------------------------
   -- Computation_Type_Set_Result_Name --
   --------------------------------------

   procedure Computation_Type_Set_Result_Name
     (Id          : W_Computation_Type_Id;
      Result_Name : W_Identifier_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CS_Result_Name := +Result_Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Result_Name), +Id);
      Update_Validity_Status
        (+Id,
         Computation_Type_Id_Valid (Why_Node_Id (Id)));
   end Computation_Type_Set_Result_Name;

   --------------------------------------
   -- Computation_Type_Set_Return_Type --
   --------------------------------------

   procedure Computation_Type_Set_Return_Type
     (Id          : W_Computation_Type_Unchecked_Id;
      Return_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CS_Return_Type := +Return_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Return_Type), +Id);
      Update_Validity_Status
        (+Id,
         Computation_Type_Id_Valid (Why_Node_Id (Id)));
   end Computation_Type_Set_Return_Type;

   --------------------------------------
   -- Computation_Type_Set_Return_Type --
   --------------------------------------

   procedure Computation_Type_Set_Return_Type
     (Id          : W_Computation_Type_Id;
      Return_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CS_Return_Type := +Return_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Return_Type), +Id);
      Update_Validity_Status
        (+Id,
         Computation_Type_Id_Valid (Why_Node_Id (Id)));
   end Computation_Type_Set_Return_Type;

   ----------------------------------
   -- Computation_Type_Set_Effects --
   ----------------------------------

   procedure Computation_Type_Set_Effects
     (Id      : W_Computation_Type_Unchecked_Id;
      Effects : W_Effects_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CS_Effects := +Effects;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Effects), +Id);
      Update_Validity_Status
        (+Id,
         Computation_Type_Id_Valid (Why_Node_Id (Id)));
   end Computation_Type_Set_Effects;

   ----------------------------------
   -- Computation_Type_Set_Effects --
   ----------------------------------

   procedure Computation_Type_Set_Effects
     (Id      : W_Computation_Type_Id;
      Effects : W_Effects_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CS_Effects := +Effects;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Effects), +Id);
      Update_Validity_Status
        (+Id,
         Computation_Type_Id_Valid (Why_Node_Id (Id)));
   end Computation_Type_Set_Effects;

   ----------------------------------------
   -- Computation_Type_Set_Postcondition --
   ----------------------------------------

   procedure Computation_Type_Set_Postcondition
     (Id            : W_Computation_Type_Unchecked_Id;
      Postcondition : W_Postcondition_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CS_Postcondition := +Postcondition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Postcondition), +Id);
      Update_Validity_Status
        (+Id,
         Computation_Type_Id_Valid (Why_Node_Id (Id)));
   end Computation_Type_Set_Postcondition;

   ----------------------------------------
   -- Computation_Type_Set_Postcondition --
   ----------------------------------------

   procedure Computation_Type_Set_Postcondition
     (Id            : W_Computation_Type_Id;
      Postcondition : W_Postcondition_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CS_Postcondition := +Postcondition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Postcondition), +Id);
      Update_Validity_Status
        (+Id,
         Computation_Type_Id_Valid (Why_Node_Id (Id)));
   end Computation_Type_Set_Postcondition;

   --------------------------------
   -- Integer_Constant_Set_Value --
   --------------------------------

   procedure Integer_Constant_Set_Value
     (Id    : W_Integer_Constant_Unchecked_Id;
      Value : Uint)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.IC_Value := Value;
      Set_Node (+Id, Node);
   end Integer_Constant_Set_Value;

   --------------------------------
   -- Integer_Constant_Set_Value --
   --------------------------------

   procedure Integer_Constant_Set_Value
     (Id    : W_Integer_Constant_Id;
      Value : Uint)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.IC_Value := Value;
      Set_Node (+Id, Node);
   end Integer_Constant_Set_Value;

   -----------------------------
   -- Real_Constant_Set_Value --
   -----------------------------

   procedure Real_Constant_Set_Value
     (Id    : W_Real_Constant_Unchecked_Id;
      Value : Ureal)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RC_Value := Value;
      Set_Node (+Id, Node);
   end Real_Constant_Set_Value;

   -----------------------------
   -- Real_Constant_Set_Value --
   -----------------------------

   procedure Real_Constant_Set_Value
     (Id    : W_Real_Constant_Id;
      Value : Ureal)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RC_Value := Value;
      Set_Node (+Id, Node);
   end Real_Constant_Set_Value;

   ------------------------------
   -- Arith_Operation_Set_Left --
   ------------------------------

   procedure Arith_Operation_Set_Left
     (Id   : W_Arith_Operation_Unchecked_Id;
      Left : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AO_Left := +Left;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Left), +Id);
      Update_Validity_Status
        (+Id,
         Arith_Operation_Id_Valid (Why_Node_Id (Id)));
   end Arith_Operation_Set_Left;

   ------------------------------
   -- Arith_Operation_Set_Left --
   ------------------------------

   procedure Arith_Operation_Set_Left
     (Id   : W_Arith_Operation_Id;
      Left : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AO_Left := +Left;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Left), +Id);
      Update_Validity_Status
        (+Id,
         Arith_Operation_Id_Valid (Why_Node_Id (Id)));
   end Arith_Operation_Set_Left;

   ----------------------------
   -- Arith_Operation_Set_Op --
   ----------------------------

   procedure Arith_Operation_Set_Op
     (Id : W_Arith_Operation_Unchecked_Id;
      Op : W_Arith_Op_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AO_Op := +Op;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Op), +Id);
      Update_Validity_Status
        (+Id,
         Arith_Operation_Id_Valid (Why_Node_Id (Id)));
   end Arith_Operation_Set_Op;

   ----------------------------
   -- Arith_Operation_Set_Op --
   ----------------------------

   procedure Arith_Operation_Set_Op
     (Id : W_Arith_Operation_Id;
      Op : W_Arith_Op_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AO_Op := +Op;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Op), +Id);
      Update_Validity_Status
        (+Id,
         Arith_Operation_Id_Valid (Why_Node_Id (Id)));
   end Arith_Operation_Set_Op;

   -------------------------------
   -- Arith_Operation_Set_Right --
   -------------------------------

   procedure Arith_Operation_Set_Right
     (Id    : W_Arith_Operation_Unchecked_Id;
      Right : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AO_Right := +Right;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right), +Id);
      Update_Validity_Status
        (+Id,
         Arith_Operation_Id_Valid (Why_Node_Id (Id)));
   end Arith_Operation_Set_Right;

   -------------------------------
   -- Arith_Operation_Set_Right --
   -------------------------------

   procedure Arith_Operation_Set_Right
     (Id    : W_Arith_Operation_Id;
      Right : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AO_Right := +Right;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right), +Id);
      Update_Validity_Status
        (+Id,
         Arith_Operation_Id_Valid (Why_Node_Id (Id)));
   end Arith_Operation_Set_Right;

   -------------------------------
   -- Negative_Term_Set_Operand --
   -------------------------------

   procedure Negative_Term_Set_Operand
     (Id      : W_Negative_Term_Unchecked_Id;
      Operand : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.NT_Operand := +Operand;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Operand), +Id);
      Update_Validity_Status
        (+Id,
         Negative_Term_Id_Valid (Why_Node_Id (Id)));
   end Negative_Term_Set_Operand;

   -------------------------------
   -- Negative_Term_Set_Operand --
   -------------------------------

   procedure Negative_Term_Set_Operand
     (Id      : W_Negative_Term_Id;
      Operand : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.NT_Operand := +Operand;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Operand), +Id);
      Update_Validity_Status
        (+Id,
         Negative_Term_Id_Valid (Why_Node_Id (Id)));
   end Negative_Term_Set_Operand;

   ------------------------------
   -- Term_Identifier_Set_Name --
   ------------------------------

   procedure Term_Identifier_Set_Name
     (Id   : W_Term_Identifier_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.TIL_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Term_Identifier_Id_Valid (Why_Node_Id (Id)));
   end Term_Identifier_Set_Name;

   ------------------------------
   -- Term_Identifier_Set_Name --
   ------------------------------

   procedure Term_Identifier_Set_Name
     (Id   : W_Term_Identifier_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.TIL_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Term_Identifier_Id_Valid (Why_Node_Id (Id)));
   end Term_Identifier_Set_Name;

   -------------------------------
   -- Term_Identifier_Set_Label --
   -------------------------------

   procedure Term_Identifier_Set_Label
     (Id    : W_Term_Identifier_Unchecked_Id;
      Label : W_Identifier_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.TIL_Label := +Label;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Label), +Id);
      Update_Validity_Status
        (+Id,
         Term_Identifier_Id_Valid (Why_Node_Id (Id)));
   end Term_Identifier_Set_Label;

   -------------------------------
   -- Term_Identifier_Set_Label --
   -------------------------------

   procedure Term_Identifier_Set_Label
     (Id    : W_Term_Identifier_Id;
      Label : W_Identifier_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.TIL_Label := +Label;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Label), +Id);
      Update_Validity_Status
        (+Id,
         Term_Identifier_Id_Valid (Why_Node_Id (Id)));
   end Term_Identifier_Set_Label;

   ------------------------
   -- Operation_Set_Name --
   ------------------------

   procedure Operation_Set_Name
     (Id   : W_Operation_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.O_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Operation_Id_Valid (Why_Node_Id (Id)));
   end Operation_Set_Name;

   ------------------------
   -- Operation_Set_Name --
   ------------------------

   procedure Operation_Set_Name
     (Id   : W_Operation_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.O_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Operation_Id_Valid (Why_Node_Id (Id)));
   end Operation_Set_Name;

   ------------------------------------
   -- Operation_Append_To_Parameters --
   ------------------------------------

   procedure Operation_Append_To_Parameters
     (Id       : W_Operation_Unchecked_Id;
      New_Item : W_Term_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.O_Parameters, +New_Item);
      Update_Validity_Status
        (+Id,
         Operation_Id_Valid (Why_Node_Id (Id)));
   end Operation_Append_To_Parameters;

   -------------------------------------
   -- Operation_Prepend_To_Parameters --
   -------------------------------------

   procedure Operation_Prepend_To_Parameters
     (Id       : W_Operation_Unchecked_Id;
      New_Item : W_Term_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.O_Parameters, +New_Item);
      Update_Validity_Status
        (+Id,
         Operation_Id_Valid (Why_Node_Id (Id)));
   end Operation_Prepend_To_Parameters;

   ------------------------------------
   -- Operation_Append_To_Parameters --
   ------------------------------------

   procedure Operation_Append_To_Parameters
     (Id       : W_Operation_Id;
      New_Item : W_Term_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.O_Parameters, +New_Item);
      Update_Validity_Status
        (+Id,
         Operation_Id_Valid (Why_Node_Id (Id)));
   end Operation_Append_To_Parameters;

   -------------------------------------
   -- Operation_Prepend_To_Parameters --
   -------------------------------------

   procedure Operation_Prepend_To_Parameters
     (Id       : W_Operation_Id;
      New_Item : W_Term_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.O_Parameters, +New_Item);
      Update_Validity_Status
        (+Id,
         Operation_Id_Valid (Why_Node_Id (Id)));
   end Operation_Prepend_To_Parameters;

   -------------------------
   -- Named_Term_Set_Name --
   -------------------------

   procedure Named_Term_Set_Name
     (Id   : W_Named_Term_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.NT_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Named_Term_Id_Valid (Why_Node_Id (Id)));
   end Named_Term_Set_Name;

   -------------------------
   -- Named_Term_Set_Name --
   -------------------------

   procedure Named_Term_Set_Name
     (Id   : W_Named_Term_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.NT_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Named_Term_Id_Valid (Why_Node_Id (Id)));
   end Named_Term_Set_Name;

   -------------------------
   -- Named_Term_Set_Term --
   -------------------------

   procedure Named_Term_Set_Term
     (Id   : W_Named_Term_Unchecked_Id;
      Term : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.NT_Term := +Term;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Term), +Id);
      Update_Validity_Status
        (+Id,
         Named_Term_Id_Valid (Why_Node_Id (Id)));
   end Named_Term_Set_Term;

   -------------------------
   -- Named_Term_Set_Term --
   -------------------------

   procedure Named_Term_Set_Term
     (Id   : W_Named_Term_Id;
      Term : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.NT_Term := +Term;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Term), +Id);
      Update_Validity_Status
        (+Id,
         Named_Term_Id_Valid (Why_Node_Id (Id)));
   end Named_Term_Set_Term;

   ------------------------------------
   -- Conditional_Term_Set_Condition --
   ------------------------------------

   procedure Conditional_Term_Set_Condition
     (Id        : W_Conditional_Term_Unchecked_Id;
      Condition : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CT_Condition := +Condition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Condition), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Term_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Term_Set_Condition;

   ------------------------------------
   -- Conditional_Term_Set_Condition --
   ------------------------------------

   procedure Conditional_Term_Set_Condition
     (Id        : W_Conditional_Term_Id;
      Condition : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CT_Condition := +Condition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Condition), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Term_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Term_Set_Condition;

   ------------------------------------
   -- Conditional_Term_Set_Then_Part --
   ------------------------------------

   procedure Conditional_Term_Set_Then_Part
     (Id        : W_Conditional_Term_Unchecked_Id;
      Then_Part : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CT_Then_Part := +Then_Part;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Then_Part), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Term_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Term_Set_Then_Part;

   ------------------------------------
   -- Conditional_Term_Set_Then_Part --
   ------------------------------------

   procedure Conditional_Term_Set_Then_Part
     (Id        : W_Conditional_Term_Id;
      Then_Part : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CT_Then_Part := +Then_Part;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Then_Part), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Term_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Term_Set_Then_Part;

   ------------------------------------
   -- Conditional_Term_Set_Else_Part --
   ------------------------------------

   procedure Conditional_Term_Set_Else_Part
     (Id        : W_Conditional_Term_Unchecked_Id;
      Else_Part : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CT_Else_Part := +Else_Part;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Else_Part), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Term_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Term_Set_Else_Part;

   ------------------------------------
   -- Conditional_Term_Set_Else_Part --
   ------------------------------------

   procedure Conditional_Term_Set_Else_Part
     (Id        : W_Conditional_Term_Id;
      Else_Part : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CT_Else_Part := +Else_Part;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Else_Part), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Term_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Term_Set_Else_Part;

   ----------------------------
   -- Matching_Term_Set_Term --
   ----------------------------

   procedure Matching_Term_Set_Term
     (Id   : W_Matching_Term_Unchecked_Id;
      Term : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.MT_Term := +Term;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Term), +Id);
      Update_Validity_Status
        (+Id,
         Matching_Term_Id_Valid (Why_Node_Id (Id)));
   end Matching_Term_Set_Term;

   ----------------------------
   -- Matching_Term_Set_Term --
   ----------------------------

   procedure Matching_Term_Set_Term
     (Id   : W_Matching_Term_Id;
      Term : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.MT_Term := +Term;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Term), +Id);
      Update_Validity_Status
        (+Id,
         Matching_Term_Id_Valid (Why_Node_Id (Id)));
   end Matching_Term_Set_Term;

   --------------------------------------
   -- Matching_Term_Append_To_Branches --
   --------------------------------------

   procedure Matching_Term_Append_To_Branches
     (Id       : W_Matching_Term_Unchecked_Id;
      New_Item : W_Match_Case_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.MT_Branches, +New_Item);
      Update_Validity_Status
        (+Id,
         Matching_Term_Id_Valid (Why_Node_Id (Id)));
   end Matching_Term_Append_To_Branches;

   ---------------------------------------
   -- Matching_Term_Prepend_To_Branches --
   ---------------------------------------

   procedure Matching_Term_Prepend_To_Branches
     (Id       : W_Matching_Term_Unchecked_Id;
      New_Item : W_Match_Case_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.MT_Branches, +New_Item);
      Update_Validity_Status
        (+Id,
         Matching_Term_Id_Valid (Why_Node_Id (Id)));
   end Matching_Term_Prepend_To_Branches;

   --------------------------------------
   -- Matching_Term_Append_To_Branches --
   --------------------------------------

   procedure Matching_Term_Append_To_Branches
     (Id       : W_Matching_Term_Id;
      New_Item : W_Match_Case_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.MT_Branches, +New_Item);
      Update_Validity_Status
        (+Id,
         Matching_Term_Id_Valid (Why_Node_Id (Id)));
   end Matching_Term_Append_To_Branches;

   ---------------------------------------
   -- Matching_Term_Prepend_To_Branches --
   ---------------------------------------

   procedure Matching_Term_Prepend_To_Branches
     (Id       : W_Matching_Term_Id;
      New_Item : W_Match_Case_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.MT_Branches, +New_Item);
      Update_Validity_Status
        (+Id,
         Matching_Term_Id_Valid (Why_Node_Id (Id)));
   end Matching_Term_Prepend_To_Branches;

   ---------------------------
   -- Binding_Term_Set_Name --
   ---------------------------

   procedure Binding_Term_Set_Name
     (Id   : W_Binding_Term_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BT_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Term_Id_Valid (Why_Node_Id (Id)));
   end Binding_Term_Set_Name;

   ---------------------------
   -- Binding_Term_Set_Name --
   ---------------------------

   procedure Binding_Term_Set_Name
     (Id   : W_Binding_Term_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BT_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Term_Id_Valid (Why_Node_Id (Id)));
   end Binding_Term_Set_Name;

   --------------------------
   -- Binding_Term_Set_Def --
   --------------------------

   procedure Binding_Term_Set_Def
     (Id  : W_Binding_Term_Unchecked_Id;
      Def : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BT_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Term_Id_Valid (Why_Node_Id (Id)));
   end Binding_Term_Set_Def;

   --------------------------
   -- Binding_Term_Set_Def --
   --------------------------

   procedure Binding_Term_Set_Def
     (Id  : W_Binding_Term_Id;
      Def : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BT_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Term_Id_Valid (Why_Node_Id (Id)));
   end Binding_Term_Set_Def;

   ------------------------------
   -- Binding_Term_Set_Context --
   ------------------------------

   procedure Binding_Term_Set_Context
     (Id      : W_Binding_Term_Unchecked_Id;
      Context : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BT_Context := +Context;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Context), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Term_Id_Valid (Why_Node_Id (Id)));
   end Binding_Term_Set_Context;

   ------------------------------
   -- Binding_Term_Set_Context --
   ------------------------------

   procedure Binding_Term_Set_Context
     (Id      : W_Binding_Term_Id;
      Context : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BT_Context := +Context;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Context), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Term_Id_Valid (Why_Node_Id (Id)));
   end Binding_Term_Set_Context;

   -----------------------------
   -- Protected_Term_Set_Term --
   -----------------------------

   procedure Protected_Term_Set_Term
     (Id   : W_Protected_Term_Unchecked_Id;
      Term : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BT_Term := +Term;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Term), +Id);
      Update_Validity_Status
        (+Id,
         Protected_Term_Id_Valid (Why_Node_Id (Id)));
   end Protected_Term_Set_Term;

   -----------------------------
   -- Protected_Term_Set_Term --
   -----------------------------

   procedure Protected_Term_Set_Term
     (Id   : W_Protected_Term_Id;
      Term : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BT_Term := +Term;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Term), +Id);
      Update_Validity_Status
        (+Id,
         Protected_Term_Id_Valid (Why_Node_Id (Id)));
   end Protected_Term_Set_Term;

   -----------------------------------
   -- Predicate_Identifier_Set_Name --
   -----------------------------------

   procedure Predicate_Identifier_Set_Name
     (Id   : W_Predicate_Identifier_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PID_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Predicate_Identifier_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Identifier_Set_Name;

   -----------------------------------
   -- Predicate_Identifier_Set_Name --
   -----------------------------------

   procedure Predicate_Identifier_Set_Name
     (Id   : W_Predicate_Identifier_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PID_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Predicate_Identifier_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Identifier_Set_Name;

   ---------------------------------
   -- Predicate_Instance_Set_Name --
   ---------------------------------

   procedure Predicate_Instance_Set_Name
     (Id   : W_Predicate_Instance_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PIN_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Predicate_Instance_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Instance_Set_Name;

   ---------------------------------
   -- Predicate_Instance_Set_Name --
   ---------------------------------

   procedure Predicate_Instance_Set_Name
     (Id   : W_Predicate_Instance_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PIN_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Predicate_Instance_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Instance_Set_Name;

   ---------------------------------------------
   -- Predicate_Instance_Append_To_Parameters --
   ---------------------------------------------

   procedure Predicate_Instance_Append_To_Parameters
     (Id       : W_Predicate_Instance_Unchecked_Id;
      New_Item : W_Term_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.PIN_Parameters, +New_Item);
      Update_Validity_Status
        (+Id,
         Predicate_Instance_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Instance_Append_To_Parameters;

   ----------------------------------------------
   -- Predicate_Instance_Prepend_To_Parameters --
   ----------------------------------------------

   procedure Predicate_Instance_Prepend_To_Parameters
     (Id       : W_Predicate_Instance_Unchecked_Id;
      New_Item : W_Term_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.PIN_Parameters, +New_Item);
      Update_Validity_Status
        (+Id,
         Predicate_Instance_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Instance_Prepend_To_Parameters;

   ---------------------------------------------
   -- Predicate_Instance_Append_To_Parameters --
   ---------------------------------------------

   procedure Predicate_Instance_Append_To_Parameters
     (Id       : W_Predicate_Instance_Id;
      New_Item : W_Term_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.PIN_Parameters, +New_Item);
      Update_Validity_Status
        (+Id,
         Predicate_Instance_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Instance_Append_To_Parameters;

   ----------------------------------------------
   -- Predicate_Instance_Prepend_To_Parameters --
   ----------------------------------------------

   procedure Predicate_Instance_Prepend_To_Parameters
     (Id       : W_Predicate_Instance_Id;
      New_Item : W_Term_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.PIN_Parameters, +New_Item);
      Update_Validity_Status
        (+Id,
         Predicate_Instance_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Instance_Prepend_To_Parameters;

   ----------------------------
   -- Related_Terms_Set_Left --
   ----------------------------

   procedure Related_Terms_Set_Left
     (Id   : W_Related_Terms_Unchecked_Id;
      Left : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RT_Left := +Left;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Left), +Id);
      Update_Validity_Status
        (+Id,
         Related_Terms_Id_Valid (Why_Node_Id (Id)));
   end Related_Terms_Set_Left;

   ----------------------------
   -- Related_Terms_Set_Left --
   ----------------------------

   procedure Related_Terms_Set_Left
     (Id   : W_Related_Terms_Id;
      Left : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RT_Left := +Left;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Left), +Id);
      Update_Validity_Status
        (+Id,
         Related_Terms_Id_Valid (Why_Node_Id (Id)));
   end Related_Terms_Set_Left;

   --------------------------
   -- Related_Terms_Set_Op --
   --------------------------

   procedure Related_Terms_Set_Op
     (Id : W_Related_Terms_Unchecked_Id;
      Op : W_Relation_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RT_Op := +Op;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Op), +Id);
      Update_Validity_Status
        (+Id,
         Related_Terms_Id_Valid (Why_Node_Id (Id)));
   end Related_Terms_Set_Op;

   --------------------------
   -- Related_Terms_Set_Op --
   --------------------------

   procedure Related_Terms_Set_Op
     (Id : W_Related_Terms_Id;
      Op : W_Relation_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RT_Op := +Op;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Op), +Id);
      Update_Validity_Status
        (+Id,
         Related_Terms_Id_Valid (Why_Node_Id (Id)));
   end Related_Terms_Set_Op;

   -----------------------------
   -- Related_Terms_Set_Right --
   -----------------------------

   procedure Related_Terms_Set_Right
     (Id    : W_Related_Terms_Unchecked_Id;
      Right : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RT_Right := +Right;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right), +Id);
      Update_Validity_Status
        (+Id,
         Related_Terms_Id_Valid (Why_Node_Id (Id)));
   end Related_Terms_Set_Right;

   -----------------------------
   -- Related_Terms_Set_Right --
   -----------------------------

   procedure Related_Terms_Set_Right
     (Id    : W_Related_Terms_Id;
      Right : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RT_Right := +Right;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right), +Id);
      Update_Validity_Status
        (+Id,
         Related_Terms_Id_Valid (Why_Node_Id (Id)));
   end Related_Terms_Set_Right;

   ---------------------------
   -- Related_Terms_Set_Op2 --
   ---------------------------

   procedure Related_Terms_Set_Op2
     (Id  : W_Related_Terms_Unchecked_Id;
      Op2 : W_Relation_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RT_Op2 := +Op2;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Op2), +Id);
      Update_Validity_Status
        (+Id,
         Related_Terms_Id_Valid (Why_Node_Id (Id)));
   end Related_Terms_Set_Op2;

   ---------------------------
   -- Related_Terms_Set_Op2 --
   ---------------------------

   procedure Related_Terms_Set_Op2
     (Id  : W_Related_Terms_Id;
      Op2 : W_Relation_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RT_Op2 := +Op2;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Op2), +Id);
      Update_Validity_Status
        (+Id,
         Related_Terms_Id_Valid (Why_Node_Id (Id)));
   end Related_Terms_Set_Op2;

   ------------------------------
   -- Related_Terms_Set_Right2 --
   ------------------------------

   procedure Related_Terms_Set_Right2
     (Id     : W_Related_Terms_Unchecked_Id;
      Right2 : W_Term_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RT_Right2 := +Right2;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right2), +Id);
      Update_Validity_Status
        (+Id,
         Related_Terms_Id_Valid (Why_Node_Id (Id)));
   end Related_Terms_Set_Right2;

   ------------------------------
   -- Related_Terms_Set_Right2 --
   ------------------------------

   procedure Related_Terms_Set_Right2
     (Id     : W_Related_Terms_Id;
      Right2 : W_Term_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RT_Right2 := +Right2;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right2), +Id);
      Update_Validity_Status
        (+Id,
         Related_Terms_Id_Valid (Why_Node_Id (Id)));
   end Related_Terms_Set_Right2;

   --------------------------
   -- Implication_Set_Left --
   --------------------------

   procedure Implication_Set_Left
     (Id   : W_Implication_Unchecked_Id;
      Left : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Left := +Left;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Left), +Id);
      Update_Validity_Status
        (+Id,
         Implication_Id_Valid (Why_Node_Id (Id)));
   end Implication_Set_Left;

   --------------------------
   -- Implication_Set_Left --
   --------------------------

   procedure Implication_Set_Left
     (Id   : W_Implication_Id;
      Left : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Left := +Left;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Left), +Id);
      Update_Validity_Status
        (+Id,
         Implication_Id_Valid (Why_Node_Id (Id)));
   end Implication_Set_Left;

   ---------------------------
   -- Implication_Set_Right --
   ---------------------------

   procedure Implication_Set_Right
     (Id    : W_Implication_Unchecked_Id;
      Right : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Right := +Right;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right), +Id);
      Update_Validity_Status
        (+Id,
         Implication_Id_Valid (Why_Node_Id (Id)));
   end Implication_Set_Right;

   ---------------------------
   -- Implication_Set_Right --
   ---------------------------

   procedure Implication_Set_Right
     (Id    : W_Implication_Id;
      Right : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Right := +Right;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right), +Id);
      Update_Validity_Status
        (+Id,
         Implication_Id_Valid (Why_Node_Id (Id)));
   end Implication_Set_Right;

   --------------------------
   -- Equivalence_Set_Left --
   --------------------------

   procedure Equivalence_Set_Left
     (Id   : W_Equivalence_Unchecked_Id;
      Left : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Left := +Left;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Left), +Id);
      Update_Validity_Status
        (+Id,
         Equivalence_Id_Valid (Why_Node_Id (Id)));
   end Equivalence_Set_Left;

   --------------------------
   -- Equivalence_Set_Left --
   --------------------------

   procedure Equivalence_Set_Left
     (Id   : W_Equivalence_Id;
      Left : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Left := +Left;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Left), +Id);
      Update_Validity_Status
        (+Id,
         Equivalence_Id_Valid (Why_Node_Id (Id)));
   end Equivalence_Set_Left;

   ---------------------------
   -- Equivalence_Set_Right --
   ---------------------------

   procedure Equivalence_Set_Right
     (Id    : W_Equivalence_Unchecked_Id;
      Right : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Right := +Right;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right), +Id);
      Update_Validity_Status
        (+Id,
         Equivalence_Id_Valid (Why_Node_Id (Id)));
   end Equivalence_Set_Right;

   ---------------------------
   -- Equivalence_Set_Right --
   ---------------------------

   procedure Equivalence_Set_Right
     (Id    : W_Equivalence_Id;
      Right : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Right := +Right;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right), +Id);
      Update_Validity_Status
        (+Id,
         Equivalence_Id_Valid (Why_Node_Id (Id)));
   end Equivalence_Set_Right;

   --------------------------
   -- Disjunction_Set_Left --
   --------------------------

   procedure Disjunction_Set_Left
     (Id   : W_Disjunction_Unchecked_Id;
      Left : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Left := +Left;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Left), +Id);
      Update_Validity_Status
        (+Id,
         Disjunction_Id_Valid (Why_Node_Id (Id)));
   end Disjunction_Set_Left;

   --------------------------
   -- Disjunction_Set_Left --
   --------------------------

   procedure Disjunction_Set_Left
     (Id   : W_Disjunction_Id;
      Left : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Left := +Left;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Left), +Id);
      Update_Validity_Status
        (+Id,
         Disjunction_Id_Valid (Why_Node_Id (Id)));
   end Disjunction_Set_Left;

   ---------------------------
   -- Disjunction_Set_Right --
   ---------------------------

   procedure Disjunction_Set_Right
     (Id    : W_Disjunction_Unchecked_Id;
      Right : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Right := +Right;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right), +Id);
      Update_Validity_Status
        (+Id,
         Disjunction_Id_Valid (Why_Node_Id (Id)));
   end Disjunction_Set_Right;

   ---------------------------
   -- Disjunction_Set_Right --
   ---------------------------

   procedure Disjunction_Set_Right
     (Id    : W_Disjunction_Id;
      Right : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Right := +Right;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right), +Id);
      Update_Validity_Status
        (+Id,
         Disjunction_Id_Valid (Why_Node_Id (Id)));
   end Disjunction_Set_Right;

   --------------------------
   -- Conjunction_Set_Left --
   --------------------------

   procedure Conjunction_Set_Left
     (Id   : W_Conjunction_Unchecked_Id;
      Left : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Left := +Left;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Left), +Id);
      Update_Validity_Status
        (+Id,
         Conjunction_Id_Valid (Why_Node_Id (Id)));
   end Conjunction_Set_Left;

   --------------------------
   -- Conjunction_Set_Left --
   --------------------------

   procedure Conjunction_Set_Left
     (Id   : W_Conjunction_Id;
      Left : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Left := +Left;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Left), +Id);
      Update_Validity_Status
        (+Id,
         Conjunction_Id_Valid (Why_Node_Id (Id)));
   end Conjunction_Set_Left;

   ---------------------------
   -- Conjunction_Set_Right --
   ---------------------------

   procedure Conjunction_Set_Right
     (Id    : W_Conjunction_Unchecked_Id;
      Right : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Right := +Right;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right), +Id);
      Update_Validity_Status
        (+Id,
         Conjunction_Id_Valid (Why_Node_Id (Id)));
   end Conjunction_Set_Right;

   ---------------------------
   -- Conjunction_Set_Right --
   ---------------------------

   procedure Conjunction_Set_Right
     (Id    : W_Conjunction_Id;
      Right : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ITOC_Right := +Right;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right), +Id);
      Update_Validity_Status
        (+Id,
         Conjunction_Id_Valid (Why_Node_Id (Id)));
   end Conjunction_Set_Right;

   --------------------------
   -- Negation_Set_Operand --
   --------------------------

   procedure Negation_Set_Operand
     (Id      : W_Negation_Unchecked_Id;
      Operand : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.N_Operand := +Operand;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Operand), +Id);
      Update_Validity_Status
        (+Id,
         Negation_Id_Valid (Why_Node_Id (Id)));
   end Negation_Set_Operand;

   --------------------------
   -- Negation_Set_Operand --
   --------------------------

   procedure Negation_Set_Operand
     (Id      : W_Negation_Id;
      Operand : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.N_Operand := +Operand;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Operand), +Id);
      Update_Validity_Status
        (+Id,
         Negation_Id_Valid (Why_Node_Id (Id)));
   end Negation_Set_Operand;

   ------------------------------------
   -- Conditional_Pred_Set_Condition --
   ------------------------------------

   procedure Conditional_Pred_Set_Condition
     (Id        : W_Conditional_Pred_Unchecked_Id;
      Condition : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CPD_Condition := +Condition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Condition), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Pred_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Pred_Set_Condition;

   ------------------------------------
   -- Conditional_Pred_Set_Condition --
   ------------------------------------

   procedure Conditional_Pred_Set_Condition
     (Id        : W_Conditional_Pred_Id;
      Condition : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CPD_Condition := +Condition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Condition), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Pred_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Pred_Set_Condition;

   ------------------------------------
   -- Conditional_Pred_Set_Then_Part --
   ------------------------------------

   procedure Conditional_Pred_Set_Then_Part
     (Id        : W_Conditional_Pred_Unchecked_Id;
      Then_Part : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CPD_Then_Part := +Then_Part;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Then_Part), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Pred_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Pred_Set_Then_Part;

   ------------------------------------
   -- Conditional_Pred_Set_Then_Part --
   ------------------------------------

   procedure Conditional_Pred_Set_Then_Part
     (Id        : W_Conditional_Pred_Id;
      Then_Part : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CPD_Then_Part := +Then_Part;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Then_Part), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Pred_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Pred_Set_Then_Part;

   ------------------------------------
   -- Conditional_Pred_Set_Else_Part --
   ------------------------------------

   procedure Conditional_Pred_Set_Else_Part
     (Id        : W_Conditional_Pred_Unchecked_Id;
      Else_Part : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CPD_Else_Part := +Else_Part;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Else_Part), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Pred_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Pred_Set_Else_Part;

   ------------------------------------
   -- Conditional_Pred_Set_Else_Part --
   ------------------------------------

   procedure Conditional_Pred_Set_Else_Part
     (Id        : W_Conditional_Pred_Id;
      Else_Part : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CPD_Else_Part := +Else_Part;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Else_Part), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Pred_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Pred_Set_Else_Part;

   ---------------------------
   -- Binding_Pred_Set_Name --
   ---------------------------

   procedure Binding_Pred_Set_Name
     (Id   : W_Binding_Pred_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPD_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Pred_Id_Valid (Why_Node_Id (Id)));
   end Binding_Pred_Set_Name;

   ---------------------------
   -- Binding_Pred_Set_Name --
   ---------------------------

   procedure Binding_Pred_Set_Name
     (Id   : W_Binding_Pred_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPD_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Pred_Id_Valid (Why_Node_Id (Id)));
   end Binding_Pred_Set_Name;

   --------------------------
   -- Binding_Pred_Set_Def --
   --------------------------

   procedure Binding_Pred_Set_Def
     (Id  : W_Binding_Pred_Unchecked_Id;
      Def : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPD_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Pred_Id_Valid (Why_Node_Id (Id)));
   end Binding_Pred_Set_Def;

   --------------------------
   -- Binding_Pred_Set_Def --
   --------------------------

   procedure Binding_Pred_Set_Def
     (Id  : W_Binding_Pred_Id;
      Def : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPD_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Pred_Id_Valid (Why_Node_Id (Id)));
   end Binding_Pred_Set_Def;

   ------------------------------
   -- Binding_Pred_Set_Context --
   ------------------------------

   procedure Binding_Pred_Set_Context
     (Id      : W_Binding_Pred_Unchecked_Id;
      Context : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPD_Context := +Context;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Context), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Pred_Id_Valid (Why_Node_Id (Id)));
   end Binding_Pred_Set_Context;

   ------------------------------
   -- Binding_Pred_Set_Context --
   ------------------------------

   procedure Binding_Pred_Set_Context
     (Id      : W_Binding_Pred_Id;
      Context : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPD_Context := +Context;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Context), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Pred_Id_Valid (Why_Node_Id (Id)));
   end Binding_Pred_Set_Context;

   -------------------------------------------
   -- Universal_Quantif_Append_To_Variables --
   -------------------------------------------

   procedure Universal_Quantif_Append_To_Variables
     (Id       : W_Universal_Quantif_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.UQ_Variables, +New_Item);
      Update_Validity_Status
        (+Id,
         Universal_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Universal_Quantif_Append_To_Variables;

   --------------------------------------------
   -- Universal_Quantif_Prepend_To_Variables --
   --------------------------------------------

   procedure Universal_Quantif_Prepend_To_Variables
     (Id       : W_Universal_Quantif_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.UQ_Variables, +New_Item);
      Update_Validity_Status
        (+Id,
         Universal_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Universal_Quantif_Prepend_To_Variables;

   -------------------------------------------
   -- Universal_Quantif_Append_To_Variables --
   -------------------------------------------

   procedure Universal_Quantif_Append_To_Variables
     (Id       : W_Universal_Quantif_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.UQ_Variables, +New_Item);
      Update_Validity_Status
        (+Id,
         Universal_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Universal_Quantif_Append_To_Variables;

   --------------------------------------------
   -- Universal_Quantif_Prepend_To_Variables --
   --------------------------------------------

   procedure Universal_Quantif_Prepend_To_Variables
     (Id       : W_Universal_Quantif_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.UQ_Variables, +New_Item);
      Update_Validity_Status
        (+Id,
         Universal_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Universal_Quantif_Prepend_To_Variables;

   ------------------------------------
   -- Universal_Quantif_Set_Var_Type --
   ------------------------------------

   procedure Universal_Quantif_Set_Var_Type
     (Id       : W_Universal_Quantif_Unchecked_Id;
      Var_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.UQ_Var_Type := +Var_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Var_Type), +Id);
      Update_Validity_Status
        (+Id,
         Universal_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Universal_Quantif_Set_Var_Type;

   ------------------------------------
   -- Universal_Quantif_Set_Var_Type --
   ------------------------------------

   procedure Universal_Quantif_Set_Var_Type
     (Id       : W_Universal_Quantif_Id;
      Var_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.UQ_Var_Type := +Var_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Var_Type), +Id);
      Update_Validity_Status
        (+Id,
         Universal_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Universal_Quantif_Set_Var_Type;

   ------------------------------------
   -- Universal_Quantif_Set_Triggers --
   ------------------------------------

   procedure Universal_Quantif_Set_Triggers
     (Id       : W_Universal_Quantif_Unchecked_Id;
      Triggers : W_Triggers_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.UQ_Triggers := +Triggers;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Triggers), +Id);
      Update_Validity_Status
        (+Id,
         Universal_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Universal_Quantif_Set_Triggers;

   ------------------------------------
   -- Universal_Quantif_Set_Triggers --
   ------------------------------------

   procedure Universal_Quantif_Set_Triggers
     (Id       : W_Universal_Quantif_Id;
      Triggers : W_Triggers_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.UQ_Triggers := +Triggers;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Triggers), +Id);
      Update_Validity_Status
        (+Id,
         Universal_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Universal_Quantif_Set_Triggers;

   --------------------------------
   -- Universal_Quantif_Set_Pred --
   --------------------------------

   procedure Universal_Quantif_Set_Pred
     (Id   : W_Universal_Quantif_Unchecked_Id;
      Pred : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.UQ_Pred := +Pred;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pred), +Id);
      Update_Validity_Status
        (+Id,
         Universal_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Universal_Quantif_Set_Pred;

   --------------------------------
   -- Universal_Quantif_Set_Pred --
   --------------------------------

   procedure Universal_Quantif_Set_Pred
     (Id   : W_Universal_Quantif_Id;
      Pred : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.UQ_Pred := +Pred;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pred), +Id);
      Update_Validity_Status
        (+Id,
         Universal_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Universal_Quantif_Set_Pred;

   ---------------------------------------------
   -- Existential_Quantif_Append_To_Variables --
   ---------------------------------------------

   procedure Existential_Quantif_Append_To_Variables
     (Id       : W_Existential_Quantif_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.EQ_Variables, +New_Item);
      Update_Validity_Status
        (+Id,
         Existential_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Existential_Quantif_Append_To_Variables;

   ----------------------------------------------
   -- Existential_Quantif_Prepend_To_Variables --
   ----------------------------------------------

   procedure Existential_Quantif_Prepend_To_Variables
     (Id       : W_Existential_Quantif_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.EQ_Variables, +New_Item);
      Update_Validity_Status
        (+Id,
         Existential_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Existential_Quantif_Prepend_To_Variables;

   ---------------------------------------------
   -- Existential_Quantif_Append_To_Variables --
   ---------------------------------------------

   procedure Existential_Quantif_Append_To_Variables
     (Id       : W_Existential_Quantif_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.EQ_Variables, +New_Item);
      Update_Validity_Status
        (+Id,
         Existential_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Existential_Quantif_Append_To_Variables;

   ----------------------------------------------
   -- Existential_Quantif_Prepend_To_Variables --
   ----------------------------------------------

   procedure Existential_Quantif_Prepend_To_Variables
     (Id       : W_Existential_Quantif_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.EQ_Variables, +New_Item);
      Update_Validity_Status
        (+Id,
         Existential_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Existential_Quantif_Prepend_To_Variables;

   --------------------------------------
   -- Existential_Quantif_Set_Var_Type --
   --------------------------------------

   procedure Existential_Quantif_Set_Var_Type
     (Id       : W_Existential_Quantif_Unchecked_Id;
      Var_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.EQ_Var_Type := +Var_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Var_Type), +Id);
      Update_Validity_Status
        (+Id,
         Existential_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Existential_Quantif_Set_Var_Type;

   --------------------------------------
   -- Existential_Quantif_Set_Var_Type --
   --------------------------------------

   procedure Existential_Quantif_Set_Var_Type
     (Id       : W_Existential_Quantif_Id;
      Var_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.EQ_Var_Type := +Var_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Var_Type), +Id);
      Update_Validity_Status
        (+Id,
         Existential_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Existential_Quantif_Set_Var_Type;

   ----------------------------------
   -- Existential_Quantif_Set_Pred --
   ----------------------------------

   procedure Existential_Quantif_Set_Pred
     (Id   : W_Existential_Quantif_Unchecked_Id;
      Pred : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.EQ_Pred := +Pred;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pred), +Id);
      Update_Validity_Status
        (+Id,
         Existential_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Existential_Quantif_Set_Pred;

   ----------------------------------
   -- Existential_Quantif_Set_Pred --
   ----------------------------------

   procedure Existential_Quantif_Set_Pred
     (Id   : W_Existential_Quantif_Id;
      Pred : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.EQ_Pred := +Pred;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pred), +Id);
      Update_Validity_Status
        (+Id,
         Existential_Quantif_Id_Valid (Why_Node_Id (Id)));
   end Existential_Quantif_Set_Pred;

   ------------------------------
   -- Named_Predicate_Set_Name --
   ------------------------------

   procedure Named_Predicate_Set_Name
     (Id   : W_Named_Predicate_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.NP_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Named_Predicate_Id_Valid (Why_Node_Id (Id)));
   end Named_Predicate_Set_Name;

   ------------------------------
   -- Named_Predicate_Set_Name --
   ------------------------------

   procedure Named_Predicate_Set_Name
     (Id   : W_Named_Predicate_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.NP_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Named_Predicate_Id_Valid (Why_Node_Id (Id)));
   end Named_Predicate_Set_Name;

   ------------------------------
   -- Named_Predicate_Set_Pred --
   ------------------------------

   procedure Named_Predicate_Set_Pred
     (Id   : W_Named_Predicate_Unchecked_Id;
      Pred : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.NP_Pred := +Pred;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pred), +Id);
      Update_Validity_Status
        (+Id,
         Named_Predicate_Id_Valid (Why_Node_Id (Id)));
   end Named_Predicate_Set_Pred;

   ------------------------------
   -- Named_Predicate_Set_Pred --
   ------------------------------

   procedure Named_Predicate_Set_Pred
     (Id   : W_Named_Predicate_Id;
      Pred : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.NP_Pred := +Pred;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pred), +Id);
      Update_Validity_Status
        (+Id,
         Named_Predicate_Id_Valid (Why_Node_Id (Id)));
   end Named_Predicate_Set_Pred;

   ----------------------------------
   -- Protected_Predicate_Set_Pred --
   ----------------------------------

   procedure Protected_Predicate_Set_Pred
     (Id   : W_Protected_Predicate_Unchecked_Id;
      Pred : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PP_Pred := +Pred;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pred), +Id);
      Update_Validity_Status
        (+Id,
         Protected_Predicate_Id_Valid (Why_Node_Id (Id)));
   end Protected_Predicate_Set_Pred;

   ----------------------------------
   -- Protected_Predicate_Set_Pred --
   ----------------------------------

   procedure Protected_Predicate_Set_Pred
     (Id   : W_Protected_Predicate_Id;
      Pred : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PP_Pred := +Pred;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pred), +Id);
      Update_Validity_Status
        (+Id,
         Protected_Predicate_Id_Valid (Why_Node_Id (Id)));
   end Protected_Predicate_Set_Pred;

   ------------------------
   -- Pattern_Set_Constr --
   ------------------------

   procedure Pattern_Set_Constr
     (Id     : W_Pattern_Unchecked_Id;
      Constr : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PAT_Constr := +Constr;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Constr), +Id);
      Update_Validity_Status
        (+Id,
         Pattern_Id_Valid (Why_Node_Id (Id)));
   end Pattern_Set_Constr;

   ------------------------
   -- Pattern_Set_Constr --
   ------------------------

   procedure Pattern_Set_Constr
     (Id     : W_Pattern_Id;
      Constr : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PAT_Constr := +Constr;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Constr), +Id);
      Update_Validity_Status
        (+Id,
         Pattern_Id_Valid (Why_Node_Id (Id)));
   end Pattern_Set_Constr;

   ----------------------------
   -- Pattern_Append_To_Args --
   ----------------------------

   procedure Pattern_Append_To_Args
     (Id       : W_Pattern_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.PAT_Args, +New_Item);
      Update_Validity_Status
        (+Id,
         Pattern_Id_Valid (Why_Node_Id (Id)));
   end Pattern_Append_To_Args;

   -----------------------------
   -- Pattern_Prepend_To_Args --
   -----------------------------

   procedure Pattern_Prepend_To_Args
     (Id       : W_Pattern_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.PAT_Args, +New_Item);
      Update_Validity_Status
        (+Id,
         Pattern_Id_Valid (Why_Node_Id (Id)));
   end Pattern_Prepend_To_Args;

   ----------------------------
   -- Pattern_Append_To_Args --
   ----------------------------

   procedure Pattern_Append_To_Args
     (Id       : W_Pattern_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.PAT_Args, +New_Item);
      Update_Validity_Status
        (+Id,
         Pattern_Id_Valid (Why_Node_Id (Id)));
   end Pattern_Append_To_Args;

   -----------------------------
   -- Pattern_Prepend_To_Args --
   -----------------------------

   procedure Pattern_Prepend_To_Args
     (Id       : W_Pattern_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.PAT_Args, +New_Item);
      Update_Validity_Status
        (+Id,
         Pattern_Id_Valid (Why_Node_Id (Id)));
   end Pattern_Prepend_To_Args;

   ----------------------------
   -- Match_Case_Set_Pattern --
   ----------------------------

   procedure Match_Case_Set_Pattern
     (Id      : W_Match_Case_Unchecked_Id;
      Pattern : W_Pattern_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.MC_Pattern := +Pattern;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pattern), +Id);
      Update_Validity_Status
        (+Id,
         Match_Case_Id_Valid (Why_Node_Id (Id)));
   end Match_Case_Set_Pattern;

   ----------------------------
   -- Match_Case_Set_Pattern --
   ----------------------------

   procedure Match_Case_Set_Pattern
     (Id      : W_Match_Case_Id;
      Pattern : W_Pattern_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.MC_Pattern := +Pattern;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pattern), +Id);
      Update_Validity_Status
        (+Id,
         Match_Case_Id_Valid (Why_Node_Id (Id)));
   end Match_Case_Set_Pattern;

   -------------------------
   -- Match_Case_Set_Term --
   -------------------------

   procedure Match_Case_Set_Term
     (Id   : W_Match_Case_Unchecked_Id;
      Term : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.MC_Term := +Term;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Term), +Id);
      Update_Validity_Status
        (+Id,
         Match_Case_Id_Valid (Why_Node_Id (Id)));
   end Match_Case_Set_Term;

   -------------------------
   -- Match_Case_Set_Term --
   -------------------------

   procedure Match_Case_Set_Term
     (Id   : W_Match_Case_Id;
      Term : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.MC_Term := +Term;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Term), +Id);
      Update_Validity_Status
        (+Id,
         Match_Case_Id_Valid (Why_Node_Id (Id)));
   end Match_Case_Set_Term;

   ---------------------------------
   -- Triggers_Append_To_Triggers --
   ---------------------------------

   procedure Triggers_Append_To_Triggers
     (Id       : W_Triggers_Unchecked_Id;
      New_Item : W_Trigger_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.TRS_Triggers, +New_Item);
      Update_Validity_Status
        (+Id,
         Triggers_Id_Valid (Why_Node_Id (Id)));
   end Triggers_Append_To_Triggers;

   ----------------------------------
   -- Triggers_Prepend_To_Triggers --
   ----------------------------------

   procedure Triggers_Prepend_To_Triggers
     (Id       : W_Triggers_Unchecked_Id;
      New_Item : W_Trigger_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.TRS_Triggers, +New_Item);
      Update_Validity_Status
        (+Id,
         Triggers_Id_Valid (Why_Node_Id (Id)));
   end Triggers_Prepend_To_Triggers;

   ---------------------------------
   -- Triggers_Append_To_Triggers --
   ---------------------------------

   procedure Triggers_Append_To_Triggers
     (Id       : W_Triggers_Id;
      New_Item : W_Trigger_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.TRS_Triggers, +New_Item);
      Update_Validity_Status
        (+Id,
         Triggers_Id_Valid (Why_Node_Id (Id)));
   end Triggers_Append_To_Triggers;

   ----------------------------------
   -- Triggers_Prepend_To_Triggers --
   ----------------------------------

   procedure Triggers_Prepend_To_Triggers
     (Id       : W_Triggers_Id;
      New_Item : W_Trigger_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.TRS_Triggers, +New_Item);
      Update_Validity_Status
        (+Id,
         Triggers_Id_Valid (Why_Node_Id (Id)));
   end Triggers_Prepend_To_Triggers;

   -----------------------------
   -- Trigger_Append_To_Terms --
   -----------------------------

   procedure Trigger_Append_To_Terms
     (Id       : W_Trigger_Unchecked_Id;
      New_Item : W_Term_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.TRI_Terms, +New_Item);
      Update_Validity_Status
        (+Id,
         Trigger_Id_Valid (Why_Node_Id (Id)));
   end Trigger_Append_To_Terms;

   ------------------------------
   -- Trigger_Prepend_To_Terms --
   ------------------------------

   procedure Trigger_Prepend_To_Terms
     (Id       : W_Trigger_Unchecked_Id;
      New_Item : W_Term_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.TRI_Terms, +New_Item);
      Update_Validity_Status
        (+Id,
         Trigger_Id_Valid (Why_Node_Id (Id)));
   end Trigger_Prepend_To_Terms;

   -----------------------------
   -- Trigger_Append_To_Terms --
   -----------------------------

   procedure Trigger_Append_To_Terms
     (Id       : W_Trigger_Id;
      New_Item : W_Term_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.TRI_Terms, +New_Item);
      Update_Validity_Status
        (+Id,
         Trigger_Id_Valid (Why_Node_Id (Id)));
   end Trigger_Append_To_Terms;

   ------------------------------
   -- Trigger_Prepend_To_Terms --
   ------------------------------

   procedure Trigger_Prepend_To_Terms
     (Id       : W_Trigger_Id;
      New_Item : W_Term_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.TRI_Terms, +New_Item);
      Update_Validity_Status
        (+Id,
         Trigger_Id_Valid (Why_Node_Id (Id)));
   end Trigger_Prepend_To_Terms;

   -----------------------
   -- Type_Set_External --
   -----------------------

   procedure Type_Set_External
     (Id       : W_Type_Unchecked_Id;
      External : W_External_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.T_External := +External;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (External), +Id);
      Update_Validity_Status
        (+Id,
         Type_Id_Valid (Why_Node_Id (Id)));
   end Type_Set_External;

   -----------------------
   -- Type_Set_External --
   -----------------------

   procedure Type_Set_External
     (Id       : W_Type_Id;
      External : W_External_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.T_External := +External;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (External), +Id);
      Update_Validity_Status
        (+Id,
         Type_Id_Valid (Why_Node_Id (Id)));
   end Type_Set_External;

   ------------------------------------
   -- Type_Append_To_Type_Parameters --
   ------------------------------------

   procedure Type_Append_To_Type_Parameters
     (Id       : W_Type_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.T_Type_Parameters, +New_Item);
      Update_Validity_Status
        (+Id,
         Type_Id_Valid (Why_Node_Id (Id)));
   end Type_Append_To_Type_Parameters;

   -------------------------------------
   -- Type_Prepend_To_Type_Parameters --
   -------------------------------------

   procedure Type_Prepend_To_Type_Parameters
     (Id       : W_Type_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.T_Type_Parameters, +New_Item);
      Update_Validity_Status
        (+Id,
         Type_Id_Valid (Why_Node_Id (Id)));
   end Type_Prepend_To_Type_Parameters;

   ------------------------------------
   -- Type_Append_To_Type_Parameters --
   ------------------------------------

   procedure Type_Append_To_Type_Parameters
     (Id       : W_Type_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.T_Type_Parameters, +New_Item);
      Update_Validity_Status
        (+Id,
         Type_Id_Valid (Why_Node_Id (Id)));
   end Type_Append_To_Type_Parameters;

   -------------------------------------
   -- Type_Prepend_To_Type_Parameters --
   -------------------------------------

   procedure Type_Prepend_To_Type_Parameters
     (Id       : W_Type_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.T_Type_Parameters, +New_Item);
      Update_Validity_Status
        (+Id,
         Type_Id_Valid (Why_Node_Id (Id)));
   end Type_Prepend_To_Type_Parameters;

   -------------------
   -- Type_Set_Name --
   -------------------

   procedure Type_Set_Name
     (Id   : W_Type_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.T_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Type_Id_Valid (Why_Node_Id (Id)));
   end Type_Set_Name;

   -------------------
   -- Type_Set_Name --
   -------------------

   procedure Type_Set_Name
     (Id   : W_Type_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.T_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Type_Id_Valid (Why_Node_Id (Id)));
   end Type_Set_Name;

   -------------------------
   -- Type_Set_Definition --
   -------------------------

   procedure Type_Set_Definition
     (Id         : W_Type_Unchecked_Id;
      Definition : W_Type_Definition_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.T_Definition := +Definition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Definition), +Id);
      Update_Validity_Status
        (+Id,
         Type_Id_Valid (Why_Node_Id (Id)));
   end Type_Set_Definition;

   -------------------------
   -- Type_Set_Definition --
   -------------------------

   procedure Type_Set_Definition
     (Id         : W_Type_Id;
      Definition : W_Type_Definition_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.T_Definition := +Definition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Definition), +Id);
      Update_Validity_Status
        (+Id,
         Type_Id_Valid (Why_Node_Id (Id)));
   end Type_Set_Definition;

   ------------------------
   -- Logic_Set_External --
   ------------------------

   procedure Logic_Set_External
     (Id       : W_Logic_Unchecked_Id;
      External : W_External_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.L_External := +External;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (External), +Id);
      Update_Validity_Status
        (+Id,
         Logic_Id_Valid (Why_Node_Id (Id)));
   end Logic_Set_External;

   ------------------------
   -- Logic_Set_External --
   ------------------------

   procedure Logic_Set_External
     (Id       : W_Logic_Id;
      External : W_External_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.L_External := +External;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (External), +Id);
      Update_Validity_Status
        (+Id,
         Logic_Id_Valid (Why_Node_Id (Id)));
   end Logic_Set_External;

   ---------------------------
   -- Logic_Append_To_Names --
   ---------------------------

   procedure Logic_Append_To_Names
     (Id       : W_Logic_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.L_Names, +New_Item);
      Update_Validity_Status
        (+Id,
         Logic_Id_Valid (Why_Node_Id (Id)));
   end Logic_Append_To_Names;

   ----------------------------
   -- Logic_Prepend_To_Names --
   ----------------------------

   procedure Logic_Prepend_To_Names
     (Id       : W_Logic_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.L_Names, +New_Item);
      Update_Validity_Status
        (+Id,
         Logic_Id_Valid (Why_Node_Id (Id)));
   end Logic_Prepend_To_Names;

   ---------------------------
   -- Logic_Append_To_Names --
   ---------------------------

   procedure Logic_Append_To_Names
     (Id       : W_Logic_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.L_Names, +New_Item);
      Update_Validity_Status
        (+Id,
         Logic_Id_Valid (Why_Node_Id (Id)));
   end Logic_Append_To_Names;

   ----------------------------
   -- Logic_Prepend_To_Names --
   ----------------------------

   procedure Logic_Prepend_To_Names
     (Id       : W_Logic_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.L_Names, +New_Item);
      Update_Validity_Status
        (+Id,
         Logic_Id_Valid (Why_Node_Id (Id)));
   end Logic_Prepend_To_Names;

   --------------------------
   -- Logic_Set_Logic_Type --
   --------------------------

   procedure Logic_Set_Logic_Type
     (Id         : W_Logic_Unchecked_Id;
      Logic_Type : W_Logic_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.L_Logic_Type := +Logic_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Logic_Type), +Id);
      Update_Validity_Status
        (+Id,
         Logic_Id_Valid (Why_Node_Id (Id)));
   end Logic_Set_Logic_Type;

   --------------------------
   -- Logic_Set_Logic_Type --
   --------------------------

   procedure Logic_Set_Logic_Type
     (Id         : W_Logic_Id;
      Logic_Type : W_Logic_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.L_Logic_Type := +Logic_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Logic_Type), +Id);
      Update_Validity_Status
        (+Id,
         Logic_Id_Valid (Why_Node_Id (Id)));
   end Logic_Set_Logic_Type;

   -----------------------
   -- Function_Set_Name --
   -----------------------

   procedure Function_Set_Name
     (Id   : W_Function_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.F_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Function_Id_Valid (Why_Node_Id (Id)));
   end Function_Set_Name;

   -----------------------
   -- Function_Set_Name --
   -----------------------

   procedure Function_Set_Name
     (Id   : W_Function_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.F_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Function_Id_Valid (Why_Node_Id (Id)));
   end Function_Set_Name;

   --------------------------------
   -- Function_Append_To_Binders --
   --------------------------------

   procedure Function_Append_To_Binders
     (Id       : W_Function_Unchecked_Id;
      New_Item : W_Logic_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.F_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Function_Id_Valid (Why_Node_Id (Id)));
   end Function_Append_To_Binders;

   ---------------------------------
   -- Function_Prepend_To_Binders --
   ---------------------------------

   procedure Function_Prepend_To_Binders
     (Id       : W_Function_Unchecked_Id;
      New_Item : W_Logic_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.F_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Function_Id_Valid (Why_Node_Id (Id)));
   end Function_Prepend_To_Binders;

   --------------------------------
   -- Function_Append_To_Binders --
   --------------------------------

   procedure Function_Append_To_Binders
     (Id       : W_Function_Id;
      New_Item : W_Logic_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.F_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Function_Id_Valid (Why_Node_Id (Id)));
   end Function_Append_To_Binders;

   ---------------------------------
   -- Function_Prepend_To_Binders --
   ---------------------------------

   procedure Function_Prepend_To_Binders
     (Id       : W_Function_Id;
      New_Item : W_Logic_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.F_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Function_Id_Valid (Why_Node_Id (Id)));
   end Function_Prepend_To_Binders;

   ------------------------------
   -- Function_Set_Return_Type --
   ------------------------------

   procedure Function_Set_Return_Type
     (Id          : W_Function_Unchecked_Id;
      Return_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.F_Return_Type := +Return_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Return_Type), +Id);
      Update_Validity_Status
        (+Id,
         Function_Id_Valid (Why_Node_Id (Id)));
   end Function_Set_Return_Type;

   ------------------------------
   -- Function_Set_Return_Type --
   ------------------------------

   procedure Function_Set_Return_Type
     (Id          : W_Function_Id;
      Return_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.F_Return_Type := +Return_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Return_Type), +Id);
      Update_Validity_Status
        (+Id,
         Function_Id_Valid (Why_Node_Id (Id)));
   end Function_Set_Return_Type;

   ----------------------
   -- Function_Set_Def --
   ----------------------

   procedure Function_Set_Def
     (Id  : W_Function_Unchecked_Id;
      Def : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.F_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Function_Id_Valid (Why_Node_Id (Id)));
   end Function_Set_Def;

   ----------------------
   -- Function_Set_Def --
   ----------------------

   procedure Function_Set_Def
     (Id  : W_Function_Id;
      Def : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.F_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Function_Id_Valid (Why_Node_Id (Id)));
   end Function_Set_Def;

   -----------------------------------
   -- Predicate_Definition_Set_Name --
   -----------------------------------

   procedure Predicate_Definition_Set_Name
     (Id   : W_Predicate_Definition_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.P_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Predicate_Definition_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Definition_Set_Name;

   -----------------------------------
   -- Predicate_Definition_Set_Name --
   -----------------------------------

   procedure Predicate_Definition_Set_Name
     (Id   : W_Predicate_Definition_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.P_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Predicate_Definition_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Definition_Set_Name;

   --------------------------------------------
   -- Predicate_Definition_Append_To_Binders --
   --------------------------------------------

   procedure Predicate_Definition_Append_To_Binders
     (Id       : W_Predicate_Definition_Unchecked_Id;
      New_Item : W_Logic_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.P_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Predicate_Definition_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Definition_Append_To_Binders;

   ---------------------------------------------
   -- Predicate_Definition_Prepend_To_Binders --
   ---------------------------------------------

   procedure Predicate_Definition_Prepend_To_Binders
     (Id       : W_Predicate_Definition_Unchecked_Id;
      New_Item : W_Logic_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.P_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Predicate_Definition_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Definition_Prepend_To_Binders;

   --------------------------------------------
   -- Predicate_Definition_Append_To_Binders --
   --------------------------------------------

   procedure Predicate_Definition_Append_To_Binders
     (Id       : W_Predicate_Definition_Id;
      New_Item : W_Logic_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.P_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Predicate_Definition_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Definition_Append_To_Binders;

   ---------------------------------------------
   -- Predicate_Definition_Prepend_To_Binders --
   ---------------------------------------------

   procedure Predicate_Definition_Prepend_To_Binders
     (Id       : W_Predicate_Definition_Id;
      New_Item : W_Logic_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.P_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Predicate_Definition_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Definition_Prepend_To_Binders;

   ----------------------------------
   -- Predicate_Definition_Set_Def --
   ----------------------------------

   procedure Predicate_Definition_Set_Def
     (Id  : W_Predicate_Definition_Unchecked_Id;
      Def : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.P_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Predicate_Definition_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Definition_Set_Def;

   ----------------------------------
   -- Predicate_Definition_Set_Def --
   ----------------------------------

   procedure Predicate_Definition_Set_Def
     (Id  : W_Predicate_Definition_Id;
      Def : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.P_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Predicate_Definition_Id_Valid (Why_Node_Id (Id)));
   end Predicate_Definition_Set_Def;

   ------------------------
   -- Inductive_Set_Name --
   ------------------------

   procedure Inductive_Set_Name
     (Id   : W_Inductive_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.I_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Inductive_Id_Valid (Why_Node_Id (Id)));
   end Inductive_Set_Name;

   ------------------------
   -- Inductive_Set_Name --
   ------------------------

   procedure Inductive_Set_Name
     (Id   : W_Inductive_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.I_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Inductive_Id_Valid (Why_Node_Id (Id)));
   end Inductive_Set_Name;

   ------------------------------
   -- Inductive_Set_Logic_Type --
   ------------------------------

   procedure Inductive_Set_Logic_Type
     (Id         : W_Inductive_Unchecked_Id;
      Logic_Type : W_Logic_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.I_Logic_Type := +Logic_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Logic_Type), +Id);
      Update_Validity_Status
        (+Id,
         Inductive_Id_Valid (Why_Node_Id (Id)));
   end Inductive_Set_Logic_Type;

   ------------------------------
   -- Inductive_Set_Logic_Type --
   ------------------------------

   procedure Inductive_Set_Logic_Type
     (Id         : W_Inductive_Id;
      Logic_Type : W_Logic_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.I_Logic_Type := +Logic_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Logic_Type), +Id);
      Update_Validity_Status
        (+Id,
         Inductive_Id_Valid (Why_Node_Id (Id)));
   end Inductive_Set_Logic_Type;

   -----------------------------
   -- Inductive_Append_To_Def --
   -----------------------------

   procedure Inductive_Append_To_Def
     (Id       : W_Inductive_Unchecked_Id;
      New_Item : W_Inductive_Case_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.I_Def, +New_Item);
      Update_Validity_Status
        (+Id,
         Inductive_Id_Valid (Why_Node_Id (Id)));
   end Inductive_Append_To_Def;

   ------------------------------
   -- Inductive_Prepend_To_Def --
   ------------------------------

   procedure Inductive_Prepend_To_Def
     (Id       : W_Inductive_Unchecked_Id;
      New_Item : W_Inductive_Case_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.I_Def, +New_Item);
      Update_Validity_Status
        (+Id,
         Inductive_Id_Valid (Why_Node_Id (Id)));
   end Inductive_Prepend_To_Def;

   -----------------------------
   -- Inductive_Append_To_Def --
   -----------------------------

   procedure Inductive_Append_To_Def
     (Id       : W_Inductive_Id;
      New_Item : W_Inductive_Case_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.I_Def, +New_Item);
      Update_Validity_Status
        (+Id,
         Inductive_Id_Valid (Why_Node_Id (Id)));
   end Inductive_Append_To_Def;

   ------------------------------
   -- Inductive_Prepend_To_Def --
   ------------------------------

   procedure Inductive_Prepend_To_Def
     (Id       : W_Inductive_Id;
      New_Item : W_Inductive_Case_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.I_Def, +New_Item);
      Update_Validity_Status
        (+Id,
         Inductive_Id_Valid (Why_Node_Id (Id)));
   end Inductive_Prepend_To_Def;

   --------------------
   -- Axiom_Set_Name --
   --------------------

   procedure Axiom_Set_Name
     (Id   : W_Axiom_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AX_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Axiom_Id_Valid (Why_Node_Id (Id)));
   end Axiom_Set_Name;

   --------------------
   -- Axiom_Set_Name --
   --------------------

   procedure Axiom_Set_Name
     (Id   : W_Axiom_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AX_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Axiom_Id_Valid (Why_Node_Id (Id)));
   end Axiom_Set_Name;

   -------------------
   -- Axiom_Set_Def --
   -------------------

   procedure Axiom_Set_Def
     (Id  : W_Axiom_Unchecked_Id;
      Def : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AX_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Axiom_Id_Valid (Why_Node_Id (Id)));
   end Axiom_Set_Def;

   -------------------
   -- Axiom_Set_Def --
   -------------------

   procedure Axiom_Set_Def
     (Id  : W_Axiom_Id;
      Def : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AX_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Axiom_Id_Valid (Why_Node_Id (Id)));
   end Axiom_Set_Def;

   -------------------
   -- Goal_Set_Name --
   -------------------

   procedure Goal_Set_Name
     (Id   : W_Goal_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.G_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Goal_Id_Valid (Why_Node_Id (Id)));
   end Goal_Set_Name;

   -------------------
   -- Goal_Set_Name --
   -------------------

   procedure Goal_Set_Name
     (Id   : W_Goal_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.G_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Goal_Id_Valid (Why_Node_Id (Id)));
   end Goal_Set_Name;

   ------------------
   -- Goal_Set_Def --
   ------------------

   procedure Goal_Set_Def
     (Id  : W_Goal_Unchecked_Id;
      Def : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.G_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Goal_Id_Valid (Why_Node_Id (Id)));
   end Goal_Set_Def;

   ------------------
   -- Goal_Set_Def --
   ------------------

   procedure Goal_Set_Def
     (Id  : W_Goal_Id;
      Def : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.G_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Goal_Id_Valid (Why_Node_Id (Id)));
   end Goal_Set_Def;

   ------------------------------------
   -- Logic_Type_Append_To_Arg_Types --
   ------------------------------------

   procedure Logic_Type_Append_To_Arg_Types
     (Id       : W_Logic_Type_Unchecked_Id;
      New_Item : W_Logic_Arg_Type_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.LT_Arg_Types, +New_Item);
      Update_Validity_Status
        (+Id,
         Logic_Type_Id_Valid (Why_Node_Id (Id)));
   end Logic_Type_Append_To_Arg_Types;

   -------------------------------------
   -- Logic_Type_Prepend_To_Arg_Types --
   -------------------------------------

   procedure Logic_Type_Prepend_To_Arg_Types
     (Id       : W_Logic_Type_Unchecked_Id;
      New_Item : W_Logic_Arg_Type_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.LT_Arg_Types, +New_Item);
      Update_Validity_Status
        (+Id,
         Logic_Type_Id_Valid (Why_Node_Id (Id)));
   end Logic_Type_Prepend_To_Arg_Types;

   ------------------------------------
   -- Logic_Type_Append_To_Arg_Types --
   ------------------------------------

   procedure Logic_Type_Append_To_Arg_Types
     (Id       : W_Logic_Type_Id;
      New_Item : W_Logic_Arg_Type_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.LT_Arg_Types, +New_Item);
      Update_Validity_Status
        (+Id,
         Logic_Type_Id_Valid (Why_Node_Id (Id)));
   end Logic_Type_Append_To_Arg_Types;

   -------------------------------------
   -- Logic_Type_Prepend_To_Arg_Types --
   -------------------------------------

   procedure Logic_Type_Prepend_To_Arg_Types
     (Id       : W_Logic_Type_Id;
      New_Item : W_Logic_Arg_Type_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.LT_Arg_Types, +New_Item);
      Update_Validity_Status
        (+Id,
         Logic_Type_Id_Valid (Why_Node_Id (Id)));
   end Logic_Type_Prepend_To_Arg_Types;

   --------------------------------
   -- Logic_Type_Set_Return_Type --
   --------------------------------

   procedure Logic_Type_Set_Return_Type
     (Id          : W_Logic_Type_Unchecked_Id;
      Return_Type : W_Logic_Return_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.LT_Return_Type := +Return_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Return_Type), +Id);
      Update_Validity_Status
        (+Id,
         Logic_Type_Id_Valid (Why_Node_Id (Id)));
   end Logic_Type_Set_Return_Type;

   --------------------------------
   -- Logic_Type_Set_Return_Type --
   --------------------------------

   procedure Logic_Type_Set_Return_Type
     (Id          : W_Logic_Type_Id;
      Return_Type : W_Logic_Return_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.LT_Return_Type := +Return_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Return_Type), +Id);
      Update_Validity_Status
        (+Id,
         Logic_Type_Id_Valid (Why_Node_Id (Id)));
   end Logic_Type_Set_Return_Type;

   ---------------------------
   -- Logic_Binder_Set_Name --
   ---------------------------

   procedure Logic_Binder_Set_Name
     (Id   : W_Logic_Binder_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.LB_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Logic_Binder_Id_Valid (Why_Node_Id (Id)));
   end Logic_Binder_Set_Name;

   ---------------------------
   -- Logic_Binder_Set_Name --
   ---------------------------

   procedure Logic_Binder_Set_Name
     (Id   : W_Logic_Binder_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.LB_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Logic_Binder_Id_Valid (Why_Node_Id (Id)));
   end Logic_Binder_Set_Name;

   ---------------------------------
   -- Logic_Binder_Set_Param_Type --
   ---------------------------------

   procedure Logic_Binder_Set_Param_Type
     (Id         : W_Logic_Binder_Unchecked_Id;
      Param_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.LB_Param_Type := +Param_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Param_Type), +Id);
      Update_Validity_Status
        (+Id,
         Logic_Binder_Id_Valid (Why_Node_Id (Id)));
   end Logic_Binder_Set_Param_Type;

   ---------------------------------
   -- Logic_Binder_Set_Param_Type --
   ---------------------------------

   procedure Logic_Binder_Set_Param_Type
     (Id         : W_Logic_Binder_Id;
      Param_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.LB_Param_Type := +Param_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Param_Type), +Id);
      Update_Validity_Status
        (+Id,
         Logic_Binder_Id_Valid (Why_Node_Id (Id)));
   end Logic_Binder_Set_Param_Type;

   -----------------------------
   -- Inductive_Case_Set_Name --
   -----------------------------

   procedure Inductive_Case_Set_Name
     (Id   : W_Inductive_Case_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.IC_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Inductive_Case_Id_Valid (Why_Node_Id (Id)));
   end Inductive_Case_Set_Name;

   -----------------------------
   -- Inductive_Case_Set_Name --
   -----------------------------

   procedure Inductive_Case_Set_Name
     (Id   : W_Inductive_Case_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.IC_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Inductive_Case_Id_Valid (Why_Node_Id (Id)));
   end Inductive_Case_Set_Name;

   -----------------------------
   -- Inductive_Case_Set_Pred --
   -----------------------------

   procedure Inductive_Case_Set_Pred
     (Id   : W_Inductive_Case_Unchecked_Id;
      Pred : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.IC_Pred := +Pred;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pred), +Id);
      Update_Validity_Status
        (+Id,
         Inductive_Case_Id_Valid (Why_Node_Id (Id)));
   end Inductive_Case_Set_Pred;

   -----------------------------
   -- Inductive_Case_Set_Pred --
   -----------------------------

   procedure Inductive_Case_Set_Pred
     (Id   : W_Inductive_Case_Id;
      Pred : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.IC_Pred := +Pred;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pred), +Id);
      Update_Validity_Status
        (+Id,
         Inductive_Case_Id_Valid (Why_Node_Id (Id)));
   end Inductive_Case_Set_Pred;

   -----------------------------------------------------
   -- Transparent_Type_Definition_Set_Type_Definition --
   -----------------------------------------------------

   procedure Transparent_Type_Definition_Set_Type_Definition
     (Id              : W_Transparent_Type_Definition_Unchecked_Id;
      Type_Definition : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.Tr_Type_Definition := +Type_Definition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Type_Definition), +Id);
      Update_Validity_Status
        (+Id,
         Transparent_Type_Definition_Id_Valid (Why_Node_Id (Id)));
   end Transparent_Type_Definition_Set_Type_Definition;

   -----------------------------------------------------
   -- Transparent_Type_Definition_Set_Type_Definition --
   -----------------------------------------------------

   procedure Transparent_Type_Definition_Set_Type_Definition
     (Id              : W_Transparent_Type_Definition_Id;
      Type_Definition : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.Tr_Type_Definition := +Type_Definition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Type_Definition), +Id);
      Update_Validity_Status
        (+Id,
         Transparent_Type_Definition_Id_Valid (Why_Node_Id (Id)));
   end Transparent_Type_Definition_Set_Type_Definition;

   -------------------------------------------
   -- Adt_Definition_Append_To_Constructors --
   -------------------------------------------

   procedure Adt_Definition_Append_To_Constructors
     (Id       : W_Adt_Definition_Unchecked_Id;
      New_Item : W_Constr_Decl_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.Adt_Constructors, +New_Item);
      Update_Validity_Status
        (+Id,
         Adt_Definition_Id_Valid (Why_Node_Id (Id)));
   end Adt_Definition_Append_To_Constructors;

   --------------------------------------------
   -- Adt_Definition_Prepend_To_Constructors --
   --------------------------------------------

   procedure Adt_Definition_Prepend_To_Constructors
     (Id       : W_Adt_Definition_Unchecked_Id;
      New_Item : W_Constr_Decl_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.Adt_Constructors, +New_Item);
      Update_Validity_Status
        (+Id,
         Adt_Definition_Id_Valid (Why_Node_Id (Id)));
   end Adt_Definition_Prepend_To_Constructors;

   -------------------------------------------
   -- Adt_Definition_Append_To_Constructors --
   -------------------------------------------

   procedure Adt_Definition_Append_To_Constructors
     (Id       : W_Adt_Definition_Id;
      New_Item : W_Constr_Decl_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.Adt_Constructors, +New_Item);
      Update_Validity_Status
        (+Id,
         Adt_Definition_Id_Valid (Why_Node_Id (Id)));
   end Adt_Definition_Append_To_Constructors;

   --------------------------------------------
   -- Adt_Definition_Prepend_To_Constructors --
   --------------------------------------------

   procedure Adt_Definition_Prepend_To_Constructors
     (Id       : W_Adt_Definition_Id;
      New_Item : W_Constr_Decl_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.Adt_Constructors, +New_Item);
      Update_Validity_Status
        (+Id,
         Adt_Definition_Id_Valid (Why_Node_Id (Id)));
   end Adt_Definition_Prepend_To_Constructors;

   --------------------------
   -- Constr_Decl_Set_Name --
   --------------------------

   procedure Constr_Decl_Set_Name
     (Id   : W_Constr_Decl_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.C_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Constr_Decl_Id_Valid (Why_Node_Id (Id)));
   end Constr_Decl_Set_Name;

   --------------------------
   -- Constr_Decl_Set_Name --
   --------------------------

   procedure Constr_Decl_Set_Name
     (Id   : W_Constr_Decl_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.C_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Constr_Decl_Id_Valid (Why_Node_Id (Id)));
   end Constr_Decl_Set_Name;

   ------------------------------------
   -- Constr_Decl_Append_To_Arg_List --
   ------------------------------------

   procedure Constr_Decl_Append_To_Arg_List
     (Id       : W_Constr_Decl_Unchecked_Id;
      New_Item : W_Primitive_Type_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.C_Arg_List, +New_Item);
      Update_Validity_Status
        (+Id,
         Constr_Decl_Id_Valid (Why_Node_Id (Id)));
   end Constr_Decl_Append_To_Arg_List;

   -------------------------------------
   -- Constr_Decl_Prepend_To_Arg_List --
   -------------------------------------

   procedure Constr_Decl_Prepend_To_Arg_List
     (Id       : W_Constr_Decl_Unchecked_Id;
      New_Item : W_Primitive_Type_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.C_Arg_List, +New_Item);
      Update_Validity_Status
        (+Id,
         Constr_Decl_Id_Valid (Why_Node_Id (Id)));
   end Constr_Decl_Prepend_To_Arg_List;

   ------------------------------------
   -- Constr_Decl_Append_To_Arg_List --
   ------------------------------------

   procedure Constr_Decl_Append_To_Arg_List
     (Id       : W_Constr_Decl_Id;
      New_Item : W_Primitive_Type_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.C_Arg_List, +New_Item);
      Update_Validity_Status
        (+Id,
         Constr_Decl_Id_Valid (Why_Node_Id (Id)));
   end Constr_Decl_Append_To_Arg_List;

   -------------------------------------
   -- Constr_Decl_Prepend_To_Arg_List --
   -------------------------------------

   procedure Constr_Decl_Prepend_To_Arg_List
     (Id       : W_Constr_Decl_Id;
      New_Item : W_Primitive_Type_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.C_Arg_List, +New_Item);
      Update_Validity_Status
        (+Id,
         Constr_Decl_Id_Valid (Why_Node_Id (Id)));
   end Constr_Decl_Prepend_To_Arg_List;

   -----------------------------
   -- Effects_Append_To_Reads --
   -----------------------------

   procedure Effects_Append_To_Reads
     (Id       : W_Effects_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.E_Reads, +New_Item);
      Update_Validity_Status
        (+Id,
         Effects_Id_Valid (Why_Node_Id (Id)));
   end Effects_Append_To_Reads;

   ------------------------------
   -- Effects_Prepend_To_Reads --
   ------------------------------

   procedure Effects_Prepend_To_Reads
     (Id       : W_Effects_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.E_Reads, +New_Item);
      Update_Validity_Status
        (+Id,
         Effects_Id_Valid (Why_Node_Id (Id)));
   end Effects_Prepend_To_Reads;

   -----------------------------
   -- Effects_Append_To_Reads --
   -----------------------------

   procedure Effects_Append_To_Reads
     (Id       : W_Effects_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.E_Reads, +New_Item);
      Update_Validity_Status
        (+Id,
         Effects_Id_Valid (Why_Node_Id (Id)));
   end Effects_Append_To_Reads;

   ------------------------------
   -- Effects_Prepend_To_Reads --
   ------------------------------

   procedure Effects_Prepend_To_Reads
     (Id       : W_Effects_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.E_Reads, +New_Item);
      Update_Validity_Status
        (+Id,
         Effects_Id_Valid (Why_Node_Id (Id)));
   end Effects_Prepend_To_Reads;

   ------------------------------
   -- Effects_Append_To_Writes --
   ------------------------------

   procedure Effects_Append_To_Writes
     (Id       : W_Effects_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.E_Writes, +New_Item);
      Update_Validity_Status
        (+Id,
         Effects_Id_Valid (Why_Node_Id (Id)));
   end Effects_Append_To_Writes;

   -------------------------------
   -- Effects_Prepend_To_Writes --
   -------------------------------

   procedure Effects_Prepend_To_Writes
     (Id       : W_Effects_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.E_Writes, +New_Item);
      Update_Validity_Status
        (+Id,
         Effects_Id_Valid (Why_Node_Id (Id)));
   end Effects_Prepend_To_Writes;

   ------------------------------
   -- Effects_Append_To_Writes --
   ------------------------------

   procedure Effects_Append_To_Writes
     (Id       : W_Effects_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.E_Writes, +New_Item);
      Update_Validity_Status
        (+Id,
         Effects_Id_Valid (Why_Node_Id (Id)));
   end Effects_Append_To_Writes;

   -------------------------------
   -- Effects_Prepend_To_Writes --
   -------------------------------

   procedure Effects_Prepend_To_Writes
     (Id       : W_Effects_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.E_Writes, +New_Item);
      Update_Validity_Status
        (+Id,
         Effects_Id_Valid (Why_Node_Id (Id)));
   end Effects_Prepend_To_Writes;

   ------------------------------
   -- Effects_Append_To_Raises --
   ------------------------------

   procedure Effects_Append_To_Raises
     (Id       : W_Effects_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.E_Raises, +New_Item);
      Update_Validity_Status
        (+Id,
         Effects_Id_Valid (Why_Node_Id (Id)));
   end Effects_Append_To_Raises;

   -------------------------------
   -- Effects_Prepend_To_Raises --
   -------------------------------

   procedure Effects_Prepend_To_Raises
     (Id       : W_Effects_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.E_Raises, +New_Item);
      Update_Validity_Status
        (+Id,
         Effects_Id_Valid (Why_Node_Id (Id)));
   end Effects_Prepend_To_Raises;

   ------------------------------
   -- Effects_Append_To_Raises --
   ------------------------------

   procedure Effects_Append_To_Raises
     (Id       : W_Effects_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.E_Raises, +New_Item);
      Update_Validity_Status
        (+Id,
         Effects_Id_Valid (Why_Node_Id (Id)));
   end Effects_Append_To_Raises;

   -------------------------------
   -- Effects_Prepend_To_Raises --
   -------------------------------

   procedure Effects_Prepend_To_Raises
     (Id       : W_Effects_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.E_Raises, +New_Item);
      Update_Validity_Status
        (+Id,
         Effects_Id_Valid (Why_Node_Id (Id)));
   end Effects_Prepend_To_Raises;

   ----------------------------
   -- Postcondition_Set_Pred --
   ----------------------------

   procedure Postcondition_Set_Pred
     (Id   : W_Postcondition_Unchecked_Id;
      Pred : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.POST_Pred := +Pred;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pred), +Id);
      Update_Validity_Status
        (+Id,
         Postcondition_Id_Valid (Why_Node_Id (Id)));
   end Postcondition_Set_Pred;

   ----------------------------
   -- Postcondition_Set_Pred --
   ----------------------------

   procedure Postcondition_Set_Pred
     (Id   : W_Postcondition_Id;
      Pred : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.POST_Pred := +Pred;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pred), +Id);
      Update_Validity_Status
        (+Id,
         Postcondition_Id_Valid (Why_Node_Id (Id)));
   end Postcondition_Set_Pred;

   --------------------------------------
   -- Postcondition_Append_To_Handlers --
   --------------------------------------

   procedure Postcondition_Append_To_Handlers
     (Id       : W_Postcondition_Unchecked_Id;
      New_Item : W_Exn_Condition_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.POST_Handlers, +New_Item);
      Update_Validity_Status
        (+Id,
         Postcondition_Id_Valid (Why_Node_Id (Id)));
   end Postcondition_Append_To_Handlers;

   ---------------------------------------
   -- Postcondition_Prepend_To_Handlers --
   ---------------------------------------

   procedure Postcondition_Prepend_To_Handlers
     (Id       : W_Postcondition_Unchecked_Id;
      New_Item : W_Exn_Condition_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.POST_Handlers, +New_Item);
      Update_Validity_Status
        (+Id,
         Postcondition_Id_Valid (Why_Node_Id (Id)));
   end Postcondition_Prepend_To_Handlers;

   --------------------------------------
   -- Postcondition_Append_To_Handlers --
   --------------------------------------

   procedure Postcondition_Append_To_Handlers
     (Id       : W_Postcondition_Id;
      New_Item : W_Exn_Condition_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.POST_Handlers, +New_Item);
      Update_Validity_Status
        (+Id,
         Postcondition_Id_Valid (Why_Node_Id (Id)));
   end Postcondition_Append_To_Handlers;

   ---------------------------------------
   -- Postcondition_Prepend_To_Handlers --
   ---------------------------------------

   procedure Postcondition_Prepend_To_Handlers
     (Id       : W_Postcondition_Id;
      New_Item : W_Exn_Condition_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.POST_Handlers, +New_Item);
      Update_Validity_Status
        (+Id,
         Postcondition_Id_Valid (Why_Node_Id (Id)));
   end Postcondition_Prepend_To_Handlers;

   --------------------------------
   -- Exn_Condition_Set_Exn_Case --
   --------------------------------

   procedure Exn_Condition_Set_Exn_Case
     (Id       : W_Exn_Condition_Unchecked_Id;
      Exn_Case : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.EC_Exn_Case := +Exn_Case;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Exn_Case), +Id);
      Update_Validity_Status
        (+Id,
         Exn_Condition_Id_Valid (Why_Node_Id (Id)));
   end Exn_Condition_Set_Exn_Case;

   --------------------------------
   -- Exn_Condition_Set_Exn_Case --
   --------------------------------

   procedure Exn_Condition_Set_Exn_Case
     (Id       : W_Exn_Condition_Id;
      Exn_Case : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.EC_Exn_Case := +Exn_Case;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Exn_Case), +Id);
      Update_Validity_Status
        (+Id,
         Exn_Condition_Id_Valid (Why_Node_Id (Id)));
   end Exn_Condition_Set_Exn_Case;

   ----------------------------
   -- Exn_Condition_Set_Pred --
   ----------------------------

   procedure Exn_Condition_Set_Pred
     (Id   : W_Exn_Condition_Unchecked_Id;
      Pred : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.EC_Pred := +Pred;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pred), +Id);
      Update_Validity_Status
        (+Id,
         Exn_Condition_Id_Valid (Why_Node_Id (Id)));
   end Exn_Condition_Set_Pred;

   ----------------------------
   -- Exn_Condition_Set_Pred --
   ----------------------------

   procedure Exn_Condition_Set_Pred
     (Id   : W_Exn_Condition_Id;
      Pred : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.EC_Pred := +Pred;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pred), +Id);
      Update_Validity_Status
        (+Id,
         Exn_Condition_Id_Valid (Why_Node_Id (Id)));
   end Exn_Condition_Set_Pred;

   ---------------------------
   -- Prog_Constant_Set_Def --
   ---------------------------

   procedure Prog_Constant_Set_Def
     (Id  : W_Prog_Constant_Unchecked_Id;
      Def : W_Constant_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PC_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Prog_Constant_Id_Valid (Why_Node_Id (Id)));
   end Prog_Constant_Set_Def;

   ---------------------------
   -- Prog_Constant_Set_Def --
   ---------------------------

   procedure Prog_Constant_Set_Def
     (Id  : W_Prog_Constant_Id;
      Def : W_Constant_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PC_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Prog_Constant_Id_Valid (Why_Node_Id (Id)));
   end Prog_Constant_Set_Def;

   -----------------------------
   -- Prog_Identifier_Set_Def --
   -----------------------------

   procedure Prog_Identifier_Set_Def
     (Id  : W_Prog_Identifier_Unchecked_Id;
      Def : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PI_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Prog_Identifier_Id_Valid (Why_Node_Id (Id)));
   end Prog_Identifier_Set_Def;

   -----------------------------
   -- Prog_Identifier_Set_Def --
   -----------------------------

   procedure Prog_Identifier_Set_Def
     (Id  : W_Prog_Identifier_Id;
      Def : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PI_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Prog_Identifier_Id_Valid (Why_Node_Id (Id)));
   end Prog_Identifier_Set_Def;

   ---------------------------
   -- Any_Expr_Set_Any_Type --
   ---------------------------

   procedure Any_Expr_Set_Any_Type
     (Id       : W_Any_Expr_Unchecked_Id;
      Any_Type : W_Computation_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AE_Any_Type := +Any_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Any_Type), +Id);
      Update_Validity_Status
        (+Id,
         Any_Expr_Id_Valid (Why_Node_Id (Id)));
   end Any_Expr_Set_Any_Type;

   ---------------------------
   -- Any_Expr_Set_Any_Type --
   ---------------------------

   procedure Any_Expr_Set_Any_Type
     (Id       : W_Any_Expr_Id;
      Any_Type : W_Computation_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AE_Any_Type := +Any_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Any_Type), +Id);
      Update_Validity_Status
        (+Id,
         Any_Expr_Id_Valid (Why_Node_Id (Id)));
   end Any_Expr_Set_Any_Type;

   -------------------
   -- Deref_Set_Ref --
   -------------------

   procedure Deref_Set_Ref
     (Id  : W_Deref_Unchecked_Id;
      Ref : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.D_Ref := +Ref;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Ref), +Id);
      Update_Validity_Status
        (+Id,
         Deref_Id_Valid (Why_Node_Id (Id)));
   end Deref_Set_Ref;

   -------------------
   -- Deref_Set_Ref --
   -------------------

   procedure Deref_Set_Ref
     (Id  : W_Deref_Id;
      Ref : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.D_Ref := +Ref;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Ref), +Id);
      Update_Validity_Status
        (+Id,
         Deref_Id_Valid (Why_Node_Id (Id)));
   end Deref_Set_Ref;

   -------------------------
   -- Assignment_Set_Name --
   -------------------------

   procedure Assignment_Set_Name
     (Id   : W_Assignment_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.A_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Assignment_Id_Valid (Why_Node_Id (Id)));
   end Assignment_Set_Name;

   -------------------------
   -- Assignment_Set_Name --
   -------------------------

   procedure Assignment_Set_Name
     (Id   : W_Assignment_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.A_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Assignment_Id_Valid (Why_Node_Id (Id)));
   end Assignment_Set_Name;

   --------------------------
   -- Assignment_Set_Value --
   --------------------------

   procedure Assignment_Set_Value
     (Id    : W_Assignment_Unchecked_Id;
      Value : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.A_Value := +Value;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Value), +Id);
      Update_Validity_Status
        (+Id,
         Assignment_Id_Valid (Why_Node_Id (Id)));
   end Assignment_Set_Value;

   --------------------------
   -- Assignment_Set_Value --
   --------------------------

   procedure Assignment_Set_Value
     (Id    : W_Assignment_Id;
      Value : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.A_Value := +Value;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Value), +Id);
      Update_Validity_Status
        (+Id,
         Assignment_Id_Valid (Why_Node_Id (Id)));
   end Assignment_Set_Value;

   ---------------------------
   -- Array_Access_Set_Name --
   ---------------------------

   procedure Array_Access_Set_Name
     (Id   : W_Array_Access_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AA_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Array_Access_Id_Valid (Why_Node_Id (Id)));
   end Array_Access_Set_Name;

   ---------------------------
   -- Array_Access_Set_Name --
   ---------------------------

   procedure Array_Access_Set_Name
     (Id   : W_Array_Access_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AA_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Array_Access_Id_Valid (Why_Node_Id (Id)));
   end Array_Access_Set_Name;

   ----------------------------
   -- Array_Access_Set_Index --
   ----------------------------

   procedure Array_Access_Set_Index
     (Id    : W_Array_Access_Unchecked_Id;
      Index : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AA_Index := +Index;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Index), +Id);
      Update_Validity_Status
        (+Id,
         Array_Access_Id_Valid (Why_Node_Id (Id)));
   end Array_Access_Set_Index;

   ----------------------------
   -- Array_Access_Set_Index --
   ----------------------------

   procedure Array_Access_Set_Index
     (Id    : W_Array_Access_Id;
      Index : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AA_Index := +Index;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Index), +Id);
      Update_Validity_Status
        (+Id,
         Array_Access_Id_Valid (Why_Node_Id (Id)));
   end Array_Access_Set_Index;

   ---------------------------
   -- Array_Update_Set_Name --
   ---------------------------

   procedure Array_Update_Set_Name
     (Id   : W_Array_Update_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AU_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Array_Update_Id_Valid (Why_Node_Id (Id)));
   end Array_Update_Set_Name;

   ---------------------------
   -- Array_Update_Set_Name --
   ---------------------------

   procedure Array_Update_Set_Name
     (Id   : W_Array_Update_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AU_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Array_Update_Id_Valid (Why_Node_Id (Id)));
   end Array_Update_Set_Name;

   ----------------------------
   -- Array_Update_Set_Index --
   ----------------------------

   procedure Array_Update_Set_Index
     (Id    : W_Array_Update_Unchecked_Id;
      Index : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AU_Index := +Index;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Index), +Id);
      Update_Validity_Status
        (+Id,
         Array_Update_Id_Valid (Why_Node_Id (Id)));
   end Array_Update_Set_Index;

   ----------------------------
   -- Array_Update_Set_Index --
   ----------------------------

   procedure Array_Update_Set_Index
     (Id    : W_Array_Update_Id;
      Index : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AU_Index := +Index;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Index), +Id);
      Update_Validity_Status
        (+Id,
         Array_Update_Id_Valid (Why_Node_Id (Id)));
   end Array_Update_Set_Index;

   ----------------------------
   -- Array_Update_Set_Value --
   ----------------------------

   procedure Array_Update_Set_Value
     (Id    : W_Array_Update_Unchecked_Id;
      Value : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AU_Value := +Value;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Value), +Id);
      Update_Validity_Status
        (+Id,
         Array_Update_Id_Valid (Why_Node_Id (Id)));
   end Array_Update_Set_Value;

   ----------------------------
   -- Array_Update_Set_Value --
   ----------------------------

   procedure Array_Update_Set_Value
     (Id    : W_Array_Update_Id;
      Value : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AU_Value := +Value;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Value), +Id);
      Update_Validity_Status
        (+Id,
         Array_Update_Id_Valid (Why_Node_Id (Id)));
   end Array_Update_Set_Value;

   -------------------------
   -- Infix_Call_Set_Left --
   -------------------------

   procedure Infix_Call_Set_Left
     (Id   : W_Infix_Call_Unchecked_Id;
      Left : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.IC_Left := +Left;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Left), +Id);
      Update_Validity_Status
        (+Id,
         Infix_Call_Id_Valid (Why_Node_Id (Id)));
   end Infix_Call_Set_Left;

   -------------------------
   -- Infix_Call_Set_Left --
   -------------------------

   procedure Infix_Call_Set_Left
     (Id   : W_Infix_Call_Id;
      Left : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.IC_Left := +Left;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Left), +Id);
      Update_Validity_Status
        (+Id,
         Infix_Call_Id_Valid (Why_Node_Id (Id)));
   end Infix_Call_Set_Left;

   --------------------------
   -- Infix_Call_Set_Infix --
   --------------------------

   procedure Infix_Call_Set_Infix
     (Id    : W_Infix_Call_Unchecked_Id;
      Infix : W_Infix_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.IC_Infix := +Infix;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Infix), +Id);
      Update_Validity_Status
        (+Id,
         Infix_Call_Id_Valid (Why_Node_Id (Id)));
   end Infix_Call_Set_Infix;

   --------------------------
   -- Infix_Call_Set_Infix --
   --------------------------

   procedure Infix_Call_Set_Infix
     (Id    : W_Infix_Call_Id;
      Infix : W_Infix_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.IC_Infix := +Infix;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Infix), +Id);
      Update_Validity_Status
        (+Id,
         Infix_Call_Id_Valid (Why_Node_Id (Id)));
   end Infix_Call_Set_Infix;

   --------------------------
   -- Infix_Call_Set_Right --
   --------------------------

   procedure Infix_Call_Set_Right
     (Id    : W_Infix_Call_Unchecked_Id;
      Right : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.IC_Right := +Right;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right), +Id);
      Update_Validity_Status
        (+Id,
         Infix_Call_Id_Valid (Why_Node_Id (Id)));
   end Infix_Call_Set_Right;

   --------------------------
   -- Infix_Call_Set_Right --
   --------------------------

   procedure Infix_Call_Set_Right
     (Id    : W_Infix_Call_Id;
      Right : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.IC_Right := +Right;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Right), +Id);
      Update_Validity_Status
        (+Id,
         Infix_Call_Id_Valid (Why_Node_Id (Id)));
   end Infix_Call_Set_Right;

   ----------------------------
   -- Prefix_Call_Set_Prefix --
   ----------------------------

   procedure Prefix_Call_Set_Prefix
     (Id     : W_Prefix_Call_Unchecked_Id;
      Prefix : W_Prefix_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PC_Prefix := +Prefix;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Prefix), +Id);
      Update_Validity_Status
        (+Id,
         Prefix_Call_Id_Valid (Why_Node_Id (Id)));
   end Prefix_Call_Set_Prefix;

   ----------------------------
   -- Prefix_Call_Set_Prefix --
   ----------------------------

   procedure Prefix_Call_Set_Prefix
     (Id     : W_Prefix_Call_Id;
      Prefix : W_Prefix_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PC_Prefix := +Prefix;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Prefix), +Id);
      Update_Validity_Status
        (+Id,
         Prefix_Call_Id_Valid (Why_Node_Id (Id)));
   end Prefix_Call_Set_Prefix;

   -----------------------------
   -- Prefix_Call_Set_Operand --
   -----------------------------

   procedure Prefix_Call_Set_Operand
     (Id      : W_Prefix_Call_Unchecked_Id;
      Operand : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PC_Operand := +Operand;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Operand), +Id);
      Update_Validity_Status
        (+Id,
         Prefix_Call_Id_Valid (Why_Node_Id (Id)));
   end Prefix_Call_Set_Operand;

   -----------------------------
   -- Prefix_Call_Set_Operand --
   -----------------------------

   procedure Prefix_Call_Set_Operand
     (Id      : W_Prefix_Call_Id;
      Operand : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PC_Operand := +Operand;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Operand), +Id);
      Update_Validity_Status
        (+Id,
         Prefix_Call_Id_Valid (Why_Node_Id (Id)));
   end Prefix_Call_Set_Operand;

   ---------------------------
   -- Binding_Prog_Set_Name --
   ---------------------------

   procedure Binding_Prog_Set_Name
     (Id   : W_Binding_Prog_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPG_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Prog_Id_Valid (Why_Node_Id (Id)));
   end Binding_Prog_Set_Name;

   ---------------------------
   -- Binding_Prog_Set_Name --
   ---------------------------

   procedure Binding_Prog_Set_Name
     (Id   : W_Binding_Prog_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPG_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Prog_Id_Valid (Why_Node_Id (Id)));
   end Binding_Prog_Set_Name;

   --------------------------
   -- Binding_Prog_Set_Def --
   --------------------------

   procedure Binding_Prog_Set_Def
     (Id  : W_Binding_Prog_Unchecked_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPG_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Prog_Id_Valid (Why_Node_Id (Id)));
   end Binding_Prog_Set_Def;

   --------------------------
   -- Binding_Prog_Set_Def --
   --------------------------

   procedure Binding_Prog_Set_Def
     (Id  : W_Binding_Prog_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPG_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Prog_Id_Valid (Why_Node_Id (Id)));
   end Binding_Prog_Set_Def;

   ------------------------------
   -- Binding_Prog_Set_Context --
   ------------------------------

   procedure Binding_Prog_Set_Context
     (Id      : W_Binding_Prog_Unchecked_Id;
      Context : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPG_Context := +Context;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Context), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Prog_Id_Valid (Why_Node_Id (Id)));
   end Binding_Prog_Set_Context;

   ------------------------------
   -- Binding_Prog_Set_Context --
   ------------------------------

   procedure Binding_Prog_Set_Context
     (Id      : W_Binding_Prog_Id;
      Context : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPG_Context := +Context;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Context), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Prog_Id_Valid (Why_Node_Id (Id)));
   end Binding_Prog_Set_Context;

   --------------------------
   -- Binding_Ref_Set_Name --
   --------------------------

   procedure Binding_Ref_Set_Name
     (Id   : W_Binding_Ref_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPG_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Ref_Id_Valid (Why_Node_Id (Id)));
   end Binding_Ref_Set_Name;

   --------------------------
   -- Binding_Ref_Set_Name --
   --------------------------

   procedure Binding_Ref_Set_Name
     (Id   : W_Binding_Ref_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPG_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Ref_Id_Valid (Why_Node_Id (Id)));
   end Binding_Ref_Set_Name;

   -------------------------
   -- Binding_Ref_Set_Def --
   -------------------------

   procedure Binding_Ref_Set_Def
     (Id  : W_Binding_Ref_Unchecked_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPG_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Ref_Id_Valid (Why_Node_Id (Id)));
   end Binding_Ref_Set_Def;

   -------------------------
   -- Binding_Ref_Set_Def --
   -------------------------

   procedure Binding_Ref_Set_Def
     (Id  : W_Binding_Ref_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPG_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Ref_Id_Valid (Why_Node_Id (Id)));
   end Binding_Ref_Set_Def;

   -----------------------------
   -- Binding_Ref_Set_Context --
   -----------------------------

   procedure Binding_Ref_Set_Context
     (Id      : W_Binding_Ref_Unchecked_Id;
      Context : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPG_Context := +Context;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Context), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Ref_Id_Valid (Why_Node_Id (Id)));
   end Binding_Ref_Set_Context;

   -----------------------------
   -- Binding_Ref_Set_Context --
   -----------------------------

   procedure Binding_Ref_Set_Context
     (Id      : W_Binding_Ref_Id;
      Context : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BPG_Context := +Context;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Context), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Ref_Id_Valid (Why_Node_Id (Id)));
   end Binding_Ref_Set_Context;

   ------------------------------------
   -- Conditional_Prog_Set_Condition --
   ------------------------------------

   procedure Conditional_Prog_Set_Condition
     (Id        : W_Conditional_Prog_Unchecked_Id;
      Condition : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CPG_Condition := +Condition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Condition), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Prog_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Prog_Set_Condition;

   ------------------------------------
   -- Conditional_Prog_Set_Condition --
   ------------------------------------

   procedure Conditional_Prog_Set_Condition
     (Id        : W_Conditional_Prog_Id;
      Condition : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CPG_Condition := +Condition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Condition), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Prog_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Prog_Set_Condition;

   ------------------------------------
   -- Conditional_Prog_Set_Then_Part --
   ------------------------------------

   procedure Conditional_Prog_Set_Then_Part
     (Id        : W_Conditional_Prog_Unchecked_Id;
      Then_Part : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CPG_Then_Part := +Then_Part;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Then_Part), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Prog_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Prog_Set_Then_Part;

   ------------------------------------
   -- Conditional_Prog_Set_Then_Part --
   ------------------------------------

   procedure Conditional_Prog_Set_Then_Part
     (Id        : W_Conditional_Prog_Id;
      Then_Part : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CPG_Then_Part := +Then_Part;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Then_Part), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Prog_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Prog_Set_Then_Part;

   ------------------------------------
   -- Conditional_Prog_Set_Else_Part --
   ------------------------------------

   procedure Conditional_Prog_Set_Else_Part
     (Id        : W_Conditional_Prog_Unchecked_Id;
      Else_Part : W_Prog_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CPG_Else_Part := +Else_Part;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Else_Part), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Prog_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Prog_Set_Else_Part;

   ------------------------------------
   -- Conditional_Prog_Set_Else_Part --
   ------------------------------------

   procedure Conditional_Prog_Set_Else_Part
     (Id        : W_Conditional_Prog_Id;
      Else_Part : W_Prog_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.CPG_Else_Part := +Else_Part;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Else_Part), +Id);
      Update_Validity_Status
        (+Id,
         Conditional_Prog_Id_Valid (Why_Node_Id (Id)));
   end Conditional_Prog_Set_Else_Part;

   ------------------------------
   -- While_Loop_Set_Condition --
   ------------------------------

   procedure While_Loop_Set_Condition
     (Id        : W_While_Loop_Unchecked_Id;
      Condition : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.WL_Condition := +Condition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Condition), +Id);
      Update_Validity_Status
        (+Id,
         While_Loop_Id_Valid (Why_Node_Id (Id)));
   end While_Loop_Set_Condition;

   ------------------------------
   -- While_Loop_Set_Condition --
   ------------------------------

   procedure While_Loop_Set_Condition
     (Id        : W_While_Loop_Id;
      Condition : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.WL_Condition := +Condition;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Condition), +Id);
      Update_Validity_Status
        (+Id,
         While_Loop_Id_Valid (Why_Node_Id (Id)));
   end While_Loop_Set_Condition;

   -------------------------------
   -- While_Loop_Set_Annotation --
   -------------------------------

   procedure While_Loop_Set_Annotation
     (Id         : W_While_Loop_Unchecked_Id;
      Annotation : W_Loop_Annot_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.WL_Annotation := +Annotation;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Annotation), +Id);
      Update_Validity_Status
        (+Id,
         While_Loop_Id_Valid (Why_Node_Id (Id)));
   end While_Loop_Set_Annotation;

   -------------------------------
   -- While_Loop_Set_Annotation --
   -------------------------------

   procedure While_Loop_Set_Annotation
     (Id         : W_While_Loop_Id;
      Annotation : W_Loop_Annot_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.WL_Annotation := +Annotation;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Annotation), +Id);
      Update_Validity_Status
        (+Id,
         While_Loop_Id_Valid (Why_Node_Id (Id)));
   end While_Loop_Set_Annotation;

   ---------------------------------
   -- While_Loop_Set_Loop_Content --
   ---------------------------------

   procedure While_Loop_Set_Loop_Content
     (Id           : W_While_Loop_Unchecked_Id;
      Loop_Content : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.WL_Loop_Content := +Loop_Content;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Loop_Content), +Id);
      Update_Validity_Status
        (+Id,
         While_Loop_Id_Valid (Why_Node_Id (Id)));
   end While_Loop_Set_Loop_Content;

   ---------------------------------
   -- While_Loop_Set_Loop_Content --
   ---------------------------------

   procedure While_Loop_Set_Loop_Content
     (Id           : W_While_Loop_Id;
      Loop_Content : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.WL_Loop_Content := +Loop_Content;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Loop_Content), +Id);
      Update_Validity_Status
        (+Id,
         While_Loop_Id_Valid (Why_Node_Id (Id)));
   end While_Loop_Set_Loop_Content;

   ---------------------------------------------
   -- Statement_Sequence_Append_To_Statements --
   ---------------------------------------------

   procedure Statement_Sequence_Append_To_Statements
     (Id       : W_Statement_Sequence_Unchecked_Id;
      New_Item : W_Prog_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.SS_Statements, +New_Item);
      Update_Validity_Status
        (+Id,
         Statement_Sequence_Id_Valid (Why_Node_Id (Id)));
   end Statement_Sequence_Append_To_Statements;

   ----------------------------------------------
   -- Statement_Sequence_Prepend_To_Statements --
   ----------------------------------------------

   procedure Statement_Sequence_Prepend_To_Statements
     (Id       : W_Statement_Sequence_Unchecked_Id;
      New_Item : W_Prog_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.SS_Statements, +New_Item);
      Update_Validity_Status
        (+Id,
         Statement_Sequence_Id_Valid (Why_Node_Id (Id)));
   end Statement_Sequence_Prepend_To_Statements;

   ---------------------------------------------
   -- Statement_Sequence_Append_To_Statements --
   ---------------------------------------------

   procedure Statement_Sequence_Append_To_Statements
     (Id       : W_Statement_Sequence_Id;
      New_Item : W_Prog_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.SS_Statements, +New_Item);
      Update_Validity_Status
        (+Id,
         Statement_Sequence_Id_Valid (Why_Node_Id (Id)));
   end Statement_Sequence_Append_To_Statements;

   ----------------------------------------------
   -- Statement_Sequence_Prepend_To_Statements --
   ----------------------------------------------

   procedure Statement_Sequence_Prepend_To_Statements
     (Id       : W_Statement_Sequence_Id;
      New_Item : W_Prog_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.SS_Statements, +New_Item);
      Update_Validity_Status
        (+Id,
         Statement_Sequence_Id_Valid (Why_Node_Id (Id)));
   end Statement_Sequence_Prepend_To_Statements;

   --------------------
   -- Label_Set_Name --
   --------------------

   procedure Label_Set_Name
     (Id   : W_Label_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.L_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Label_Id_Valid (Why_Node_Id (Id)));
   end Label_Set_Name;

   --------------------
   -- Label_Set_Name --
   --------------------

   procedure Label_Set_Name
     (Id   : W_Label_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.L_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Label_Id_Valid (Why_Node_Id (Id)));
   end Label_Set_Name;

   -------------------
   -- Label_Set_Def --
   -------------------

   procedure Label_Set_Def
     (Id  : W_Label_Unchecked_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.L_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Label_Id_Valid (Why_Node_Id (Id)));
   end Label_Set_Def;

   -------------------
   -- Label_Set_Def --
   -------------------

   procedure Label_Set_Def
     (Id  : W_Label_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.L_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Label_Id_Valid (Why_Node_Id (Id)));
   end Label_Set_Def;

   ----------------------------
   -- Assert_Append_To_Preds --
   ----------------------------

   procedure Assert_Append_To_Preds
     (Id       : W_Assert_Unchecked_Id;
      New_Item : W_Predicate_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.AS_Preds, +New_Item);
      Update_Validity_Status
        (+Id,
         Assert_Id_Valid (Why_Node_Id (Id)));
   end Assert_Append_To_Preds;

   -----------------------------
   -- Assert_Prepend_To_Preds --
   -----------------------------

   procedure Assert_Prepend_To_Preds
     (Id       : W_Assert_Unchecked_Id;
      New_Item : W_Predicate_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.AS_Preds, +New_Item);
      Update_Validity_Status
        (+Id,
         Assert_Id_Valid (Why_Node_Id (Id)));
   end Assert_Prepend_To_Preds;

   ----------------------------
   -- Assert_Append_To_Preds --
   ----------------------------

   procedure Assert_Append_To_Preds
     (Id       : W_Assert_Id;
      New_Item : W_Predicate_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.AS_Preds, +New_Item);
      Update_Validity_Status
        (+Id,
         Assert_Id_Valid (Why_Node_Id (Id)));
   end Assert_Append_To_Preds;

   -----------------------------
   -- Assert_Prepend_To_Preds --
   -----------------------------

   procedure Assert_Prepend_To_Preds
     (Id       : W_Assert_Id;
      New_Item : W_Predicate_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.AS_Preds, +New_Item);
      Update_Validity_Status
        (+Id,
         Assert_Id_Valid (Why_Node_Id (Id)));
   end Assert_Prepend_To_Preds;

   ---------------------
   -- Assert_Set_Prog --
   ---------------------

   procedure Assert_Set_Prog
     (Id   : W_Assert_Unchecked_Id;
      Prog : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AS_Prog := +Prog;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Prog), +Id);
      Update_Validity_Status
        (+Id,
         Assert_Id_Valid (Why_Node_Id (Id)));
   end Assert_Set_Prog;

   ---------------------
   -- Assert_Set_Prog --
   ---------------------

   procedure Assert_Set_Prog
     (Id   : W_Assert_Id;
      Prog : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.AS_Prog := +Prog;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Prog), +Id);
      Update_Validity_Status
        (+Id,
         Assert_Id_Valid (Why_Node_Id (Id)));
   end Assert_Set_Prog;

   -----------------------------
   -- Post_Assertion_Set_Prog --
   -----------------------------

   procedure Post_Assertion_Set_Prog
     (Id   : W_Post_Assertion_Unchecked_Id;
      Prog : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PA_Prog := +Prog;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Prog), +Id);
      Update_Validity_Status
        (+Id,
         Post_Assertion_Id_Valid (Why_Node_Id (Id)));
   end Post_Assertion_Set_Prog;

   -----------------------------
   -- Post_Assertion_Set_Prog --
   -----------------------------

   procedure Post_Assertion_Set_Prog
     (Id   : W_Post_Assertion_Id;
      Prog : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PA_Prog := +Prog;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Prog), +Id);
      Update_Validity_Status
        (+Id,
         Post_Assertion_Id_Valid (Why_Node_Id (Id)));
   end Post_Assertion_Set_Prog;

   -----------------------------
   -- Post_Assertion_Set_Post --
   -----------------------------

   procedure Post_Assertion_Set_Post
     (Id   : W_Post_Assertion_Unchecked_Id;
      Post : W_Postcondition_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PA_Post := +Post;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Post), +Id);
      Update_Validity_Status
        (+Id,
         Post_Assertion_Id_Valid (Why_Node_Id (Id)));
   end Post_Assertion_Set_Post;

   -----------------------------
   -- Post_Assertion_Set_Post --
   -----------------------------

   procedure Post_Assertion_Set_Post
     (Id   : W_Post_Assertion_Id;
      Post : W_Postcondition_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PA_Post := +Post;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Post), +Id);
      Update_Validity_Status
        (+Id,
         Post_Assertion_Id_Valid (Why_Node_Id (Id)));
   end Post_Assertion_Set_Post;

   -------------------------------
   -- Opaque_Assertion_Set_Prog --
   -------------------------------

   procedure Opaque_Assertion_Set_Prog
     (Id   : W_Opaque_Assertion_Unchecked_Id;
      Prog : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PA_Prog := +Prog;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Prog), +Id);
      Update_Validity_Status
        (+Id,
         Opaque_Assertion_Id_Valid (Why_Node_Id (Id)));
   end Opaque_Assertion_Set_Prog;

   -------------------------------
   -- Opaque_Assertion_Set_Prog --
   -------------------------------

   procedure Opaque_Assertion_Set_Prog
     (Id   : W_Opaque_Assertion_Id;
      Prog : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PA_Prog := +Prog;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Prog), +Id);
      Update_Validity_Status
        (+Id,
         Opaque_Assertion_Id_Valid (Why_Node_Id (Id)));
   end Opaque_Assertion_Set_Prog;

   -------------------------------
   -- Opaque_Assertion_Set_Post --
   -------------------------------

   procedure Opaque_Assertion_Set_Post
     (Id   : W_Opaque_Assertion_Unchecked_Id;
      Post : W_Postcondition_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PA_Post := +Post;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Post), +Id);
      Update_Validity_Status
        (+Id,
         Opaque_Assertion_Id_Valid (Why_Node_Id (Id)));
   end Opaque_Assertion_Set_Post;

   -------------------------------
   -- Opaque_Assertion_Set_Post --
   -------------------------------

   procedure Opaque_Assertion_Set_Post
     (Id   : W_Opaque_Assertion_Id;
      Post : W_Postcondition_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PA_Post := +Post;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Post), +Id);
      Update_Validity_Status
        (+Id,
         Opaque_Assertion_Id_Valid (Why_Node_Id (Id)));
   end Opaque_Assertion_Set_Post;

   -------------------------------
   -- Fun_Def_Append_To_Binders --
   -------------------------------

   procedure Fun_Def_Append_To_Binders
     (Id       : W_Fun_Def_Unchecked_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.FD_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Fun_Def_Id_Valid (Why_Node_Id (Id)));
   end Fun_Def_Append_To_Binders;

   --------------------------------
   -- Fun_Def_Prepend_To_Binders --
   --------------------------------

   procedure Fun_Def_Prepend_To_Binders
     (Id       : W_Fun_Def_Unchecked_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.FD_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Fun_Def_Id_Valid (Why_Node_Id (Id)));
   end Fun_Def_Prepend_To_Binders;

   -------------------------------
   -- Fun_Def_Append_To_Binders --
   -------------------------------

   procedure Fun_Def_Append_To_Binders
     (Id       : W_Fun_Def_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.FD_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Fun_Def_Id_Valid (Why_Node_Id (Id)));
   end Fun_Def_Append_To_Binders;

   --------------------------------
   -- Fun_Def_Prepend_To_Binders --
   --------------------------------

   procedure Fun_Def_Prepend_To_Binders
     (Id       : W_Fun_Def_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.FD_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Fun_Def_Id_Valid (Why_Node_Id (Id)));
   end Fun_Def_Prepend_To_Binders;

   ---------------------
   -- Fun_Def_Set_Pre --
   ---------------------

   procedure Fun_Def_Set_Pre
     (Id  : W_Fun_Def_Unchecked_Id;
      Pre : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.FD_Pre := +Pre;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pre), +Id);
      Update_Validity_Status
        (+Id,
         Fun_Def_Id_Valid (Why_Node_Id (Id)));
   end Fun_Def_Set_Pre;

   ---------------------
   -- Fun_Def_Set_Pre --
   ---------------------

   procedure Fun_Def_Set_Pre
     (Id  : W_Fun_Def_Id;
      Pre : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.FD_Pre := +Pre;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pre), +Id);
      Update_Validity_Status
        (+Id,
         Fun_Def_Id_Valid (Why_Node_Id (Id)));
   end Fun_Def_Set_Pre;

   ---------------------
   -- Fun_Def_Set_Def --
   ---------------------

   procedure Fun_Def_Set_Def
     (Id  : W_Fun_Def_Unchecked_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.FD_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Fun_Def_Id_Valid (Why_Node_Id (Id)));
   end Fun_Def_Set_Def;

   ---------------------
   -- Fun_Def_Set_Def --
   ---------------------

   procedure Fun_Def_Set_Def
     (Id  : W_Fun_Def_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.FD_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Fun_Def_Id_Valid (Why_Node_Id (Id)));
   end Fun_Def_Set_Def;

   --------------------------
   -- Binding_Fun_Set_Name --
   --------------------------

   procedure Binding_Fun_Set_Name
     (Id   : W_Binding_Fun_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BF_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Fun_Id_Valid (Why_Node_Id (Id)));
   end Binding_Fun_Set_Name;

   --------------------------
   -- Binding_Fun_Set_Name --
   --------------------------

   procedure Binding_Fun_Set_Name
     (Id   : W_Binding_Fun_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BF_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Fun_Id_Valid (Why_Node_Id (Id)));
   end Binding_Fun_Set_Name;

   -----------------------------------
   -- Binding_Fun_Append_To_Binders --
   -----------------------------------

   procedure Binding_Fun_Append_To_Binders
     (Id       : W_Binding_Fun_Unchecked_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.BF_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Binding_Fun_Id_Valid (Why_Node_Id (Id)));
   end Binding_Fun_Append_To_Binders;

   ------------------------------------
   -- Binding_Fun_Prepend_To_Binders --
   ------------------------------------

   procedure Binding_Fun_Prepend_To_Binders
     (Id       : W_Binding_Fun_Unchecked_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.BF_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Binding_Fun_Id_Valid (Why_Node_Id (Id)));
   end Binding_Fun_Prepend_To_Binders;

   -----------------------------------
   -- Binding_Fun_Append_To_Binders --
   -----------------------------------

   procedure Binding_Fun_Append_To_Binders
     (Id       : W_Binding_Fun_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.BF_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Binding_Fun_Id_Valid (Why_Node_Id (Id)));
   end Binding_Fun_Append_To_Binders;

   ------------------------------------
   -- Binding_Fun_Prepend_To_Binders --
   ------------------------------------

   procedure Binding_Fun_Prepend_To_Binders
     (Id       : W_Binding_Fun_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.BF_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Binding_Fun_Id_Valid (Why_Node_Id (Id)));
   end Binding_Fun_Prepend_To_Binders;

   -------------------------
   -- Binding_Fun_Set_Pre --
   -------------------------

   procedure Binding_Fun_Set_Pre
     (Id  : W_Binding_Fun_Unchecked_Id;
      Pre : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BF_Pre := +Pre;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pre), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Fun_Id_Valid (Why_Node_Id (Id)));
   end Binding_Fun_Set_Pre;

   -------------------------
   -- Binding_Fun_Set_Pre --
   -------------------------

   procedure Binding_Fun_Set_Pre
     (Id  : W_Binding_Fun_Id;
      Pre : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BF_Pre := +Pre;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pre), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Fun_Id_Valid (Why_Node_Id (Id)));
   end Binding_Fun_Set_Pre;

   -------------------------
   -- Binding_Fun_Set_Def --
   -------------------------

   procedure Binding_Fun_Set_Def
     (Id  : W_Binding_Fun_Unchecked_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BF_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Fun_Id_Valid (Why_Node_Id (Id)));
   end Binding_Fun_Set_Def;

   -------------------------
   -- Binding_Fun_Set_Def --
   -------------------------

   procedure Binding_Fun_Set_Def
     (Id  : W_Binding_Fun_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BF_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Fun_Id_Valid (Why_Node_Id (Id)));
   end Binding_Fun_Set_Def;

   -----------------------------
   -- Binding_Fun_Set_Context --
   -----------------------------

   procedure Binding_Fun_Set_Context
     (Id      : W_Binding_Fun_Unchecked_Id;
      Context : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BF_Context := +Context;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Context), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Fun_Id_Valid (Why_Node_Id (Id)));
   end Binding_Fun_Set_Context;

   -----------------------------
   -- Binding_Fun_Set_Context --
   -----------------------------

   procedure Binding_Fun_Set_Context
     (Id      : W_Binding_Fun_Id;
      Context : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BF_Context := +Context;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Context), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Fun_Id_Valid (Why_Node_Id (Id)));
   end Binding_Fun_Set_Context;

   ----------------------------
   -- Binding_Rec_Set_Recfun --
   ----------------------------

   procedure Binding_Rec_Set_Recfun
     (Id     : W_Binding_Rec_Unchecked_Id;
      Recfun : W_Recfun_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BR_Recfun := +Recfun;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Recfun), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Rec_Id_Valid (Why_Node_Id (Id)));
   end Binding_Rec_Set_Recfun;

   ----------------------------
   -- Binding_Rec_Set_Recfun --
   ----------------------------

   procedure Binding_Rec_Set_Recfun
     (Id     : W_Binding_Rec_Id;
      Recfun : W_Recfun_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BR_Recfun := +Recfun;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Recfun), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Rec_Id_Valid (Why_Node_Id (Id)));
   end Binding_Rec_Set_Recfun;

   -----------------------------
   -- Binding_Rec_Set_Context --
   -----------------------------

   procedure Binding_Rec_Set_Context
     (Id      : W_Binding_Rec_Unchecked_Id;
      Context : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BR_Context := +Context;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Context), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Rec_Id_Valid (Why_Node_Id (Id)));
   end Binding_Rec_Set_Context;

   -----------------------------
   -- Binding_Rec_Set_Context --
   -----------------------------

   procedure Binding_Rec_Set_Context
     (Id      : W_Binding_Rec_Id;
      Context : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BR_Context := +Context;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Context), +Id);
      Update_Validity_Status
        (+Id,
         Binding_Rec_Id_Valid (Why_Node_Id (Id)));
   end Binding_Rec_Set_Context;

   ------------------------
   -- Prog_Call_Set_Name --
   ------------------------

   procedure Prog_Call_Set_Name
     (Id   : W_Prog_Call_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PS_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Prog_Call_Id_Valid (Why_Node_Id (Id)));
   end Prog_Call_Set_Name;

   ------------------------
   -- Prog_Call_Set_Name --
   ------------------------

   procedure Prog_Call_Set_Name
     (Id   : W_Prog_Call_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PS_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Prog_Call_Id_Valid (Why_Node_Id (Id)));
   end Prog_Call_Set_Name;

   -------------------------------
   -- Prog_Call_Append_To_Progs --
   -------------------------------

   procedure Prog_Call_Append_To_Progs
     (Id       : W_Prog_Call_Unchecked_Id;
      New_Item : W_Prog_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.PS_Progs, +New_Item);
      Update_Validity_Status
        (+Id,
         Prog_Call_Id_Valid (Why_Node_Id (Id)));
   end Prog_Call_Append_To_Progs;

   --------------------------------
   -- Prog_Call_Prepend_To_Progs --
   --------------------------------

   procedure Prog_Call_Prepend_To_Progs
     (Id       : W_Prog_Call_Unchecked_Id;
      New_Item : W_Prog_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.PS_Progs, +New_Item);
      Update_Validity_Status
        (+Id,
         Prog_Call_Id_Valid (Why_Node_Id (Id)));
   end Prog_Call_Prepend_To_Progs;

   -------------------------------
   -- Prog_Call_Append_To_Progs --
   -------------------------------

   procedure Prog_Call_Append_To_Progs
     (Id       : W_Prog_Call_Id;
      New_Item : W_Prog_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.PS_Progs, +New_Item);
      Update_Validity_Status
        (+Id,
         Prog_Call_Id_Valid (Why_Node_Id (Id)));
   end Prog_Call_Append_To_Progs;

   --------------------------------
   -- Prog_Call_Prepend_To_Progs --
   --------------------------------

   procedure Prog_Call_Prepend_To_Progs
     (Id       : W_Prog_Call_Id;
      New_Item : W_Prog_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.PS_Progs, +New_Item);
      Update_Validity_Status
        (+Id,
         Prog_Call_Id_Valid (Why_Node_Id (Id)));
   end Prog_Call_Prepend_To_Progs;

   ------------------------------
   -- Raise_Statement_Set_Name --
   ------------------------------

   procedure Raise_Statement_Set_Name
     (Id   : W_Raise_Statement_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RS_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Raise_Statement_Id_Valid (Why_Node_Id (Id)));
   end Raise_Statement_Set_Name;

   ------------------------------
   -- Raise_Statement_Set_Name --
   ------------------------------

   procedure Raise_Statement_Set_Name
     (Id   : W_Raise_Statement_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RS_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Raise_Statement_Id_Valid (Why_Node_Id (Id)));
   end Raise_Statement_Set_Name;

   ----------------------------------
   -- Raise_Statement_Set_Exn_Type --
   ----------------------------------

   procedure Raise_Statement_Set_Exn_Type
     (Id       : W_Raise_Statement_Unchecked_Id;
      Exn_Type : W_Simple_Value_Type_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RS_Exn_Type := +Exn_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Exn_Type), +Id);
      Update_Validity_Status
        (+Id,
         Raise_Statement_Id_Valid (Why_Node_Id (Id)));
   end Raise_Statement_Set_Exn_Type;

   ----------------------------------
   -- Raise_Statement_Set_Exn_Type --
   ----------------------------------

   procedure Raise_Statement_Set_Exn_Type
     (Id       : W_Raise_Statement_Id;
      Exn_Type : W_Simple_Value_Type_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RS_Exn_Type := +Exn_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Exn_Type), +Id);
      Update_Validity_Status
        (+Id,
         Raise_Statement_Id_Valid (Why_Node_Id (Id)));
   end Raise_Statement_Set_Exn_Type;

   ----------------------------------------------
   -- Raise_Statement_With_Parameters_Set_Name --
   ----------------------------------------------

   procedure Raise_Statement_With_Parameters_Set_Name
     (Id   : W_Raise_Statement_With_Parameters_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RSWP_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Raise_Statement_With_Parameters_Id_Valid (Why_Node_Id (Id)));
   end Raise_Statement_With_Parameters_Set_Name;

   ----------------------------------------------
   -- Raise_Statement_With_Parameters_Set_Name --
   ----------------------------------------------

   procedure Raise_Statement_With_Parameters_Set_Name
     (Id   : W_Raise_Statement_With_Parameters_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RSWP_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Raise_Statement_With_Parameters_Id_Valid (Why_Node_Id (Id)));
   end Raise_Statement_With_Parameters_Set_Name;

   ---------------------------------------------------
   -- Raise_Statement_With_Parameters_Set_Parameter --
   ---------------------------------------------------

   procedure Raise_Statement_With_Parameters_Set_Parameter
     (Id        : W_Raise_Statement_With_Parameters_Unchecked_Id;
      Parameter : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RSWP_Parameter := +Parameter;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Parameter), +Id);
      Update_Validity_Status
        (+Id,
         Raise_Statement_With_Parameters_Id_Valid (Why_Node_Id (Id)));
   end Raise_Statement_With_Parameters_Set_Parameter;

   ---------------------------------------------------
   -- Raise_Statement_With_Parameters_Set_Parameter --
   ---------------------------------------------------

   procedure Raise_Statement_With_Parameters_Set_Parameter
     (Id        : W_Raise_Statement_With_Parameters_Id;
      Parameter : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RSWP_Parameter := +Parameter;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Parameter), +Id);
      Update_Validity_Status
        (+Id,
         Raise_Statement_With_Parameters_Id_Valid (Why_Node_Id (Id)));
   end Raise_Statement_With_Parameters_Set_Parameter;

   --------------------------------------------------
   -- Raise_Statement_With_Parameters_Set_Exn_Type --
   --------------------------------------------------

   procedure Raise_Statement_With_Parameters_Set_Exn_Type
     (Id       : W_Raise_Statement_With_Parameters_Unchecked_Id;
      Exn_Type : W_Simple_Value_Type_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RSWP_Exn_Type := +Exn_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Exn_Type), +Id);
      Update_Validity_Status
        (+Id,
         Raise_Statement_With_Parameters_Id_Valid (Why_Node_Id (Id)));
   end Raise_Statement_With_Parameters_Set_Exn_Type;

   --------------------------------------------------
   -- Raise_Statement_With_Parameters_Set_Exn_Type --
   --------------------------------------------------

   procedure Raise_Statement_With_Parameters_Set_Exn_Type
     (Id       : W_Raise_Statement_With_Parameters_Id;
      Exn_Type : W_Simple_Value_Type_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RSWP_Exn_Type := +Exn_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Exn_Type), +Id);
      Update_Validity_Status
        (+Id,
         Raise_Statement_With_Parameters_Id_Valid (Why_Node_Id (Id)));
   end Raise_Statement_With_Parameters_Set_Exn_Type;

   ------------------------
   -- Try_Block_Set_Prog --
   ------------------------

   procedure Try_Block_Set_Prog
     (Id   : W_Try_Block_Unchecked_Id;
      Prog : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.TB_Prog := +Prog;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Prog), +Id);
      Update_Validity_Status
        (+Id,
         Try_Block_Id_Valid (Why_Node_Id (Id)));
   end Try_Block_Set_Prog;

   ------------------------
   -- Try_Block_Set_Prog --
   ------------------------

   procedure Try_Block_Set_Prog
     (Id   : W_Try_Block_Id;
      Prog : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.TB_Prog := +Prog;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Prog), +Id);
      Update_Validity_Status
        (+Id,
         Try_Block_Id_Valid (Why_Node_Id (Id)));
   end Try_Block_Set_Prog;

   ---------------------------------
   -- Try_Block_Append_To_Handler --
   ---------------------------------

   procedure Try_Block_Append_To_Handler
     (Id       : W_Try_Block_Unchecked_Id;
      New_Item : W_Handler_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.TB_Handler, +New_Item);
      Update_Validity_Status
        (+Id,
         Try_Block_Id_Valid (Why_Node_Id (Id)));
   end Try_Block_Append_To_Handler;

   ----------------------------------
   -- Try_Block_Prepend_To_Handler --
   ----------------------------------

   procedure Try_Block_Prepend_To_Handler
     (Id       : W_Try_Block_Unchecked_Id;
      New_Item : W_Handler_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.TB_Handler, +New_Item);
      Update_Validity_Status
        (+Id,
         Try_Block_Id_Valid (Why_Node_Id (Id)));
   end Try_Block_Prepend_To_Handler;

   ---------------------------------
   -- Try_Block_Append_To_Handler --
   ---------------------------------

   procedure Try_Block_Append_To_Handler
     (Id       : W_Try_Block_Id;
      New_Item : W_Handler_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.TB_Handler, +New_Item);
      Update_Validity_Status
        (+Id,
         Try_Block_Id_Valid (Why_Node_Id (Id)));
   end Try_Block_Append_To_Handler;

   ----------------------------------
   -- Try_Block_Prepend_To_Handler --
   ----------------------------------

   procedure Try_Block_Prepend_To_Handler
     (Id       : W_Try_Block_Id;
      New_Item : W_Handler_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.TB_Handler, +New_Item);
      Update_Validity_Status
        (+Id,
         Try_Block_Id_Valid (Why_Node_Id (Id)));
   end Try_Block_Prepend_To_Handler;

   -----------------------------------
   -- Unreachable_Code_Set_Exn_Type --
   -----------------------------------

   procedure Unreachable_Code_Set_Exn_Type
     (Id       : W_Unreachable_Code_Unchecked_Id;
      Exn_Type : W_Simple_Value_Type_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.UC_Exn_Type := +Exn_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Exn_Type), +Id);
      Update_Validity_Status
        (+Id,
         Unreachable_Code_Id_Valid (Why_Node_Id (Id)));
   end Unreachable_Code_Set_Exn_Type;

   -----------------------------------
   -- Unreachable_Code_Set_Exn_Type --
   -----------------------------------

   procedure Unreachable_Code_Set_Exn_Type
     (Id       : W_Unreachable_Code_Id;
      Exn_Type : W_Simple_Value_Type_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.UC_Exn_Type := +Exn_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Exn_Type), +Id);
      Update_Validity_Status
        (+Id,
         Unreachable_Code_Id_Valid (Why_Node_Id (Id)));
   end Unreachable_Code_Set_Exn_Type;

   --------------------------
   -- Begin_Block_Set_Prog --
   --------------------------

   procedure Begin_Block_Set_Prog
     (Id   : W_Begin_Block_Unchecked_Id;
      Prog : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BB_Prog := +Prog;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Prog), +Id);
      Update_Validity_Status
        (+Id,
         Begin_Block_Id_Valid (Why_Node_Id (Id)));
   end Begin_Block_Set_Prog;

   --------------------------
   -- Begin_Block_Set_Prog --
   --------------------------

   procedure Begin_Block_Set_Prog
     (Id   : W_Begin_Block_Id;
      Prog : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BB_Prog := +Prog;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Prog), +Id);
      Update_Validity_Status
        (+Id,
         Begin_Block_Id_Valid (Why_Node_Id (Id)));
   end Begin_Block_Set_Prog;

   -----------------------------
   -- Protected_Prog_Set_Prog --
   -----------------------------

   procedure Protected_Prog_Set_Prog
     (Id   : W_Protected_Prog_Unchecked_Id;
      Prog : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BB_Prog := +Prog;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Prog), +Id);
      Update_Validity_Status
        (+Id,
         Protected_Prog_Id_Valid (Why_Node_Id (Id)));
   end Protected_Prog_Set_Prog;

   -----------------------------
   -- Protected_Prog_Set_Prog --
   -----------------------------

   procedure Protected_Prog_Set_Prog
     (Id   : W_Protected_Prog_Id;
      Prog : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.BB_Prog := +Prog;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Prog), +Id);
      Update_Validity_Status
        (+Id,
         Protected_Prog_Id_Valid (Why_Node_Id (Id)));
   end Protected_Prog_Set_Prog;

   ----------------------------
   -- Binder_Append_To_Names --
   ----------------------------

   procedure Binder_Append_To_Names
     (Id       : W_Binder_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.B_Names, +New_Item);
      Update_Validity_Status
        (+Id,
         Binder_Id_Valid (Why_Node_Id (Id)));
   end Binder_Append_To_Names;

   -----------------------------
   -- Binder_Prepend_To_Names --
   -----------------------------

   procedure Binder_Prepend_To_Names
     (Id       : W_Binder_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.B_Names, +New_Item);
      Update_Validity_Status
        (+Id,
         Binder_Id_Valid (Why_Node_Id (Id)));
   end Binder_Prepend_To_Names;

   ----------------------------
   -- Binder_Append_To_Names --
   ----------------------------

   procedure Binder_Append_To_Names
     (Id       : W_Binder_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.B_Names, +New_Item);
      Update_Validity_Status
        (+Id,
         Binder_Id_Valid (Why_Node_Id (Id)));
   end Binder_Append_To_Names;

   -----------------------------
   -- Binder_Prepend_To_Names --
   -----------------------------

   procedure Binder_Prepend_To_Names
     (Id       : W_Binder_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.B_Names, +New_Item);
      Update_Validity_Status
        (+Id,
         Binder_Id_Valid (Why_Node_Id (Id)));
   end Binder_Prepend_To_Names;

   -------------------------
   -- Binder_Set_Arg_Type --
   -------------------------

   procedure Binder_Set_Arg_Type
     (Id       : W_Binder_Unchecked_Id;
      Arg_Type : W_Simple_Value_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.B_Arg_Type := +Arg_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Arg_Type), +Id);
      Update_Validity_Status
        (+Id,
         Binder_Id_Valid (Why_Node_Id (Id)));
   end Binder_Set_Arg_Type;

   -------------------------
   -- Binder_Set_Arg_Type --
   -------------------------

   procedure Binder_Set_Arg_Type
     (Id       : W_Binder_Id;
      Arg_Type : W_Simple_Value_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.B_Arg_Type := +Arg_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Arg_Type), +Id);
      Update_Validity_Status
        (+Id,
         Binder_Id_Valid (Why_Node_Id (Id)));
   end Binder_Set_Arg_Type;

   ---------------------
   -- Recfun_Set_Name --
   ---------------------

   procedure Recfun_Set_Name
     (Id   : W_Recfun_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RF_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Recfun_Id_Valid (Why_Node_Id (Id)));
   end Recfun_Set_Name;

   ---------------------
   -- Recfun_Set_Name --
   ---------------------

   procedure Recfun_Set_Name
     (Id   : W_Recfun_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RF_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Recfun_Id_Valid (Why_Node_Id (Id)));
   end Recfun_Set_Name;

   ------------------------------
   -- Recfun_Append_To_Binders --
   ------------------------------

   procedure Recfun_Append_To_Binders
     (Id       : W_Recfun_Unchecked_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.RF_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Recfun_Id_Valid (Why_Node_Id (Id)));
   end Recfun_Append_To_Binders;

   -------------------------------
   -- Recfun_Prepend_To_Binders --
   -------------------------------

   procedure Recfun_Prepend_To_Binders
     (Id       : W_Recfun_Unchecked_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.RF_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Recfun_Id_Valid (Why_Node_Id (Id)));
   end Recfun_Prepend_To_Binders;

   ------------------------------
   -- Recfun_Append_To_Binders --
   ------------------------------

   procedure Recfun_Append_To_Binders
     (Id       : W_Recfun_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.RF_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Recfun_Id_Valid (Why_Node_Id (Id)));
   end Recfun_Append_To_Binders;

   -------------------------------
   -- Recfun_Prepend_To_Binders --
   -------------------------------

   procedure Recfun_Prepend_To_Binders
     (Id       : W_Recfun_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.RF_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Recfun_Id_Valid (Why_Node_Id (Id)));
   end Recfun_Prepend_To_Binders;

   ----------------------------
   -- Recfun_Set_Return_Type --
   ----------------------------

   procedure Recfun_Set_Return_Type
     (Id          : W_Recfun_Unchecked_Id;
      Return_Type : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RF_Return_Type := +Return_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Return_Type), +Id);
      Update_Validity_Status
        (+Id,
         Recfun_Id_Valid (Why_Node_Id (Id)));
   end Recfun_Set_Return_Type;

   ----------------------------
   -- Recfun_Set_Return_Type --
   ----------------------------

   procedure Recfun_Set_Return_Type
     (Id          : W_Recfun_Id;
      Return_Type : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RF_Return_Type := +Return_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Return_Type), +Id);
      Update_Validity_Status
        (+Id,
         Recfun_Id_Valid (Why_Node_Id (Id)));
   end Recfun_Set_Return_Type;

   ------------------------
   -- Recfun_Set_Variant --
   ------------------------

   procedure Recfun_Set_Variant
     (Id      : W_Recfun_Unchecked_Id;
      Variant : W_Wf_Arg_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RF_Variant := +Variant;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Variant), +Id);
      Update_Validity_Status
        (+Id,
         Recfun_Id_Valid (Why_Node_Id (Id)));
   end Recfun_Set_Variant;

   ------------------------
   -- Recfun_Set_Variant --
   ------------------------

   procedure Recfun_Set_Variant
     (Id      : W_Recfun_Id;
      Variant : W_Wf_Arg_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RF_Variant := +Variant;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Variant), +Id);
      Update_Validity_Status
        (+Id,
         Recfun_Id_Valid (Why_Node_Id (Id)));
   end Recfun_Set_Variant;

   --------------------
   -- Recfun_Set_Pre --
   --------------------

   procedure Recfun_Set_Pre
     (Id  : W_Recfun_Unchecked_Id;
      Pre : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RF_Pre := +Pre;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pre), +Id);
      Update_Validity_Status
        (+Id,
         Recfun_Id_Valid (Why_Node_Id (Id)));
   end Recfun_Set_Pre;

   --------------------
   -- Recfun_Set_Pre --
   --------------------

   procedure Recfun_Set_Pre
     (Id  : W_Recfun_Id;
      Pre : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RF_Pre := +Pre;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pre), +Id);
      Update_Validity_Status
        (+Id,
         Recfun_Id_Valid (Why_Node_Id (Id)));
   end Recfun_Set_Pre;

   --------------------
   -- Recfun_Set_Def --
   --------------------

   procedure Recfun_Set_Def
     (Id  : W_Recfun_Unchecked_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RF_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Recfun_Id_Valid (Why_Node_Id (Id)));
   end Recfun_Set_Def;

   --------------------
   -- Recfun_Set_Def --
   --------------------

   procedure Recfun_Set_Def
     (Id  : W_Recfun_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.RF_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Recfun_Id_Valid (Why_Node_Id (Id)));
   end Recfun_Set_Def;

   ------------------------------
   -- Loop_Annot_Set_Invariant --
   ------------------------------

   procedure Loop_Annot_Set_Invariant
     (Id        : W_Loop_Annot_Unchecked_Id;
      Invariant : W_Predicate_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.LA_Invariant := +Invariant;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Invariant), +Id);
      Update_Validity_Status
        (+Id,
         Loop_Annot_Id_Valid (Why_Node_Id (Id)));
   end Loop_Annot_Set_Invariant;

   ------------------------------
   -- Loop_Annot_Set_Invariant --
   ------------------------------

   procedure Loop_Annot_Set_Invariant
     (Id        : W_Loop_Annot_Id;
      Invariant : W_Predicate_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.LA_Invariant := +Invariant;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Invariant), +Id);
      Update_Validity_Status
        (+Id,
         Loop_Annot_Id_Valid (Why_Node_Id (Id)));
   end Loop_Annot_Set_Invariant;

   ----------------------------
   -- Loop_Annot_Set_Variant --
   ----------------------------

   procedure Loop_Annot_Set_Variant
     (Id      : W_Loop_Annot_Unchecked_Id;
      Variant : W_Wf_Arg_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.LA_Variant := +Variant;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Variant), +Id);
      Update_Validity_Status
        (+Id,
         Loop_Annot_Id_Valid (Why_Node_Id (Id)));
   end Loop_Annot_Set_Variant;

   ----------------------------
   -- Loop_Annot_Set_Variant --
   ----------------------------

   procedure Loop_Annot_Set_Variant
     (Id      : W_Loop_Annot_Id;
      Variant : W_Wf_Arg_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.LA_Variant := +Variant;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Variant), +Id);
      Update_Validity_Status
        (+Id,
         Loop_Annot_Id_Valid (Why_Node_Id (Id)));
   end Loop_Annot_Set_Variant;

   --------------------
   -- Wf_Arg_Set_Def --
   --------------------

   procedure Wf_Arg_Set_Def
     (Id  : W_Wf_Arg_Unchecked_Id;
      Def : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.WA_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Wf_Arg_Id_Valid (Why_Node_Id (Id)));
   end Wf_Arg_Set_Def;

   --------------------
   -- Wf_Arg_Set_Def --
   --------------------

   procedure Wf_Arg_Set_Def
     (Id  : W_Wf_Arg_Id;
      Def : W_Term_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.WA_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Wf_Arg_Id_Valid (Why_Node_Id (Id)));
   end Wf_Arg_Set_Def;

   -----------------------
   -- Wf_Arg_Set_For_Id --
   -----------------------

   procedure Wf_Arg_Set_For_Id
     (Id     : W_Wf_Arg_Unchecked_Id;
      For_Id : W_Identifier_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.WA_For_Id := +For_Id;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (For_Id), +Id);
      Update_Validity_Status
        (+Id,
         Wf_Arg_Id_Valid (Why_Node_Id (Id)));
   end Wf_Arg_Set_For_Id;

   -----------------------
   -- Wf_Arg_Set_For_Id --
   -----------------------

   procedure Wf_Arg_Set_For_Id
     (Id     : W_Wf_Arg_Id;
      For_Id : W_Identifier_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.WA_For_Id := +For_Id;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (For_Id), +Id);
      Update_Validity_Status
        (+Id,
         Wf_Arg_Id_Valid (Why_Node_Id (Id)));
   end Wf_Arg_Set_For_Id;

   ----------------------
   -- Handler_Set_Name --
   ----------------------

   procedure Handler_Set_Name
     (Id   : W_Handler_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.H_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Handler_Id_Valid (Why_Node_Id (Id)));
   end Handler_Set_Name;

   ----------------------
   -- Handler_Set_Name --
   ----------------------

   procedure Handler_Set_Name
     (Id   : W_Handler_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.H_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Handler_Id_Valid (Why_Node_Id (Id)));
   end Handler_Set_Name;

   ---------------------------
   -- Handler_Set_Parameter --
   ---------------------------

   procedure Handler_Set_Parameter
     (Id        : W_Handler_Unchecked_Id;
      Parameter : W_Prog_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.H_Parameter := +Parameter;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Parameter), +Id);
      Update_Validity_Status
        (+Id,
         Handler_Id_Valid (Why_Node_Id (Id)));
   end Handler_Set_Parameter;

   ---------------------------
   -- Handler_Set_Parameter --
   ---------------------------

   procedure Handler_Set_Parameter
     (Id        : W_Handler_Id;
      Parameter : W_Prog_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.H_Parameter := +Parameter;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Parameter), +Id);
      Update_Validity_Status
        (+Id,
         Handler_Id_Valid (Why_Node_Id (Id)));
   end Handler_Set_Parameter;

   ---------------------
   -- Handler_Set_Def --
   ---------------------

   procedure Handler_Set_Def
     (Id  : W_Handler_Unchecked_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.H_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Handler_Id_Valid (Why_Node_Id (Id)));
   end Handler_Set_Def;

   ---------------------
   -- Handler_Set_Def --
   ---------------------

   procedure Handler_Set_Def
     (Id  : W_Handler_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.H_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Handler_Id_Valid (Why_Node_Id (Id)));
   end Handler_Set_Def;

   ---------------------------------
   -- File_Append_To_Declarations --
   ---------------------------------

   procedure File_Append_To_Declarations
     (Id       : W_File_Unchecked_Id;
      New_Item : W_Declaration_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.F_Declarations, +New_Item);
      Update_Validity_Status
        (+Id,
         File_Id_Valid (Why_Node_Id (Id)));
   end File_Append_To_Declarations;

   ----------------------------------
   -- File_Prepend_To_Declarations --
   ----------------------------------

   procedure File_Prepend_To_Declarations
     (Id       : W_File_Unchecked_Id;
      New_Item : W_Declaration_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.F_Declarations, +New_Item);
      Update_Validity_Status
        (+Id,
         File_Id_Valid (Why_Node_Id (Id)));
   end File_Prepend_To_Declarations;

   ---------------------------------
   -- File_Append_To_Declarations --
   ---------------------------------

   procedure File_Append_To_Declarations
     (Id       : W_File_Id;
      New_Item : W_Declaration_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.F_Declarations, +New_Item);
      Update_Validity_Status
        (+Id,
         File_Id_Valid (Why_Node_Id (Id)));
   end File_Append_To_Declarations;

   ----------------------------------
   -- File_Prepend_To_Declarations --
   ----------------------------------

   procedure File_Prepend_To_Declarations
     (Id       : W_File_Id;
      New_Item : W_Declaration_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.F_Declarations, +New_Item);
      Update_Validity_Status
        (+Id,
         File_Id_Valid (Why_Node_Id (Id)));
   end File_Prepend_To_Declarations;

   -----------------------------
   -- Global_Binding_Set_Name --
   -----------------------------

   procedure Global_Binding_Set_Name
     (Id   : W_Global_Binding_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GB_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Global_Binding_Id_Valid (Why_Node_Id (Id)));
   end Global_Binding_Set_Name;

   -----------------------------
   -- Global_Binding_Set_Name --
   -----------------------------

   procedure Global_Binding_Set_Name
     (Id   : W_Global_Binding_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GB_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Global_Binding_Id_Valid (Why_Node_Id (Id)));
   end Global_Binding_Set_Name;

   --------------------------------------
   -- Global_Binding_Append_To_Binders --
   --------------------------------------

   procedure Global_Binding_Append_To_Binders
     (Id       : W_Global_Binding_Unchecked_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.GB_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Global_Binding_Id_Valid (Why_Node_Id (Id)));
   end Global_Binding_Append_To_Binders;

   ---------------------------------------
   -- Global_Binding_Prepend_To_Binders --
   ---------------------------------------

   procedure Global_Binding_Prepend_To_Binders
     (Id       : W_Global_Binding_Unchecked_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.GB_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Global_Binding_Id_Valid (Why_Node_Id (Id)));
   end Global_Binding_Prepend_To_Binders;

   --------------------------------------
   -- Global_Binding_Append_To_Binders --
   --------------------------------------

   procedure Global_Binding_Append_To_Binders
     (Id       : W_Global_Binding_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.GB_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Global_Binding_Id_Valid (Why_Node_Id (Id)));
   end Global_Binding_Append_To_Binders;

   ---------------------------------------
   -- Global_Binding_Prepend_To_Binders --
   ---------------------------------------

   procedure Global_Binding_Prepend_To_Binders
     (Id       : W_Global_Binding_Id;
      New_Item : W_Binder_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.GB_Binders, +New_Item);
      Update_Validity_Status
        (+Id,
         Global_Binding_Id_Valid (Why_Node_Id (Id)));
   end Global_Binding_Prepend_To_Binders;

   ----------------------------
   -- Global_Binding_Set_Pre --
   ----------------------------

   procedure Global_Binding_Set_Pre
     (Id  : W_Global_Binding_Unchecked_Id;
      Pre : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GB_Pre := +Pre;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pre), +Id);
      Update_Validity_Status
        (+Id,
         Global_Binding_Id_Valid (Why_Node_Id (Id)));
   end Global_Binding_Set_Pre;

   ----------------------------
   -- Global_Binding_Set_Pre --
   ----------------------------

   procedure Global_Binding_Set_Pre
     (Id  : W_Global_Binding_Id;
      Pre : W_Predicate_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GB_Pre := +Pre;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Pre), +Id);
      Update_Validity_Status
        (+Id,
         Global_Binding_Id_Valid (Why_Node_Id (Id)));
   end Global_Binding_Set_Pre;

   ----------------------------
   -- Global_Binding_Set_Def --
   ----------------------------

   procedure Global_Binding_Set_Def
     (Id  : W_Global_Binding_Unchecked_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GB_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Global_Binding_Id_Valid (Why_Node_Id (Id)));
   end Global_Binding_Set_Def;

   ----------------------------
   -- Global_Binding_Set_Def --
   ----------------------------

   procedure Global_Binding_Set_Def
     (Id  : W_Global_Binding_Id;
      Def : W_Prog_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GB_Def := +Def;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Def), +Id);
      Update_Validity_Status
        (+Id,
         Global_Binding_Id_Valid (Why_Node_Id (Id)));
   end Global_Binding_Set_Def;

   ---------------------------------
   -- Global_Rec_Binding_Set_Name --
   ---------------------------------

   procedure Global_Rec_Binding_Set_Name
     (Id   : W_Global_Rec_Binding_Unchecked_Id;
      Name : W_Recfun_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GRB_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Global_Rec_Binding_Id_Valid (Why_Node_Id (Id)));
   end Global_Rec_Binding_Set_Name;

   ---------------------------------
   -- Global_Rec_Binding_Set_Name --
   ---------------------------------

   procedure Global_Rec_Binding_Set_Name
     (Id   : W_Global_Rec_Binding_Id;
      Name : W_Recfun_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GRB_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Global_Rec_Binding_Id_Valid (Why_Node_Id (Id)));
   end Global_Rec_Binding_Set_Name;

   ----------------------------------------
   -- Parameter_Declaration_Set_External --
   ----------------------------------------

   procedure Parameter_Declaration_Set_External
     (Id       : W_Parameter_Declaration_Unchecked_Id;
      External : W_External_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PD_External := +External;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (External), +Id);
      Update_Validity_Status
        (+Id,
         Parameter_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Parameter_Declaration_Set_External;

   ----------------------------------------
   -- Parameter_Declaration_Set_External --
   ----------------------------------------

   procedure Parameter_Declaration_Set_External
     (Id       : W_Parameter_Declaration_Id;
      External : W_External_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PD_External := +External;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (External), +Id);
      Update_Validity_Status
        (+Id,
         Parameter_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Parameter_Declaration_Set_External;

   -------------------------------------------
   -- Parameter_Declaration_Append_To_Names --
   -------------------------------------------

   procedure Parameter_Declaration_Append_To_Names
     (Id       : W_Parameter_Declaration_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.PD_Names, +New_Item);
      Update_Validity_Status
        (+Id,
         Parameter_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Parameter_Declaration_Append_To_Names;

   --------------------------------------------
   -- Parameter_Declaration_Prepend_To_Names --
   --------------------------------------------

   procedure Parameter_Declaration_Prepend_To_Names
     (Id       : W_Parameter_Declaration_Unchecked_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.PD_Names, +New_Item);
      Update_Validity_Status
        (+Id,
         Parameter_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Parameter_Declaration_Prepend_To_Names;

   -------------------------------------------
   -- Parameter_Declaration_Append_To_Names --
   -------------------------------------------

   procedure Parameter_Declaration_Append_To_Names
     (Id       : W_Parameter_Declaration_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Append (Node.PD_Names, +New_Item);
      Update_Validity_Status
        (+Id,
         Parameter_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Parameter_Declaration_Append_To_Names;

   --------------------------------------------
   -- Parameter_Declaration_Prepend_To_Names --
   --------------------------------------------

   procedure Parameter_Declaration_Prepend_To_Names
     (Id       : W_Parameter_Declaration_Id;
      New_Item : W_Identifier_Id)
   is
      Node : constant Why_Node :=
               Get_Node (+Id);
   begin
      Prepend (Node.PD_Names, +New_Item);
      Update_Validity_Status
        (+Id,
         Parameter_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Parameter_Declaration_Prepend_To_Names;

   ----------------------------------------------
   -- Parameter_Declaration_Set_Parameter_Type --
   ----------------------------------------------

   procedure Parameter_Declaration_Set_Parameter_Type
     (Id             : W_Parameter_Declaration_Unchecked_Id;
      Parameter_Type : W_Computation_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PD_Parameter_Type := +Parameter_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Parameter_Type), +Id);
      Update_Validity_Status
        (+Id,
         Parameter_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Parameter_Declaration_Set_Parameter_Type;

   ----------------------------------------------
   -- Parameter_Declaration_Set_Parameter_Type --
   ----------------------------------------------

   procedure Parameter_Declaration_Set_Parameter_Type
     (Id             : W_Parameter_Declaration_Id;
      Parameter_Type : W_Computation_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.PD_Parameter_Type := +Parameter_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Parameter_Type), +Id);
      Update_Validity_Status
        (+Id,
         Parameter_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Parameter_Declaration_Set_Parameter_Type;

   -------------------------------------
   -- Global_Ref_Declaration_Set_Name --
   -------------------------------------

   procedure Global_Ref_Declaration_Set_Name
     (Id   : W_Global_Ref_Declaration_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GR_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Global_Ref_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Global_Ref_Declaration_Set_Name;

   -------------------------------------
   -- Global_Ref_Declaration_Set_Name --
   -------------------------------------

   procedure Global_Ref_Declaration_Set_Name
     (Id   : W_Global_Ref_Declaration_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GR_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Global_Ref_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Global_Ref_Declaration_Set_Name;

   -----------------------------------------------
   -- Global_Ref_Declaration_Set_Parameter_Type --
   -----------------------------------------------

   procedure Global_Ref_Declaration_Set_Parameter_Type
     (Id             : W_Global_Ref_Declaration_Unchecked_Id;
      Parameter_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GR_Parameter_Type := +Parameter_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Parameter_Type), +Id);
      Update_Validity_Status
        (+Id,
         Global_Ref_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Global_Ref_Declaration_Set_Parameter_Type;

   -----------------------------------------------
   -- Global_Ref_Declaration_Set_Parameter_Type --
   -----------------------------------------------

   procedure Global_Ref_Declaration_Set_Parameter_Type
     (Id             : W_Global_Ref_Declaration_Id;
      Parameter_Type : W_Primitive_Type_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.GR_Parameter_Type := +Parameter_Type;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Parameter_Type), +Id);
      Update_Validity_Status
        (+Id,
         Global_Ref_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Global_Ref_Declaration_Set_Parameter_Type;

   ------------------------------------
   -- Exception_Declaration_Set_Name --
   ------------------------------------

   procedure Exception_Declaration_Set_Name
     (Id   : W_Exception_Declaration_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ED_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Exception_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Exception_Declaration_Set_Name;

   ------------------------------------
   -- Exception_Declaration_Set_Name --
   ------------------------------------

   procedure Exception_Declaration_Set_Name
     (Id   : W_Exception_Declaration_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ED_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Exception_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Exception_Declaration_Set_Name;

   -----------------------------------------
   -- Exception_Declaration_Set_Parameter --
   -----------------------------------------

   procedure Exception_Declaration_Set_Parameter
     (Id        : W_Exception_Declaration_Unchecked_Id;
      Parameter : W_Primitive_Type_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ED_Parameter := +Parameter;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Parameter), +Id);
      Update_Validity_Status
        (+Id,
         Exception_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Exception_Declaration_Set_Parameter;

   -----------------------------------------
   -- Exception_Declaration_Set_Parameter --
   -----------------------------------------

   procedure Exception_Declaration_Set_Parameter
     (Id        : W_Exception_Declaration_Id;
      Parameter : W_Primitive_Type_OId)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ED_Parameter := +Parameter;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Parameter), +Id);
      Update_Validity_Status
        (+Id,
         Exception_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Exception_Declaration_Set_Parameter;

   --------------------------------
   -- Logic_Declaration_Set_Decl --
   --------------------------------

   procedure Logic_Declaration_Set_Decl
     (Id   : W_Logic_Declaration_Unchecked_Id;
      Decl : W_Logic_Declaration_Class_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.LD_Decl := +Decl;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Decl), +Id);
      Update_Validity_Status
        (+Id,
         Logic_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Logic_Declaration_Set_Decl;

   --------------------------------
   -- Logic_Declaration_Set_Decl --
   --------------------------------

   procedure Logic_Declaration_Set_Decl
     (Id   : W_Logic_Declaration_Id;
      Decl : W_Logic_Declaration_Class_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.LD_Decl := +Decl;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Decl), +Id);
      Update_Validity_Status
        (+Id,
         Logic_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Logic_Declaration_Set_Decl;

   ----------------------------------
   -- Include_Declaration_Set_Name --
   ----------------------------------

   procedure Include_Declaration_Set_Name
     (Id   : W_Include_Declaration_Unchecked_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ID_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Include_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Include_Declaration_Set_Name;

   ----------------------------------
   -- Include_Declaration_Set_Name --
   ----------------------------------

   procedure Include_Declaration_Set_Name
     (Id   : W_Include_Declaration_Id;
      Name : W_Identifier_Id)
   is
      Node : Why_Node := Get_Node (+Id);
   begin
      Node.ID_Name := +Name;
      Set_Node (+Id, Node);
      Set_Link (Why_Node_Id (Name), +Id);
      Update_Validity_Status
        (+Id,
         Include_Declaration_Id_Valid (Why_Node_Id (Id)));
   end Include_Declaration_Set_Name;

end Why.Atree.Mutators;
