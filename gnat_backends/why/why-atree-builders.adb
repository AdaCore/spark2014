------------------------------------------------------------------------------
--                                                                          --
--                            GNAT2WHY COMPONENTS                           --
--                                                                          --
--                   W H Y - A T R E E - B U I L D E R S                    --
--                                                                          --
--                                 B o d y                                  --
--                                                                          --
--                       Copyright (C) 2010, AdaCore                        --
--                                                                          --
-- gnat2why is  free  software;  you can redistribute it and/or modify it   --
-- under terms of the  GNU General Public License as published  by the Free --
-- Software Foundation;  either version  2,  or  (at your option) any later --
-- version. gnat2why is distributed in the hope that it will  be  useful,   --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-  --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License  for more details. You  should  have  received a copy of the GNU --
-- General Public License  distributed with GNAT; see file COPYING. If not, --
-- write to the Free Software Foundation,  51 Franklin Street, Fifth Floor, --
-- Boston,                                                                  --
--                                                                          --
-- gnat2why is maintained by AdaCore (http://www.adacore.com)               --
--                                                                          --
------------------------------------------------------------------------------
--  This package is automatically generated by xtree. Do not edit manually.

package body Why.Atree.Builders is

   -------------------------
   -- New_Unused_At_Start --
   -------------------------

   function New_Unused_At_Start
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Unused_At_Start_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Unused_At_Start,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Unused_At_Start;

   --------------------
   -- New_Identifier --
   --------------------

   function New_Identifier
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Symbol   : Name_Id;
      Entity   : Why_Node_Id)
     return W_Identifier_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Identifier,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   Symbol   => Symbol,
                   Entity   => Entity));
   end New_Identifier;

   -------------------
   -- New_Type_Prop --
   -------------------

   function New_Type_Prop
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Type_Prop_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Type_Prop,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Type_Prop;

   ------------------
   -- New_Type_Int --
   ------------------

   function New_Type_Int
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Type_Int_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Type_Int,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Type_Int;

   -------------------
   -- New_Type_Bool --
   -------------------

   function New_Type_Bool
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Type_Bool_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Type_Bool,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Type_Bool;

   -------------------
   -- New_Type_Real --
   -------------------

   function New_Type_Real
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Type_Real_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Type_Real,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Type_Real;

   -------------------
   -- New_Type_Unit --
   -------------------

   function New_Type_Unit
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Type_Unit_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Type_Unit,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Type_Unit;

   -----------------------
   -- New_Abstract_Type --
   -----------------------

   function New_Abstract_Type
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id)
     return W_Abstract_Type_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Abstract_Type,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   AT_Name  => Name));
   end New_Abstract_Type;

   -----------------------------
   -- New_Generic_Formal_Type --
   -----------------------------

   function New_Generic_Formal_Type
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id)
     return W_Generic_Formal_Type_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Generic_Formal_Type,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   GFT_Name => Name));
   end New_Generic_Formal_Type;

   -----------------------------------
   -- New_Generic_Actual_Type_Chain --
   -----------------------------------

   function New_Generic_Actual_Type_Chain
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Id;
      Type_Chain : W_Primitive_Type_List;
      Name       : W_Identifier_Id)
     return W_Generic_Actual_Type_Chain_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind            => W_Generic_Actual_Type_Chain,
                   Ada_Node        => Ada_Node,
                   Link            => Link,
                   GATC_Type_Chain => Type_Chain,
                   GATC_Name       => Name));
   end New_Generic_Actual_Type_Chain;

   --------------------
   -- New_Array_Type --
   --------------------

   function New_Array_Type
     (Ada_Node       : Node_Id;
      Link           : Why_Node_Id;
      Component_Type : W_Primitive_Type_Id)
     return W_Array_Type_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind              => W_Array_Type,
                   Ada_Node          => Ada_Node,
                   Link              => Link,
                   AT_Component_Type => Component_Type));
   end New_Array_Type;

   ------------------
   -- New_Ref_Type --
   ------------------

   function New_Ref_Type
     (Ada_Node     : Node_Id;
      Link         : Why_Node_Id;
      Aliased_Type : W_Primitive_Type_Id)
     return W_Ref_Type_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind            => W_Ref_Type,
                   Ada_Node        => Ada_Node,
                   Link            => Link,
                   RT_Aliased_Type => Aliased_Type));
   end New_Ref_Type;

   ------------------------------
   -- New_Protected_Value_Type --
   ------------------------------

   function New_Protected_Value_Type
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Id;
      Value_Type : W_Value_Type_Id)
     return W_Protected_Value_Type_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind           => W_Protected_Value_Type,
                   Ada_Node       => Ada_Node,
                   Link           => Link,
                   PVT_Value_Type => Value_Type));
   end New_Protected_Value_Type;

   ------------------------------
   -- New_Anonymous_Arrow_Type --
   ------------------------------

   function New_Anonymous_Arrow_Type
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Left     : W_Simple_Value_Type_Id;
      Right    : W_Computation_Type_Id)
     return W_Anonymous_Arrow_Type_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind      => W_Anonymous_Arrow_Type,
                   Ada_Node  => Ada_Node,
                   Link      => Link,
                   AAT_Left  => Left,
                   AAT_Right => Right));
   end New_Anonymous_Arrow_Type;

   --------------------------
   -- New_Named_Arrow_Type --
   --------------------------

   function New_Named_Arrow_Type
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Left     : W_Simple_Value_Type_Id;
      Right    : W_Computation_Type_Id)
     return W_Named_Arrow_Type_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Named_Arrow_Type,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   NA_Name  => Name,
                   NA_Left  => Left,
                   NA_Right => Right));
   end New_Named_Arrow_Type;

   --------------------------
   -- New_Computation_Spec --
   --------------------------

   function New_Computation_Spec
     (Ada_Node      : Node_Id;
      Link          : Why_Node_Id;
      Precondition  : W_Precondition_Id;
      Result_Name   : W_Identifier_Id;
      Return_Type   : W_Value_Type_Id;
      Effects       : W_Effects_Id;
      Postcondition : W_Postcondition_Id)
     return W_Computation_Spec_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind             => W_Computation_Spec,
                   Ada_Node         => Ada_Node,
                   Link             => Link,
                   CS_Precondition  => Precondition,
                   CS_Result_Name   => Result_Name,
                   CS_Return_Type   => Return_Type,
                   CS_Effects       => Effects,
                   CS_Postcondition => Postcondition));
   end New_Computation_Spec;

   --------------------------
   -- New_Integer_Constant --
   --------------------------

   function New_Integer_Constant
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Value    : Uint)
     return W_Integer_Constant_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Integer_Constant,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   IC_Value => Value));
   end New_Integer_Constant;

   -----------------------
   -- New_Real_Constant --
   -----------------------

   function New_Real_Constant
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Value    : Ureal)
     return W_Real_Constant_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Real_Constant,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   RC_Value => Value));
   end New_Real_Constant;

   ----------------------
   -- New_True_Literal --
   ----------------------

   function New_True_Literal
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_True_Literal_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_True_Literal,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_True_Literal;

   -----------------------
   -- New_False_Literal --
   -----------------------

   function New_False_Literal
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_False_Literal_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_False_Literal,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_False_Literal;

   ----------------------
   -- New_Void_Literal --
   ----------------------

   function New_Void_Literal
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Void_Literal_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Void_Literal,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Void_Literal;

   -------------------------
   -- New_Arith_Operation --
   -------------------------

   function New_Arith_Operation
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Left     : W_Term_Id;
      Op       : W_Arith_Op_Id;
      Right    : W_Term_Id)
     return W_Arith_Operation_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Arith_Operation,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   AO_Left  => Left,
                   AO_Op    => Op,
                   AO_Right => Right));
   end New_Arith_Operation;

   -----------------------
   -- New_Negative_Term --
   -----------------------

   function New_Negative_Term
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Operand  : W_Term_Id)
     return W_Negative_Term_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind       => W_Negative_Term,
                   Ada_Node   => Ada_Node,
                   Link       => Link,
                   NT_Operand => Operand));
   end New_Negative_Term;

   --------------------------
   -- New_Label_Identifier --
   --------------------------

   function New_Label_Identifier
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Label    : W_Identifier_Id)
     return W_Label_Identifier_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Label_Identifier,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   TI_Name  => Name,
                   TI_Label => Label));
   end New_Label_Identifier;

   -------------------
   -- New_Operation --
   -------------------

   function New_Operation
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Id;
      Name       : W_Identifier_Id;
      Parameters : W_Term_List)
     return W_Operation_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind         => W_Operation,
                   Ada_Node     => Ada_Node,
                   Link         => Link,
                   O_Name       => Name,
                   O_Parameters => Parameters));
   end New_Operation;

   --------------------
   -- New_Named_Term --
   --------------------

   function New_Named_Term
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Label_Identifier_Id;
      Term     : W_Term_Id)
     return W_Named_Term_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Named_Term,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   NT_Name  => Name,
                   NT_Term  => Term));
   end New_Named_Term;

   --------------------------
   -- New_Conditional_Term --
   --------------------------

   function New_Conditional_Term
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Id;
      Condition : W_Term_Id;
      Then_Part : W_Term_Id;
      Else_Part : W_Term_Id)
     return W_Conditional_Term_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind         => W_Conditional_Term,
                   Ada_Node     => Ada_Node,
                   Link         => Link,
                   CT_Condition => Condition,
                   CT_Then_Part => Then_Part,
                   CT_Else_Part => Else_Part));
   end New_Conditional_Term;

   ----------------------
   -- New_Binding_Term --
   ----------------------

   function New_Binding_Term
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Def      : W_Term_Id;
      Context  : W_Term_Id)
     return W_Binding_Term_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind       => W_Binding_Term,
                   Ada_Node   => Ada_Node,
                   Link       => Link,
                   BT_Name    => Name,
                   BT_Def     => Def,
                   BT_Context => Context));
   end New_Binding_Term;

   ------------------------
   -- New_Protected_Term --
   ------------------------

   function New_Protected_Term
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Term     : W_Term_Id)
     return W_Protected_Term_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Protected_Term,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   BT_Term  => Term));
   end New_Protected_Term;

   ----------------
   -- New_Op_Add --
   ----------------

   function New_Op_Add
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Add_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Add,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Add;

   ----------------------
   -- New_Op_Substract --
   ----------------------

   function New_Op_Substract
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Substract_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Substract,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Substract;

   ---------------------
   -- New_Op_Multiply --
   ---------------------

   function New_Op_Multiply
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Multiply_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Multiply,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Multiply;

   -------------------
   -- New_Op_Divide --
   -------------------

   function New_Op_Divide
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Divide_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Divide,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Divide;

   -------------------
   -- New_Op_Modulo --
   -------------------

   function New_Op_Modulo
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Modulo_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Modulo,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Modulo;

   ---------------------------
   -- New_True_Literal_Pred --
   ---------------------------

   function New_True_Literal_Pred
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_True_Literal_Pred_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_True_Literal_Pred,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_True_Literal_Pred;

   ----------------------------
   -- New_False_Literal_Pred --
   ----------------------------

   function New_False_Literal_Pred
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_False_Literal_Pred_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_False_Literal_Pred,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_False_Literal_Pred;

   ------------------------------
   -- New_Predicate_Identifier --
   ------------------------------

   function New_Predicate_Identifier
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id)
     return W_Predicate_Identifier_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Predicate_Identifier,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   PID_Name => Name));
   end New_Predicate_Identifier;

   ----------------------------
   -- New_Predicate_Instance --
   ----------------------------

   function New_Predicate_Instance
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Id;
      Name       : W_Identifier_Id;
      Parameters : W_Term_List)
     return W_Predicate_Instance_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind           => W_Predicate_Instance,
                   Ada_Node       => Ada_Node,
                   Link           => Link,
                   PIN_Name       => Name,
                   PIN_Parameters => Parameters));
   end New_Predicate_Instance;

   -----------------------
   -- New_Related_Terms --
   -----------------------

   function New_Related_Terms
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Left     : W_Term_Id;
      Op       : W_Relation_Id;
      Right    : W_Term_Id;
      Op2      : W_Relation_Id;
      Right2   : W_Term_Id)
     return W_Related_Terms_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind      => W_Related_Terms,
                   Ada_Node  => Ada_Node,
                   Link      => Link,
                   RT_Left   => Left,
                   RT_Op     => Op,
                   RT_Right  => Right,
                   RT_Op2    => Op2,
                   RT_Right2 => Right2));
   end New_Related_Terms;

   ---------------------
   -- New_Implication --
   ---------------------

   function New_Implication
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Implication_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind       => W_Implication,
                   Ada_Node   => Ada_Node,
                   Link       => Link,
                   ITOC_Left  => Left,
                   ITOC_Right => Right));
   end New_Implication;

   ---------------------
   -- New_Equivalence --
   ---------------------

   function New_Equivalence
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Equivalence_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind       => W_Equivalence,
                   Ada_Node   => Ada_Node,
                   Link       => Link,
                   ITOC_Left  => Left,
                   ITOC_Right => Right));
   end New_Equivalence;

   ---------------------
   -- New_Disjonction --
   ---------------------

   function New_Disjonction
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Disjonction_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind       => W_Disjonction,
                   Ada_Node   => Ada_Node,
                   Link       => Link,
                   ITOC_Left  => Left,
                   ITOC_Right => Right));
   end New_Disjonction;

   ---------------------
   -- New_Conjonction --
   ---------------------

   function New_Conjonction
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Left     : W_Predicate_Id;
      Right    : W_Predicate_Id)
     return W_Conjonction_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind       => W_Conjonction,
                   Ada_Node   => Ada_Node,
                   Link       => Link,
                   ITOC_Left  => Left,
                   ITOC_Right => Right));
   end New_Conjonction;

   ------------------
   -- New_Negation --
   ------------------

   function New_Negation
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Operand  : W_Predicate_Id)
     return W_Negation_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind      => W_Negation,
                   Ada_Node  => Ada_Node,
                   Link      => Link,
                   N_Operand => Operand));
   end New_Negation;

   --------------------------
   -- New_Conditional_Pred --
   --------------------------

   function New_Conditional_Pred
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Id;
      Condition : W_Term_Id;
      Then_Part : W_Predicate_Id;
      Else_Part : W_Predicate_Id)
     return W_Conditional_Pred_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind          => W_Conditional_Pred,
                   Ada_Node      => Ada_Node,
                   Link          => Link,
                   CPD_Condition => Condition,
                   CPD_Then_Part => Then_Part,
                   CPD_Else_Part => Else_Part));
   end New_Conditional_Pred;

   ----------------------
   -- New_Binding_Pred --
   ----------------------

   function New_Binding_Pred
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Def      : W_Term_Id;
      Context  : W_Predicate_Id)
     return W_Binding_Pred_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind        => W_Binding_Pred,
                   Ada_Node    => Ada_Node,
                   Link        => Link,
                   BPD_Name    => Name,
                   BPD_Def     => Def,
                   BPD_Context => Context));
   end New_Binding_Pred;

   ---------------------------
   -- New_Universal_Quantif --
   ---------------------------

   function New_Universal_Quantif
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Id;
      Variables : W_Identifier_List;
      Var_Type  : W_Primitive_Type_Id;
      Triggers  : W_Triggers_List;
      Pred      : W_Predicate_Id)
     return W_Universal_Quantif_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind         => W_Universal_Quantif,
                   Ada_Node     => Ada_Node,
                   Link         => Link,
                   UQ_Variables => Variables,
                   UQ_Var_Type  => Var_Type,
                   UQ_Triggers  => Triggers,
                   UQ_Pred      => Pred));
   end New_Universal_Quantif;

   -----------------------------
   -- New_Existential_Quantif --
   -----------------------------

   function New_Existential_Quantif
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Id;
      Variables : W_Identifier_List;
      Var_Type  : W_Primitive_Type_Id;
      Pred      : W_Predicate_Id)
     return W_Existential_Quantif_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind         => W_Existential_Quantif,
                   Ada_Node     => Ada_Node,
                   Link         => Link,
                   EQ_Variables => Variables,
                   EQ_Var_Type  => Var_Type,
                   EQ_Pred      => Pred));
   end New_Existential_Quantif;

   -------------------------
   -- New_Named_Predicate --
   -------------------------

   function New_Named_Predicate
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Pred     : W_Predicate_Id)
     return W_Named_Predicate_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Named_Predicate,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   NP_Name  => Name,
                   NP_Pred  => Pred));
   end New_Named_Predicate;

   -----------------------------
   -- New_Protected_Predicate --
   -----------------------------

   function New_Protected_Predicate
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Pred     : W_Predicate_Id)
     return W_Protected_Predicate_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Protected_Predicate,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   PP_Pred  => Pred));
   end New_Protected_Predicate;

   ------------------
   -- New_Triggers --
   ------------------

   function New_Triggers
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Triggers : W_Trigger_List)
     return W_Triggers_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind         => W_Triggers,
                   Ada_Node     => Ada_Node,
                   Link         => Link,
                   TRS_Triggers => Triggers));
   end New_Triggers;

   -----------------
   -- New_Trigger --
   -----------------

   function New_Trigger
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Terms    : W_Term_List)
     return W_Trigger_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind      => W_Trigger,
                   Ada_Node  => Ada_Node,
                   Link      => Link,
                   TRI_Terms => Terms));
   end New_Trigger;

   ----------------
   -- New_Rel_Eq --
   ----------------

   function New_Rel_Eq
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Rel_Eq_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Rel_Eq,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Rel_Eq;

   ----------------
   -- New_Rel_Ne --
   ----------------

   function New_Rel_Ne
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Rel_Ne_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Rel_Ne,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Rel_Ne;

   ----------------
   -- New_Rel_Lt --
   ----------------

   function New_Rel_Lt
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Rel_Lt_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Rel_Lt,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Rel_Lt;

   ----------------
   -- New_Rel_Le --
   ----------------

   function New_Rel_Le
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Rel_Le_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Rel_Le,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Rel_Le;

   ----------------
   -- New_Rel_Gt --
   ----------------

   function New_Rel_Gt
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Rel_Gt_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Rel_Gt,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Rel_Gt;

   ----------------
   -- New_Rel_Ge --
   ----------------

   function New_Rel_Ge
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Rel_Ge_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Rel_Ge,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Rel_Ge;

   --------------
   -- New_Type --
   --------------

   function New_Type
     (Ada_Node        : Node_Id;
      Link            : Why_Node_Id;
      External        : W_External_Id;
      Type_Parameters : W_Identifier_List;
      Name            : W_Identifier_Id)
     return W_Type_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind              => W_Type,
                   Ada_Node          => Ada_Node,
                   Link              => Link,
                   T_External        => External,
                   T_Type_Parameters => Type_Parameters,
                   T_Name            => Name));
   end New_Type;

   ---------------
   -- New_Logic --
   ---------------

   function New_Logic
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Id;
      External   : W_External_Id;
      Names      : W_Identifier_List;
      Logic_Type : W_Logic_Type_Id)
     return W_Logic_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind         => W_Logic,
                   Ada_Node     => Ada_Node,
                   Link         => Link,
                   L_External   => External,
                   L_Names      => Names,
                   L_Logic_Type => Logic_Type));
   end New_Logic;

   ------------------
   -- New_Function --
   ------------------

   function New_Function
     (Ada_Node    : Node_Id;
      Link        : Why_Node_Id;
      Name        : W_Identifier_Id;
      Binders     : W_Logic_Binder_List;
      Return_Type : W_Primitive_Type_Id;
      Def         : W_Term_Id)
     return W_Function_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind          => W_Function,
                   Ada_Node      => Ada_Node,
                   Link          => Link,
                   F_Name        => Name,
                   F_Binders     => Binders,
                   F_Return_Type => Return_Type,
                   F_Def         => Def));
   end New_Function;

   ------------------------------
   -- New_Predicate_Definition --
   ------------------------------

   function New_Predicate_Definition
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Binders  : W_Logic_Binder_List;
      Def      : W_Predicate_Id)
     return W_Predicate_Definition_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind      => W_Predicate_Definition,
                   Ada_Node  => Ada_Node,
                   Link      => Link,
                   P_Name    => Name,
                   P_Binders => Binders,
                   P_Def     => Def));
   end New_Predicate_Definition;

   -------------------
   -- New_Inductive --
   -------------------

   function New_Inductive
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Id;
      Name       : W_Identifier_Id;
      Logic_Type : W_Logic_Type_Id;
      Def        : W_Inductive_Case_List)
     return W_Inductive_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind         => W_Inductive,
                   Ada_Node     => Ada_Node,
                   Link         => Link,
                   I_Name       => Name,
                   I_Logic_Type => Logic_Type,
                   I_Def        => Def));
   end New_Inductive;

   ---------------
   -- New_Axiom --
   ---------------

   function New_Axiom
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Def      : W_Predicate_Id)
     return W_Axiom_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Axiom,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   AX_Name  => Name,
                   AX_Def   => Def));
   end New_Axiom;

   --------------
   -- New_Goal --
   --------------

   function New_Goal
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Def      : W_Predicate_Id)
     return W_Goal_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Goal,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   G_Name   => Name,
                   G_Def    => Def));
   end New_Goal;

   ------------------
   -- New_External --
   ------------------

   function New_External
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_External_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_External,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_External;

   --------------------
   -- New_Logic_Type --
   --------------------

   function New_Logic_Type
     (Ada_Node    : Node_Id;
      Link        : Why_Node_Id;
      Arg_Types   : W_Logic_Arg_Type_List;
      Return_Type : W_Logic_Return_Type_List)
     return W_Logic_Type_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind           => W_Logic_Type,
                   Ada_Node       => Ada_Node,
                   Link           => Link,
                   LT_Arg_Types   => Arg_Types,
                   LT_Return_Type => Return_Type));
   end New_Logic_Type;

   ----------------------
   -- New_Logic_Binder --
   ----------------------

   function New_Logic_Binder
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Id;
      Name       : W_Identifier_Id;
      Param_Type : W_Primitive_Type_Id)
     return W_Logic_Binder_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind          => W_Logic_Binder,
                   Ada_Node      => Ada_Node,
                   Link          => Link,
                   LB_Name       => Name,
                   LB_Param_Type => Param_Type));
   end New_Logic_Binder;

   ------------------------
   -- New_Inductive_Case --
   ------------------------

   function New_Inductive_Case
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Pred     : W_Predicate_Id)
     return W_Inductive_Case_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Inductive_Case,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   IC_Name  => Name,
                   IC_Pred  => Pred));
   end New_Inductive_Case;

   -----------------
   -- New_Effects --
   -----------------

   function New_Effects
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Reads    : W_Identifier_List;
      Writes   : W_Identifier_List;
      Raises   : W_Identifier_List)
     return W_Effects_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Effects,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   E_Reads  => Reads,
                   E_Writes => Writes,
                   E_Raises => Raises));
   end New_Effects;

   ----------------------
   -- New_Precondition --
   ----------------------

   function New_Precondition
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Id;
      Assertion : W_Assertion_Id)
     return W_Precondition_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind          => W_Precondition,
                   Ada_Node      => Ada_Node,
                   Link          => Link,
                   PRE_Assertion => Assertion));
   end New_Precondition;

   -----------------------
   -- New_Postcondition --
   -----------------------

   function New_Postcondition
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Id;
      Assertion : W_Assertion_Id;
      Handlers  : W_Exn_Condition_List)
     return W_Postcondition_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind           => W_Postcondition,
                   Ada_Node       => Ada_Node,
                   Link           => Link,
                   POST_Assertion => Assertion,
                   POST_Handlers  => Handlers));
   end New_Postcondition;

   -----------------------
   -- New_Exn_Condition --
   -----------------------

   function New_Exn_Condition
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Id;
      Exn_Case  : W_Identifier_Id;
      Assertion : W_Assertion_Id)
     return W_Exn_Condition_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind         => W_Exn_Condition,
                   Ada_Node     => Ada_Node,
                   Link         => Link,
                   EC_Exn_Case  => Exn_Case,
                   EC_Assertion => Assertion));
   end New_Exn_Condition;

   -------------------
   -- New_Assertion --
   -------------------

   function New_Assertion
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Pred     : W_Predicate_Id;
      As       : W_Identifier_Id)
     return W_Assertion_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Assertion,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   A_Pred   => Pred,
                   A_As     => As));
   end New_Assertion;

   -----------------------
   -- New_Prog_Constant --
   -----------------------

   function New_Prog_Constant
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Def      : W_Constant_Id)
     return W_Prog_Constant_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Prog_Constant,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   PC_Def   => Def));
   end New_Prog_Constant;

   -------------------------
   -- New_Prog_Identifier --
   -------------------------

   function New_Prog_Identifier
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Def      : W_Identifier_Id)
     return W_Prog_Identifier_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Prog_Identifier,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   PI_Def   => Def));
   end New_Prog_Identifier;

   ---------------
   -- New_Deref --
   ---------------

   function New_Deref
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Ref      : W_Identifier_Id)
     return W_Deref_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Deref,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   D_Ref    => Ref));
   end New_Deref;

   --------------------
   -- New_Assignment --
   --------------------

   function New_Assignment
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Value    : W_Prog_Id)
     return W_Assignment_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Assignment,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   A_Name   => Name,
                   A_Value  => Value));
   end New_Assignment;

   ----------------------
   -- New_Array_Access --
   ----------------------

   function New_Array_Access
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Index    : W_Prog_Id)
     return W_Array_Access_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Array_Access,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   AA_Name  => Name,
                   AA_Index => Index));
   end New_Array_Access;

   ----------------------
   -- New_Array_Update --
   ----------------------

   function New_Array_Update
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Index    : W_Prog_Id;
      Value    : W_Prog_Id)
     return W_Array_Update_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Array_Update,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   AU_Name  => Name,
                   AU_Index => Index,
                   AU_Value => Value));
   end New_Array_Update;

   --------------------
   -- New_Infix_Call --
   --------------------

   function New_Infix_Call
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Left     : W_Prog_Id;
      Infix    : W_Infix_Id;
      Right    : W_Prog_Id)
     return W_Infix_Call_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Infix_Call,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   IC_Left  => Left,
                   IC_Infix => Infix,
                   IC_Right => Right));
   end New_Infix_Call;

   ---------------------
   -- New_Prefix_Call --
   ---------------------

   function New_Prefix_Call
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Prefix   : W_Prefix_Id;
      Operand  : W_Prog_Id)
     return W_Prefix_Call_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind       => W_Prefix_Call,
                   Ada_Node   => Ada_Node,
                   Link       => Link,
                   PC_Prefix  => Prefix,
                   PC_Operand => Operand));
   end New_Prefix_Call;

   ----------------------
   -- New_Binding_Prog --
   ----------------------

   function New_Binding_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Def      : W_Prog_Id;
      Context  : W_Prog_Id)
     return W_Binding_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind        => W_Binding_Prog,
                   Ada_Node    => Ada_Node,
                   Link        => Link,
                   BPG_Name    => Name,
                   BPG_Def     => Def,
                   BPG_Context => Context));
   end New_Binding_Prog;

   ---------------------
   -- New_Binding_Ref --
   ---------------------

   function New_Binding_Ref
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Def      : W_Prog_Id;
      Context  : W_Prog_Id)
     return W_Binding_Ref_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind        => W_Binding_Ref,
                   Ada_Node    => Ada_Node,
                   Link        => Link,
                   BPG_Name    => Name,
                   BPG_Def     => Def,
                   BPG_Context => Context));
   end New_Binding_Ref;

   --------------------------
   -- New_Conditional_Prog --
   --------------------------

   function New_Conditional_Prog
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Id;
      Condition : W_Prog_Id;
      Then_Part : W_Prog_Id;
      Else_Part : W_Prog_Id)
     return W_Conditional_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind          => W_Conditional_Prog,
                   Ada_Node      => Ada_Node,
                   Link          => Link,
                   CPG_Condition => Condition,
                   CPG_Then_Part => Then_Part,
                   CPG_Else_Part => Else_Part));
   end New_Conditional_Prog;

   --------------------
   -- New_While_Loop --
   --------------------

   function New_While_Loop
     (Ada_Node     : Node_Id;
      Link         : Why_Node_Id;
      Condition    : W_Prog_Id;
      Annotation   : W_Loop_Annot_Id;
      Loop_Content : W_Prog_Id)
     return W_While_Loop_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind            => W_While_Loop,
                   Ada_Node        => Ada_Node,
                   Link            => Link,
                   WL_Condition    => Condition,
                   WL_Annotation   => Annotation,
                   WL_Loop_Content => Loop_Content));
   end New_While_Loop;

   ----------------------------
   -- New_Statement_Sequence --
   ----------------------------

   function New_Statement_Sequence
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Id;
      Statements : W_Prog_List)
     return W_Statement_Sequence_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind          => W_Statement_Sequence,
                   Ada_Node      => Ada_Node,
                   Link          => Link,
                   SS_Statements => Statements));
   end New_Statement_Sequence;

   ---------------
   -- New_Label --
   ---------------

   function New_Label
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Def      : W_Prog_Id)
     return W_Label_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Label,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   L_Name   => Name,
                   L_Def    => Def));
   end New_Label;

   ----------------
   -- New_Assert --
   ----------------

   function New_Assert
     (Ada_Node   : Node_Id;
      Link       : Why_Node_Id;
      Assertions : W_Assertion_List;
      Prog       : W_Prog_Id)
     return W_Assert_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind          => W_Assert,
                   Ada_Node      => Ada_Node,
                   Link          => Link,
                   AS_Assertions => Assertions,
                   AS_Prog       => Prog));
   end New_Assert;

   ------------------------
   -- New_Post_Assertion --
   ------------------------

   function New_Post_Assertion
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Prog     : W_Prog_Id;
      Post     : W_Postcondition_Id)
     return W_Post_Assertion_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Post_Assertion,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   PA_Prog  => Prog,
                   PA_Post  => Post));
   end New_Post_Assertion;

   --------------------------
   -- New_Opaque_Assertion --
   --------------------------

   function New_Opaque_Assertion
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Prog     : W_Prog_Id;
      Post     : W_Postcondition_Id)
     return W_Opaque_Assertion_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Opaque_Assertion,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   PA_Prog  => Prog,
                   PA_Post  => Post));
   end New_Opaque_Assertion;

   -----------------
   -- New_Fun_Def --
   -----------------

   function New_Fun_Def
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Binders  : W_Binders_Id;
      Def      : W_Prog_Id)
     return W_Fun_Def_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind       => W_Fun_Def,
                   Ada_Node   => Ada_Node,
                   Link       => Link,
                   FD_Binders => Binders,
                   FD_Def     => Def));
   end New_Fun_Def;

   ---------------------
   -- New_Binding_Fun --
   ---------------------

   function New_Binding_Fun
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Binders  : W_Binders_Id;
      Def      : W_Prog_Id;
      Context  : W_Prog_Id)
     return W_Binding_Fun_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind       => W_Binding_Fun,
                   Ada_Node   => Ada_Node,
                   Link       => Link,
                   BF_Name    => Name,
                   BF_Binders => Binders,
                   BF_Def     => Def,
                   BF_Context => Context));
   end New_Binding_Fun;

   ---------------------
   -- New_Binding_Rec --
   ---------------------

   function New_Binding_Rec
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Recfun   : W_Recfun_Id;
      Context  : W_Prog_Id)
     return W_Binding_Rec_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind       => W_Binding_Rec,
                   Ada_Node   => Ada_Node,
                   Link       => Link,
                   BR_Recfun  => Recfun,
                   BR_Context => Context));
   end New_Binding_Rec;

   -----------------------
   -- New_Prog_Sequence --
   -----------------------

   function New_Prog_Sequence
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Progs    : W_Prog_List)
     return W_Prog_Sequence_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Prog_Sequence,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   PS_Progs => Progs));
   end New_Prog_Sequence;

   -------------------------
   -- New_Raise_Statement --
   -------------------------

   function New_Raise_Statement
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Exn_Type : W_Value_Type_Id)
     return W_Raise_Statement_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind        => W_Raise_Statement,
                   Ada_Node    => Ada_Node,
                   Link        => Link,
                   RS_Name     => Name,
                   RS_Exn_Type => Exn_Type));
   end New_Raise_Statement;

   -----------------------------------------
   -- New_Raise_Statement_With_Parameters --
   -----------------------------------------

   function New_Raise_Statement_With_Parameters
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Id;
      Name      : W_Identifier_Id;
      Parameter : W_Term_Id;
      Exn_Type  : W_Value_Type_Id)
     return W_Raise_Statement_With_Parameters_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind           => W_Raise_Statement_With_Parameters,
                   Ada_Node       => Ada_Node,
                   Link           => Link,
                   RSWP_Name      => Name,
                   RSWP_Parameter => Parameter,
                   RSWP_Exn_Type  => Exn_Type));
   end New_Raise_Statement_With_Parameters;

   -------------------
   -- New_Try_Block --
   -------------------

   function New_Try_Block
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Prog     : W_Prog_Id;
      Handler  : W_Handler_List)
     return W_Try_Block_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind       => W_Try_Block,
                   Ada_Node   => Ada_Node,
                   Link       => Link,
                   TB_Prog    => Prog,
                   TB_Handler => Handler));
   end New_Try_Block;

   --------------------------
   -- New_Unreachable_Code --
   --------------------------

   function New_Unreachable_Code
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Exn_Type : W_Value_Type_Id)
     return W_Unreachable_Code_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind        => W_Unreachable_Code,
                   Ada_Node    => Ada_Node,
                   Link        => Link,
                   UC_Exn_Type => Exn_Type));
   end New_Unreachable_Code;

   ---------------------
   -- New_Begin_Block --
   ---------------------

   function New_Begin_Block
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Prog     : W_Prog_Id)
     return W_Begin_Block_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Begin_Block,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   BB_Prog  => Prog));
   end New_Begin_Block;

   ------------------------
   -- New_Protected_Prog --
   ------------------------

   function New_Protected_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Prog     : W_Prog_Id)
     return W_Protected_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Protected_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   BB_Prog  => Prog));
   end New_Protected_Prog;

   ---------------------
   -- New_Op_Add_Prog --
   ---------------------

   function New_Op_Add_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Add_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Add_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Add_Prog;

   ---------------------------
   -- New_Op_Substract_Prog --
   ---------------------------

   function New_Op_Substract_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Substract_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Substract_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Substract_Prog;

   --------------------------
   -- New_Op_Multiply_Prog --
   --------------------------

   function New_Op_Multiply_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Multiply_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Multiply_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Multiply_Prog;

   ------------------------
   -- New_Op_Divide_Prog --
   ------------------------

   function New_Op_Divide_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Divide_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Divide_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Divide_Prog;

   ---------------------
   -- New_Op_Mod_Prog --
   ---------------------

   function New_Op_Mod_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Mod_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Mod_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Mod_Prog;

   --------------------
   -- New_Op_Eq_Prog --
   --------------------

   function New_Op_Eq_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Eq_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Eq_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Eq_Prog;

   --------------------
   -- New_Op_Ne_Prog --
   --------------------

   function New_Op_Ne_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Ne_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Ne_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Ne_Prog;

   --------------------
   -- New_Op_Lt_Prog --
   --------------------

   function New_Op_Lt_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Lt_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Lt_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Lt_Prog;

   --------------------
   -- New_Op_Le_Prog --
   --------------------

   function New_Op_Le_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Le_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Le_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Le_Prog;

   --------------------
   -- New_Op_Gt_Prog --
   --------------------

   function New_Op_Gt_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Gt_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Gt_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Gt_Prog;

   --------------------
   -- New_Op_Ge_Prog --
   --------------------

   function New_Op_Ge_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Ge_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Ge_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Ge_Prog;

   -------------------------
   -- New_Op_Or_Else_Prog --
   -------------------------

   function New_Op_Or_Else_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Or_Else_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Or_Else_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Or_Else_Prog;

   --------------------------
   -- New_Op_And_Then_Prog --
   --------------------------

   function New_Op_And_Then_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_And_Then_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_And_Then_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_And_Then_Prog;

   -----------------------
   -- New_Op_Minus_Prog --
   -----------------------

   function New_Op_Minus_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Minus_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Minus_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Minus_Prog;

   ---------------------
   -- New_Op_Not_Prog --
   ---------------------

   function New_Op_Not_Prog
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id)
     return W_Op_Not_Prog_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Op_Not_Prog,
                   Ada_Node => Ada_Node,
                   Link     => Link));
   end New_Op_Not_Prog;

   -----------------
   -- New_Binders --
   -----------------

   function New_Binders
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Binders  : W_Binders_List)
     return W_Binders_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind       => W_Binders,
                   Ada_Node   => Ada_Node,
                   Link       => Link,
                   BS_Binders => Binders));
   end New_Binders;

   ----------------
   -- New_Binder --
   ----------------

   function New_Binder
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Names    : W_Identifier_List;
      Arg_Type : W_Value_Type_Id)
     return W_Binder_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind       => W_Binder,
                   Ada_Node   => Ada_Node,
                   Link       => Link,
                   B_Names    => Names,
                   B_Arg_Type => Arg_Type));
   end New_Binder;

   ----------------
   -- New_Recfun --
   ----------------

   function New_Recfun
     (Ada_Node    : Node_Id;
      Link        : Why_Node_Id;
      Name        : W_Identifier_Id;
      Binders     : W_Binders_Id;
      Return_Type : W_Prog_Id;
      Variant     : W_Wf_Arg_Id;
      Def         : W_Prog_Id)
     return W_Recfun_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind           => W_Recfun,
                   Ada_Node       => Ada_Node,
                   Link           => Link,
                   RF_Name        => Name,
                   RF_Binders     => Binders,
                   RF_Return_Type => Return_Type,
                   RF_Variant     => Variant,
                   RF_Def         => Def));
   end New_Recfun;

   --------------------
   -- New_Loop_Annot --
   --------------------

   function New_Loop_Annot
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Id;
      Invariant : W_Assertion_Id;
      Variant   : W_Wf_Arg_Id)
     return W_Loop_Annot_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind         => W_Loop_Annot,
                   Ada_Node     => Ada_Node,
                   Link         => Link,
                   LA_Invariant => Invariant,
                   LA_Variant   => Variant));
   end New_Loop_Annot;

   ----------------
   -- New_Wf_Arg --
   ----------------

   function New_Wf_Arg
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Def      : W_Term_Id;
      For_Id   : W_Identifier_Id)
     return W_Wf_Arg_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind      => W_Wf_Arg,
                   Ada_Node  => Ada_Node,
                   Link      => Link,
                   WA_Def    => Def,
                   WA_For_Id => For_Id));
   end New_Wf_Arg;

   -----------------
   -- New_Handler --
   -----------------

   function New_Handler
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Id;
      Name      : W_Identifier_Id;
      Parameter : W_Prog_Id;
      Def       : W_Prog_Id)
     return W_Handler_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind        => W_Handler,
                   Ada_Node    => Ada_Node,
                   Link        => Link,
                   H_Name      => Name,
                   H_Parameter => Parameter,
                   H_Def       => Def));
   end New_Handler;

   --------------
   -- New_File --
   --------------

   function New_File
     (Ada_Node     : Node_Id;
      Link         : Why_Node_Id;
      Declarations : W_Declaration_List)
     return W_File_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind           => W_File,
                   Ada_Node       => Ada_Node,
                   Link           => Link,
                   F_Declarations => Declarations));
   end New_File;

   ------------------------
   -- New_Global_Binding --
   ------------------------

   function New_Global_Binding
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Identifier_Id;
      Binders  : W_Binders_Id;
      Def      : W_Prog_Id)
     return W_Global_Binding_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind       => W_Global_Binding,
                   Ada_Node   => Ada_Node,
                   Link       => Link,
                   GB_Name    => Name,
                   GB_Binders => Binders,
                   GB_Def     => Def));
   end New_Global_Binding;

   ----------------------------
   -- New_Global_Rec_Binding --
   ----------------------------

   function New_Global_Rec_Binding
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Name     : W_Recfun_Id)
     return W_Global_Rec_Binding_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Global_Rec_Binding,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   GRB_Name => Name));
   end New_Global_Rec_Binding;

   -------------------------------
   -- New_Parameter_Declaration --
   -------------------------------

   function New_Parameter_Declaration
     (Ada_Node       : Node_Id;
      Link           : Why_Node_Id;
      External       : W_External_Id;
      Names          : W_Identifier_List;
      Parameter_Type : W_Value_Type_List)
     return W_Parameter_Declaration_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind              => W_Parameter_Declaration,
                   Ada_Node          => Ada_Node,
                   Link              => Link,
                   PD_External       => External,
                   PD_Names          => Names,
                   PD_Parameter_Type => Parameter_Type));
   end New_Parameter_Declaration;

   -------------------------------
   -- New_Exception_Declaration --
   -------------------------------

   function New_Exception_Declaration
     (Ada_Node  : Node_Id;
      Link      : Why_Node_Id;
      Name      : W_Identifier_Id;
      Parameter : W_Primitive_Type_Id)
     return W_Exception_Declaration_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind         => W_Exception_Declaration,
                   Ada_Node     => Ada_Node,
                   Link         => Link,
                   ED_Name      => Name,
                   ED_Parameter => Parameter));
   end New_Exception_Declaration;

   ---------------------------
   -- New_Logic_Declaration --
   ---------------------------

   function New_Logic_Declaration
     (Ada_Node : Node_Id;
      Link     : Why_Node_Id;
      Decl     : W_Logic_Id)
     return W_Logic_Declaration_Id
   is
   begin
      return New_Why_Node_Id
        (Why_Node'(Kind     => W_Logic_Declaration,
                   Ada_Node => Ada_Node,
                   Link     => Link,
                   LD_Decl  => Decl));
   end New_Logic_Declaration;

end Why.Atree.Builders;
