------------------------------------------------------------------------------
--                                                                          --
--                            GNAT2WHY COMPONENTS                           --
--                                                                          --
--                   W H Y - A T R E E - M U T A T O R S                    --
--                                                                          --
--                                 S p e c                                  --
--                                                                          --
--                       Copyright (C) 2010-2011, AdaCore                   --
--                                                                          --
-- gnat2why is  free  software;  you can redistribute it and/or modify it   --
-- under terms of the  GNU General Public License as published  by the Free --
-- Software Foundation;  either version  2,  or  (at your option) any later --
-- version. gnat2why is distributed in the hope that it will  be  useful,   --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-  --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License  for more details. You  should  have  received a copy of the GNU --
-- General Public License  distributed with GNAT; see file COPYING. If not, --
-- write to the Free Software Foundation,  51 Franklin Street, Fifth Floor, --
-- Boston,                                                                  --
--                                                                          --
-- gnat2why is maintained by AdaCore (http://www.adacore.com)               --
--                                                                          --
------------------------------------------------------------------------------
--  This package is automatically generated by xtree. Do not edit manually.

with Why.Unchecked_Ids;    use Why.Unchecked_Ids;
with Why.Ids;              use Why.Ids;
with Why.Kind_Validity;    use Why.Kind_Validity;
with Why.Atree.Validity;   use Why.Atree.Validity;
with Why.Atree.Properties; use Why.Atree.Properties;

package Why.Atree.Mutators is
   --  This package provides a set of mutators on unchecked ids

   procedure Set_Ada_Node
     (Id       : Why_Node_Id;
      Ada_Node : Node_Id);

   procedure Identifier_Set_Symbol
     (Id     : W_Identifier_Unchecked_Id;
      Symbol : Name_Id);

   procedure Identifier_Set_Entity
     (Id     : W_Identifier_Unchecked_Id;
      Entity : Why_Node_Id);

   procedure Abstract_Type_Set_Name
     (Id   : W_Abstract_Type_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Generic_Formal_Type_Set_Name
     (Id   : W_Generic_Formal_Type_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Generic_Actual_Type_Chain_Append_To_Type_Chain
     (Id       : W_Generic_Actual_Type_Chain_Unchecked_Id;
      New_Item : W_Primitive_Type_Id) with
     Pre =>
       (Primitive_Type_Id_Kind_Valid (New_Item)
        and then Primitive_Type_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Generic_Actual_Type_Chain_Prepend_To_Type_Chain
     (Id       : W_Generic_Actual_Type_Chain_Unchecked_Id;
      New_Item : W_Primitive_Type_Id) with
     Pre =>
       (Primitive_Type_Id_Kind_Valid (New_Item)
        and then Primitive_Type_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Generic_Actual_Type_Chain_Set_Name
     (Id   : W_Generic_Actual_Type_Chain_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Array_Type_Set_Component_Type
     (Id             : W_Array_Type_Unchecked_Id;
      Component_Type : W_Primitive_Type_Unchecked_Id) with
     Pre =>
       (Primitive_Type_Id_Kind_Valid (Component_Type)
        and then Primitive_Type_Id_Valid (Component_Type)
        and then Is_Root (Component_Type));

   procedure Ref_Type_Set_Aliased_Type
     (Id           : W_Ref_Type_Unchecked_Id;
      Aliased_Type : W_Primitive_Type_Unchecked_Id) with
     Pre =>
       (Primitive_Type_Id_Kind_Valid (Aliased_Type)
        and then Primitive_Type_Id_Valid (Aliased_Type)
        and then Is_Root (Aliased_Type));

   procedure Protected_Value_Type_Set_Value_Type
     (Id         : W_Protected_Value_Type_Unchecked_Id;
      Value_Type : W_Value_Type_Unchecked_Id) with
     Pre =>
       (Value_Type_Id_Kind_Valid (Value_Type)
        and then Value_Type_Id_Valid (Value_Type)
        and then Is_Root (Value_Type));

   procedure Arrow_Type_Set_Name
     (Id   : W_Arrow_Type_Unchecked_Id;
      Name : W_Identifier_Unchecked_OId) with
     Pre =>
       (Identifier_OId_Kind_Valid (Name)
        and then Identifier_OId_Valid (Name)
        and then Is_Root (Name));

   procedure Arrow_Type_Set_Left
     (Id   : W_Arrow_Type_Unchecked_Id;
      Left : W_Simple_Value_Type_Unchecked_Id) with
     Pre =>
       (Simple_Value_Type_Id_Kind_Valid (Left)
        and then Simple_Value_Type_Id_Valid (Left)
        and then Is_Root (Left));

   procedure Arrow_Type_Set_Right
     (Id    : W_Arrow_Type_Unchecked_Id;
      Right : W_Computation_Type_Unchecked_Id) with
     Pre =>
       (Computation_Type_Id_Kind_Valid (Right)
        and then Computation_Type_Id_Valid (Right)
        and then Is_Root (Right));

   procedure Computation_Spec_Set_Precondition
     (Id           : W_Computation_Spec_Unchecked_Id;
      Precondition : W_Precondition_Unchecked_OId) with
     Pre =>
       (Precondition_OId_Kind_Valid (Precondition)
        and then Precondition_OId_Valid (Precondition)
        and then Is_Root (Precondition));

   procedure Computation_Spec_Set_Result_Name
     (Id          : W_Computation_Spec_Unchecked_Id;
      Result_Name : W_Identifier_Unchecked_OId) with
     Pre =>
       (Identifier_OId_Kind_Valid (Result_Name)
        and then Identifier_OId_Valid (Result_Name)
        and then Is_Root (Result_Name));

   procedure Computation_Spec_Set_Return_Type
     (Id          : W_Computation_Spec_Unchecked_Id;
      Return_Type : W_Value_Type_Unchecked_Id) with
     Pre =>
       (Value_Type_Id_Kind_Valid (Return_Type)
        and then Value_Type_Id_Valid (Return_Type)
        and then Is_Root (Return_Type));

   procedure Computation_Spec_Set_Effects
     (Id      : W_Computation_Spec_Unchecked_Id;
      Effects : W_Effects_Unchecked_Id) with
     Pre =>
       (Effects_Id_Kind_Valid (Effects)
        and then Effects_Id_Valid (Effects)
        and then Is_Root (Effects));

   procedure Computation_Spec_Set_Postcondition
     (Id            : W_Computation_Spec_Unchecked_Id;
      Postcondition : W_Postcondition_Unchecked_OId) with
     Pre =>
       (Postcondition_OId_Kind_Valid (Postcondition)
        and then Postcondition_OId_Valid (Postcondition)
        and then Is_Root (Postcondition));

   procedure Integer_Constant_Set_Value
     (Id    : W_Integer_Constant_Unchecked_Id;
      Value : Uint);

   procedure Real_Constant_Set_Value
     (Id    : W_Real_Constant_Unchecked_Id;
      Value : Ureal);

   procedure Arith_Operation_Set_Left
     (Id   : W_Arith_Operation_Unchecked_Id;
      Left : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Left)
        and then Term_Id_Valid (Left)
        and then Is_Root (Left));

   procedure Arith_Operation_Set_Op
     (Id : W_Arith_Operation_Unchecked_Id;
      Op : W_Arith_Op_Unchecked_Id) with
     Pre =>
       (Arith_Op_Id_Kind_Valid (Op)
        and then Arith_Op_Id_Valid (Op)
        and then Is_Root (Op));

   procedure Arith_Operation_Set_Right
     (Id    : W_Arith_Operation_Unchecked_Id;
      Right : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Right)
        and then Term_Id_Valid (Right)
        and then Is_Root (Right));

   procedure Negative_Term_Set_Operand
     (Id      : W_Negative_Term_Unchecked_Id;
      Operand : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Operand)
        and then Term_Id_Valid (Operand)
        and then Is_Root (Operand));

   procedure Label_Identifier_Set_Name
     (Id   : W_Label_Identifier_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Label_Identifier_Set_Label
     (Id    : W_Label_Identifier_Unchecked_Id;
      Label : W_Identifier_Unchecked_OId) with
     Pre =>
       (Identifier_OId_Kind_Valid (Label)
        and then Identifier_OId_Valid (Label)
        and then Is_Root (Label));

   procedure Operation_Set_Name
     (Id   : W_Operation_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Operation_Append_To_Parameters
     (Id       : W_Operation_Unchecked_Id;
      New_Item : W_Term_Id) with
     Pre =>
       (Term_Id_Kind_Valid (New_Item)
        and then Term_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Operation_Prepend_To_Parameters
     (Id       : W_Operation_Unchecked_Id;
      New_Item : W_Term_Id) with
     Pre =>
       (Term_Id_Kind_Valid (New_Item)
        and then Term_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Named_Term_Set_Name
     (Id   : W_Named_Term_Unchecked_Id;
      Name : W_Label_Identifier_Unchecked_Id) with
     Pre =>
       (Label_Identifier_Id_Kind_Valid (Name)
        and then Label_Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Named_Term_Set_Term
     (Id   : W_Named_Term_Unchecked_Id;
      Term : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Term)
        and then Term_Id_Valid (Term)
        and then Is_Root (Term));

   procedure Conditional_Term_Set_Condition
     (Id        : W_Conditional_Term_Unchecked_Id;
      Condition : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Condition)
        and then Term_Id_Valid (Condition)
        and then Is_Root (Condition));

   procedure Conditional_Term_Set_Then_Part
     (Id        : W_Conditional_Term_Unchecked_Id;
      Then_Part : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Then_Part)
        and then Term_Id_Valid (Then_Part)
        and then Is_Root (Then_Part));

   procedure Conditional_Term_Set_Else_Part
     (Id        : W_Conditional_Term_Unchecked_Id;
      Else_Part : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Else_Part)
        and then Term_Id_Valid (Else_Part)
        and then Is_Root (Else_Part));

   procedure Binding_Term_Set_Name
     (Id   : W_Binding_Term_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Binding_Term_Set_Def
     (Id  : W_Binding_Term_Unchecked_Id;
      Def : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Def)
        and then Term_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Binding_Term_Set_Context
     (Id      : W_Binding_Term_Unchecked_Id;
      Context : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Context)
        and then Term_Id_Valid (Context)
        and then Is_Root (Context));

   procedure Protected_Term_Set_Term
     (Id   : W_Protected_Term_Unchecked_Id;
      Term : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Term)
        and then Term_Id_Valid (Term)
        and then Is_Root (Term));

   procedure Predicate_Identifier_Set_Name
     (Id   : W_Predicate_Identifier_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Predicate_Instance_Set_Name
     (Id   : W_Predicate_Instance_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Predicate_Instance_Append_To_Parameters
     (Id       : W_Predicate_Instance_Unchecked_Id;
      New_Item : W_Term_Id) with
     Pre =>
       (Term_Id_Kind_Valid (New_Item)
        and then Term_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Predicate_Instance_Prepend_To_Parameters
     (Id       : W_Predicate_Instance_Unchecked_Id;
      New_Item : W_Term_Id) with
     Pre =>
       (Term_Id_Kind_Valid (New_Item)
        and then Term_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Related_Terms_Set_Left
     (Id   : W_Related_Terms_Unchecked_Id;
      Left : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Left)
        and then Term_Id_Valid (Left)
        and then Is_Root (Left));

   procedure Related_Terms_Set_Op
     (Id : W_Related_Terms_Unchecked_Id;
      Op : W_Relation_Unchecked_Id) with
     Pre =>
       (Relation_Id_Kind_Valid (Op)
        and then Relation_Id_Valid (Op)
        and then Is_Root (Op));

   procedure Related_Terms_Set_Right
     (Id    : W_Related_Terms_Unchecked_Id;
      Right : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Right)
        and then Term_Id_Valid (Right)
        and then Is_Root (Right));

   procedure Related_Terms_Set_Op2
     (Id  : W_Related_Terms_Unchecked_Id;
      Op2 : W_Relation_Unchecked_OId) with
     Pre =>
       (Relation_OId_Kind_Valid (Op2)
        and then Relation_OId_Valid (Op2)
        and then Is_Root (Op2));

   procedure Related_Terms_Set_Right2
     (Id     : W_Related_Terms_Unchecked_Id;
      Right2 : W_Term_Unchecked_OId) with
     Pre =>
       (Term_OId_Kind_Valid (Right2)
        and then Term_OId_Valid (Right2)
        and then Is_Root (Right2));

   procedure Implication_Set_Left
     (Id   : W_Implication_Unchecked_Id;
      Left : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Left)
        and then Predicate_Id_Valid (Left)
        and then Is_Root (Left));

   procedure Implication_Set_Right
     (Id    : W_Implication_Unchecked_Id;
      Right : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Right)
        and then Predicate_Id_Valid (Right)
        and then Is_Root (Right));

   procedure Equivalence_Set_Left
     (Id   : W_Equivalence_Unchecked_Id;
      Left : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Left)
        and then Predicate_Id_Valid (Left)
        and then Is_Root (Left));

   procedure Equivalence_Set_Right
     (Id    : W_Equivalence_Unchecked_Id;
      Right : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Right)
        and then Predicate_Id_Valid (Right)
        and then Is_Root (Right));

   procedure Disjonction_Set_Left
     (Id   : W_Disjonction_Unchecked_Id;
      Left : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Left)
        and then Predicate_Id_Valid (Left)
        and then Is_Root (Left));

   procedure Disjonction_Set_Right
     (Id    : W_Disjonction_Unchecked_Id;
      Right : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Right)
        and then Predicate_Id_Valid (Right)
        and then Is_Root (Right));

   procedure Conjonction_Set_Left
     (Id   : W_Conjonction_Unchecked_Id;
      Left : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Left)
        and then Predicate_Id_Valid (Left)
        and then Is_Root (Left));

   procedure Conjonction_Set_Right
     (Id    : W_Conjonction_Unchecked_Id;
      Right : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Right)
        and then Predicate_Id_Valid (Right)
        and then Is_Root (Right));

   procedure Negation_Set_Operand
     (Id      : W_Negation_Unchecked_Id;
      Operand : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Operand)
        and then Predicate_Id_Valid (Operand)
        and then Is_Root (Operand));

   procedure Conditional_Pred_Set_Condition
     (Id        : W_Conditional_Pred_Unchecked_Id;
      Condition : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Condition)
        and then Term_Id_Valid (Condition)
        and then Is_Root (Condition));

   procedure Conditional_Pred_Set_Then_Part
     (Id        : W_Conditional_Pred_Unchecked_Id;
      Then_Part : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Then_Part)
        and then Predicate_Id_Valid (Then_Part)
        and then Is_Root (Then_Part));

   procedure Conditional_Pred_Set_Else_Part
     (Id        : W_Conditional_Pred_Unchecked_Id;
      Else_Part : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Else_Part)
        and then Predicate_Id_Valid (Else_Part)
        and then Is_Root (Else_Part));

   procedure Binding_Pred_Set_Name
     (Id   : W_Binding_Pred_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Binding_Pred_Set_Def
     (Id  : W_Binding_Pred_Unchecked_Id;
      Def : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Def)
        and then Term_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Binding_Pred_Set_Context
     (Id      : W_Binding_Pred_Unchecked_Id;
      Context : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Context)
        and then Predicate_Id_Valid (Context)
        and then Is_Root (Context));

   procedure Universal_Quantif_Append_To_Variables
     (Id       : W_Universal_Quantif_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Universal_Quantif_Prepend_To_Variables
     (Id       : W_Universal_Quantif_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Universal_Quantif_Set_Var_Type
     (Id       : W_Universal_Quantif_Unchecked_Id;
      Var_Type : W_Primitive_Type_Unchecked_Id) with
     Pre =>
       (Primitive_Type_Id_Kind_Valid (Var_Type)
        and then Primitive_Type_Id_Valid (Var_Type)
        and then Is_Root (Var_Type));

   procedure Universal_Quantif_Set_Triggers
     (Id       : W_Universal_Quantif_Unchecked_Id;
      Triggers : W_Triggers_Unchecked_OId) with
     Pre =>
       (Triggers_OId_Kind_Valid (Triggers)
        and then Triggers_OId_Valid (Triggers)
        and then Is_Root (Triggers));

   procedure Universal_Quantif_Set_Pred
     (Id   : W_Universal_Quantif_Unchecked_Id;
      Pred : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Pred)
        and then Predicate_Id_Valid (Pred)
        and then Is_Root (Pred));

   procedure Existential_Quantif_Append_To_Variables
     (Id       : W_Existential_Quantif_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Existential_Quantif_Prepend_To_Variables
     (Id       : W_Existential_Quantif_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Existential_Quantif_Set_Var_Type
     (Id       : W_Existential_Quantif_Unchecked_Id;
      Var_Type : W_Primitive_Type_Unchecked_Id) with
     Pre =>
       (Primitive_Type_Id_Kind_Valid (Var_Type)
        and then Primitive_Type_Id_Valid (Var_Type)
        and then Is_Root (Var_Type));

   procedure Existential_Quantif_Set_Pred
     (Id   : W_Existential_Quantif_Unchecked_Id;
      Pred : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Pred)
        and then Predicate_Id_Valid (Pred)
        and then Is_Root (Pred));

   procedure Named_Predicate_Set_Name
     (Id   : W_Named_Predicate_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Named_Predicate_Set_Pred
     (Id   : W_Named_Predicate_Unchecked_Id;
      Pred : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Pred)
        and then Predicate_Id_Valid (Pred)
        and then Is_Root (Pred));

   procedure Protected_Predicate_Set_Pred
     (Id   : W_Protected_Predicate_Unchecked_Id;
      Pred : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Pred)
        and then Predicate_Id_Valid (Pred)
        and then Is_Root (Pred));

   procedure Triggers_Append_To_Triggers
     (Id       : W_Triggers_Unchecked_Id;
      New_Item : W_Trigger_Id) with
     Pre =>
       (Trigger_Id_Kind_Valid (New_Item)
        and then Trigger_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Triggers_Prepend_To_Triggers
     (Id       : W_Triggers_Unchecked_Id;
      New_Item : W_Trigger_Id) with
     Pre =>
       (Trigger_Id_Kind_Valid (New_Item)
        and then Trigger_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Trigger_Append_To_Terms
     (Id       : W_Trigger_Unchecked_Id;
      New_Item : W_Term_Id) with
     Pre =>
       (Term_Id_Kind_Valid (New_Item)
        and then Term_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Trigger_Prepend_To_Terms
     (Id       : W_Trigger_Unchecked_Id;
      New_Item : W_Term_Id) with
     Pre =>
       (Term_Id_Kind_Valid (New_Item)
        and then Term_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Type_Set_External
     (Id       : W_Type_Unchecked_Id;
      External : W_External_Unchecked_OId) with
     Pre =>
       (External_OId_Kind_Valid (External)
        and then External_OId_Valid (External)
        and then Is_Root (External));

   procedure Type_Append_To_Type_Parameters
     (Id       : W_Type_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Type_Prepend_To_Type_Parameters
     (Id       : W_Type_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Type_Set_Name
     (Id   : W_Type_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Type_Set_Definition
     (Id         : W_Type_Unchecked_Id;
      Definition : W_Type_Definition_Unchecked_OId) with
     Pre =>
       (Type_Definition_OId_Kind_Valid (Definition)
        and then Type_Definition_OId_Valid (Definition)
        and then Is_Root (Definition));

   procedure Logic_Set_External
     (Id       : W_Logic_Unchecked_Id;
      External : W_External_Unchecked_OId) with
     Pre =>
       (External_OId_Kind_Valid (External)
        and then External_OId_Valid (External)
        and then Is_Root (External));

   procedure Logic_Append_To_Names
     (Id       : W_Logic_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Logic_Prepend_To_Names
     (Id       : W_Logic_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Logic_Set_Logic_Type
     (Id         : W_Logic_Unchecked_Id;
      Logic_Type : W_Logic_Type_Unchecked_Id) with
     Pre =>
       (Logic_Type_Id_Kind_Valid (Logic_Type)
        and then Logic_Type_Id_Valid (Logic_Type)
        and then Is_Root (Logic_Type));

   procedure Function_Set_Name
     (Id   : W_Function_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Function_Append_To_Binders
     (Id       : W_Function_Unchecked_Id;
      New_Item : W_Logic_Binder_Id) with
     Pre =>
       (Logic_Binder_Id_Kind_Valid (New_Item)
        and then Logic_Binder_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Function_Prepend_To_Binders
     (Id       : W_Function_Unchecked_Id;
      New_Item : W_Logic_Binder_Id) with
     Pre =>
       (Logic_Binder_Id_Kind_Valid (New_Item)
        and then Logic_Binder_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Function_Set_Return_Type
     (Id          : W_Function_Unchecked_Id;
      Return_Type : W_Primitive_Type_Unchecked_Id) with
     Pre =>
       (Primitive_Type_Id_Kind_Valid (Return_Type)
        and then Primitive_Type_Id_Valid (Return_Type)
        and then Is_Root (Return_Type));

   procedure Function_Set_Def
     (Id  : W_Function_Unchecked_Id;
      Def : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Def)
        and then Term_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Predicate_Definition_Set_Name
     (Id   : W_Predicate_Definition_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Predicate_Definition_Append_To_Binders
     (Id       : W_Predicate_Definition_Unchecked_Id;
      New_Item : W_Logic_Binder_Id) with
     Pre =>
       (Logic_Binder_Id_Kind_Valid (New_Item)
        and then Logic_Binder_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Predicate_Definition_Prepend_To_Binders
     (Id       : W_Predicate_Definition_Unchecked_Id;
      New_Item : W_Logic_Binder_Id) with
     Pre =>
       (Logic_Binder_Id_Kind_Valid (New_Item)
        and then Logic_Binder_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Predicate_Definition_Set_Def
     (Id  : W_Predicate_Definition_Unchecked_Id;
      Def : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Def)
        and then Predicate_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Inductive_Set_Name
     (Id   : W_Inductive_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Inductive_Set_Logic_Type
     (Id         : W_Inductive_Unchecked_Id;
      Logic_Type : W_Logic_Type_Unchecked_Id) with
     Pre =>
       (Logic_Type_Id_Kind_Valid (Logic_Type)
        and then Logic_Type_Id_Valid (Logic_Type)
        and then Is_Root (Logic_Type));

   procedure Inductive_Append_To_Def
     (Id       : W_Inductive_Unchecked_Id;
      New_Item : W_Inductive_Case_Id) with
     Pre =>
       (Inductive_Case_Id_Kind_Valid (New_Item)
        and then Inductive_Case_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Inductive_Prepend_To_Def
     (Id       : W_Inductive_Unchecked_Id;
      New_Item : W_Inductive_Case_Id) with
     Pre =>
       (Inductive_Case_Id_Kind_Valid (New_Item)
        and then Inductive_Case_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Axiom_Set_Name
     (Id   : W_Axiom_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Axiom_Set_Def
     (Id  : W_Axiom_Unchecked_Id;
      Def : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Def)
        and then Predicate_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Goal_Set_Name
     (Id   : W_Goal_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Goal_Set_Def
     (Id  : W_Goal_Unchecked_Id;
      Def : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Def)
        and then Predicate_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Logic_Type_Append_To_Arg_Types
     (Id       : W_Logic_Type_Unchecked_Id;
      New_Item : W_Logic_Arg_Type_Id) with
     Pre =>
       (Logic_Arg_Type_Id_Kind_Valid (New_Item)
        and then Logic_Arg_Type_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Logic_Type_Prepend_To_Arg_Types
     (Id       : W_Logic_Type_Unchecked_Id;
      New_Item : W_Logic_Arg_Type_Id) with
     Pre =>
       (Logic_Arg_Type_Id_Kind_Valid (New_Item)
        and then Logic_Arg_Type_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Logic_Type_Set_Return_Type
     (Id          : W_Logic_Type_Unchecked_Id;
      Return_Type : W_Logic_Return_Type_Unchecked_Id) with
     Pre =>
       (Logic_Return_Type_Id_Kind_Valid (Return_Type)
        and then Logic_Return_Type_Id_Valid (Return_Type)
        and then Is_Root (Return_Type));

   procedure Logic_Binder_Set_Name
     (Id   : W_Logic_Binder_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Logic_Binder_Set_Param_Type
     (Id         : W_Logic_Binder_Unchecked_Id;
      Param_Type : W_Primitive_Type_Unchecked_Id) with
     Pre =>
       (Primitive_Type_Id_Kind_Valid (Param_Type)
        and then Primitive_Type_Id_Valid (Param_Type)
        and then Is_Root (Param_Type));

   procedure Inductive_Case_Set_Name
     (Id   : W_Inductive_Case_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Inductive_Case_Set_Pred
     (Id   : W_Inductive_Case_Unchecked_Id;
      Pred : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Pred)
        and then Predicate_Id_Valid (Pred)
        and then Is_Root (Pred));

   procedure Transparent_Type_Definition_Set_Type_Definition
     (Id              : W_Transparent_Type_Definition_Unchecked_Id;
      Type_Definition : W_Primitive_Type_Unchecked_Id) with
     Pre =>
       (Primitive_Type_Id_Kind_Valid (Type_Definition)
        and then Primitive_Type_Id_Valid (Type_Definition)
        and then Is_Root (Type_Definition));

   procedure Adt_Definition_Append_To_Constructors
     (Id       : W_Adt_Definition_Unchecked_Id;
      New_Item : W_Constr_Decl_Id) with
     Pre =>
       (Constr_Decl_Id_Kind_Valid (New_Item)
        and then Constr_Decl_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Adt_Definition_Prepend_To_Constructors
     (Id       : W_Adt_Definition_Unchecked_Id;
      New_Item : W_Constr_Decl_Id) with
     Pre =>
       (Constr_Decl_Id_Kind_Valid (New_Item)
        and then Constr_Decl_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Constr_Decl_Set_Name
     (Id   : W_Constr_Decl_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Constr_Decl_Append_To_Arg_List
     (Id       : W_Constr_Decl_Unchecked_Id;
      New_Item : W_Primitive_Type_Id) with
     Pre =>
       (Primitive_Type_Id_Kind_Valid (New_Item)
        and then Primitive_Type_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Constr_Decl_Prepend_To_Arg_List
     (Id       : W_Constr_Decl_Unchecked_Id;
      New_Item : W_Primitive_Type_Id) with
     Pre =>
       (Primitive_Type_Id_Kind_Valid (New_Item)
        and then Primitive_Type_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Effects_Append_To_Reads
     (Id       : W_Effects_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Effects_Prepend_To_Reads
     (Id       : W_Effects_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Effects_Append_To_Writes
     (Id       : W_Effects_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Effects_Prepend_To_Writes
     (Id       : W_Effects_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Effects_Append_To_Raises
     (Id       : W_Effects_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Effects_Prepend_To_Raises
     (Id       : W_Effects_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Precondition_Set_Assertion
     (Id        : W_Precondition_Unchecked_Id;
      Assertion : W_Assertion_Unchecked_Id) with
     Pre =>
       (Assertion_Id_Kind_Valid (Assertion)
        and then Assertion_Id_Valid (Assertion)
        and then Is_Root (Assertion));

   procedure Postcondition_Set_Assertion
     (Id        : W_Postcondition_Unchecked_Id;
      Assertion : W_Assertion_Unchecked_Id) with
     Pre =>
       (Assertion_Id_Kind_Valid (Assertion)
        and then Assertion_Id_Valid (Assertion)
        and then Is_Root (Assertion));

   procedure Postcondition_Append_To_Handlers
     (Id       : W_Postcondition_Unchecked_Id;
      New_Item : W_Exn_Condition_Id) with
     Pre =>
       (Exn_Condition_Id_Kind_Valid (New_Item)
        and then Exn_Condition_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Postcondition_Prepend_To_Handlers
     (Id       : W_Postcondition_Unchecked_Id;
      New_Item : W_Exn_Condition_Id) with
     Pre =>
       (Exn_Condition_Id_Kind_Valid (New_Item)
        and then Exn_Condition_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Exn_Condition_Set_Exn_Case
     (Id       : W_Exn_Condition_Unchecked_Id;
      Exn_Case : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Exn_Case)
        and then Identifier_Id_Valid (Exn_Case)
        and then Is_Root (Exn_Case));

   procedure Exn_Condition_Set_Assertion
     (Id        : W_Exn_Condition_Unchecked_Id;
      Assertion : W_Assertion_Unchecked_Id) with
     Pre =>
       (Assertion_Id_Kind_Valid (Assertion)
        and then Assertion_Id_Valid (Assertion)
        and then Is_Root (Assertion));

   procedure Assertion_Set_Pred
     (Id   : W_Assertion_Unchecked_Id;
      Pred : W_Predicate_Unchecked_Id) with
     Pre =>
       (Predicate_Id_Kind_Valid (Pred)
        and then Predicate_Id_Valid (Pred)
        and then Is_Root (Pred));

   procedure Assertion_Set_As
     (Id : W_Assertion_Unchecked_Id;
      As : W_Identifier_Unchecked_OId) with
     Pre =>
       (Identifier_OId_Kind_Valid (As)
        and then Identifier_OId_Valid (As)
        and then Is_Root (As));

   procedure Prog_Constant_Set_Def
     (Id  : W_Prog_Constant_Unchecked_Id;
      Def : W_Constant_Unchecked_Id) with
     Pre =>
       (Constant_Id_Kind_Valid (Def)
        and then Constant_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Prog_Identifier_Set_Def
     (Id  : W_Prog_Identifier_Unchecked_Id;
      Def : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Def)
        and then Identifier_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Deref_Set_Ref
     (Id  : W_Deref_Unchecked_Id;
      Ref : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Ref)
        and then Identifier_Id_Valid (Ref)
        and then Is_Root (Ref));

   procedure Assignment_Set_Name
     (Id   : W_Assignment_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Assignment_Set_Value
     (Id    : W_Assignment_Unchecked_Id;
      Value : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Value)
        and then Prog_Id_Valid (Value)
        and then Is_Root (Value));

   procedure Array_Access_Set_Name
     (Id   : W_Array_Access_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Array_Access_Set_Index
     (Id    : W_Array_Access_Unchecked_Id;
      Index : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Index)
        and then Prog_Id_Valid (Index)
        and then Is_Root (Index));

   procedure Array_Update_Set_Name
     (Id   : W_Array_Update_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Array_Update_Set_Index
     (Id    : W_Array_Update_Unchecked_Id;
      Index : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Index)
        and then Prog_Id_Valid (Index)
        and then Is_Root (Index));

   procedure Array_Update_Set_Value
     (Id    : W_Array_Update_Unchecked_Id;
      Value : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Value)
        and then Prog_Id_Valid (Value)
        and then Is_Root (Value));

   procedure Infix_Call_Set_Left
     (Id   : W_Infix_Call_Unchecked_Id;
      Left : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Left)
        and then Prog_Id_Valid (Left)
        and then Is_Root (Left));

   procedure Infix_Call_Set_Infix
     (Id    : W_Infix_Call_Unchecked_Id;
      Infix : W_Infix_Unchecked_Id) with
     Pre =>
       (Infix_Id_Kind_Valid (Infix)
        and then Infix_Id_Valid (Infix)
        and then Is_Root (Infix));

   procedure Infix_Call_Set_Right
     (Id    : W_Infix_Call_Unchecked_Id;
      Right : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Right)
        and then Prog_Id_Valid (Right)
        and then Is_Root (Right));

   procedure Prefix_Call_Set_Prefix
     (Id     : W_Prefix_Call_Unchecked_Id;
      Prefix : W_Prefix_Unchecked_Id) with
     Pre =>
       (Prefix_Id_Kind_Valid (Prefix)
        and then Prefix_Id_Valid (Prefix)
        and then Is_Root (Prefix));

   procedure Prefix_Call_Set_Operand
     (Id      : W_Prefix_Call_Unchecked_Id;
      Operand : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Operand)
        and then Prog_Id_Valid (Operand)
        and then Is_Root (Operand));

   procedure Binding_Prog_Set_Name
     (Id   : W_Binding_Prog_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Binding_Prog_Set_Def
     (Id  : W_Binding_Prog_Unchecked_Id;
      Def : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Def)
        and then Prog_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Binding_Prog_Set_Context
     (Id      : W_Binding_Prog_Unchecked_Id;
      Context : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Context)
        and then Prog_Id_Valid (Context)
        and then Is_Root (Context));

   procedure Binding_Ref_Set_Name
     (Id   : W_Binding_Ref_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Binding_Ref_Set_Def
     (Id  : W_Binding_Ref_Unchecked_Id;
      Def : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Def)
        and then Prog_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Binding_Ref_Set_Context
     (Id      : W_Binding_Ref_Unchecked_Id;
      Context : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Context)
        and then Prog_Id_Valid (Context)
        and then Is_Root (Context));

   procedure Conditional_Prog_Set_Condition
     (Id        : W_Conditional_Prog_Unchecked_Id;
      Condition : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Condition)
        and then Prog_Id_Valid (Condition)
        and then Is_Root (Condition));

   procedure Conditional_Prog_Set_Then_Part
     (Id        : W_Conditional_Prog_Unchecked_Id;
      Then_Part : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Then_Part)
        and then Prog_Id_Valid (Then_Part)
        and then Is_Root (Then_Part));

   procedure Conditional_Prog_Set_Else_Part
     (Id        : W_Conditional_Prog_Unchecked_Id;
      Else_Part : W_Prog_Unchecked_OId) with
     Pre =>
       (Prog_OId_Kind_Valid (Else_Part)
        and then Prog_OId_Valid (Else_Part)
        and then Is_Root (Else_Part));

   procedure While_Loop_Set_Condition
     (Id        : W_While_Loop_Unchecked_Id;
      Condition : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Condition)
        and then Prog_Id_Valid (Condition)
        and then Is_Root (Condition));

   procedure While_Loop_Set_Annotation
     (Id         : W_While_Loop_Unchecked_Id;
      Annotation : W_Loop_Annot_Unchecked_Id) with
     Pre =>
       (Loop_Annot_Id_Kind_Valid (Annotation)
        and then Loop_Annot_Id_Valid (Annotation)
        and then Is_Root (Annotation));

   procedure While_Loop_Set_Loop_Content
     (Id           : W_While_Loop_Unchecked_Id;
      Loop_Content : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Loop_Content)
        and then Prog_Id_Valid (Loop_Content)
        and then Is_Root (Loop_Content));

   procedure Statement_Sequence_Append_To_Statements
     (Id       : W_Statement_Sequence_Unchecked_Id;
      New_Item : W_Prog_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (New_Item)
        and then Prog_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Statement_Sequence_Prepend_To_Statements
     (Id       : W_Statement_Sequence_Unchecked_Id;
      New_Item : W_Prog_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (New_Item)
        and then Prog_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Label_Set_Name
     (Id   : W_Label_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Label_Set_Def
     (Id  : W_Label_Unchecked_Id;
      Def : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Def)
        and then Prog_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Assert_Append_To_Assertions
     (Id       : W_Assert_Unchecked_Id;
      New_Item : W_Assertion_Id) with
     Pre =>
       (Assertion_Id_Kind_Valid (New_Item)
        and then Assertion_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Assert_Prepend_To_Assertions
     (Id       : W_Assert_Unchecked_Id;
      New_Item : W_Assertion_Id) with
     Pre =>
       (Assertion_Id_Kind_Valid (New_Item)
        and then Assertion_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Assert_Set_Prog
     (Id   : W_Assert_Unchecked_Id;
      Prog : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Prog)
        and then Prog_Id_Valid (Prog)
        and then Is_Root (Prog));

   procedure Post_Assertion_Set_Prog
     (Id   : W_Post_Assertion_Unchecked_Id;
      Prog : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Prog)
        and then Prog_Id_Valid (Prog)
        and then Is_Root (Prog));

   procedure Post_Assertion_Set_Post
     (Id   : W_Post_Assertion_Unchecked_Id;
      Post : W_Postcondition_Unchecked_Id) with
     Pre =>
       (Postcondition_Id_Kind_Valid (Post)
        and then Postcondition_Id_Valid (Post)
        and then Is_Root (Post));

   procedure Opaque_Assertion_Set_Prog
     (Id   : W_Opaque_Assertion_Unchecked_Id;
      Prog : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Prog)
        and then Prog_Id_Valid (Prog)
        and then Is_Root (Prog));

   procedure Opaque_Assertion_Set_Post
     (Id   : W_Opaque_Assertion_Unchecked_Id;
      Post : W_Postcondition_Unchecked_Id) with
     Pre =>
       (Postcondition_Id_Kind_Valid (Post)
        and then Postcondition_Id_Valid (Post)
        and then Is_Root (Post));

   procedure Fun_Def_Set_Binders
     (Id      : W_Fun_Def_Unchecked_Id;
      Binders : W_Binders_Unchecked_Id) with
     Pre =>
       (Binders_Id_Kind_Valid (Binders)
        and then Binders_Id_Valid (Binders)
        and then Is_Root (Binders));

   procedure Fun_Def_Set_Def
     (Id  : W_Fun_Def_Unchecked_Id;
      Def : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Def)
        and then Prog_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Binding_Fun_Set_Name
     (Id   : W_Binding_Fun_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Binding_Fun_Set_Binders
     (Id      : W_Binding_Fun_Unchecked_Id;
      Binders : W_Binders_Unchecked_Id) with
     Pre =>
       (Binders_Id_Kind_Valid (Binders)
        and then Binders_Id_Valid (Binders)
        and then Is_Root (Binders));

   procedure Binding_Fun_Set_Def
     (Id  : W_Binding_Fun_Unchecked_Id;
      Def : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Def)
        and then Prog_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Binding_Fun_Set_Context
     (Id      : W_Binding_Fun_Unchecked_Id;
      Context : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Context)
        and then Prog_Id_Valid (Context)
        and then Is_Root (Context));

   procedure Binding_Rec_Set_Recfun
     (Id     : W_Binding_Rec_Unchecked_Id;
      Recfun : W_Recfun_Unchecked_Id) with
     Pre =>
       (Recfun_Id_Kind_Valid (Recfun)
        and then Recfun_Id_Valid (Recfun)
        and then Is_Root (Recfun));

   procedure Binding_Rec_Set_Context
     (Id      : W_Binding_Rec_Unchecked_Id;
      Context : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Context)
        and then Prog_Id_Valid (Context)
        and then Is_Root (Context));

   procedure Prog_Sequence_Append_To_Progs
     (Id       : W_Prog_Sequence_Unchecked_Id;
      New_Item : W_Prog_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (New_Item)
        and then Prog_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Prog_Sequence_Prepend_To_Progs
     (Id       : W_Prog_Sequence_Unchecked_Id;
      New_Item : W_Prog_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (New_Item)
        and then Prog_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Raise_Statement_Set_Name
     (Id   : W_Raise_Statement_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Raise_Statement_Set_Exn_Type
     (Id       : W_Raise_Statement_Unchecked_Id;
      Exn_Type : W_Value_Type_Unchecked_OId) with
     Pre =>
       (Value_Type_OId_Kind_Valid (Exn_Type)
        and then Value_Type_OId_Valid (Exn_Type)
        and then Is_Root (Exn_Type));

   procedure Raise_Statement_With_Parameters_Set_Name
     (Id   : W_Raise_Statement_With_Parameters_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Raise_Statement_With_Parameters_Set_Parameter
     (Id        : W_Raise_Statement_With_Parameters_Unchecked_Id;
      Parameter : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Parameter)
        and then Term_Id_Valid (Parameter)
        and then Is_Root (Parameter));

   procedure Raise_Statement_With_Parameters_Set_Exn_Type
     (Id       : W_Raise_Statement_With_Parameters_Unchecked_Id;
      Exn_Type : W_Value_Type_Unchecked_OId) with
     Pre =>
       (Value_Type_OId_Kind_Valid (Exn_Type)
        and then Value_Type_OId_Valid (Exn_Type)
        and then Is_Root (Exn_Type));

   procedure Try_Block_Set_Prog
     (Id   : W_Try_Block_Unchecked_Id;
      Prog : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Prog)
        and then Prog_Id_Valid (Prog)
        and then Is_Root (Prog));

   procedure Try_Block_Append_To_Handler
     (Id       : W_Try_Block_Unchecked_Id;
      New_Item : W_Handler_Id) with
     Pre =>
       (Handler_Id_Kind_Valid (New_Item)
        and then Handler_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Try_Block_Prepend_To_Handler
     (Id       : W_Try_Block_Unchecked_Id;
      New_Item : W_Handler_Id) with
     Pre =>
       (Handler_Id_Kind_Valid (New_Item)
        and then Handler_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Unreachable_Code_Set_Exn_Type
     (Id       : W_Unreachable_Code_Unchecked_Id;
      Exn_Type : W_Value_Type_Unchecked_OId) with
     Pre =>
       (Value_Type_OId_Kind_Valid (Exn_Type)
        and then Value_Type_OId_Valid (Exn_Type)
        and then Is_Root (Exn_Type));

   procedure Begin_Block_Set_Prog
     (Id   : W_Begin_Block_Unchecked_Id;
      Prog : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Prog)
        and then Prog_Id_Valid (Prog)
        and then Is_Root (Prog));

   procedure Protected_Prog_Set_Prog
     (Id   : W_Protected_Prog_Unchecked_Id;
      Prog : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Prog)
        and then Prog_Id_Valid (Prog)
        and then Is_Root (Prog));

   procedure Binders_Append_To_Binders
     (Id       : W_Binders_Unchecked_Id;
      New_Item : W_Binder_Id) with
     Pre =>
       (Binder_Id_Kind_Valid (New_Item)
        and then Binder_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Binders_Prepend_To_Binders
     (Id       : W_Binders_Unchecked_Id;
      New_Item : W_Binder_Id) with
     Pre =>
       (Binder_Id_Kind_Valid (New_Item)
        and then Binder_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Binder_Append_To_Names
     (Id       : W_Binder_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Binder_Prepend_To_Names
     (Id       : W_Binder_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Binder_Set_Arg_Type
     (Id       : W_Binder_Unchecked_Id;
      Arg_Type : W_Value_Type_Unchecked_Id) with
     Pre =>
       (Value_Type_Id_Kind_Valid (Arg_Type)
        and then Value_Type_Id_Valid (Arg_Type)
        and then Is_Root (Arg_Type));

   procedure Recfun_Set_Name
     (Id   : W_Recfun_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Recfun_Set_Binders
     (Id      : W_Recfun_Unchecked_Id;
      Binders : W_Binders_Unchecked_Id) with
     Pre =>
       (Binders_Id_Kind_Valid (Binders)
        and then Binders_Id_Valid (Binders)
        and then Is_Root (Binders));

   procedure Recfun_Set_Return_Type
     (Id          : W_Recfun_Unchecked_Id;
      Return_Type : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Return_Type)
        and then Prog_Id_Valid (Return_Type)
        and then Is_Root (Return_Type));

   procedure Recfun_Set_Variant
     (Id      : W_Recfun_Unchecked_Id;
      Variant : W_Wf_Arg_Unchecked_Id) with
     Pre =>
       (Wf_Arg_Id_Kind_Valid (Variant)
        and then Wf_Arg_Id_Valid (Variant)
        and then Is_Root (Variant));

   procedure Recfun_Set_Def
     (Id  : W_Recfun_Unchecked_Id;
      Def : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Def)
        and then Prog_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Loop_Annot_Set_Invariant
     (Id        : W_Loop_Annot_Unchecked_Id;
      Invariant : W_Assertion_Unchecked_OId) with
     Pre =>
       (Assertion_OId_Kind_Valid (Invariant)
        and then Assertion_OId_Valid (Invariant)
        and then Is_Root (Invariant));

   procedure Loop_Annot_Set_Variant
     (Id      : W_Loop_Annot_Unchecked_Id;
      Variant : W_Wf_Arg_Unchecked_OId) with
     Pre =>
       (Wf_Arg_OId_Kind_Valid (Variant)
        and then Wf_Arg_OId_Valid (Variant)
        and then Is_Root (Variant));

   procedure Wf_Arg_Set_Def
     (Id  : W_Wf_Arg_Unchecked_Id;
      Def : W_Term_Unchecked_Id) with
     Pre =>
       (Term_Id_Kind_Valid (Def)
        and then Term_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Wf_Arg_Set_For_Id
     (Id     : W_Wf_Arg_Unchecked_Id;
      For_Id : W_Identifier_Unchecked_OId) with
     Pre =>
       (Identifier_OId_Kind_Valid (For_Id)
        and then Identifier_OId_Valid (For_Id)
        and then Is_Root (For_Id));

   procedure Handler_Set_Name
     (Id   : W_Handler_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Handler_Set_Parameter
     (Id        : W_Handler_Unchecked_Id;
      Parameter : W_Prog_Unchecked_OId) with
     Pre =>
       (Prog_OId_Kind_Valid (Parameter)
        and then Prog_OId_Valid (Parameter)
        and then Is_Root (Parameter));

   procedure Handler_Set_Def
     (Id  : W_Handler_Unchecked_Id;
      Def : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Def)
        and then Prog_Id_Valid (Def)
        and then Is_Root (Def));

   procedure File_Append_To_Declarations
     (Id       : W_File_Unchecked_Id;
      New_Item : W_Declaration_Id) with
     Pre =>
       (Declaration_Id_Kind_Valid (New_Item)
        and then Declaration_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure File_Prepend_To_Declarations
     (Id       : W_File_Unchecked_Id;
      New_Item : W_Declaration_Id) with
     Pre =>
       (Declaration_Id_Kind_Valid (New_Item)
        and then Declaration_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Global_Binding_Set_Name
     (Id   : W_Global_Binding_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Global_Binding_Set_Binders
     (Id      : W_Global_Binding_Unchecked_Id;
      Binders : W_Binders_Unchecked_OId) with
     Pre =>
       (Binders_OId_Kind_Valid (Binders)
        and then Binders_OId_Valid (Binders)
        and then Is_Root (Binders));

   procedure Global_Binding_Set_Def
     (Id  : W_Global_Binding_Unchecked_Id;
      Def : W_Prog_Unchecked_Id) with
     Pre =>
       (Prog_Id_Kind_Valid (Def)
        and then Prog_Id_Valid (Def)
        and then Is_Root (Def));

   procedure Global_Rec_Binding_Set_Name
     (Id   : W_Global_Rec_Binding_Unchecked_Id;
      Name : W_Recfun_Unchecked_Id) with
     Pre =>
       (Recfun_Id_Kind_Valid (Name)
        and then Recfun_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Parameter_Declaration_Set_External
     (Id       : W_Parameter_Declaration_Unchecked_Id;
      External : W_External_Unchecked_Id) with
     Pre =>
       (External_Id_Kind_Valid (External)
        and then External_Id_Valid (External)
        and then Is_Root (External));

   procedure Parameter_Declaration_Append_To_Names
     (Id       : W_Parameter_Declaration_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Parameter_Declaration_Prepend_To_Names
     (Id       : W_Parameter_Declaration_Unchecked_Id;
      New_Item : W_Identifier_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (New_Item)
        and then Identifier_Id_Valid (New_Item)
        and then Is_Root (New_Item));

   procedure Parameter_Declaration_Set_Parameter_Type
     (Id             : W_Parameter_Declaration_Unchecked_Id;
      Parameter_Type : W_Value_Type_Unchecked_Id) with
     Pre =>
       (Value_Type_Id_Kind_Valid (Parameter_Type)
        and then Value_Type_Id_Valid (Parameter_Type)
        and then Is_Root (Parameter_Type));

   procedure Exception_Declaration_Set_Name
     (Id   : W_Exception_Declaration_Unchecked_Id;
      Name : W_Identifier_Unchecked_Id) with
     Pre =>
       (Identifier_Id_Kind_Valid (Name)
        and then Identifier_Id_Valid (Name)
        and then Is_Root (Name));

   procedure Exception_Declaration_Set_Parameter
     (Id        : W_Exception_Declaration_Unchecked_Id;
      Parameter : W_Primitive_Type_Unchecked_OId) with
     Pre =>
       (Primitive_Type_OId_Kind_Valid (Parameter)
        and then Primitive_Type_OId_Valid (Parameter)
        and then Is_Root (Parameter));

   procedure Logic_Declaration_Set_Decl
     (Id   : W_Logic_Declaration_Unchecked_Id;
      Decl : W_Logic_Declaration_Class_Unchecked_Id) with
     Pre =>
       (Logic_Declaration_Class_Id_Kind_Valid (Decl)
        and then Logic_Declaration_Class_Id_Valid (Decl)
        and then Is_Root (Decl));

end Why.Atree.Mutators;
