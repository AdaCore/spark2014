------------------------------------------------------------------------------
--                                                                          --
--                            GNAT2WHY COMPONENTS                           --
--                                                                          --
--                            W H Y - A T R E E                             --
--                                                                          --
--                                 S p e c                                  --
--                                                                          --
--                       Copyright (C) 2010-2011, AdaCore                   --
--                                                                          --
-- gnat2why is  free  software;  you can redistribute  it and/or  modify it --
-- under terms of the  GNU General Public License as published  by the Free --
-- Software  Foundation;  either version 3,  or (at your option)  any later --
-- version.  gnat2why is distributed  in the hope that  it will be  useful, --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License for  more details.  You should have  received  a copy of the GNU --
-- General  Public License  distributed with  gnat2why;  see file COPYING3. --
-- If not,  go to  http://www.gnu.org/licenses  for a complete  copy of the --
-- license.                                                                 --
--                                                                          --
-- gnat2why is maintained by AdaCore (http://www.adacore.com)               --
--                                                                          --
------------------------------------------------------------------------------
--  This package is automatically generated by xtree. Do not edit manually.
--  See xtree_sinfo.ads for more information.

with Types;  use Types;
with Namet;  use Namet;
with Uintp;  use Uintp;
with Urealp; use Urealp;

with Why.Sinfo;      use Why.Sinfo;
with Why.Types;      use Why.Types;
with Why.Opaque_Ids; use Why.Opaque_Ids;

package Why.Atree is
   --  This package defines the format of the abstract syntax tree to
   --  represent a Why program.

   type Why_Node (Kind : Why_Node_Kind := W_Unused_At_Start) is record
      --  Basic type for nodes in the abstract syntax tree.

      -------------------
      -- Common Fields --
      -------------------

      --  Fields that are shared amongst all node kinds

      Ada_Node : Node_Id;

      --------------------
      -- Special Fields --
      --------------------

      --  Fields that have some specific in xtree; any field added
      --  here should also be added in xtree_tables. They are meant
      --  to be used for flags that records some properties on the
      --  syntax tree, and that are updated implicitely by
      --  operations on node ids (mutators, accessors, builders,
      --  traversals).

      Link : Why_Node_Set;

      Checked : Boolean;

      ------------------
      -- Variant Part --
      ------------------

      case Kind is
         when W_Unused_At_Start =>
            null;

         when W_Identifier =>
            K1_Symbol : Name_Id;
            K1_Entity : Why_Node_Id;

         when W_Type_Prop =>
            null;

         when W_Type_Int =>
            null;

         when W_Type_Bool =>
            null;

         when W_Type_Real =>
            null;

         when W_Type_Unit =>
            null;

         when W_Abstract_Type =>
            K7_Name : W_Identifier_Opaque_Id;

         when W_Generic_Formal_Type =>
            K8_Name : W_Identifier_Opaque_Id;

         when W_Generic_Actual_Type_Chain =>
            K9_Type_Chain : W_Primitive_Type_Opaque_List;
            K9_Name       : W_Identifier_Opaque_Id;

         when W_Array_Type =>
            K10_Component_Type : W_Primitive_Type_Opaque_Id;

         when W_Ref_Type =>
            K11_Aliased_Type : W_Primitive_Type_Opaque_Id;

         when W_Computation_Type =>
            K12_Binders       : W_Binder_Opaque_OList;
            K12_Precondition  : W_Predicate_Opaque_OId;
            K12_Result_Name   : W_Identifier_Opaque_OId;
            K12_Return_Type   : W_Primitive_Type_Opaque_Id;
            K12_Effects       : W_Effects_Opaque_Id;
            K12_Postcondition : W_Postcondition_Opaque_OId;

         when W_Integer_Constant =>
            K13_Value : Uint;

         when W_Real_Constant =>
            K14_Value : Ureal;

         when W_True_Literal =>
            null;

         when W_False_Literal =>
            null;

         when W_Void_Literal =>
            null;

         when W_Arith_Operation =>
            K18_Left  : W_Term_Opaque_Id;
            K18_Op    : W_Arith_Op_Opaque_Id;
            K18_Right : W_Term_Opaque_Id;

         when W_Negative_Term =>
            K19_Operand : W_Term_Opaque_Id;

         when W_Term_Identifier =>
            K20_Name  : W_Identifier_Opaque_Id;
            K20_Label : W_Identifier_Opaque_OId;

         when W_Operation =>
            K21_Name       : W_Identifier_Opaque_Id;
            K21_Parameters : W_Term_Opaque_List;

         when W_Named_Term =>
            K22_Name : W_Identifier_Opaque_Id;
            K22_Term : W_Term_Opaque_Id;

         when W_Conditional_Term =>
            K23_Condition : W_Term_Opaque_Id;
            K23_Then_Part : W_Term_Opaque_Id;
            K23_Else_Part : W_Term_Opaque_Id;

         when W_Matching_Term =>
            K24_Term     : W_Term_Opaque_Id;
            K24_Branches : W_Match_Case_Opaque_List;

         when W_Binding_Term =>
            K25_Name    : W_Identifier_Opaque_Id;
            K25_Def     : W_Term_Opaque_Id;
            K25_Context : W_Term_Opaque_Id;

         when W_Protected_Term =>
            K26_Term : W_Term_Opaque_Id;

         when W_Op_Add =>
            null;

         when W_Op_Substract =>
            null;

         when W_Op_Multiply =>
            null;

         when W_Op_Divide =>
            null;

         when W_Op_Modulo =>
            null;

         when W_True_Literal_Pred =>
            null;

         when W_False_Literal_Pred =>
            null;

         when W_Predicate_Identifier =>
            K34_Name : W_Identifier_Opaque_Id;

         when W_Predicate_Instance =>
            K35_Name       : W_Identifier_Opaque_Id;
            K35_Parameters : W_Term_Opaque_List;

         when W_Related_Terms =>
            K36_Left   : W_Term_Opaque_Id;
            K36_Op     : W_Relation_Opaque_Id;
            K36_Right  : W_Term_Opaque_Id;
            K36_Op2    : W_Relation_Opaque_OId;
            K36_Right2 : W_Term_Opaque_OId;

         when W_Implication =>
            K37_Left  : W_Predicate_Opaque_Id;
            K37_Right : W_Predicate_Opaque_Id;

         when W_Equivalence =>
            K38_Left  : W_Predicate_Opaque_Id;
            K38_Right : W_Predicate_Opaque_Id;

         when W_Disjunction =>
            K39_Left  : W_Predicate_Opaque_Id;
            K39_Right : W_Predicate_Opaque_Id;

         when W_Conjunction =>
            K40_Left  : W_Predicate_Opaque_Id;
            K40_Right : W_Predicate_Opaque_Id;

         when W_Negation =>
            K41_Operand : W_Predicate_Opaque_Id;

         when W_Conditional_Pred =>
            K42_Condition : W_Term_Opaque_Id;
            K42_Then_Part : W_Predicate_Opaque_Id;
            K42_Else_Part : W_Predicate_Opaque_Id;

         when W_Binding_Pred =>
            K43_Name    : W_Identifier_Opaque_Id;
            K43_Def     : W_Term_Opaque_Id;
            K43_Context : W_Predicate_Opaque_Id;

         when W_Universal_Quantif =>
            K44_Variables : W_Identifier_Opaque_List;
            K44_Var_Type  : W_Primitive_Type_Opaque_Id;
            K44_Triggers  : W_Triggers_Opaque_OId;
            K44_Pred      : W_Predicate_Opaque_Id;

         when W_Existential_Quantif =>
            K45_Variables : W_Identifier_Opaque_List;
            K45_Var_Type  : W_Primitive_Type_Opaque_Id;
            K45_Pred      : W_Predicate_Opaque_Id;

         when W_Named_Predicate =>
            K46_Name : W_Identifier_Opaque_Id;
            K46_Pred : W_Predicate_Opaque_Id;

         when W_Protected_Predicate =>
            K47_Pred : W_Predicate_Opaque_Id;

         when W_Pattern =>
            K48_Constr : W_Identifier_Opaque_Id;
            K48_Args   : W_Identifier_Opaque_OList;

         when W_Match_Case =>
            K49_Pattern : W_Pattern_Opaque_Id;
            K49_Term    : W_Term_Opaque_Id;

         when W_Triggers =>
            K50_Triggers : W_Trigger_Opaque_List;

         when W_Trigger =>
            K51_Terms : W_Term_Opaque_List;

         when W_Rel_Eq =>
            null;

         when W_Rel_Ne =>
            null;

         when W_Rel_Lt =>
            null;

         when W_Rel_Le =>
            null;

         when W_Rel_Gt =>
            null;

         when W_Rel_Ge =>
            null;

         when W_Type =>
            K58_External        : W_External_Opaque_OId;
            K58_Type_Parameters : W_Identifier_Opaque_OList;
            K58_Name            : W_Identifier_Opaque_Id;
            K58_Definition      : W_Type_Definition_Opaque_OId;

         when W_Logic =>
            K59_External   : W_External_Opaque_OId;
            K59_Names      : W_Identifier_Opaque_List;
            K59_Logic_Type : W_Logic_Type_Opaque_Id;

         when W_Function =>
            K60_Name        : W_Identifier_Opaque_Id;
            K60_Binders     : W_Logic_Binder_Opaque_List;
            K60_Return_Type : W_Primitive_Type_Opaque_Id;
            K60_Def         : W_Term_Opaque_Id;

         when W_Predicate_Definition =>
            K61_Name    : W_Identifier_Opaque_Id;
            K61_Binders : W_Logic_Binder_Opaque_List;
            K61_Def     : W_Predicate_Opaque_Id;

         when W_Inductive =>
            K62_Name       : W_Identifier_Opaque_Id;
            K62_Logic_Type : W_Logic_Type_Opaque_Id;
            K62_Def        : W_Inductive_Case_Opaque_List;

         when W_Axiom =>
            K63_Name : W_Identifier_Opaque_Id;
            K63_Def  : W_Predicate_Opaque_Id;

         when W_Goal =>
            K64_Name : W_Identifier_Opaque_Id;
            K64_Def  : W_Predicate_Opaque_Id;

         when W_External =>
            null;

         when W_Logic_Type =>
            K66_Arg_Types   : W_Logic_Arg_Type_Opaque_OList;
            K66_Return_Type : W_Logic_Return_Type_Opaque_Id;

         when W_Logic_Binder =>
            K67_Name       : W_Identifier_Opaque_Id;
            K67_Param_Type : W_Primitive_Type_Opaque_Id;

         when W_Inductive_Case =>
            K68_Name : W_Identifier_Opaque_Id;
            K68_Pred : W_Predicate_Opaque_Id;

         when W_Transparent_Type_Definition =>
            K69_Type_Definition : W_Primitive_Type_Opaque_Id;

         when W_Adt_Definition =>
            K70_Constructors : W_Constr_Decl_Opaque_List;

         when W_Constr_Decl =>
            K71_Name     : W_Identifier_Opaque_Id;
            K71_Arg_List : W_Primitive_Type_Opaque_OList;

         when W_Effects =>
            K72_Reads  : W_Identifier_Opaque_OList;
            K72_Writes : W_Identifier_Opaque_OList;
            K72_Raises : W_Identifier_Opaque_OList;

         when W_Postcondition =>
            K73_Pred     : W_Predicate_Opaque_Id;
            K73_Handlers : W_Exn_Condition_Opaque_OList;

         when W_Exn_Condition =>
            K74_Exn_Case : W_Identifier_Opaque_Id;
            K74_Pred     : W_Predicate_Opaque_Id;

         when W_Prog_Constant =>
            K75_Def : W_Constant_Opaque_Id;

         when W_Prog_Identifier =>
            K76_Def : W_Identifier_Opaque_Id;

         when W_Any_Expr =>
            K77_Any_Type : W_Computation_Type_Opaque_Id;

         when W_Deref =>
            K78_Ref : W_Identifier_Opaque_Id;

         when W_Assignment =>
            K79_Name  : W_Identifier_Opaque_Id;
            K79_Value : W_Prog_Opaque_Id;

         when W_Array_Access =>
            K80_Name  : W_Identifier_Opaque_Id;
            K80_Index : W_Prog_Opaque_Id;

         when W_Array_Update =>
            K81_Name  : W_Identifier_Opaque_Id;
            K81_Index : W_Prog_Opaque_Id;
            K81_Value : W_Prog_Opaque_Id;

         when W_Infix_Call =>
            K82_Left  : W_Prog_Opaque_Id;
            K82_Infix : W_Infix_Opaque_Id;
            K82_Right : W_Prog_Opaque_Id;

         when W_Prefix_Call =>
            K83_Prefix  : W_Prefix_Opaque_Id;
            K83_Operand : W_Prog_Opaque_Id;

         when W_Binding_Prog =>
            K84_Name    : W_Identifier_Opaque_Id;
            K84_Def     : W_Prog_Opaque_Id;
            K84_Context : W_Prog_Opaque_Id;

         when W_Binding_Ref =>
            K85_Name    : W_Identifier_Opaque_Id;
            K85_Def     : W_Prog_Opaque_Id;
            K85_Context : W_Prog_Opaque_Id;

         when W_Conditional_Prog =>
            K86_Condition : W_Prog_Opaque_Id;
            K86_Then_Part : W_Prog_Opaque_Id;
            K86_Else_Part : W_Prog_Opaque_OId;

         when W_While_Loop =>
            K87_Condition    : W_Prog_Opaque_Id;
            K87_Annotation   : W_Loop_Annot_Opaque_Id;
            K87_Loop_Content : W_Prog_Opaque_Id;

         when W_Statement_Sequence =>
            K88_Statements : W_Prog_Opaque_List;

         when W_Label =>
            K89_Name : W_Identifier_Opaque_Id;
            K89_Def  : W_Prog_Opaque_Id;

         when W_Assert =>
            K90_Preds : W_Predicate_Opaque_List;
            K90_Prog  : W_Prog_Opaque_Id;

         when W_Post_Assertion =>
            K91_Prog : W_Prog_Opaque_Id;
            K91_Post : W_Postcondition_Opaque_Id;

         when W_Opaque_Assertion =>
            K92_Prog : W_Prog_Opaque_Id;
            K92_Post : W_Postcondition_Opaque_Id;

         when W_Fun_Def =>
            K93_Binders : W_Binder_Opaque_List;
            K93_Pre     : W_Predicate_Opaque_Id;
            K93_Def     : W_Prog_Opaque_Id;

         when W_Binding_Fun =>
            K94_Name    : W_Identifier_Opaque_Id;
            K94_Binders : W_Binder_Opaque_List;
            K94_Pre     : W_Predicate_Opaque_Id;
            K94_Def     : W_Prog_Opaque_Id;
            K94_Context : W_Prog_Opaque_Id;

         when W_Binding_Rec =>
            K95_Recfun  : W_Recfun_Opaque_Id;
            K95_Context : W_Prog_Opaque_Id;

         when W_Prog_Call =>
            K96_Name  : W_Identifier_Opaque_Id;
            K96_Progs : W_Prog_Opaque_List;

         when W_Raise_Statement =>
            K97_Name     : W_Identifier_Opaque_Id;
            K97_Exn_Type : W_Simple_Value_Type_Opaque_OId;

         when W_Raise_Statement_With_Parameters =>
            K98_Name      : W_Identifier_Opaque_Id;
            K98_Parameter : W_Term_Opaque_Id;
            K98_Exn_Type  : W_Simple_Value_Type_Opaque_OId;

         when W_Try_Block =>
            K99_Prog    : W_Prog_Opaque_Id;
            K99_Handler : W_Handler_Opaque_List;

         when W_Unreachable_Code =>
            K100_Exn_Type : W_Simple_Value_Type_Opaque_OId;

         when W_Begin_Block =>
            K101_Prog : W_Prog_Opaque_Id;

         when W_Protected_Prog =>
            K102_Prog : W_Prog_Opaque_Id;

         when W_Op_Add_Prog =>
            null;

         when W_Op_Substract_Prog =>
            null;

         when W_Op_Multiply_Prog =>
            null;

         when W_Op_Divide_Prog =>
            null;

         when W_Op_Mod_Prog =>
            null;

         when W_Op_Eq_Prog =>
            null;

         when W_Op_Ne_Prog =>
            null;

         when W_Op_Lt_Prog =>
            null;

         when W_Op_Le_Prog =>
            null;

         when W_Op_Gt_Prog =>
            null;

         when W_Op_Ge_Prog =>
            null;

         when W_Op_Or_Else_Prog =>
            null;

         when W_Op_And_Then_Prog =>
            null;

         when W_Op_Minus_Prog =>
            null;

         when W_Op_Not_Prog =>
            null;

         when W_Binder =>
            K118_Names    : W_Identifier_Opaque_List;
            K118_Arg_Type : W_Simple_Value_Type_Opaque_Id;

         when W_Recfun =>
            K119_Name        : W_Identifier_Opaque_Id;
            K119_Binders     : W_Binder_Opaque_List;
            K119_Return_Type : W_Prog_Opaque_Id;
            K119_Variant     : W_Wf_Arg_Opaque_Id;
            K119_Pre         : W_Predicate_Opaque_Id;
            K119_Def         : W_Prog_Opaque_Id;

         when W_Loop_Annot =>
            K120_Invariant : W_Predicate_Opaque_OId;
            K120_Variant   : W_Wf_Arg_Opaque_OId;

         when W_Wf_Arg =>
            K121_Def    : W_Term_Opaque_Id;
            K121_For_Id : W_Identifier_Opaque_OId;

         when W_Handler =>
            K122_Name      : W_Identifier_Opaque_Id;
            K122_Parameter : W_Prog_Opaque_OId;
            K122_Def       : W_Prog_Opaque_Id;

         when W_File =>
            K123_Declarations : W_Declaration_Opaque_OList;

         when W_Global_Binding =>
            K124_Name    : W_Identifier_Opaque_Id;
            K124_Binders : W_Binder_Opaque_OList;
            K124_Pre     : W_Predicate_Opaque_Id;
            K124_Def     : W_Prog_Opaque_Id;

         when W_Global_Rec_Binding =>
            K125_Name : W_Recfun_Opaque_Id;

         when W_Parameter_Declaration =>
            K126_External       : W_External_Opaque_OId;
            K126_Names          : W_Identifier_Opaque_List;
            K126_Parameter_Type : W_Computation_Type_Opaque_Id;

         when W_Global_Ref_Declaration =>
            K127_Name           : W_Identifier_Opaque_Id;
            K127_Parameter_Type : W_Primitive_Type_Opaque_Id;

         when W_Exception_Declaration =>
            K128_Name      : W_Identifier_Opaque_Id;
            K128_Parameter : W_Primitive_Type_Opaque_OId;

         when W_Logic_Declaration =>
            K129_Decl : W_Logic_Declaration_Class_Opaque_Id;

         when W_Include_Declaration =>
            K130_Name : W_Identifier_Opaque_Id;

      end case;
   end record;

end Why.Atree;
