
type enum__day =
  | enum__mon
  | enum__tue
  | enum__wed
  | enum__thu
  | enum__fri
  | enum__sat
  | enum__sun

logic integer_of___enum__day : enum__day -> int

logic eq___enum__day : enum__day, enum__day -> bool

axiom eq___enum__day___def :
 forall left, right : enum__day.
  eq___enum__day (left, right) = true <->
   integer_of___enum__day (left) = integer_of___enum__day (right)

logic le___enum__day : enum__day, enum__day -> bool

axiom le___enum__day___def :
 forall left, right : enum__day.
  le___enum__day (left, right) = true <->
   integer_of___enum__day (left) <= integer_of___enum__day (right)

logic enum__day___in_range : int -> bool

axiom enum__day___in_range___def :
 let first = 0 in
 let last = 6 in
  forall x : int.
   enum__day___in_range (x) = true <-> first <= x <= last

logic enum__day___of_integer : int -> enum__day

axiom enum__day___coerce :
 (forall x : int.
   enum__day___in_range (x) = true ->
    integer_of___enum__day (enum__day___of_integer (x)) = x)

axiom enum__day___ordering :
 (forall x : enum__day.
   match x with
    | enum__mon -> integer_of___enum__day (x) = 0
    | enum__tue -> integer_of___enum__day (x) = 1
    | enum__wed -> integer_of___enum__day (x) = 2
    | enum__thu -> integer_of___enum__day (x) = 3
    | enum__fri -> integer_of___enum__day (x) = 4
    | enum__sat -> integer_of___enum__day (x) = 5
    | enum__sun -> integer_of___enum__day (x) = 6
   end)

parameter any___enum__day : unit -> { } enum__day { true }

parameter enum__day___of_integer_ :
 x : int ->
  { enum__day___in_range (x) = true }
   enum__day
  { integer_of___enum__day (result) = x }

parameter safe___enum__day___of_integer_ :
 x : int ->
  { }
   enum__day
  { integer_of___enum__day (result) = x }


type enum__some_a =
  | enum__QU41
  | enum__a

(* ... snip axioms, predicates, parameters: similar to enum__day... *)

type enum__name_clash =
  | enum__mon__2
  | enum__a__2

(* ... snip axioms, predicates, parameters, for the same reason... *)

type enum__weekday

logic enum__day___of___enum__weekday : enum__weekday -> enum__day

logic eq___enum__weekday : enum__weekday, enum__weekday -> bool

axiom eq___enum__weekday___def :
 forall left, right : enum__weekday.
  eq___enum__weekday (left, right) = true <->
   eq___enum__day (enum__day___of___enum__weekday (left),
                   enum__day___of___enum__weekday (right)) = true

logic le___enum__weekday : enum__weekday, enum__weekday -> bool

axiom le___enum__weekday___def :
 forall left, right : enum__weekday.
  le___enum__weekday (left, right) = true <->
   le___enum__day (enum__day___of___enum__weekday (left),
                   enum__day___of___enum__weekday (right)) = true

logic enum__weekday___in_range : enum__day -> bool

axiom enum__weekday___in_range___def :
 forall s : enum__day.
  enum__weekday___in_range (s) = true <->
   (le___enum__day (enum__mon, s) = true
    and le___enum__day (s, enum__fri) = true)

logic enum__weekday___of___enum__day : enum__day -> enum__weekday

axiom enum__weekday___coerce :
 forall x : enum__day.
  (enum__weekday___in_range (x) = true) ->
   eq___enum__day (enum__day___of___enum__weekday
                   (enum__weekday___of___enum__day (x)), x) = true

axiom enum__weekday___range :
 (forall x : enum__weekday.
  enum__weekday___in_range (enum__day___of___enum__weekday (x)) = true)

axiom enum__weekday___unicity :
 (forall x, y : enum__weekday.
  (eq___enum__weekday (x, y) = true <-> x = y))

(* ...snip parameters, similar to enum__day... *)
