include "bool.why"

type standard__boolean =
  | standard__true
  | standard__false

function bool_of___standard__boolean (x : standard__boolean) : bool =
 match x with
  | standard__true  -> true
  | standard__false -> false
 end

function standard__boolean___of_bool (x : bool) : standard__boolean =
 if x then standard__true else standard__false

function integer_of___standard__boolean (x : standard__boolean) : int =
 match x with
  | standard__true  -> 0
  | standard__false -> 1
 end

logic standard__boolean___of_integer : int -> standard__boolean

predicate le___standard__boolean
(left : standard__boolean,
 right : standard__boolean) =
 integer_of___standard__boolean (left)
  <= integer_of___standard__boolean (right)

predicate standard__boolean___in_range (x : int) =
 let first = 0 in
 let last = 1 in
  first <= x <= last

axiom standard__boolean___coerce :
 (forall x : int.
   standard__boolean___in_range (x) ->
    integer_of___standard__boolean (standard__boolean___of_integer (x)) = x)

parameter any___standard__boolean : unit -> { } standard__boolean { true }

parameter standard__boolean___of_integer_ :
 x : int ->
  { standard__boolean___in_range (x) }
   standard__boolean
  { integer_of___standard__boolean (result) = x }

parameter safe___standard__boolean___of_integer_ :
 x : int ->
  { }
   standard__boolean
  { integer_of___standard__boolean (result) = x }

parameter standard__boolean___of_bool_ :
 x : bool ->
  {  }
   standard__boolean
  { bool_of___standard__boolean (result) = x }

