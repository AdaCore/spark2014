include "arrays.why"
include "standard.why"

type unc__vector

logic array_of___unc__vector : unc__vector -> standard__integer farray

logic unc__vector___of_array : standard__integer farray -> unc__vector

predicate unc__vector___in_range (x : standard__integer farray) =
 let max_length = 4294967295 in
 array_length (x) <= max_length

logic unc__vector___first : unc__vector -> standard__integer

logic unc__vector___last : unc__vector -> standard__integer

predicate unc__vector___range_eq
(x : unc__vector,
 y : unc__vector) =
 (integer_of___standard__integer (unc__vector___first (x))
  = integer_of___standard__integer (unc__vector___first (y)))
 and (integer_of___standard__integer (unc__vector___last (x))
      = integer_of___standard__integer (unc__vector___last (y)))

predicate eq___unc__vector___strict (x : unc__vector, y : unc__vector) =
 array_of___unc__vector (x) = array_of___unc__vector (y)
 and unc__vector___range_eq (x, y)

axiom unc__vector___unicity :
 forall x, y : unc__vector.
  array_of___unc__vector (x) = array_of___unc__vector (y) -> x = y

predicate unc__vector___non_empty (x : unc__vector) =
 integer_of___standard__integer (unc__vector___first (x))
  <= integer_of___standard__integer (unc__vector___last (x))

axiom unc__vector___coerce :
 forall x : standard__integer farray.
  unc__vector___in_range (x) ->
   array_of___unc__vector (unc__vector___of_array (x)) = x

axiom unc__vector___range :
 forall x : unc__vector.
  unc__vector___in_range (array_of___unc__vector (x))

predicate unc__vector___index_check (a : unc__vector, i : standard__integer) =
 integer_of___standard__integer (unc__vector___first (a))
  <= integer_of___standard__integer (i) <=
 integer_of___standard__integer (unc__vector___last (a))

axiom unc__vector___bounds :
 forall x : unc__vector.
  (integer_of___standard__integer (unc__vector___last (x))
   - integer_of___standard__integer (unc__vector___first (x)) + 1
   = array_length (array_of___unc__vector (x)))

function unc__vector___get
 (x : unc__vector,
  y : standard__integer)
 : standard__integer =
 access (array_of___unc__vector (x), integer_of___standard__integer (y))

logic unc__vector___set :
 unc__vector, standard__integer, standard__integer -> unc__vector

axiom unc__vector___set_definition :
 forall x : unc__vector.
  forall y : standard__integer.
   forall z : standard__integer.
    let result = unc__vector___set (x, y, z) in
     array_of___unc__vector (result) =
      update (array_of___unc__vector (x),
              integer_of___standard__integer (y),
              z)
     and unc__vector___range_eq (x, result)

parameter unc__vector___get_ :
 a : unc__vector -> i : standard__integer ->
  { unc__vector___index_check (a, i) }
   standard__integer
  { eq___standard__integer (result,
                            unc__vector___get (a, i)) }

parameter unc__vector___set_ : 
 a : unc__vector ref -> i : standard__integer -> v : standard__integer -> 
  { unc__vector___index_check (a, i) }
   unit writes a
  { eq___unc__vector___strict (a, unc__vector___set (a@, i, v)) }

parameter safe___unc__vector___get_ :
 a : unc__vector -> i : standard__integer ->
  { }
   standard__integer
  { eq___standard__integer (result,
                            unc__vector___get (a, i)) }

parameter safe___unc__vector___set_ : 
 a : unc__vector ref -> i : standard__integer -> v : standard__integer -> 
  { }
   unit writes a
  { eq___unc__vector___strict (a, unc__vector___set (a@, i, v)) }

parameter unc__vector___first_ :
 a : unc__vector ->
  { }
   standard__integer
  { result = unc__vector___first (a) }

parameter unc__vector___last_ :
 a : unc__vector ->
  { }
   standard__integer
  { result = unc__vector___last (a) }

parameter eq___unc__vector_ :
 left : unc__vector -> right : unc__vector ->
{ }
 bool
{ result = true <-> eq___unc__vector___strict (left, right) }
