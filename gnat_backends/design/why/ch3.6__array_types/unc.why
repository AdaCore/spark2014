include "arrays.why"
include "standard.why"

type unc__vector

logic array_of___unc__vector : unc__vector -> standard__integer farray

logic unc__vector___of_array : standard__integer farray -> unc__vector

predicate unc__vector___in_range (x : standard__integer farray) =
 let max_length = 4294967295 in
 array_length (x) <= max_length

logic unc__vector___first : unc__vector -> standard__integer

logic unc__vector___last : unc__vector -> standard__integer

predicate unc__vector___non_empty (x : unc__vector) =
  integer_of___standard__integer (unc__vector___first (x))
   <= integer_of___standard__integer (unc__vector___last (x))

axiom unc__vector___coerce :
 forall x : standard__integer farray.
  unc__vector___in_range (x) ->
   array_of___unc__vector (unc__vector___of_array (x)) = x

axiom unc__vector___range :
 forall x : unc__vector.
  unc__vector___in_range (array_of___unc__vector (x))

predicate unc__vector___index_check (a : unc__vector, i : standard__integer) =
 integer_of___standard__integer (unc__vector___first (a))
  <= integer_of___standard__integer (i) <=
 integer_of___standard__integer (unc__vector___last (a))

axiom unc__vector___bounds :
 forall x : unc__vector.
  (integer_of___standard__integer (unc__vector___last (x))
   - integer_of___standard__integer (unc__vector___first (x)) + 1
   = array_length (array_of___unc__vector (x)))

parameter unc__vector___get_ :
 a : unc__vector -> i : standard__integer ->
  { unc__vector___index_check (a, i) }
   standard__integer
  { result = access (array_of___unc__vector (a),
                     integer_of___standard__integer (i)) }

parameter unc__vector___set_ : 
 a : unc__vector ref -> i : standard__integer -> v : standard__integer -> 
  { unc__vector___index_check (a, i) }
   unit writes a
  { array_of___unc__vector (a) = update (array_of___unc__vector (a@),
                                        integer_of___standard__integer (i),
                                        v) }

parameter unc__vector___first_ :
 a : unc__vector ->
  { }
   standard__integer
  { result = unc__vector___first (a) }

parameter unc__vector___last_ :
 a : unc__vector ->
  { }
   standard__integer
  { result = unc__vector___last (a) }
