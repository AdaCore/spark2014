

include "arrays.why"
include "two.why"

let check_index
(table : two__table)
(value : standard__integer)
(i1    : two__index)
(i2    : two__index) =
 { }
  (integer_of___standard__integer (two__table___get_ table i1 i2)
   = integer_of___standard__integer (value))
 { result = true <-> value = two__table___get (table, i1, i2) }

exception Return

let linear_search
(table : two__table)
(value : standard__integer)
(found : bool ref)
(i1    : standard__integer ref)
(i2    : standard__integer ref) =
 { }
 try
  begin
   found := false;
   i1 := standard__integer___of_integer_
             (integer_of___two__index
              (two__table___first1_ (table)) - 1);
   i2 := standard__integer___of_integer_
             (integer_of___two__index
              (two__table___first2_ (table)) - 1);
   let j1 = ref integer_of___two__index (two__table___first1_ (table)) in
    while !j1 <= integer_of___two__index (two__table___last1_ (table)) do
     { invariant ((integer_of___two__index (two__table___first1 (table))
                   <= j1 <=
                   (integer_of___two__index (two__table___last1 (table)) + 1))
                  and (found = false))
       variant integer_of___two__index (two__table___last1 (table)) + 1 - j1 }
    begin
     let j2 = ref integer_of___two__index (two__table___first2_ (table)) in
      while !j2 <= integer_of___two__index (two__table___last2_ (table)) do
       { invariant ((integer_of___two__index (two__table___first2 (table))
                     <= j2 <=
                     (integer_of___two__index (two__table___last2 (table))
                                               + 1))
                    and (found = false))
       variant integer_of___two__index (two__table___last2 (table)) + 1 - j2 }
      begin
       if (integer_of___standard__integer
            (two__table___get_
              table
              (two__index___of_integer_ (!j1))
              (two__index___of_integer_ (!j2)))
           = integer_of___standard__integer (value))
       then begin
        found := true;
        i1 := standard__integer___of_integer (!j1);
        i2 := standard__integer___of_integer (!j2);
        raise Return
       end;
       j2 := !j2 + 1
      end
      done;
      assert { found = false
               and j2 = integer_of___two__index (two__table___last2 (table))
                        + 1 };
      j1 := !j1 + 1
    end
    done;
    assert { found = false
             and j1 = integer_of___two__index (two__table___last1 (table))
                      + 1 };
    void
  end
  with Return ->
   assert {
    found = true
     and value = two__table___get (table,
                                   two__index___of_integer
                                    (integer_of___standard__integer (i1)),
                                   two__index___of_integer
                                    (integer_of___standard__integer (i2)))
    };
    void
  end
 { found = true ->
    value = two__table___get (table,
                              two__index___of_integer
                               (integer_of___standard__integer (i1)),
                              two__index___of_integer
                               (integer_of___standard__integer (i2)))
 }
