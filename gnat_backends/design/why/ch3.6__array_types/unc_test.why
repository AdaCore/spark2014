

include "arrays.why"
include "unc.why"

let check_index
(table : unc__vector)
(value : standard__integer)
(index : standard__integer) =
 { unc__vector___index_check (table, index) }
  (integer_of___standard__integer (unc__vector___get_ table index)
   = integer_of___standard__integer (value))
 { result = true <-> (eq___standard__integer
                      (access (array_of___unc__vector (table),
                               integer_of___standard__integer (index)),
                       value)) }

exception Return

let linear_search
(table : unc__vector)
(value : standard__integer)
(found : bool ref)
(index : standard__integer ref) =
 { unc__vector___non_empty (table) }
 try
  begin
   found := false;
   index := standard__integer___of_integer_
             (integer_of___standard__integer
              (unc__vector___last_ (table)));
   let i = ref integer_of___standard__integer (unc__vector___first_ (table)) in
    while !i <= integer_of___standard__integer (unc__vector___last_ (table)) do
     { invariant ((integer_of___standard__integer
                   (unc__vector___first (table))
                   <= i <=
                   (integer_of___standard__integer
                    (unc__vector___last (table)) + 1))
                  and (found = false))
       variant integer_of___standard__integer
                (unc__vector___last (table)) + 1 - i }
     begin
      if (integer_of___standard__integer
           (unc__vector___get_ table (standard__integer___of_integer_ (!i)))
            = integer_of___standard__integer (value))
      then begin
       found := true;
       index := standard__integer___of_integer (!i);
       raise Return
      end;
      i := !i + 1
     end
    done;
    assert { found = false
             and i = integer_of___standard__integer
                      (unc__vector___last (table)) + 1 };
    1
   end
  with Return ->
   assert {
    found = true
     and eq___standard__integer (value,
                                 access (array_of___unc__vector (table),
                                 integer_of___standard__integer (index)))
    };
   2
  end
 { (found = true) -> eq___standard__integer
                    (value,
                     access (array_of___unc__vector (table),
                             integer_of___standard__integer (index))) }
