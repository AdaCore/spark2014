
This directory describes how array types would be represented in Why;
some examples of usage of these types are provided in files named
*_test.why. Files named *_test.ad? contains an "informal" equivalent
of the why code in Ada (with no assumption on what we would *really*
generate for these test packages).

Ada array types are defined as abstract types that can be converted to
logic (infinite) arrays along with range constraints. The definition of
these conversions are roughly similar to the way discrete types are
defined using math ints (see ch3.5__scalar_types/README).

An important thing to note is that converting from an Ada array to
a logic array, and then back to an Ada array, may not give an
identical result; all logic arrays have their bounds between 0 and
length - 1, so the unicity axiom does not hold. We have two different
equalities, one that checks range equality and one that doesn't.

arr.ads, arr.why and arr_test.why focus on constrained array. This
example uses a subtype indication to specify the range of the array,
but the case of a "raw" range is not very different as the expander
would generate a subtype for it anyway. arr_test.why illustrates how
the representation could be used in an implementation of the basic
"search" example, whose implementation is a translation of the SPARK
version in the testsuite (<hi-lite root>/tests/search).

unc.ads, unc.why and unc_test.why show how things are done for
unconstrained arrays. The representation is quite similar to the
similar case, except for range axioms; they become:
* Vector'First - Vector'Last + 1 = Vector'Length (___bounds);
* Vector'First <= Vector'Last for non-empty arrays (___non_empty);
* Vector'First .. Vector'Last can hold in the index subtype (___in_range).

two.ads, two.why and two_test.why show how multi-dimensional arrays
would be represented. Not very different from a one-dimensional array;
only the fact that it maps to array of arrays (of arrays of arrays ...)
and that first, last, index_check et cetera have one version per dimension.
