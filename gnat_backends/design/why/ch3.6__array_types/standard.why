type standard__integer

logic integer_of___standard__integer : standard__integer -> int

logic eq___standard__integer : standard__integer, standard__integer -> bool

axiom eq___standard__integer___def :
 forall x, y : standard__integer.
  eq___standard__integer (x, y) = true <->
   integer_of___standard__integer (x) = integer_of___standard__integer (y)

logic standard__integer___in_range : int -> bool

axiom standard__integer___in_range___def :
 let first = -2147483648 in
 let last = 2147483647 in
  forall x : int.
   standard__integer___in_range (x) = true <-> first <= x <= last

logic standard__integer___of_integer : int -> standard__integer

axiom standard__integer___coerce :
 (forall x : int.
  standard__integer___in_range (x) = true ->
   integer_of___standard__integer (standard__integer___of_integer (x)) = x)

axiom standard__integer___range :
 forall x : standard__integer.
  standard__integer___in_range (integer_of___standard__integer (x)) = true

axiom standard__integer___unicity :
 forall x, y : standard__integer.
  eq___standard__integer (x, y) = true <-> x = y

parameter any___standard__integer : unit -> { } standard__integer { true }

parameter standard__integer___of_integer_ :
 x : int ->
  { standard__integer___in_range (x) = true }
   standard__integer
  { integer_of___standard__integer (result) = x }

parameter safe___standard__integer___of_integer_ :
 x : int ->
  { }
   standard__integer
  { integer_of___standard__integer (result) = x }



