include "arrays.why"
include "standard.why"

(*************)
(* Two.Index *)
(*************)

type two__index

logic integer_of___two__index : two__index -> int

logic eq___two__index : two__index, two__index -> bool

axiom eq___two__index___def :
 forall x, y : two__index.
  eq___two__index (x, y) = true <->
   integer_of___two__index (x) = integer_of___two__index (y)

logic two__index___in_range : int -> bool

axiom two__index___in_range___def :
 let first = 1 in
 let last = 10 in
  forall x : int.
   two__index___in_range (x) = true <-> first <= x <= last

logic two__index___of_integer : int -> two__index

axiom two__index___coerce :
 forall x : int.
  two__index___in_range (x) = true ->
   integer_of___two__index (two__index___of_integer (x)) = x

axiom two__index___range :
 forall x : two__index.
  two__index___in_range (integer_of___two__index (x)) = true

parameter two__index___of_integer_ :
 x : int ->
  { two__index___in_range (x) = true }
   two__index
  { integer_of___two__index (result) = x }


(*************)
(* Two.Table *)
(*************)

type two__table

logic array_of___two__table : two__table -> standard__integer farray farray

logic two__table___of_array : standard__integer farray farray -> two__table

logic two__table___in_range : standard__integer farray farray -> bool

axiom two__table___in_range___def :
 let length_1 = 10 in
 let length_2 = 10 in
  forall x : standard__integer farray farray.
   two__table___in_range (x) = true <->
    (array_length (x) = length_1
     and forall j2 : int.
          0 <= j2 < length_1 -> array_length (x [j2]) = length_2)

logic eq___two__table : two__table, two__table -> bool

axiom eq___two__table___def :
 forall x, y : two__table.
  eq___two__table (x, y) = true <->
   array_of___two__table (x) = array_of___two__table (y)

axiom two__table___coerce :
 forall x : standard__integer farray farray.
  two__table___in_range (x) = true ->
   array_of___two__table (two__table___of_array (x)) = x

axiom two__table___range :
 forall x : two__table.
  two__table___in_range (array_of___two__table (x)) = true

logic two__table___first1 : two__table -> two__index
logic two__table___first2 : two__table -> two__index

logic two__table___last1 : two__table -> two__index
logic two__table___last2 : two__table -> two__index

logic two__table___range_eq : two__table, two__table -> bool

axiom two__table___range_eq :
 forall x, y : two__table.
  two__table___range_eq (x, y) = true <->
  (integer_of___two__index (two__table___first1 (x))
    = integer_of___two__index (two__table___first1 (y)))
  and (integer_of___two__index (two__table___first2 (x))
    = integer_of___two__index (two__table___first2 (y)))
  and (integer_of___two__index (two__table___last1 (x))
       = integer_of___two__index (two__table___last1 (y)))
  and (integer_of___two__index (two__table___last2 (x))
       = integer_of___two__index (two__table___last2 (y)))

logic eq___two__table___strict : two__table, two__table -> bool

axiom eq___two__table___strict___def :
 forall x, y : two__table.
  eq___two__table___strict (x, y) = true <->
   (array_of___two__table (x) = array_of___two__table (y)
    and two__table___range_eq (x, y) = true)

logic two__table___index_check1 : two__table, two__index -> bool
logic two__table___index_check2 : two__table, two__index -> bool

axiom two__table___index_check1___def :
 forall a : two__table.
 forall i : two__index.
  two__table___index_check1 (a, i) = true <->
   (integer_of___two__index (two__table___first1 (a))
     <= integer_of___two__index (i) <=
    integer_of___two__index (two__table___last1 (a)))

axiom two__table___index_check2___def :
 forall a : two__table.
 forall i : two__index.
  two__table___index_check2 (a, i) = true <->
   (integer_of___two__index (two__table___first2 (a))
     <= integer_of___two__index (i) <=
    integer_of___two__index (two__table___last2 (a)))

axiom two__table___first_value1 :
 forall x : two__table.
  two__table___first1 (x) = two__index___of_integer (1)

axiom two__table___first_value2 :
 forall x : two__table.
  two__table___first2 (x) = two__index___of_integer (1)

axiom two__table___last_value1 :
 forall x : two__table.
  two__table___last1 (x) = two__index___of_integer (10)

axiom two__table___last_value2 :
 forall x : two__table.
  two__table___last2 (x) = two__index___of_integer (10)

logic two__table___get :
 two__table, two__index, two__index -> standard__integer

logic two__table___set :
 two__table, two__index, two__index, standard__integer -> two__table

axiom two__table___get_definition :
 forall a  : two__table.
 forall i1 : two__index.
 forall i2 : two__index.
  two__table___get (a, i1, i2) = access (access (array_of___two__table (a),
                                                 integer_of___two__index (i1)),
                                         integer_of___two__index (i2))

axiom two__table___set_definition :
 forall a  : two__table.
 forall i1 : two__index.
 forall i2 : two__index.
 forall v  : standard__integer.
  let result = two__table___set (a, i1, i2, v) in
  let sub1   = access (array_of___two__table (a),
                       integer_of___two__index (i1)) in
   array_of___two__table (result) =
    update (array_of___two__table (a),
            integer_of___two__index (i1),
            update (sub1,
                    integer_of___two__index (i2),
                    v))
   and a = result

parameter two__table___get_ :
 a : two__table -> i1 : two__index -> i2 : two__index ->
  { two__table___index_check1 (a, i1) = true
    and two__table___index_check2 (a, i2) = true }
   standard__integer
  { result = two__table___get (a, i1, i2) }

parameter two__table___set_ : 
 a  : two__table ref ->
 i1 : two__index ->
 i2 : two__index ->
 v  : standard__integer -> 
  { two__table___index_check1 (a, i1) = true
    and two__table___index_check2 (a, i2) = true }
   unit writes a
  { a = two__table___set (a@, i1, i2, v) }

parameter two__table___first1_ :
 a : two__table ->
  { }
   two__index
  { result = two__table___first1 (a) }

parameter two__table___first2_ :
 a : two__table ->
  { }
   two__index
  { result = two__table___first2 (a) }

parameter two__table___last1_ :
 a : two__table ->
  { }
   two__index
  { result = two__table___last1 (a) }

parameter two__table___last2_ :
 a : two__table ->
  { }
   two__index
  { result = two__table___last2 (a) }
