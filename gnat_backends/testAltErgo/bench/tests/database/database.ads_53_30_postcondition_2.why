(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
axiom tuple0_inversion : (forall u:unit. (u = void))

type unit1

type qtmark

logic at : 'a, qtmark -> 'a

logic old : 'a -> 'a

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

logic index_bool : bool -> int

axiom index_bool_True : (index_bool(true) = 0)

axiom index_bool_False : (index_bool(false) = 1)

axiom bool_inversion : (forall u:bool. ((u = true) or (u = false)))

function andb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, true,
  false), false)

function orb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  true, false))

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

axiom CompatOrderMult :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

type 'a ref

logic mk_ref : 'a -> 'a ref

logic mk_ref_proj_1 : 'a ref -> 'a

axiom mk_ref_proj_1_def : (forall u:'a. (mk_ref_proj_1(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(mk_ref_proj_1(u))))

function contents(u: 'a ref) : 'a = mk_ref_proj_1(u)

logic abs : int -> int

axiom abs_def : (forall x:int. ((0 <= x) -> (abs(x) = x)))

axiom abs_def1 : (forall x:int. ((not (0 <= x)) -> (abs(x) = (-x))))

axiom Abs_le : (forall x:int. forall y:int. ((abs(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 : (forall x:int. forall y:int. ((abs(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:int. forall y:int. ((((-y) <= x) and (x <= y)) -> (abs(x) <= y)))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge : (forall x:int. forall y:int. (x <= max(x, y)))

axiom Max_is_ge1 : (forall x:int. forall y:int. (y <= max(x, y)))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le : (forall x:int. forall y:int. (min(x, y) <= x))

axiom Min_is_le1 : (forall x:int. forall y:int. (min(x, y) <= y))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs(y)) <  mod(x, y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs(y))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom CompatOrderMult1 :
  (forall x:real. forall y:real. forall z:real. ((x <= y) -> ((0.0 <= z) ->
  ((x * z) <= (y * z)))))

logic abs1 : real -> real

axiom abs_def2 : (forall x:real. ((0.0 <= x) -> (abs1(x) = x)))

axiom abs_def3 : (forall x:real. ((not (0.0 <= x)) -> (abs1(x) = (-x))))

axiom Abs_le3 :
  (forall x:real. forall y:real. ((abs1(x) <= y) -> ((-y) <= x)))

axiom Abs_le4 : (forall x:real. forall y:real. ((abs1(x) <= y) -> (x <= y)))

axiom Abs_le5 :
  (forall x:real. forall y:real. ((((-y) <= x) and (x <= y)) ->
  (abs1(x) <= y)))

axiom Abs_pos1 : (forall x:real. (0.0 <= abs1(x)))

function sqr(x: real) : real = (x * x)

logic sqrt : real -> real

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt((x * x)) = x)))

logic cos : real -> real

logic sin : real -> real

axiom Pythagorean_identity :
  (forall x:real. ((sqr(cos(x)) + sqr(sin(x))) = 1.0))

axiom Cos_le_one : (forall x:real. (abs1(cos(x)) <= 1.0))

axiom Sin_le_one : (forall x:real. (abs1(sin(x)) <= 1.0))

axiom Cos_0 : (cos(0.0) = 1.0)

axiom Sin_0 : (sin(0.0) = 0.0)

logic pi : real

axiom Pi_interval :
  (3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196 <  pi)

axiom Pi_interval1 :
  (pi <  3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038197)

axiom Cos_pi : (cos(pi) = (-1.0))

axiom Sin_pi : (sin(pi) = 0.0)

axiom Cos_pi2 : (cos((0.5 * pi)) = 0.0)

axiom Sin_pi2 : (sin((0.5 * pi)) = 1.0)

axiom Cos_plus_pi : (forall x:real. (cos((x + pi)) = (-cos(x))))

axiom Sin_plus_pi : (forall x:real. (sin((x + pi)) = (-sin(x))))

axiom Cos_plus_pi2 : (forall x:real. (cos((x + (0.5 * pi))) = (-sin(x))))

axiom Sin_plus_pi2 : (forall x:real. (sin((x + (0.5 * pi))) = cos(x)))

axiom Cos_neg : (forall x:real. (cos((-x)) = cos(x)))

axiom Sin_neg : (forall x:real. (sin((-x)) = (-sin(x))))

axiom Cos_sum :
  (forall x:real. forall y:real.
  (cos((x + y)) = ((cos(x) * cos(y)) - (sin(x) * sin(y)))))

axiom Sin_sum :
  (forall x:real. forall y:real.
  (sin((x + y)) = ((sin(x) * cos(y)) + (cos(x) * sin(y)))))

function tan(x: real) : real = (sin(x) / cos(x))

logic atan : real -> real

axiom Tan_atan : (forall x:real. (tan(atan(x)) = x))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

type mode

logic NearestTiesToEven : mode

logic ToZero : mode

logic Up : mode

logic Down : mode

logic NearTiesToAway : mode

logic match_mode : mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_NearestTiesToEven :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_ToZero :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z1))

axiom match_mode_Up :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_Down :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_NearTiesToAway :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearTiesToAway, z, z1, z2, z3, z4) = z4))

logic index_mode : mode -> int

axiom index_mode_NearestTiesToEven : (index_mode(NearestTiesToEven) = 0)

axiom index_mode_ToZero : (index_mode(ToZero) = 1)

axiom index_mode_Up : (index_mode(Up) = 2)

axiom index_mode_Down : (index_mode(Down) = 3)

axiom index_mode_NearTiesToAway : (index_mode(NearTiesToAway) = 4)

axiom mode_inversion :
  (forall u:mode. (((((u = NearestTiesToEven) or (u = ToZero)) or
  (u = Up)) or (u = Down)) or (u = NearTiesToAway)))

type single

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x:int. forall y:int.
  (from_int((x + y)) = (from_int(x) + from_int(y))))

axiom Sub :
  (forall x:int. forall y:int.
  (from_int((x - y)) = (from_int(x) - from_int(y))))

axiom Mul :
  (forall x:int. forall y:int.
  (from_int((x * y)) = (from_int(x) * from_int(y))))

axiom Neg : (forall x:int. (from_int((-x)) = (-from_int(x))))

logic round : mode, real -> real

logic round_logic : mode, real -> single

logic value : single -> real

logic exact : single -> real

logic model : single -> real

function round_error(x: single) : real = abs1((value(x) - exact(x)))

function total_error(x: single) : real = abs1((value(x) - model(x)))

predicate no_overflow(m: mode, x: real) = (abs1(round(m,
  x)) <= 0x1.FFFFFEp127)

axiom Bounded_real_no_overflow :
  (forall m:mode. forall x:real. ((abs1(x) <= 0x1.FFFFFEp127) ->
  no_overflow(m, x)))

axiom Round_monotonic :
  (forall m:mode. forall x:real. forall y:real. ((x <= y) -> (round(m,
  x) <= round(m, y))))

axiom Round_idempotent :
  (forall m1:mode. forall m2:mode. forall x:real. (round(m1, round(m2,
  x)) = round(m2, x)))

axiom Round_value :
  (forall m:mode. forall x:single. (round(m, value(x)) = value(x)))

axiom Bounded_value : (forall x:single. (abs1(value(x)) <= 0x1.FFFFFEp127))

axiom Exact_rounding_for_integers :
  (forall m:mode. forall i:int. ((((-16777216) <= i) and (i <= 16777216)) ->
  (round(m, from_int(i)) = from_int(i))))

axiom Round_down_le : (forall x:real. (round(Down, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= round(Up, x)))

axiom Round_down_neg : (forall x:real. (round(Down, (-x)) = (-round(Up, x))))

axiom Round_up_neg : (forall x:real. (round(Up, (-x)) = (-round(Down, x))))

type double

logic round1 : mode, real -> real

logic round_logic1 : mode, real -> double

logic value1 : double -> real

logic exact1 : double -> real

logic model1 : double -> real

function round_error1(x: double) : real = abs1((value1(x) - exact1(x)))

function total_error1(x: double) : real = abs1((value1(x) - model1(x)))

predicate no_overflow1(m: mode, x: real) = (abs1(round1(m,
  x)) <= 0x1.FFFFFFFFFFFFFp1023)

axiom Bounded_real_no_overflow1 :
  (forall m:mode. forall x:real. ((abs1(x) <= 0x1.FFFFFFFFFFFFFp1023) ->
  no_overflow1(m, x)))

axiom Round_monotonic1 :
  (forall m:mode. forall x:real. forall y:real. ((x <= y) -> (round1(m,
  x) <= round1(m, y))))

axiom Round_idempotent1 :
  (forall m1:mode. forall m2:mode. forall x:real. (round1(m1, round1(m2,
  x)) = round1(m2, x)))

axiom Round_value1 :
  (forall m:mode. forall x:double. (round1(m, value1(x)) = value1(x)))

axiom Bounded_value1 :
  (forall x:double. (abs1(value1(x)) <= 0x1.FFFFFFFFFFFFFp1023))

axiom Exact_rounding_for_integers1 :
  (forall m:mode. forall i:int. ((((-9007199254740992) <= i) and
  (i <= 9007199254740992)) -> (round1(m, from_int(i)) = from_int(i))))

axiom Round_down_le1 : (forall x:real. (round1(Down, x) <= x))

axiom Round_up_ge1 : (forall x:real. (x <= round1(Up, x)))

axiom Round_down_neg1 :
  (forall x:real. (round1(Down, (-x)) = (-round1(Up, x))))

axiom Round_up_neg1 :
  (forall x:real. (round1(Up, (-x)) = (-round1(Down, x))))

logic us__ignore : 'a -> unit

type 'a t__ada_array

logic t__ada_array___access : int, 'a t__ada_array -> 'a

logic t__ada_array___update : int, 'a t__ada_array, 'a -> 'a t__ada_array

logic t__ada_array___equal : 'a t__ada_array, 'a t__ada_array -> bool

logic t__ada_array___attr___ATTRIBUTE_LENGTH : 'a t__ada_array -> int

logic t__ada_array___attr___ATTRIBUTE_FIRST : 'a t__ada_array -> int

logic t__ada_array___attr___ATTRIBUTE_LAST : 'a t__ada_array -> int

axiom T__ada_array___accupd_eq :
  (forall a:'a t__ada_array.
  (forall i:int.
  (forall v:'a [t__ada_array___update(i, a, v)]. (t__ada_array___access(i,
  t__ada_array___update(i, a, v)) = v))))

axiom T__ada_array___accupd_neq :
  (forall a:'a t__ada_array.
  (forall i:int.
  (forall j:int.
  (forall v:'a [t__ada_array___access(j, t__ada_array___update(i, a, v))|
  t__ada_array___update(i, a, v), t__ada_array___access(j, a)].
  ((not (i = j)) -> (t__ada_array___access(j, t__ada_array___update(i, a,
  v)) = t__ada_array___access(j, a)))))))

axiom T__ada_array___first_update :
  (forall a:'a t__ada_array.
  (forall i:int.
  (forall v:'a.
  (t__ada_array___attr___ATTRIBUTE_FIRST(a) = t__ada_array___attr___ATTRIBUTE_FIRST(t__ada_array___update(i,
  a, v))))))

axiom T__ada_array___last_update :
  (forall a:'a t__ada_array.
  (forall i:int.
  (forall v:'a.
  (t__ada_array___attr___ATTRIBUTE_LAST(a) = t__ada_array___attr___ATTRIBUTE_LAST(t__ada_array___update(i,
  a, v))))))

axiom T__ada_array___length_update :
  (forall a:'a t__ada_array.
  (forall i:int.
  (forall v:'a.
  (t__ada_array___attr___ATTRIBUTE_LENGTH(a) = t__ada_array___attr___ATTRIBUTE_LENGTH(t__ada_array___update(i,
  a, v))))))

axiom T__ada_array___length_non_zero :
  (forall a:'a t__ada_array.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(a) <= t__ada_array___attr___ATTRIBUTE_LAST(a)) ->
  (t__ada_array___attr___ATTRIBUTE_LENGTH(a) = ((t__ada_array___attr___ATTRIBUTE_LAST(a) - t__ada_array___attr___ATTRIBUTE_FIRST(a)) + 1))))

axiom T__ada_array___length_zero :
  (forall a:'a t__ada_array.
  ((t__ada_array___attr___ATTRIBUTE_LAST(a) <  t__ada_array___attr___ATTRIBUTE_FIRST(a)) ->
  (t__ada_array___attr___ATTRIBUTE_LENGTH(a) = 0)))

axiom T__ada_array___equal_def :
  (forall a:'a t__ada_array.
  (forall b:'a t__ada_array.
  (((t__ada_array___attr___ATTRIBUTE_LENGTH(a) = t__ada_array___attr___ATTRIBUTE_LENGTH(b)) and
  (forall i:int. (((t__ada_array___attr___ATTRIBUTE_FIRST(a) <= i) and
  (i <= t__ada_array___attr___ATTRIBUTE_LAST(a))) ->
  (t__ada_array___access(i,
  a) = t__ada_array___access(((t__ada_array___attr___ATTRIBUTE_FIRST(b) - t__ada_array___attr___ATTRIBUTE_FIRST(a)) + i),
  b))))) -> (t__ada_array___equal(a, b) = true))))

axiom T__ada_array___equal_def1 :
  (forall a:'a t__ada_array.
  (forall b:'a t__ada_array. ((t__ada_array___equal(a, b) = true) ->
  (t__ada_array___attr___ATTRIBUTE_LENGTH(a) = t__ada_array___attr___ATTRIBUTE_LENGTH(b)))))

axiom T__ada_array___equal_def2 :
  (forall a:'a t__ada_array.
  (forall b:'a t__ada_array. ((t__ada_array___equal(a, b) = true) ->
  (forall i:int. (((t__ada_array___attr___ATTRIBUTE_FIRST(a) <= i) and
  (i <= t__ada_array___attr___ATTRIBUTE_LAST(a))) ->
  (t__ada_array___access(i,
  a) = t__ada_array___access(((t__ada_array___attr___ATTRIBUTE_FIRST(b) - t__ada_array___attr___ATTRIBUTE_FIRST(a)) + i),
  b)))))))

type 'a t__ada_array_2

logic t__ada_array_2___access : int, int, 'a t__ada_array_2 -> 'a

logic t__ada_array_2___update : int, int, 'a t__ada_array_2,
  'a -> 'a t__ada_array_2

logic t__ada_array_2___equal : 'a t__ada_array_2, 'a t__ada_array_2 -> bool

logic t__ada_array_2___attr___ATTRIBUTE_LENGTH : 'a t__ada_array_2 -> int

logic t__ada_array_2___attr___ATTRIBUTE_LENGTH_2 : 'a t__ada_array_2 -> int

logic t__ada_array_2___attr___ATTRIBUTE_FIRST : 'a t__ada_array_2 -> int

logic t__ada_array_2___attr___ATTRIBUTE_FIRST_2 : 'a t__ada_array_2 -> int

logic t__ada_array_2___attr___ATTRIBUTE_LAST : 'a t__ada_array_2 -> int

logic t__ada_array_2___attr___ATTRIBUTE_LAST_2 : 'a t__ada_array_2 -> int

axiom T__ada_array_2___accupd_eq :
  (forall a:'a t__ada_array_2.
  (forall i:int.
  (forall j:int.
  (forall v:'a [t__ada_array_2___update(i, j, a, v)].
  (t__ada_array_2___access(i, j, t__ada_array_2___update(i, j, a, v)) = v)))))

axiom T__ada_array_2___accupd_neq :
  (forall a:'a t__ada_array_2.
  (forall i1:int.
  (forall i2:int.
  (forall j1:int.
  (forall j2:int.
  (forall v:'a [t__ada_array_2___access(i2, j2, t__ada_array_2___update(i1,
  j1, a, v))| t__ada_array_2___update(i1, j1, a, v),
  t__ada_array_2___access(i2, j2, a)]. (((not (i1 = i2)) or
  (not (j1 = j2))) -> (t__ada_array_2___access(i2, j2,
  t__ada_array_2___update(i1, j1, a, v)) = t__ada_array_2___access(i2, j2,
  a)))))))))

axiom T__ada_array_2___first_update :
  (forall a:'a t__ada_array_2.
  (forall i:int.
  (forall j:int.
  (forall v:'a.
  (t__ada_array_2___attr___ATTRIBUTE_FIRST(a) = t__ada_array_2___attr___ATTRIBUTE_FIRST(t__ada_array_2___update(i,
  j, a, v)))))))

axiom T__ada_array_2___first_update_2 :
  (forall a:'a t__ada_array_2.
  (forall i:int.
  (forall j:int.
  (forall v:'a.
  (t__ada_array_2___attr___ATTRIBUTE_FIRST_2(a) = t__ada_array_2___attr___ATTRIBUTE_FIRST_2(t__ada_array_2___update(i,
  j, a, v)))))))

axiom T__ada_array_2___last_update :
  (forall a:'a t__ada_array_2.
  (forall i:int.
  (forall j:int.
  (forall v:'a.
  (t__ada_array_2___attr___ATTRIBUTE_LAST(a) = t__ada_array_2___attr___ATTRIBUTE_LAST(t__ada_array_2___update(i,
  j, a, v)))))))

axiom T__ada_array_2___last_update_2 :
  (forall a:'a t__ada_array_2.
  (forall i:int.
  (forall j:int.
  (forall v:'a.
  (t__ada_array_2___attr___ATTRIBUTE_LAST_2(a) = t__ada_array_2___attr___ATTRIBUTE_LAST_2(t__ada_array_2___update(i,
  j, a, v)))))))

axiom T__ada_array_2___length_update :
  (forall a:'a t__ada_array_2.
  (forall i:int.
  (forall j:int.
  (forall v:'a.
  (t__ada_array_2___attr___ATTRIBUTE_LENGTH(a) = t__ada_array_2___attr___ATTRIBUTE_LENGTH(t__ada_array_2___update(i,
  j, a, v)))))))

axiom T__ada_array_2___length_update_2 :
  (forall a:'a t__ada_array_2.
  (forall i:int.
  (forall j:int.
  (forall v:'a.
  (t__ada_array_2___attr___ATTRIBUTE_LENGTH_2(a) = t__ada_array_2___attr___ATTRIBUTE_LENGTH_2(t__ada_array_2___update(i,
  j, a, v)))))))

axiom T__ada_array_2___length_non_zero :
  (forall a:'a t__ada_array_2.
  ((t__ada_array_2___attr___ATTRIBUTE_FIRST(a) <= t__ada_array_2___attr___ATTRIBUTE_LAST(a)) ->
  (t__ada_array_2___attr___ATTRIBUTE_LENGTH(a) = ((t__ada_array_2___attr___ATTRIBUTE_LAST(a) - t__ada_array_2___attr___ATTRIBUTE_FIRST(a)) + 1))))

axiom T__ada_array_2___length_zero :
  (forall a:'a t__ada_array_2.
  ((t__ada_array_2___attr___ATTRIBUTE_LAST(a) <  t__ada_array_2___attr___ATTRIBUTE_FIRST(a)) ->
  (t__ada_array_2___attr___ATTRIBUTE_LENGTH(a) = 0)))

axiom T__ada_array_2___length_non_zero_2 :
  (forall a:'a t__ada_array_2.
  ((t__ada_array_2___attr___ATTRIBUTE_FIRST_2(a) <= t__ada_array_2___attr___ATTRIBUTE_LAST_2(a)) ->
  (t__ada_array_2___attr___ATTRIBUTE_LENGTH_2(a) = ((t__ada_array_2___attr___ATTRIBUTE_LAST_2(a) - t__ada_array_2___attr___ATTRIBUTE_FIRST_2(a)) + 1))))

axiom T__ada_array_2___length_zero_2 :
  (forall a:'a t__ada_array_2.
  ((t__ada_array_2___attr___ATTRIBUTE_LAST_2(a) <  t__ada_array_2___attr___ATTRIBUTE_FIRST_2(a)) ->
  (t__ada_array_2___attr___ATTRIBUTE_LENGTH_2(a) = 0)))

axiom T__ada_array_2___equal_def :
  (forall a:'a t__ada_array_2.
  (forall b:'a t__ada_array_2.
  (((t__ada_array_2___attr___ATTRIBUTE_LENGTH(a) = t__ada_array_2___attr___ATTRIBUTE_LENGTH(b)) and
  ((t__ada_array_2___attr___ATTRIBUTE_LENGTH_2(a) = t__ada_array_2___attr___ATTRIBUTE_LENGTH_2(b)) and
  (forall i:int.
  (forall j:int. (((t__ada_array_2___attr___ATTRIBUTE_FIRST(a) <= i) and
  (i <= t__ada_array_2___attr___ATTRIBUTE_LAST(a))) ->
  (((t__ada_array_2___attr___ATTRIBUTE_FIRST_2(a) <= j) and
  (j <= t__ada_array_2___attr___ATTRIBUTE_LAST_2(a))) ->
  (t__ada_array_2___access(i, j,
  a) = t__ada_array_2___access(((t__ada_array_2___attr___ATTRIBUTE_FIRST(b) - t__ada_array_2___attr___ATTRIBUTE_FIRST(a)) + i),
  ((t__ada_array_2___attr___ATTRIBUTE_FIRST_2(b) - t__ada_array_2___attr___ATTRIBUTE_FIRST_2(a)) + j),
  b)))))))) -> (t__ada_array_2___equal(a, b) = true))))

axiom T__ada_array_2___equal_def1 :
  (forall a:'a t__ada_array_2.
  (forall b:'a t__ada_array_2. ((t__ada_array_2___equal(a, b) = true) ->
  (t__ada_array_2___attr___ATTRIBUTE_LENGTH(a) = t__ada_array_2___attr___ATTRIBUTE_LENGTH(b)))))

axiom T__ada_array_2___equal_def2 :
  (forall a:'a t__ada_array_2.
  (forall b:'a t__ada_array_2. ((t__ada_array_2___equal(a, b) = true) ->
  (t__ada_array_2___attr___ATTRIBUTE_LENGTH_2(a) = t__ada_array_2___attr___ATTRIBUTE_LENGTH_2(b)))))

axiom T__ada_array_2___equal_def3 :
  (forall a:'a t__ada_array_2.
  (forall b:'a t__ada_array_2. ((t__ada_array_2___equal(a, b) = true) ->
  (forall i:int.
  (forall j:int. (((t__ada_array_2___attr___ATTRIBUTE_FIRST(a) <= i) and
  (i <= t__ada_array_2___attr___ATTRIBUTE_LAST(a))) ->
  (((t__ada_array_2___attr___ATTRIBUTE_FIRST_2(a) <= j) and
  (j <= t__ada_array_2___attr___ATTRIBUTE_LAST_2(a))) ->
  (t__ada_array_2___access(i, j,
  a) = t__ada_array_2___access(((t__ada_array_2___attr___ATTRIBUTE_FIRST(b) - t__ada_array_2___attr___ATTRIBUTE_FIRST(a)) + i),
  ((t__ada_array_2___attr___ATTRIBUTE_FIRST_2(b) - t__ada_array_2___attr___ATTRIBUTE_FIRST_2(a)) + j),
  b)))))))))

type ustype_of______HEAP

logic us_HEAP : ustype_of______HEAP ref

logic int_of_bool : bool -> int

axiom int_of_bool_def : (forall b:bool. ((b = true) -> (int_of_bool(b) = 1)))

axiom int_of_bool_def1 :
  (forall b:bool. ((not (b = true)) -> (int_of_bool(b) = 0)))

logic bool_of_int : int -> bool

axiom bool_of_int_def : (forall i:int. ((i = 0) -> (bool_of_int(i) = false)))

axiom bool_of_int_def1 :
  (forall i:int. ((not (i = 0)) -> (bool_of_int(i) = true)))

logic bool_int__eq : int, int -> bool

axiom Bool_int__eq_axiom :
  (forall x:int. (forall y:int. ((bool_int__eq(x, y) = true) -> (x = y))))

axiom Bool_int__eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_int__eq(x, y) = true))))

logic bool_int__ne : int, int -> bool

axiom Bool_int__ne_axiom :
  (forall x:int.
  (forall y:int. ((bool_int__ne(x, y) = true) -> (not (x = y)))))

axiom Bool_int__ne_axiom1 :
  (forall x:int.
  (forall y:int. ((not (x = y)) -> (bool_int__ne(x, y) = true))))

logic bool_int__lt : int, int -> bool

axiom Bool_int__lt_axiom :
  (forall x:int. (forall y:int. ((bool_int__lt(x, y) = true) -> (x <  y))))

axiom Bool_int__lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_int__lt(x, y) = true))))

logic bool_int__le : int, int -> bool

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_int__le(x, y) = true) -> (x <= y))))

axiom Bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_int__le(x, y) = true))))

logic bool_int__gt : int, int -> bool

axiom Bool_int__gt_axiom :
  (forall x:int. (forall y:int. ((bool_int__gt(x, y) = true) -> (y <  x))))

axiom Bool_int__gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_int__gt(x, y) = true))))

logic bool_int__ge : int, int -> bool

axiom Bool_int__ge_axiom :
  (forall x:int. (forall y:int. ((bool_int__ge(x, y) = true) -> (y <= x))))

axiom Bool_int__ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_int__ge(x, y) = true))))

logic bool_real__lt : real, real -> bool

logic bool_real__le : real, real -> bool

logic bool_real__gt : real, real -> bool

logic bool_real__ge : real, real -> bool

logic bool_real__eq : real, real -> bool

logic bool_real__neq : real, real -> bool

axiom Bool_real__lt_axiom :
  (forall x:real.
  (forall y:real. ((bool_real__lt(x, y) = true) -> (x <  y))))

axiom Bool_real__lt_axiom1 :
  (forall x:real.
  (forall y:real. ((x <  y) -> (bool_real__lt(x, y) = true))))

axiom Bool_real__le_axiom :
  (forall x:real.
  (forall y:real. ((bool_real__le(x, y) = true) -> (x <= y))))

axiom Bool_real__le_axiom1 :
  (forall x:real.
  (forall y:real. ((x <= y) -> (bool_real__le(x, y) = true))))

axiom Bool_real__gt_axiom :
  (forall x:real.
  (forall y:real. ((bool_real__gt(x, y) = true) -> (y <  x))))

axiom Bool_real__gt_axiom1 :
  (forall x:real.
  (forall y:real. ((y <  x) -> (bool_real__gt(x, y) = true))))

axiom Bool_real__ge_axiom :
  (forall x:real.
  (forall y:real. ((bool_real__ge(x, y) = true) -> (y <= x))))

axiom Bool_real__ge_axiom1 :
  (forall x:real.
  (forall y:real. ((y <= x) -> (bool_real__ge(x, y) = true))))

axiom Bool_real__eq_axiom :
  (forall x:real. (forall y:real. ((bool_real__eq(x, y) = true) -> (x = y))))

axiom Bool_real__eq_axiom1 :
  (forall x:real. (forall y:real. ((x = y) -> (bool_real__eq(x, y) = true))))

axiom Bool_real__neq_axiom :
  (forall x:real.
  (forall y:real. ((bool_real__neq(x, y) = true) -> (not (x = y)))))

axiom Bool_real__neq_axiom1 :
  (forall x:real.
  (forall y:real. ((not (x = y)) -> (bool_real__neq(x, y) = true))))

type standard__exception

type standard__short_short_integer

logic standard__short_short_integer___to___int : standard__short_short_integer -> int

type standard__short_integer

logic standard__short_integer___to___int : standard__short_integer -> int

type standard__integer

logic standard__integer___to___int : standard__integer -> int

type standard__long_integer

logic standard__long_integer___to___int : standard__long_integer -> int

type standard__long_long_integer

logic standard__long_long_integer___to___int : standard__long_long_integer -> int

type standard__natural

logic standard__natural___to___int : standard__natural -> int

type standard__positive

logic standard__positive___to___int : standard__positive -> int

type standard__short_float

logic standard__short_float___to___real : standard__short_float -> real

type standard__float

logic standard__float___to___real : standard__float -> real

type standard__long_float

logic standard__long_float___to___real : standard__long_float -> real

type standard__long_long_float

logic standard__long_long_float___to___real : standard__long_long_float -> real

type standard__character

logic standard__character___to___int : standard__character -> int

type standard__wide_character

logic standard__wide_character___to___int : standard__wide_character -> int

type standard__wide_wide_character

logic standard__wide_wide_character___to___int : standard__wide_wide_character -> int

type standard__string

logic standard__string___to___t__ada_array : standard__string -> standard__character t__ada_array

logic standard__string___from___t__ada_array : standard__character t__ada_array -> standard__string

type standard__wide_string

logic standard__wide_string___to___t__ada_array : standard__wide_string -> standard__wide_character t__ada_array

logic standard__wide_string___from___t__ada_array : standard__wide_character t__ada_array -> standard__wide_string

type standard__wide_wide_string

logic standard__wide_wide_string___to___t__ada_array : standard__wide_wide_string -> standard__wide_wide_character t__ada_array

logic standard__wide_wide_string___from___t__ada_array : standard__wide_wide_character t__ada_array -> standard__wide_wide_string

type standard__duration

logic standard__duration___to___real : standard__duration -> real

type standard__integer_8

logic standard__integer_8___to___int : standard__integer_8 -> int

type standard__integer_16

logic standard__integer_16___to___int : standard__integer_16 -> int

type standard__integer_32

logic standard__integer_32___to___int : standard__integer_32 -> int

type standard__integer_64

logic standard__integer_64___to___int : standard__integer_64 -> int

type standard__universal_integer

logic standard__universal_integer___to___int : standard__universal_integer -> int

type standard__universal_real

logic standard__universal_real___to___real : standard__universal_real -> real

type standard___renaming_type

logic standard__short_short_integer___attr___ATTRIBUTE_MODULUS : int

predicate standard__short_short_integer___in_range(x: int) =
  (((-128) <= x) and (x <= 127))

logic standard__short_short_integer___from___int : int -> standard__short_short_integer

predicate standard__short_short_integer___eq(x: standard__short_short_integer,
  y: standard__short_short_integer) =
  (standard__short_short_integer___to___int(x) = standard__short_short_integer___to___int(y))

logic standard__short_integer___attr___ATTRIBUTE_MODULUS : int

predicate standard__short_integer___in_range(x: int) = (((-32768) <= x) and
  (x <= 32767))

logic standard__short_integer___from___int : int -> standard__short_integer

predicate standard__short_integer___eq(x: standard__short_integer,
  y: standard__short_integer) =
  (standard__short_integer___to___int(x) = standard__short_integer___to___int(y))

logic standard__integer___attr___ATTRIBUTE_MODULUS : int

predicate standard__integer___in_range(x: int) = (((-2147483648) <= x) and
  (x <= 2147483647))

logic standard__integer___from___int : int -> standard__integer

predicate standard__integer___eq(x: standard__integer,
  y: standard__integer) =
  (standard__integer___to___int(x) = standard__integer___to___int(y))

logic standard__long_integer___attr___ATTRIBUTE_MODULUS : int

predicate standard__long_integer___in_range(x: int) =
  (((-9223372036854775808) <= x) and (x <= 9223372036854775807))

logic standard__long_integer___from___int : int -> standard__long_integer

predicate standard__long_integer___eq(x: standard__long_integer,
  y: standard__long_integer) =
  (standard__long_integer___to___int(x) = standard__long_integer___to___int(y))

logic standard__long_long_integer___attr___ATTRIBUTE_MODULUS : int

predicate standard__long_long_integer___in_range(x: int) =
  (((-9223372036854775808) <= x) and (x <= 9223372036854775807))

logic standard__long_long_integer___from___int : int -> standard__long_long_integer

predicate standard__long_long_integer___eq(x: standard__long_long_integer,
  y: standard__long_long_integer) =
  (standard__long_long_integer___to___int(x) = standard__long_long_integer___to___int(y))

logic standard__natural___attr___ATTRIBUTE_MODULUS : int

predicate standard__natural___in_range(x: int) = ((0 <= x) and
  (x <= 2147483647))

logic standard__natural___from___int : int -> standard__natural

predicate standard__natural___eq(x: standard__natural,
  y: standard__natural) =
  (standard__natural___to___int(x) = standard__natural___to___int(y))

logic standard__positive___attr___ATTRIBUTE_MODULUS : int

predicate standard__positive___in_range(x: int) = ((1 <= x) and
  (x <= 2147483647))

logic standard__positive___from___int : int -> standard__positive

predicate standard__positive___eq(x: standard__positive,
  y: standard__positive) =
  (standard__positive___to___int(x) = standard__positive___to___int(y))

logic standard__short_float___attr___ATTRIBUTE_MODULUS : real

predicate standard__short_float___in_range(x: real) =
  ((((-16777215.0) * 43608742899428874059776.0) <= x) and
  (x <= (16777215.0 * 43608742899428874059776.0)))

logic standard__short_float___from___real : real -> standard__short_float

predicate standard__short_float___eq(x: standard__short_float,
  y: standard__short_float) =
  (standard__short_float___to___real(x) = standard__short_float___to___real(y))

logic standard__float___attr___ATTRIBUTE_MODULUS : real

predicate standard__float___in_range(x: real) =
  ((((-16777215.0) * 43608742899428874059776.0) <= x) and
  (x <= (16777215.0 * 43608742899428874059776.0)))

logic standard__float___from___real : real -> standard__float

predicate standard__float___eq(x: standard__float, y: standard__float) =
  (standard__float___to___real(x) = standard__float___to___real(y))

logic standard__long_float___attr___ATTRIBUTE_MODULUS : real

predicate standard__long_float___in_range(x: real) =
  ((((-72057594037927928.0) * 138371247278342490393517441299901382656.0) <= x) and
  (x <= (72057594037927928.0 * 138371247278342490393517441299901382656.0)))

logic standard__long_float___from___real : real -> standard__long_float

predicate standard__long_float___eq(x: standard__long_float,
  y: standard__long_float) =
  (standard__long_float___to___real(x) = standard__long_float___to___real(y))

logic standard__long_long_float___attr___ATTRIBUTE_MODULUS : real

predicate standard__long_long_float___in_range(x: real) =
  ((((-72057594037927928.0) * 138371247278342490393517441299901382656.0) <= x) and
  (x <= (72057594037927928.0 * 138371247278342490393517441299901382656.0)))

logic standard__long_long_float___from___real : real -> standard__long_long_float

predicate standard__long_long_float___eq(x: standard__long_long_float,
  y: standard__long_long_float) =
  (standard__long_long_float___to___real(x) = standard__long_long_float___to___real(y))

logic standard__character___attr___ATTRIBUTE_MODULUS : int

predicate standard__character___in_range(x: int) = ((0 <= x) and (x <= 255))

logic standard__character___from___int : int -> standard__character

predicate standard__character___eq(x: standard__character,
  y: standard__character) =
  (standard__character___to___int(x) = standard__character___to___int(y))

logic standard__wide_character___attr___ATTRIBUTE_MODULUS : int

predicate standard__wide_character___in_range(x: int) = ((0 <= x) and
  (x <= 65535))

logic standard__wide_character___from___int : int -> standard__wide_character

predicate standard__wide_character___eq(x: standard__wide_character,
  y: standard__wide_character) =
  (standard__wide_character___to___int(x) = standard__wide_character___to___int(y))

logic standard__wide_wide_character___attr___ATTRIBUTE_MODULUS : int

predicate standard__wide_wide_character___in_range(x: int) = ((0 <= x) and
  (x <= 2147483647))

logic standard__wide_wide_character___from___int : int -> standard__wide_wide_character

predicate standard__wide_wide_character___eq(x: standard__wide_wide_character,
  y: standard__wide_wide_character) =
  (standard__wide_wide_character___to___int(x) = standard__wide_wide_character___to___int(y))

logic standard__duration___attr___ATTRIBUTE_MODULUS : real

predicate standard__duration___in_range(x: real) =
  (((-9223372036854775808.e-9) <= x) and (x <= 9223372036854775807.e-9))

logic standard__duration___from___real : real -> standard__duration

predicate standard__duration___eq(x: standard__duration,
  y: standard__duration) =
  (standard__duration___to___real(x) = standard__duration___to___real(y))

logic standard__integer_8___attr___ATTRIBUTE_MODULUS : int

predicate standard__integer_8___in_range(x: int) = (((-128) <= x) and
  (x <= 127))

logic standard__integer_8___from___int : int -> standard__integer_8

predicate standard__integer_8___eq(x: standard__integer_8,
  y: standard__integer_8) =
  (standard__integer_8___to___int(x) = standard__integer_8___to___int(y))

logic standard__integer_16___attr___ATTRIBUTE_MODULUS : int

predicate standard__integer_16___in_range(x: int) = (((-32768) <= x) and
  (x <= 32767))

logic standard__integer_16___from___int : int -> standard__integer_16

predicate standard__integer_16___eq(x: standard__integer_16,
  y: standard__integer_16) =
  (standard__integer_16___to___int(x) = standard__integer_16___to___int(y))

logic standard__integer_32___attr___ATTRIBUTE_MODULUS : int

predicate standard__integer_32___in_range(x: int) = (((-2147483648) <= x) and
  (x <= 2147483647))

logic standard__integer_32___from___int : int -> standard__integer_32

predicate standard__integer_32___eq(x: standard__integer_32,
  y: standard__integer_32) =
  (standard__integer_32___to___int(x) = standard__integer_32___to___int(y))

logic standard__integer_64___attr___ATTRIBUTE_MODULUS : int

predicate standard__integer_64___in_range(x: int) =
  (((-9223372036854775808) <= x) and (x <= 9223372036854775807))

logic standard__integer_64___from___int : int -> standard__integer_64

predicate standard__integer_64___eq(x: standard__integer_64,
  y: standard__integer_64) =
  (standard__integer_64___to___int(x) = standard__integer_64___to___int(y))

logic standard__universal_integer___attr___ATTRIBUTE_MODULUS : int

predicate standard__universal_integer___in_range(x: int) =
  (((-9223372036854775808) <= x) and (x <= 9223372036854775807))

logic standard__universal_integer___from___int : int -> standard__universal_integer

predicate standard__universal_integer___eq(x: standard__universal_integer,
  y: standard__universal_integer) =
  (standard__universal_integer___to___int(x) = standard__universal_integer___to___int(y))

logic standard__universal_real___attr___ATTRIBUTE_MODULUS : real

predicate standard__universal_real___in_range(x: real) =
  ((((-72057594037927928.0) * 138371247278342490393517441299901382656.0) <= x) and
  (x <= (72057594037927928.0 * 138371247278342490393517441299901382656.0)))

logic standard__universal_real___from___real : real -> standard__universal_real

predicate standard__universal_real___eq(x: standard__universal_real,
  y: standard__universal_real) =
  (standard__universal_real___to___real(x) = standard__universal_real___to___real(y))

logic ascii__nul : standard__character

logic ascii__soh : standard__character

logic ascii__stx : standard__character

logic ascii__etx : standard__character

logic ascii__eot : standard__character

logic ascii__enq : standard__character

logic ascii__ack : standard__character

logic ascii__bel : standard__character

logic ascii__bs : standard__character

logic ascii__ht : standard__character

logic ascii__lf : standard__character

logic ascii__vt : standard__character

logic ascii__ff : standard__character

logic ascii__cr : standard__character

logic ascii__so : standard__character

logic ascii__si : standard__character

logic ascii__dle : standard__character

logic ascii__dc1 : standard__character

logic ascii__dc2 : standard__character

logic ascii__dc3 : standard__character

logic ascii__dc4 : standard__character

logic ascii__nak : standard__character

logic ascii__syn : standard__character

logic ascii__etb : standard__character

logic ascii__can : standard__character

logic ascii__em : standard__character

logic ascii__sub : standard__character

logic ascii__esc : standard__character

logic ascii__fs : standard__character

logic ascii__gs : standard__character

logic ascii__rs : standard__character

logic ascii__us : standard__character

logic ascii__exclam : standard__character

logic ascii__quotation : standard__character

logic ascii__sharp : standard__character

logic ascii__dollar : standard__character

logic ascii__percent : standard__character

logic ascii__ampersand : standard__character

logic ascii__colon : standard__character

logic ascii__semicolon : standard__character

logic ascii__query : standard__character

logic ascii__at_sign : standard__character

logic ascii__l_bracket : standard__character

logic ascii__back_slash : standard__character

logic ascii__r_bracket : standard__character

logic ascii__circumflex : standard__character

logic ascii__underline : standard__character

logic ascii__grave : standard__character

logic ascii__lc_a : standard__character

logic ascii__lc_b : standard__character

logic ascii__lc_c : standard__character

logic ascii__lc_d : standard__character

logic ascii__lc_e : standard__character

logic ascii__lc_f : standard__character

logic ascii__lc_g : standard__character

logic ascii__lc_h : standard__character

logic ascii__lc_i : standard__character

logic ascii__lc_j : standard__character

logic ascii__lc_k : standard__character

logic ascii__lc_l : standard__character

logic ascii__lc_m : standard__character

logic ascii__lc_n : standard__character

logic ascii__lc_o : standard__character

logic ascii__lc_p : standard__character

logic ascii__lc_q : standard__character

logic ascii__lc_r : standard__character

logic ascii__lc_s : standard__character

logic ascii__lc_t : standard__character

logic ascii__lc_u : standard__character

logic ascii__lc_v : standard__character

logic ascii__lc_w : standard__character

logic ascii__lc_x : standard__character

logic ascii__lc_y : standard__character

logic ascii__lc_z : standard__character

logic ascii__l_brace : standard__character

logic ascii__bar : standard__character

logic ascii__r_brace : standard__character

logic ascii__tilde : standard__character

logic ascii__del : standard__character

axiom standard__short_short_integer___range :
  (forall x:standard__short_short_integer.
  standard__short_short_integer___in_range(standard__short_short_integer___to___int(x)))

axiom standard__short_short_integer___coerce :
  (forall x:int
  [standard__short_short_integer___to___int(standard__short_short_integer___from___int(x))|
  standard__short_short_integer___in_range(x),
  standard__short_short_integer___from___int(x)].
  (standard__short_short_integer___in_range(x) ->
  (standard__short_short_integer___to___int(standard__short_short_integer___from___int(x)) = x)))

axiom standard__short_short_integer___unicity :
  (forall x:standard__short_short_integer.
  forall y:standard__short_short_integer
  [standard__short_short_integer___to___int(x),
  standard__short_short_integer___to___int(y)].
  ((standard__short_short_integer___to___int(x) = standard__short_short_integer___to___int(y)) ->
  (x = y)))

axiom standard__short_integer___range :
  (forall x:standard__short_integer.
  standard__short_integer___in_range(standard__short_integer___to___int(x)))

axiom standard__short_integer___coerce :
  (forall x:int
  [standard__short_integer___to___int(standard__short_integer___from___int(x))|
  standard__short_integer___in_range(x),
  standard__short_integer___from___int(x)].
  (standard__short_integer___in_range(x) ->
  (standard__short_integer___to___int(standard__short_integer___from___int(x)) = x)))

axiom standard__short_integer___unicity :
  (forall x:standard__short_integer. forall y:standard__short_integer
  [standard__short_integer___to___int(x),
  standard__short_integer___to___int(y)].
  ((standard__short_integer___to___int(x) = standard__short_integer___to___int(y)) ->
  (x = y)))

axiom standard__integer___range :
  (forall x:standard__integer.
  standard__integer___in_range(standard__integer___to___int(x)))

axiom standard__integer___coerce :
  (forall x:int
  [standard__integer___to___int(standard__integer___from___int(x))|
  standard__integer___in_range(x), standard__integer___from___int(x)].
  (standard__integer___in_range(x) ->
  (standard__integer___to___int(standard__integer___from___int(x)) = x)))

axiom standard__integer___unicity :
  (forall x:standard__integer. forall y:standard__integer
  [standard__integer___to___int(x), standard__integer___to___int(y)].
  ((standard__integer___to___int(x) = standard__integer___to___int(y)) ->
  (x = y)))

axiom standard__long_integer___range :
  (forall x:standard__long_integer.
  standard__long_integer___in_range(standard__long_integer___to___int(x)))

axiom standard__long_integer___coerce :
  (forall x:int
  [standard__long_integer___to___int(standard__long_integer___from___int(x))|
  standard__long_integer___in_range(x),
  standard__long_integer___from___int(x)].
  (standard__long_integer___in_range(x) ->
  (standard__long_integer___to___int(standard__long_integer___from___int(x)) = x)))

axiom standard__long_integer___unicity :
  (forall x:standard__long_integer. forall y:standard__long_integer
  [standard__long_integer___to___int(x),
  standard__long_integer___to___int(y)].
  ((standard__long_integer___to___int(x) = standard__long_integer___to___int(y)) ->
  (x = y)))

axiom standard__long_long_integer___range :
  (forall x:standard__long_long_integer.
  standard__long_long_integer___in_range(standard__long_long_integer___to___int(x)))

axiom standard__long_long_integer___coerce :
  (forall x:int
  [standard__long_long_integer___to___int(standard__long_long_integer___from___int(x))|
  standard__long_long_integer___in_range(x),
  standard__long_long_integer___from___int(x)].
  (standard__long_long_integer___in_range(x) ->
  (standard__long_long_integer___to___int(standard__long_long_integer___from___int(x)) = x)))

axiom standard__long_long_integer___unicity :
  (forall x:standard__long_long_integer. forall y:standard__long_long_integer
  [standard__long_long_integer___to___int(x),
  standard__long_long_integer___to___int(y)].
  ((standard__long_long_integer___to___int(x) = standard__long_long_integer___to___int(y)) ->
  (x = y)))

axiom standard__natural___range :
  (forall x:standard__natural.
  standard__natural___in_range(standard__natural___to___int(x)))

axiom standard__natural___coerce :
  (forall x:int
  [standard__natural___to___int(standard__natural___from___int(x))|
  standard__natural___in_range(x), standard__natural___from___int(x)].
  (standard__natural___in_range(x) ->
  (standard__natural___to___int(standard__natural___from___int(x)) = x)))

axiom standard__natural___unicity :
  (forall x:standard__natural. forall y:standard__natural
  [standard__natural___to___int(x), standard__natural___to___int(y)].
  ((standard__natural___to___int(x) = standard__natural___to___int(y)) ->
  (x = y)))

axiom standard__positive___range :
  (forall x:standard__positive.
  standard__positive___in_range(standard__positive___to___int(x)))

axiom standard__positive___coerce :
  (forall x:int
  [standard__positive___to___int(standard__positive___from___int(x))|
  standard__positive___in_range(x), standard__positive___from___int(x)].
  (standard__positive___in_range(x) ->
  (standard__positive___to___int(standard__positive___from___int(x)) = x)))

axiom standard__positive___unicity :
  (forall x:standard__positive. forall y:standard__positive
  [standard__positive___to___int(x), standard__positive___to___int(y)].
  ((standard__positive___to___int(x) = standard__positive___to___int(y)) ->
  (x = y)))

axiom standard__short_float___range :
  (forall x:standard__short_float.
  standard__short_float___in_range(standard__short_float___to___real(x)))

axiom standard__short_float___coerce :
  (forall x:real
  [standard__short_float___to___real(standard__short_float___from___real(x))|
  standard__short_float___in_range(x),
  standard__short_float___from___real(x)].
  (standard__short_float___in_range(x) ->
  (standard__short_float___to___real(standard__short_float___from___real(x)) = x)))

axiom standard__short_float___unicity :
  (forall x:standard__short_float. forall y:standard__short_float
  [standard__short_float___to___real(x),
  standard__short_float___to___real(y)].
  ((standard__short_float___to___real(x) = standard__short_float___to___real(y)) ->
  (x = y)))

axiom standard__float___range :
  (forall x:standard__float.
  standard__float___in_range(standard__float___to___real(x)))

axiom standard__float___coerce :
  (forall x:real
  [standard__float___to___real(standard__float___from___real(x))|
  standard__float___in_range(x), standard__float___from___real(x)].
  (standard__float___in_range(x) ->
  (standard__float___to___real(standard__float___from___real(x)) = x)))

axiom standard__float___unicity :
  (forall x:standard__float. forall y:standard__float
  [standard__float___to___real(x), standard__float___to___real(y)].
  ((standard__float___to___real(x) = standard__float___to___real(y)) ->
  (x = y)))

axiom standard__long_float___range :
  (forall x:standard__long_float.
  standard__long_float___in_range(standard__long_float___to___real(x)))

axiom standard__long_float___coerce :
  (forall x:real
  [standard__long_float___to___real(standard__long_float___from___real(x))|
  standard__long_float___in_range(x), standard__long_float___from___real(x)].
  (standard__long_float___in_range(x) ->
  (standard__long_float___to___real(standard__long_float___from___real(x)) = x)))

axiom standard__long_float___unicity :
  (forall x:standard__long_float. forall y:standard__long_float
  [standard__long_float___to___real(x), standard__long_float___to___real(y)].
  ((standard__long_float___to___real(x) = standard__long_float___to___real(y)) ->
  (x = y)))

axiom standard__long_long_float___range :
  (forall x:standard__long_long_float.
  standard__long_long_float___in_range(standard__long_long_float___to___real(x)))

axiom standard__long_long_float___coerce :
  (forall x:real
  [standard__long_long_float___to___real(standard__long_long_float___from___real(x))|
  standard__long_long_float___in_range(x),
  standard__long_long_float___from___real(x)].
  (standard__long_long_float___in_range(x) ->
  (standard__long_long_float___to___real(standard__long_long_float___from___real(x)) = x)))

axiom standard__long_long_float___unicity :
  (forall x:standard__long_long_float. forall y:standard__long_long_float
  [standard__long_long_float___to___real(x),
  standard__long_long_float___to___real(y)].
  ((standard__long_long_float___to___real(x) = standard__long_long_float___to___real(y)) ->
  (x = y)))

axiom standard__character___range :
  (forall x:standard__character.
  standard__character___in_range(standard__character___to___int(x)))

axiom standard__character___coerce :
  (forall x:int
  [standard__character___to___int(standard__character___from___int(x))|
  standard__character___in_range(x), standard__character___from___int(x)].
  (standard__character___in_range(x) ->
  (standard__character___to___int(standard__character___from___int(x)) = x)))

axiom standard__character___unicity :
  (forall x:standard__character. forall y:standard__character
  [standard__character___to___int(x), standard__character___to___int(y)].
  ((standard__character___to___int(x) = standard__character___to___int(y)) ->
  (x = y)))

axiom standard__wide_character___range :
  (forall x:standard__wide_character.
  standard__wide_character___in_range(standard__wide_character___to___int(x)))

axiom standard__wide_character___coerce :
  (forall x:int
  [standard__wide_character___to___int(standard__wide_character___from___int(x))|
  standard__wide_character___in_range(x),
  standard__wide_character___from___int(x)].
  (standard__wide_character___in_range(x) ->
  (standard__wide_character___to___int(standard__wide_character___from___int(x)) = x)))

axiom standard__wide_character___unicity :
  (forall x:standard__wide_character. forall y:standard__wide_character
  [standard__wide_character___to___int(x),
  standard__wide_character___to___int(y)].
  ((standard__wide_character___to___int(x) = standard__wide_character___to___int(y)) ->
  (x = y)))

axiom standard__wide_wide_character___range :
  (forall x:standard__wide_wide_character.
  standard__wide_wide_character___in_range(standard__wide_wide_character___to___int(x)))

axiom standard__wide_wide_character___coerce :
  (forall x:int
  [standard__wide_wide_character___to___int(standard__wide_wide_character___from___int(x))|
  standard__wide_wide_character___in_range(x),
  standard__wide_wide_character___from___int(x)].
  (standard__wide_wide_character___in_range(x) ->
  (standard__wide_wide_character___to___int(standard__wide_wide_character___from___int(x)) = x)))

axiom standard__wide_wide_character___unicity :
  (forall x:standard__wide_wide_character.
  forall y:standard__wide_wide_character
  [standard__wide_wide_character___to___int(x),
  standard__wide_wide_character___to___int(y)].
  ((standard__wide_wide_character___to___int(x) = standard__wide_wide_character___to___int(y)) ->
  (x = y)))

axiom standard__string___coerce :
  (forall x:standard__character t__ada_array
  [standard__string___to___t__ada_array(standard__string___from___t__ada_array(x))].
  (standard__string___to___t__ada_array(standard__string___from___t__ada_array(x)) = x))

axiom standard__string___unicity :
  (forall x:standard__character t__ada_array.
  forall y:standard__character t__ada_array
  [standard__string___from___t__ada_array(x),
  standard__string___from___t__ada_array(y)].
  ((standard__string___from___t__ada_array(x) = standard__string___from___t__ada_array(y)) ->
  (x = y)))

axiom standard__string__index_in_range :
  (forall x:standard__string.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(standard__string___to___t__ada_array(x)) <= t__ada_array___attr___ATTRIBUTE_LAST(standard__string___to___t__ada_array(x))) ->
  standard__positive___in_range(t__ada_array___attr___ATTRIBUTE_FIRST(standard__string___to___t__ada_array(x)))))

axiom standard__string__index_in_range1 :
  (forall x:standard__string.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(standard__string___to___t__ada_array(x)) <= t__ada_array___attr___ATTRIBUTE_LAST(standard__string___to___t__ada_array(x))) ->
  standard__positive___in_range(t__ada_array___attr___ATTRIBUTE_LAST(standard__string___to___t__ada_array(x)))))

axiom standard__wide_string___coerce :
  (forall x:standard__wide_character t__ada_array
  [standard__wide_string___to___t__ada_array(standard__wide_string___from___t__ada_array(x))].
  (standard__wide_string___to___t__ada_array(standard__wide_string___from___t__ada_array(x)) = x))

axiom standard__wide_string___unicity :
  (forall x:standard__wide_character t__ada_array.
  forall y:standard__wide_character t__ada_array
  [standard__wide_string___from___t__ada_array(x),
  standard__wide_string___from___t__ada_array(y)].
  ((standard__wide_string___from___t__ada_array(x) = standard__wide_string___from___t__ada_array(y)) ->
  (x = y)))

axiom standard__wide_string__index_in_range :
  (forall x:standard__wide_string.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(standard__wide_string___to___t__ada_array(x)) <= t__ada_array___attr___ATTRIBUTE_LAST(standard__wide_string___to___t__ada_array(x))) ->
  standard__positive___in_range(t__ada_array___attr___ATTRIBUTE_FIRST(standard__wide_string___to___t__ada_array(x)))))

axiom standard__wide_string__index_in_range1 :
  (forall x:standard__wide_string.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(standard__wide_string___to___t__ada_array(x)) <= t__ada_array___attr___ATTRIBUTE_LAST(standard__wide_string___to___t__ada_array(x))) ->
  standard__positive___in_range(t__ada_array___attr___ATTRIBUTE_LAST(standard__wide_string___to___t__ada_array(x)))))

axiom standard__wide_wide_string___coerce :
  (forall x:standard__wide_wide_character t__ada_array
  [standard__wide_wide_string___to___t__ada_array(standard__wide_wide_string___from___t__ada_array(x))].
  (standard__wide_wide_string___to___t__ada_array(standard__wide_wide_string___from___t__ada_array(x)) = x))

axiom standard__wide_wide_string___unicity :
  (forall x:standard__wide_wide_character t__ada_array.
  forall y:standard__wide_wide_character t__ada_array
  [standard__wide_wide_string___from___t__ada_array(x),
  standard__wide_wide_string___from___t__ada_array(y)].
  ((standard__wide_wide_string___from___t__ada_array(x) = standard__wide_wide_string___from___t__ada_array(y)) ->
  (x = y)))

axiom standard__wide_wide_string__index_in_range :
  (forall x:standard__wide_wide_string.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(standard__wide_wide_string___to___t__ada_array(x)) <= t__ada_array___attr___ATTRIBUTE_LAST(standard__wide_wide_string___to___t__ada_array(x))) ->
  standard__positive___in_range(t__ada_array___attr___ATTRIBUTE_FIRST(standard__wide_wide_string___to___t__ada_array(x)))))

axiom standard__wide_wide_string__index_in_range1 :
  (forall x:standard__wide_wide_string.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(standard__wide_wide_string___to___t__ada_array(x)) <= t__ada_array___attr___ATTRIBUTE_LAST(standard__wide_wide_string___to___t__ada_array(x))) ->
  standard__positive___in_range(t__ada_array___attr___ATTRIBUTE_LAST(standard__wide_wide_string___to___t__ada_array(x)))))

axiom standard__duration___range :
  (forall x:standard__duration.
  standard__duration___in_range(standard__duration___to___real(x)))

axiom standard__duration___coerce :
  (forall x:real
  [standard__duration___to___real(standard__duration___from___real(x))|
  standard__duration___in_range(x), standard__duration___from___real(x)].
  (standard__duration___in_range(x) ->
  (standard__duration___to___real(standard__duration___from___real(x)) = x)))

axiom standard__duration___unicity :
  (forall x:standard__duration. forall y:standard__duration
  [standard__duration___to___real(x), standard__duration___to___real(y)].
  ((standard__duration___to___real(x) = standard__duration___to___real(y)) ->
  (x = y)))

axiom standard__integer_8___range :
  (forall x:standard__integer_8.
  standard__integer_8___in_range(standard__integer_8___to___int(x)))

axiom standard__integer_8___coerce :
  (forall x:int
  [standard__integer_8___to___int(standard__integer_8___from___int(x))|
  standard__integer_8___in_range(x), standard__integer_8___from___int(x)].
  (standard__integer_8___in_range(x) ->
  (standard__integer_8___to___int(standard__integer_8___from___int(x)) = x)))

axiom standard__integer_8___unicity :
  (forall x:standard__integer_8. forall y:standard__integer_8
  [standard__integer_8___to___int(x), standard__integer_8___to___int(y)].
  ((standard__integer_8___to___int(x) = standard__integer_8___to___int(y)) ->
  (x = y)))

axiom standard__integer_16___range :
  (forall x:standard__integer_16.
  standard__integer_16___in_range(standard__integer_16___to___int(x)))

axiom standard__integer_16___coerce :
  (forall x:int
  [standard__integer_16___to___int(standard__integer_16___from___int(x))|
  standard__integer_16___in_range(x), standard__integer_16___from___int(x)].
  (standard__integer_16___in_range(x) ->
  (standard__integer_16___to___int(standard__integer_16___from___int(x)) = x)))

axiom standard__integer_16___unicity :
  (forall x:standard__integer_16. forall y:standard__integer_16
  [standard__integer_16___to___int(x), standard__integer_16___to___int(y)].
  ((standard__integer_16___to___int(x) = standard__integer_16___to___int(y)) ->
  (x = y)))

axiom standard__integer_32___range :
  (forall x:standard__integer_32.
  standard__integer_32___in_range(standard__integer_32___to___int(x)))

axiom standard__integer_32___coerce :
  (forall x:int
  [standard__integer_32___to___int(standard__integer_32___from___int(x))|
  standard__integer_32___in_range(x), standard__integer_32___from___int(x)].
  (standard__integer_32___in_range(x) ->
  (standard__integer_32___to___int(standard__integer_32___from___int(x)) = x)))

axiom standard__integer_32___unicity :
  (forall x:standard__integer_32. forall y:standard__integer_32
  [standard__integer_32___to___int(x), standard__integer_32___to___int(y)].
  ((standard__integer_32___to___int(x) = standard__integer_32___to___int(y)) ->
  (x = y)))

axiom standard__integer_64___range :
  (forall x:standard__integer_64.
  standard__integer_64___in_range(standard__integer_64___to___int(x)))

axiom standard__integer_64___coerce :
  (forall x:int
  [standard__integer_64___to___int(standard__integer_64___from___int(x))|
  standard__integer_64___in_range(x), standard__integer_64___from___int(x)].
  (standard__integer_64___in_range(x) ->
  (standard__integer_64___to___int(standard__integer_64___from___int(x)) = x)))

axiom standard__integer_64___unicity :
  (forall x:standard__integer_64. forall y:standard__integer_64
  [standard__integer_64___to___int(x), standard__integer_64___to___int(y)].
  ((standard__integer_64___to___int(x) = standard__integer_64___to___int(y)) ->
  (x = y)))

axiom standard__universal_integer___range :
  (forall x:standard__universal_integer.
  standard__universal_integer___in_range(standard__universal_integer___to___int(x)))

axiom standard__universal_integer___coerce :
  (forall x:int
  [standard__universal_integer___to___int(standard__universal_integer___from___int(x))|
  standard__universal_integer___in_range(x),
  standard__universal_integer___from___int(x)].
  (standard__universal_integer___in_range(x) ->
  (standard__universal_integer___to___int(standard__universal_integer___from___int(x)) = x)))

axiom standard__universal_integer___unicity :
  (forall x:standard__universal_integer. forall y:standard__universal_integer
  [standard__universal_integer___to___int(x),
  standard__universal_integer___to___int(y)].
  ((standard__universal_integer___to___int(x) = standard__universal_integer___to___int(y)) ->
  (x = y)))

axiom standard__universal_real___range :
  (forall x:standard__universal_real.
  standard__universal_real___in_range(standard__universal_real___to___real(x)))

axiom standard__universal_real___coerce :
  (forall x:real
  [standard__universal_real___to___real(standard__universal_real___from___real(x))|
  standard__universal_real___in_range(x),
  standard__universal_real___from___real(x)].
  (standard__universal_real___in_range(x) ->
  (standard__universal_real___to___real(standard__universal_real___from___real(x)) = x)))

axiom standard__universal_real___unicity :
  (forall x:standard__universal_real. forall y:standard__universal_real
  [standard__universal_real___to___real(x),
  standard__universal_real___to___real(y)].
  ((standard__universal_real___to___real(x) = standard__universal_real___to___real(y)) ->
  (x = y)))

type identity__name_len

logic identity__name_len___to___int : identity__name_len -> int

type identity__name

logic identity__name___to___t__ada_array : identity__name -> standard__character t__ada_array

logic identity__name___from___t__ada_array : standard__character t__ada_array -> identity__name

type identity__T1s

logic identity__T1s___to___int : identity__T1s -> int

type identity__T2s

logic identity__T2s___to___t__ada_array : identity__T2s -> standard__character t__ada_array

logic identity__T2s___from___t__ada_array : standard__character t__ada_array -> identity__T2s

type identity__TnumB

logic identity__TnumB___to___int : identity__TnumB -> int

type identity__num

logic identity__num___to___int : identity__num -> int

type identity__num_position

logic identity__num_position___to___int : identity__num_position -> int

type identity__TidB

logic identity__TidB___to___t__ada_array : identity__TidB -> identity__num t__ada_array

logic identity__TidB___from___t__ada_array : identity__num t__ada_array -> identity__TidB

type identity__id

logic identity__id___to___t__ada_array : identity__id -> identity__num t__ada_array

logic identity__id___from___t__ada_array : identity__num t__ada_array -> identity__id

type identity__T5s

logic identity__T5s___to___int : identity__T5s -> int

type identity__T6s

logic identity__T6s___to___t__ada_array : identity__T6s -> identity__num t__ada_array

logic identity__T6s___from___t__ada_array : identity__num t__ada_array -> identity__T6s

type ustype_of____identity__no_name

type ustype_of____identity__no_id

type money__cur

logic money__cur___to___int : money__cur -> int

type money__Traw_amount_baseB

logic money__Traw_amount_baseB___to___int : money__Traw_amount_baseB -> int

type money__raw_amount_base

logic money__raw_amount_base___to___int : money__raw_amount_base -> int

type money__Traw_amountB

logic money__Traw_amountB___to___int : money__Traw_amountB -> int

type money__raw_amount

logic money__raw_amount___to___int : money__raw_amount -> int

type money__amount

logic mk_money__amount : money__cur, money__raw_amount -> money__amount

logic mk_money__amount_proj_1 : money__amount -> money__cur

axiom mk_money__amount_proj_1_def :
  (forall u:money__cur. forall u1:money__raw_amount.
  (mk_money__amount_proj_1(mk_money__amount(u, u1)) = u))

logic mk_money__amount_proj_2 : money__amount -> money__raw_amount

axiom mk_money__amount_proj_2_def :
  (forall u:money__cur. forall u1:money__raw_amount.
  (mk_money__amount_proj_2(mk_money__amount(u, u1)) = u1))

axiom money__amount_inversion :
  (forall u:money__amount. (u = mk_money__amount(mk_money__amount_proj_1(u),
  mk_money__amount_proj_2(u))))

function money__amount__currency(u: money__amount) : money__cur =
  mk_money__amount_proj_1(u)

function money__amount__raw(u: money__amount) : money__raw_amount =
  mk_money__amount_proj_2(u)

logic bool_money__amount__eq : money__amount, money__amount -> bool

axiom bool_money__amount__eq_def :
  (forall x:money__amount. forall y:money__amount. ((x = y) ->
  (bool_money__amount__eq(x, y) = true)))

axiom bool_money__amount__eq_def1 :
  (forall x:money__amount. forall y:money__amount. ((not (x = y)) ->
  (bool_money__amount__eq(x, y) = false)))

type ustype_of____money__no_amount

type ustype_of____money__is_empty__a

type ustype_of____money__Oadd__a

type ustype_of____money__Oadd__b

type ustype_of____money__Osubtract__a

type ustype_of____money__Osubtract__b

type database__Text_account_numB

logic database__Text_account_numB___to___int : database__Text_account_numB -> int

type database__ext_account_num

logic database__ext_account_num___to___int : database__ext_account_num -> int

type database__account_num

logic database__account_num___to___int : database__account_num -> int

type ustype_of____database__max_account_num

type ustype_of____database__no_account_num

type ustype_of____database__existing__account

type ustype_of____database__belongs_to__account

type ustype_of____database__belongs_to__customer

type ustype_of____database__belongs_to__id

type ustype_of____database__currency__account

type ustype_of____database__balance__account

type ustype_of____database__open__customer

type ustype_of____database__open__id

type ustype_of____database__open__cur

type ustype_of____database__open__account

type ustype_of____database__close__customer

type ustype_of____database__close__id

type ustype_of____database__close__account

type ustype_of____database__deposit__account

type ustype_of____database__deposit__sum

type ustype_of____database__withdraw__account

type ustype_of____database__withdraw__sum

logic database__open__account : database__account_num ref

type database__availability__account_linkX

logic mk_database__availability__account_linkX : bool,
  database__ext_account_num,
  database__ext_account_num -> database__availability__account_linkX

logic mk_database__availability__account_linkX_proj_1 : database__availability__account_linkX -> bool

axiom mk_database__availability__account_linkX_proj_1_def :
  (forall u:bool. forall u1:database__ext_account_num.
  forall u2:database__ext_account_num.
  (mk_database__availability__account_linkX_proj_1(mk_database__availability__account_linkX(u,
  u1, u2)) = u))

logic mk_database__availability__account_linkX_proj_2 : database__availability__account_linkX -> database__ext_account_num

axiom mk_database__availability__account_linkX_proj_2_def :
  (forall u:bool. forall u1:database__ext_account_num.
  forall u2:database__ext_account_num.
  (mk_database__availability__account_linkX_proj_2(mk_database__availability__account_linkX(u,
  u1, u2)) = u1))

logic mk_database__availability__account_linkX_proj_3 : database__availability__account_linkX -> database__ext_account_num

axiom mk_database__availability__account_linkX_proj_3_def :
  (forall u:bool. forall u1:database__ext_account_num.
  forall u2:database__ext_account_num.
  (mk_database__availability__account_linkX_proj_3(mk_database__availability__account_linkX(u,
  u1, u2)) = u2))

axiom database__availability__account_linkX_inversion :
  (forall u:database__availability__account_linkX.
  (u = mk_database__availability__account_linkX(mk_database__availability__account_linkX_proj_1(u),
  mk_database__availability__account_linkX_proj_2(u),
  mk_database__availability__account_linkX_proj_3(u))))

function database__availability__account_linkX__available(u: database__availability__account_linkX) : bool =
  mk_database__availability__account_linkX_proj_1(u)

function database__availability__account_linkX__next(u: database__availability__account_linkX) : database__ext_account_num =
  mk_database__availability__account_linkX_proj_3(u)

function database__availability__account_linkX__prev(u: database__availability__account_linkX) : database__ext_account_num =
  mk_database__availability__account_linkX_proj_2(u)

logic bool_database__availability__account_linkX__eq : database__availability__account_linkX,
  database__availability__account_linkX -> bool

axiom bool_database__availability__account_linkX__eq_def :
  (forall x:database__availability__account_linkX.
  forall y:database__availability__account_linkX. ((x = y) ->
  (bool_database__availability__account_linkX__eq(x, y) = true)))

axiom bool_database__availability__account_linkX__eq_def1 :
  (forall x:database__availability__account_linkX.
  forall y:database__availability__account_linkX. ((not (x = y)) ->
  (bool_database__availability__account_linkX__eq(x, y) = false)))

type database__availability__Taccount_link_dataBX

logic database__availability__Taccount_link_dataBX___to___t__ada_array : database__availability__Taccount_link_dataBX -> database__availability__account_linkX t__ada_array

logic database__availability__Taccount_link_dataBX___from___t__ada_array : database__availability__account_linkX t__ada_array -> database__availability__Taccount_link_dataBX

type database__availability__account_link_dataX

logic database__availability__account_link_dataX___to___t__ada_array : database__availability__account_link_dataX -> database__availability__account_linkX t__ada_array

logic database__availability__account_link_dataX___from___t__ada_array : database__availability__account_linkX t__ada_array -> database__availability__account_link_dataX

type database__availability__T3bX

logic database__availability__T3bX___to___int : database__availability__T3bX -> int

type database__availability__T4bX

logic database__availability__T4bX___to___t__ada_array : database__availability__T4bX -> database__availability__account_linkX t__ada_array

logic database__availability__T4bX___from___t__ada_array : database__availability__account_linkX t__ada_array -> database__availability__T4bX

type database__account_rec

logic mk_database__account_rec : identity__name, identity__id,
  database__ext_account_num -> database__account_rec

logic mk_database__account_rec_proj_1 : database__account_rec -> identity__name

axiom mk_database__account_rec_proj_1_def :
  (forall u:identity__name. forall u1:identity__id.
  forall u2:database__ext_account_num.
  (mk_database__account_rec_proj_1(mk_database__account_rec(u, u1, u2)) = u))

logic mk_database__account_rec_proj_2 : database__account_rec -> identity__id

axiom mk_database__account_rec_proj_2_def :
  (forall u:identity__name. forall u1:identity__id.
  forall u2:database__ext_account_num.
  (mk_database__account_rec_proj_2(mk_database__account_rec(u, u1,
  u2)) = u1))

logic mk_database__account_rec_proj_3 : database__account_rec -> database__ext_account_num

axiom mk_database__account_rec_proj_3_def :
  (forall u:identity__name. forall u1:identity__id.
  forall u2:database__ext_account_num.
  (mk_database__account_rec_proj_3(mk_database__account_rec(u, u1,
  u2)) = u2))

axiom database__account_rec_inversion :
  (forall u:database__account_rec.
  (u = mk_database__account_rec(mk_database__account_rec_proj_1(u),
  mk_database__account_rec_proj_2(u), mk_database__account_rec_proj_3(u))))

function database__account_rec__account(u: database__account_rec) : database__ext_account_num =
  mk_database__account_rec_proj_3(u)

function database__account_rec__owner_id(u: database__account_rec) : identity__id =
  mk_database__account_rec_proj_2(u)

function database__account_rec__owner_name(u: database__account_rec) : identity__name =
  mk_database__account_rec_proj_1(u)

logic bool_database__account_rec__eq : database__account_rec,
  database__account_rec -> bool

axiom bool_database__account_rec__eq_def :
  (forall x:database__account_rec. forall y:database__account_rec.
  ((x = y) -> (bool_database__account_rec__eq(x, y) = true)))

axiom bool_database__account_rec__eq_def1 :
  (forall x:database__account_rec. forall y:database__account_rec.
  ((not (x = y)) -> (bool_database__account_rec__eq(x, y) = false)))

type database__account_balance

logic mk_database__account_balance : money__amount,
  database__ext_account_num -> database__account_balance

logic mk_database__account_balance_proj_1 : database__account_balance -> money__amount

axiom mk_database__account_balance_proj_1_def :
  (forall u:money__amount. forall u1:database__ext_account_num.
  (mk_database__account_balance_proj_1(mk_database__account_balance(u,
  u1)) = u))

logic mk_database__account_balance_proj_2 : database__account_balance -> database__ext_account_num

axiom mk_database__account_balance_proj_2_def :
  (forall u:money__amount. forall u1:database__ext_account_num.
  (mk_database__account_balance_proj_2(mk_database__account_balance(u,
  u1)) = u1))

axiom database__account_balance_inversion :
  (forall u:database__account_balance.
  (u = mk_database__account_balance(mk_database__account_balance_proj_1(u),
  mk_database__account_balance_proj_2(u))))

function database__account_balance__account(u: database__account_balance) : database__ext_account_num =
  mk_database__account_balance_proj_2(u)

function database__account_balance__value(u: database__account_balance) : money__amount =
  mk_database__account_balance_proj_1(u)

logic bool_database__account_balance__eq : database__account_balance,
  database__account_balance -> bool

axiom bool_database__account_balance__eq_def :
  (forall x:database__account_balance. forall y:database__account_balance.
  ((x = y) -> (bool_database__account_balance__eq(x, y) = true)))

axiom bool_database__account_balance__eq_def1 :
  (forall x:database__account_balance. forall y:database__account_balance.
  ((not (x = y)) -> (bool_database__account_balance__eq(x, y) = false)))

type database__Taccount_dataB

logic database__Taccount_dataB___to___t__ada_array : database__Taccount_dataB -> database__account_rec t__ada_array

logic database__Taccount_dataB___from___t__ada_array : database__account_rec t__ada_array -> database__Taccount_dataB

type database__account_data

logic database__account_data___to___t__ada_array : database__account_data -> database__account_rec t__ada_array

logic database__account_data___from___t__ada_array : database__account_rec t__ada_array -> database__account_data

type database__Taccount_balance_dataB

logic database__Taccount_balance_dataB___to___t__ada_array : database__Taccount_balance_dataB -> database__account_balance t__ada_array

logic database__Taccount_balance_dataB___from___t__ada_array : database__account_balance t__ada_array -> database__Taccount_balance_dataB

type database__account_balance_data

logic database__account_balance_data___to___t__ada_array : database__account_balance_data -> database__account_balance t__ada_array

logic database__account_balance_data___from___t__ada_array : database__account_balance t__ada_array -> database__account_balance_data

type database__T19b

logic database__T19b___to___int : database__T19b -> int

type database__T20b

logic database__T20b___to___t__ada_array : database__T20b -> database__account_rec t__ada_array

logic database__T20b___from___t__ada_array : database__account_rec t__ada_array -> database__T20b

type database__T21b

logic database__T21b___to___int : database__T21b -> int

type database__T22b

logic database__T22b___to___t__ada_array : database__T22b -> database__account_balance t__ada_array

logic database__T22b___from___t__ada_array : database__account_balance t__ada_array -> database__T22b

type ustype_of____database__availability__no_account_linkX

type ustype_of____database__availability__linksX

type ustype_of____database__availability__first_availableX

type ustype_of____database__availability__is_availableX__account

type ustype_of____database__availability__reserve_first_availableX__account

type ustype_of____database__availability__make_availableX__account

type ustype_of____database__no_account_rec

type ustype_of____database__no_account_balance

type ustype_of____database__accounts

type ustype_of____database__accounts_balance

type ustype_of____database__availability__num_availableX__count

type ustype_of____database__availability__initialize_linksX__tmp_prev

type ustype_of____database__availability__initialize_linksX__tmp_next

logic database__availability__linksX : database__availability__account_link_dataX ref

logic database__availability__first_availableX : database__ext_account_num ref

logic database__availability__reserve_first_availableX__account : database__account_num ref

logic database__accounts : database__account_data ref

logic database__accounts_balance : database__account_balance_data ref

logic database__availability__num_availableX__count : database__ext_account_num ref

logic database__availability__initialize_linksX__tmp_prev : database__ext_account_num ref

logic database__availability__initialize_linksX__tmp_next : database__ext_account_num ref

logic identity__name_len___attr___ATTRIBUTE_MODULUS : int

predicate identity__name_len___in_range(x: int) = ((1 <= x) and (x <= 255))

logic identity__name_len___from___int : int -> identity__name_len

predicate identity__name_len___eq(x: identity__name_len,
  y: identity__name_len) =
  (identity__name_len___to___int(x) = identity__name_len___to___int(y))

logic identity__T1s___attr___ATTRIBUTE_MODULUS : int

predicate identity__T1s___in_range(x: int) = ((1 <= x) and (x <= 255))

logic identity__T1s___from___int : int -> identity__T1s

predicate identity__T1s___eq(x: identity__T1s, y: identity__T1s) =
  (identity__T1s___to___int(x) = identity__T1s___to___int(y))

logic identity__TnumB___attr___ATTRIBUTE_MODULUS : int

predicate identity__TnumB___in_range(x: int) = (((-32768) <= x) and
  (x <= 32767))

logic identity__TnumB___from___int : int -> identity__TnumB

predicate identity__TnumB___eq(x: identity__TnumB, y: identity__TnumB) =
  (identity__TnumB___to___int(x) = identity__TnumB___to___int(y))

logic identity__num___attr___ATTRIBUTE_MODULUS : int

predicate identity__num___in_range(x: int) = ((0 <= x) and (x <= 999))

logic identity__num___from___int : int -> identity__num

predicate identity__num___eq(x: identity__num, y: identity__num) =
  (identity__num___to___int(x) = identity__num___to___int(y))

logic identity__num_position___attr___ATTRIBUTE_MODULUS : int

predicate identity__num_position___in_range(x: int) = ((0 <= x) and (x <= 2))

logic identity__num_position___from___int : int -> identity__num_position

predicate identity__num_position___eq(x: identity__num_position,
  y: identity__num_position) =
  (identity__num_position___to___int(x) = identity__num_position___to___int(y))

logic identity__T5s___attr___ATTRIBUTE_MODULUS : int

predicate identity__T5s___in_range(x: int) = ((0 <= x) and (x <= 2))

logic identity__T5s___from___int : int -> identity__T5s

predicate identity__T5s___eq(x: identity__T5s, y: identity__T5s) =
  (identity__T5s___to___int(x) = identity__T5s___to___int(y))

logic ustemp_identity_1 : unit -> identity__T2s

logic identity__no_name : identity__name

logic ustemp_identity_5 : unit -> identity__T6s

logic identity__no_id : identity__id

axiom identity__name_len___range :
  (forall x:identity__name_len.
  identity__name_len___in_range(identity__name_len___to___int(x)))

axiom identity__name_len___coerce :
  (forall x:int
  [identity__name_len___to___int(identity__name_len___from___int(x))|
  identity__name_len___in_range(x), identity__name_len___from___int(x)].
  (identity__name_len___in_range(x) ->
  (identity__name_len___to___int(identity__name_len___from___int(x)) = x)))

axiom identity__name_len___unicity :
  (forall x:identity__name_len. forall y:identity__name_len
  [identity__name_len___to___int(x), identity__name_len___to___int(y)].
  ((identity__name_len___to___int(x) = identity__name_len___to___int(y)) ->
  (x = y)))

axiom identity__name___coerce :
  (forall x:standard__character t__ada_array
  [identity__name___to___t__ada_array(identity__name___from___t__ada_array(x))].
  (identity__name___to___t__ada_array(identity__name___from___t__ada_array(x)) = x))

axiom identity__name___unicity :
  (forall x:standard__character t__ada_array.
  forall y:standard__character t__ada_array
  [identity__name___from___t__ada_array(x),
  identity__name___from___t__ada_array(y)].
  ((identity__name___from___t__ada_array(x) = identity__name___from___t__ada_array(y)) ->
  (x = y)))

axiom identity__name___static_first :
  (forall a:identity__name.
  (t__ada_array___attr___ATTRIBUTE_FIRST(identity__name___to___t__ada_array(a)) = 1))

axiom identity__name___static_last :
  (forall a:identity__name.
  (t__ada_array___attr___ATTRIBUTE_LAST(identity__name___to___t__ada_array(a)) = 255))

axiom identity__T1s___range :
  (forall x:identity__T1s.
  identity__T1s___in_range(identity__T1s___to___int(x)))

axiom identity__T1s___coerce :
  (forall x:int [identity__T1s___to___int(identity__T1s___from___int(x))|
  identity__T1s___in_range(x), identity__T1s___from___int(x)].
  (identity__T1s___in_range(x) ->
  (identity__T1s___to___int(identity__T1s___from___int(x)) = x)))

axiom identity__T1s___unicity :
  (forall x:identity__T1s. forall y:identity__T1s
  [identity__T1s___to___int(x), identity__T1s___to___int(y)].
  ((identity__T1s___to___int(x) = identity__T1s___to___int(y)) -> (x = y)))

axiom identity__T2s___coerce :
  (forall x:standard__character t__ada_array
  [identity__T2s___to___t__ada_array(identity__T2s___from___t__ada_array(x))].
  (identity__T2s___to___t__ada_array(identity__T2s___from___t__ada_array(x)) = x))

axiom identity__T2s___unicity :
  (forall x:standard__character t__ada_array.
  forall y:standard__character t__ada_array
  [identity__T2s___from___t__ada_array(x),
  identity__T2s___from___t__ada_array(y)].
  ((identity__T2s___from___t__ada_array(x) = identity__T2s___from___t__ada_array(y)) ->
  (x = y)))

axiom identity__T2s___static_first :
  (forall a:identity__T2s.
  (t__ada_array___attr___ATTRIBUTE_FIRST(identity__T2s___to___t__ada_array(a)) = 1))

axiom identity__T2s___static_last :
  (forall a:identity__T2s.
  (t__ada_array___attr___ATTRIBUTE_LAST(identity__T2s___to___t__ada_array(a)) = 255))

axiom identity__TnumB___range :
  (forall x:identity__TnumB.
  identity__TnumB___in_range(identity__TnumB___to___int(x)))

axiom identity__TnumB___coerce :
  (forall x:int [identity__TnumB___to___int(identity__TnumB___from___int(x))|
  identity__TnumB___in_range(x), identity__TnumB___from___int(x)].
  (identity__TnumB___in_range(x) ->
  (identity__TnumB___to___int(identity__TnumB___from___int(x)) = x)))

axiom identity__TnumB___unicity :
  (forall x:identity__TnumB. forall y:identity__TnumB
  [identity__TnumB___to___int(x), identity__TnumB___to___int(y)].
  ((identity__TnumB___to___int(x) = identity__TnumB___to___int(y)) ->
  (x = y)))

axiom identity__num___range :
  (forall x:identity__num.
  identity__num___in_range(identity__num___to___int(x)))

axiom identity__num___coerce :
  (forall x:int [identity__num___to___int(identity__num___from___int(x))|
  identity__num___in_range(x), identity__num___from___int(x)].
  (identity__num___in_range(x) ->
  (identity__num___to___int(identity__num___from___int(x)) = x)))

axiom identity__num___unicity :
  (forall x:identity__num. forall y:identity__num
  [identity__num___to___int(x), identity__num___to___int(y)].
  ((identity__num___to___int(x) = identity__num___to___int(y)) -> (x = y)))

axiom identity__num_position___range :
  (forall x:identity__num_position.
  identity__num_position___in_range(identity__num_position___to___int(x)))

axiom identity__num_position___coerce :
  (forall x:int
  [identity__num_position___to___int(identity__num_position___from___int(x))|
  identity__num_position___in_range(x),
  identity__num_position___from___int(x)].
  (identity__num_position___in_range(x) ->
  (identity__num_position___to___int(identity__num_position___from___int(x)) = x)))

axiom identity__num_position___unicity :
  (forall x:identity__num_position. forall y:identity__num_position
  [identity__num_position___to___int(x),
  identity__num_position___to___int(y)].
  ((identity__num_position___to___int(x) = identity__num_position___to___int(y)) ->
  (x = y)))

axiom identity__TidB___coerce :
  (forall x:identity__num t__ada_array
  [identity__TidB___to___t__ada_array(identity__TidB___from___t__ada_array(x))].
  (identity__TidB___to___t__ada_array(identity__TidB___from___t__ada_array(x)) = x))

axiom identity__TidB___unicity :
  (forall x:identity__num t__ada_array. forall y:identity__num t__ada_array
  [identity__TidB___from___t__ada_array(x),
  identity__TidB___from___t__ada_array(y)].
  ((identity__TidB___from___t__ada_array(x) = identity__TidB___from___t__ada_array(y)) ->
  (x = y)))

axiom identity__TidB__index_in_range :
  (forall x:identity__TidB.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(identity__TidB___to___t__ada_array(x)) <= t__ada_array___attr___ATTRIBUTE_LAST(identity__TidB___to___t__ada_array(x))) ->
  identity__num_position___in_range(t__ada_array___attr___ATTRIBUTE_FIRST(identity__TidB___to___t__ada_array(x)))))

axiom identity__TidB__index_in_range1 :
  (forall x:identity__TidB.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(identity__TidB___to___t__ada_array(x)) <= t__ada_array___attr___ATTRIBUTE_LAST(identity__TidB___to___t__ada_array(x))) ->
  identity__num_position___in_range(t__ada_array___attr___ATTRIBUTE_LAST(identity__TidB___to___t__ada_array(x)))))

axiom identity__id___coerce :
  (forall x:identity__num t__ada_array
  [identity__id___to___t__ada_array(identity__id___from___t__ada_array(x))].
  (identity__id___to___t__ada_array(identity__id___from___t__ada_array(x)) = x))

axiom identity__id___unicity :
  (forall x:identity__num t__ada_array. forall y:identity__num t__ada_array
  [identity__id___from___t__ada_array(x),
  identity__id___from___t__ada_array(y)].
  ((identity__id___from___t__ada_array(x) = identity__id___from___t__ada_array(y)) ->
  (x = y)))

axiom identity__id___static_first :
  (forall a:identity__id.
  (t__ada_array___attr___ATTRIBUTE_FIRST(identity__id___to___t__ada_array(a)) = 0))

axiom identity__id___static_last :
  (forall a:identity__id.
  (t__ada_array___attr___ATTRIBUTE_LAST(identity__id___to___t__ada_array(a)) = 2))

axiom identity__T5s___range :
  (forall x:identity__T5s.
  identity__T5s___in_range(identity__T5s___to___int(x)))

axiom identity__T5s___coerce :
  (forall x:int [identity__T5s___to___int(identity__T5s___from___int(x))|
  identity__T5s___in_range(x), identity__T5s___from___int(x)].
  (identity__T5s___in_range(x) ->
  (identity__T5s___to___int(identity__T5s___from___int(x)) = x)))

axiom identity__T5s___unicity :
  (forall x:identity__T5s. forall y:identity__T5s
  [identity__T5s___to___int(x), identity__T5s___to___int(y)].
  ((identity__T5s___to___int(x) = identity__T5s___to___int(y)) -> (x = y)))

axiom identity__T6s___coerce :
  (forall x:identity__num t__ada_array
  [identity__T6s___to___t__ada_array(identity__T6s___from___t__ada_array(x))].
  (identity__T6s___to___t__ada_array(identity__T6s___from___t__ada_array(x)) = x))

axiom identity__T6s___unicity :
  (forall x:identity__num t__ada_array. forall y:identity__num t__ada_array
  [identity__T6s___from___t__ada_array(x),
  identity__T6s___from___t__ada_array(y)].
  ((identity__T6s___from___t__ada_array(x) = identity__T6s___from___t__ada_array(y)) ->
  (x = y)))

axiom identity__T6s___static_first :
  (forall a:identity__T6s.
  (t__ada_array___attr___ATTRIBUTE_FIRST(identity__T6s___to___t__ada_array(a)) = 0))

axiom identity__T6s___static_last :
  (forall a:identity__T6s.
  (t__ada_array___attr___ATTRIBUTE_LAST(identity__T6s___to___t__ada_array(a)) = 2))

axiom ustemp_identity_1___logic_def_axiom :
  (forall ustemp_identity_0:identity__T2s.
  ((ustemp_identity_0 = ustemp_identity_1(void)) ->
  (forall ustemp_identity_2:int. (t__ada_array___access(ustemp_identity_2,
  identity__T2s___to___t__ada_array(ustemp_identity_0)) = standard__character___from___int(32)))))

axiom identity__no_name___logic_def_axiom :
  (identity__no_name = identity__name___from___t__ada_array(identity__T2s___to___t__ada_array(ustemp_identity_1(void))))

axiom ustemp_identity_5___logic_def_axiom :
  (forall ustemp_identity_4:identity__T6s.
  ((ustemp_identity_4 = ustemp_identity_5(void)) ->
  (forall ustemp_identity_6:int. ((ustemp_identity_6 = 0) ->
  (t__ada_array___access(ustemp_identity_6,
  identity__T6s___to___t__ada_array(ustemp_identity_4)) = identity__num___from___int(0))))))

axiom ustemp_identity_5___logic_def_axiom1 :
  (forall ustemp_identity_4:identity__T6s.
  ((ustemp_identity_4 = ustemp_identity_5(void)) ->
  (forall ustemp_identity_6:int. ((not (ustemp_identity_6 = 0)) ->
  ((ustemp_identity_6 = 1) -> (t__ada_array___access(ustemp_identity_6,
  identity__T6s___to___t__ada_array(ustemp_identity_4)) = identity__num___from___int(0)))))))

axiom ustemp_identity_5___logic_def_axiom2 :
  (forall ustemp_identity_4:identity__T6s.
  ((ustemp_identity_4 = ustemp_identity_5(void)) ->
  (forall ustemp_identity_6:int. ((not (ustemp_identity_6 = 0)) ->
  ((not (ustemp_identity_6 = 1)) -> ((ustemp_identity_6 = 2) ->
  (t__ada_array___access(ustemp_identity_6,
  identity__T6s___to___t__ada_array(ustemp_identity_4)) = identity__num___from___int(0))))))))

axiom identity__no_id___logic_def_axiom :
  (identity__no_id = identity__id___from___t__ada_array(identity__T6s___to___t__ada_array(ustemp_identity_5(void))))

logic money__cur___attr___ATTRIBUTE_MODULUS : int

predicate money__cur___in_range(x: int) = ((0 <= x) and (x <= 6))

logic money__cur___from___int : int -> money__cur

predicate money__cur___eq(x: money__cur, y: money__cur) =
  (money__cur___to___int(x) = money__cur___to___int(y))

logic money__Traw_amount_baseB___attr___ATTRIBUTE_MODULUS : int

predicate money__Traw_amount_baseB___in_range(x: int) =
  (((-2147483648) <= x) and (x <= 2147483647))

logic money__Traw_amount_baseB___from___int : int -> money__Traw_amount_baseB

predicate money__Traw_amount_baseB___eq(x: money__Traw_amount_baseB,
  y: money__Traw_amount_baseB) =
  (money__Traw_amount_baseB___to___int(x) = money__Traw_amount_baseB___to___int(y))

logic money__raw_amount_base___attr___ATTRIBUTE_MODULUS : int

predicate money__raw_amount_base___in_range(x: int) = (((-1000000) <= x) and
  (x <= 2000000))

logic money__raw_amount_base___from___int : int -> money__raw_amount_base

predicate money__raw_amount_base___eq(x: money__raw_amount_base,
  y: money__raw_amount_base) =
  (money__raw_amount_base___to___int(x) = money__raw_amount_base___to___int(y))

logic money__Traw_amountB___attr___ATTRIBUTE_MODULUS : int

predicate money__Traw_amountB___in_range(x: int) = (((-2147483648) <= x) and
  (x <= 2147483647))

logic money__Traw_amountB___from___int : int -> money__Traw_amountB

predicate money__Traw_amountB___eq(x: money__Traw_amountB,
  y: money__Traw_amountB) =
  (money__Traw_amountB___to___int(x) = money__Traw_amountB___to___int(y))

logic money__raw_amount___attr___ATTRIBUTE_MODULUS : int

predicate money__raw_amount___in_range(x: int) = ((0 <= x) and
  (x <= 1000000))

logic money__raw_amount___from___int : int -> money__raw_amount

predicate money__raw_amount___eq(x: money__raw_amount,
  y: money__raw_amount) =
  (money__raw_amount___to___int(x) = money__raw_amount___to___int(y))

logic money__no_amount : money__amount

logic money__is_empty__a : money__amount

logic money__Oadd__a : money__amount

logic money__Oadd__b : money__amount

logic money__Osubtract__a : money__amount

logic money__Osubtract__b : money__amount

logic money__is_empty : money__amount -> bool

logic money__Oadd : money__amount, money__amount -> money__amount

logic money__Osubtract : money__amount, money__amount -> money__amount

axiom money__cur___range :
  (forall x:money__cur. money__cur___in_range(money__cur___to___int(x)))

axiom money__cur___coerce :
  (forall x:int [money__cur___to___int(money__cur___from___int(x))|
  money__cur___in_range(x), money__cur___from___int(x)].
  (money__cur___in_range(x) ->
  (money__cur___to___int(money__cur___from___int(x)) = x)))

axiom money__cur___unicity :
  (forall x:money__cur. forall y:money__cur [money__cur___to___int(x),
  money__cur___to___int(y)].
  ((money__cur___to___int(x) = money__cur___to___int(y)) -> (x = y)))

axiom money__Traw_amount_baseB___range :
  (forall x:money__Traw_amount_baseB.
  money__Traw_amount_baseB___in_range(money__Traw_amount_baseB___to___int(x)))

axiom money__Traw_amount_baseB___coerce :
  (forall x:int
  [money__Traw_amount_baseB___to___int(money__Traw_amount_baseB___from___int(x))|
  money__Traw_amount_baseB___in_range(x),
  money__Traw_amount_baseB___from___int(x)].
  (money__Traw_amount_baseB___in_range(x) ->
  (money__Traw_amount_baseB___to___int(money__Traw_amount_baseB___from___int(x)) = x)))

axiom money__Traw_amount_baseB___unicity :
  (forall x:money__Traw_amount_baseB. forall y:money__Traw_amount_baseB
  [money__Traw_amount_baseB___to___int(x),
  money__Traw_amount_baseB___to___int(y)].
  ((money__Traw_amount_baseB___to___int(x) = money__Traw_amount_baseB___to___int(y)) ->
  (x = y)))

axiom money__raw_amount_base___range :
  (forall x:money__raw_amount_base.
  money__raw_amount_base___in_range(money__raw_amount_base___to___int(x)))

axiom money__raw_amount_base___coerce :
  (forall x:int
  [money__raw_amount_base___to___int(money__raw_amount_base___from___int(x))|
  money__raw_amount_base___in_range(x),
  money__raw_amount_base___from___int(x)].
  (money__raw_amount_base___in_range(x) ->
  (money__raw_amount_base___to___int(money__raw_amount_base___from___int(x)) = x)))

axiom money__raw_amount_base___unicity :
  (forall x:money__raw_amount_base. forall y:money__raw_amount_base
  [money__raw_amount_base___to___int(x),
  money__raw_amount_base___to___int(y)].
  ((money__raw_amount_base___to___int(x) = money__raw_amount_base___to___int(y)) ->
  (x = y)))

axiom money__Traw_amountB___range :
  (forall x:money__Traw_amountB.
  money__Traw_amountB___in_range(money__Traw_amountB___to___int(x)))

axiom money__Traw_amountB___coerce :
  (forall x:int
  [money__Traw_amountB___to___int(money__Traw_amountB___from___int(x))|
  money__Traw_amountB___in_range(x), money__Traw_amountB___from___int(x)].
  (money__Traw_amountB___in_range(x) ->
  (money__Traw_amountB___to___int(money__Traw_amountB___from___int(x)) = x)))

axiom money__Traw_amountB___unicity :
  (forall x:money__Traw_amountB. forall y:money__Traw_amountB
  [money__Traw_amountB___to___int(x), money__Traw_amountB___to___int(y)].
  ((money__Traw_amountB___to___int(x) = money__Traw_amountB___to___int(y)) ->
  (x = y)))

axiom money__raw_amount___range :
  (forall x:money__raw_amount.
  money__raw_amount___in_range(money__raw_amount___to___int(x)))

axiom money__raw_amount___coerce :
  (forall x:int
  [money__raw_amount___to___int(money__raw_amount___from___int(x))|
  money__raw_amount___in_range(x), money__raw_amount___from___int(x)].
  (money__raw_amount___in_range(x) ->
  (money__raw_amount___to___int(money__raw_amount___from___int(x)) = x)))

axiom money__raw_amount___unicity :
  (forall x:money__raw_amount. forall y:money__raw_amount
  [money__raw_amount___to___int(x), money__raw_amount___to___int(y)].
  ((money__raw_amount___to___int(x) = money__raw_amount___to___int(y)) ->
  (x = y)))

axiom money__no_amount___logic_def_axiom :
  (money__no_amount = mk_money__amount(money__cur___from___int(0),
  money__raw_amount___from___int(0)))

logic database__Text_account_numB___attr___ATTRIBUTE_MODULUS : int

predicate database__Text_account_numB___in_range(x: int) =
  (((-2147483648) <= x) and (x <= 2147483647))

logic database__Text_account_numB___from___int : int -> database__Text_account_numB

predicate database__Text_account_numB___eq(x: database__Text_account_numB,
  y: database__Text_account_numB) =
  (database__Text_account_numB___to___int(x) = database__Text_account_numB___to___int(y))

logic database__ext_account_num___attr___ATTRIBUTE_MODULUS : int

predicate database__ext_account_num___in_range(x: int) = ((0 <= x) and
  (x <= 200000))

logic database__ext_account_num___from___int : int -> database__ext_account_num

predicate database__ext_account_num___eq(x: database__ext_account_num,
  y: database__ext_account_num) =
  (database__ext_account_num___to___int(x) = database__ext_account_num___to___int(y))

logic database__account_num___attr___ATTRIBUTE_MODULUS : int

predicate database__account_num___in_range(x: int) = ((1 <= x) and
  (x <= 200000))

logic database__account_num___from___int : int -> database__account_num

predicate database__account_num___eq(x: database__account_num,
  y: database__account_num) =
  (database__account_num___to___int(x) = database__account_num___to___int(y))

logic database__max_account_num : standard__universal_integer

logic database__no_account_num : database__ext_account_num

logic database__existing__account : database__account_num

logic database__belongs_to__account : database__account_num

logic database__belongs_to__customer : identity__name

logic database__belongs_to__id : identity__id

logic database__currency__account : database__account_num

logic database__balance__account : database__account_num

logic database__open__customer : identity__name

logic database__open__id : identity__id

logic database__open__cur : money__cur

logic database__close__customer : identity__name

logic database__close__id : identity__id

logic database__close__account : database__account_num

logic database__deposit__account : database__account_num

logic database__deposit__sum : money__amount

logic database__withdraw__account : database__account_num

logic database__withdraw__sum : money__amount

logic database__existing : database__account_num,
  database__availability__account_link_dataX -> bool

logic database__belongs_to : database__account_num, identity__name,
  identity__id, database__account_data -> bool

logic database__num_accounts : database__availability__account_link_dataX -> database__ext_account_num

logic database__max_account_reached : database__ext_account_num -> bool

logic database__currency : database__account_num,
  database__account_balance_data -> money__cur

logic database__balance : database__account_num,
  database__account_balance_data -> money__amount

axiom database__Text_account_numB___range :
  (forall x:database__Text_account_numB.
  database__Text_account_numB___in_range(database__Text_account_numB___to___int(x)))

axiom database__Text_account_numB___coerce :
  (forall x:int
  [database__Text_account_numB___to___int(database__Text_account_numB___from___int(x))|
  database__Text_account_numB___in_range(x),
  database__Text_account_numB___from___int(x)].
  (database__Text_account_numB___in_range(x) ->
  (database__Text_account_numB___to___int(database__Text_account_numB___from___int(x)) = x)))

axiom database__Text_account_numB___unicity :
  (forall x:database__Text_account_numB. forall y:database__Text_account_numB
  [database__Text_account_numB___to___int(x),
  database__Text_account_numB___to___int(y)].
  ((database__Text_account_numB___to___int(x) = database__Text_account_numB___to___int(y)) ->
  (x = y)))

axiom database__ext_account_num___range :
  (forall x:database__ext_account_num.
  database__ext_account_num___in_range(database__ext_account_num___to___int(x)))

axiom database__ext_account_num___coerce :
  (forall x:int
  [database__ext_account_num___to___int(database__ext_account_num___from___int(x))|
  database__ext_account_num___in_range(x),
  database__ext_account_num___from___int(x)].
  (database__ext_account_num___in_range(x) ->
  (database__ext_account_num___to___int(database__ext_account_num___from___int(x)) = x)))

axiom database__ext_account_num___unicity :
  (forall x:database__ext_account_num. forall y:database__ext_account_num
  [database__ext_account_num___to___int(x),
  database__ext_account_num___to___int(y)].
  ((database__ext_account_num___to___int(x) = database__ext_account_num___to___int(y)) ->
  (x = y)))

axiom database__account_num___range :
  (forall x:database__account_num.
  database__account_num___in_range(database__account_num___to___int(x)))

axiom database__account_num___coerce :
  (forall x:int
  [database__account_num___to___int(database__account_num___from___int(x))|
  database__account_num___in_range(x),
  database__account_num___from___int(x)].
  (database__account_num___in_range(x) ->
  (database__account_num___to___int(database__account_num___from___int(x)) = x)))

axiom database__account_num___unicity :
  (forall x:database__account_num. forall y:database__account_num
  [database__account_num___to___int(x), database__account_num___to___int(y)].
  ((database__account_num___to___int(x) = database__account_num___to___int(y)) ->
  (x = y)))

axiom database__max_account_num___logic_def_axiom :
  (database__max_account_num = standard__universal_integer___from___int(200000))

axiom database__no_account_num___logic_def_axiom :
  (database__no_account_num = database__ext_account_num___from___int(0))

logic database__availability__T3bX___attr___ATTRIBUTE_MODULUS : int

predicate database__availability__T3bX___in_range(x: int) = ((1 <= x) and
  (x <= 200000))

logic database__availability__T3bX___from___int : int -> database__availability__T3bX

predicate database__availability__T3bX___eq(x: database__availability__T3bX,
  y: database__availability__T3bX) =
  (database__availability__T3bX___to___int(x) = database__availability__T3bX___to___int(y))

logic database__T19b___attr___ATTRIBUTE_MODULUS : int

predicate database__T19b___in_range(x: int) = ((1 <= x) and (x <= 200000))

logic database__T19b___from___int : int -> database__T19b

predicate database__T19b___eq(x: database__T19b, y: database__T19b) =
  (database__T19b___to___int(x) = database__T19b___to___int(y))

logic database__T21b___attr___ATTRIBUTE_MODULUS : int

predicate database__T21b___in_range(x: int) = ((1 <= x) and (x <= 200000))

logic database__T21b___from___int : int -> database__T21b

predicate database__T21b___eq(x: database__T21b, y: database__T21b) =
  (database__T21b___to___int(x) = database__T21b___to___int(y))

logic database__availability__no_account_linkX : database__availability__account_linkX

logic database__availability__is_availableX__account : database__account_num

logic database__availability__make_availableX__account : database__account_num

logic database__no_account_rec : database__account_rec

logic database__no_account_balance : database__account_balance

logic database__availability__some_availableX : database__ext_account_num -> bool

logic database__availability__is_availableX : database__account_num,
  database__availability__account_link_dataX -> bool

logic database__availability__num_availableX : database__availability__account_link_dataX -> database__ext_account_num

axiom database__availability__Taccount_link_dataBX___coerce :
  (forall x:database__availability__account_linkX t__ada_array
  [database__availability__Taccount_link_dataBX___to___t__ada_array(database__availability__Taccount_link_dataBX___from___t__ada_array(x))].
  (database__availability__Taccount_link_dataBX___to___t__ada_array(database__availability__Taccount_link_dataBX___from___t__ada_array(x)) = x))

axiom database__availability__Taccount_link_dataBX___unicity :
  (forall x:database__availability__account_linkX t__ada_array.
  forall y:database__availability__account_linkX t__ada_array
  [database__availability__Taccount_link_dataBX___from___t__ada_array(x),
  database__availability__Taccount_link_dataBX___from___t__ada_array(y)].
  ((database__availability__Taccount_link_dataBX___from___t__ada_array(x) = database__availability__Taccount_link_dataBX___from___t__ada_array(y)) ->
  (x = y)))

axiom database__availability__Taccount_link_dataBX__index_in_range :
  (forall x:database__availability__Taccount_link_dataBX.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(database__availability__Taccount_link_dataBX___to___t__ada_array(x)) <= t__ada_array___attr___ATTRIBUTE_LAST(database__availability__Taccount_link_dataBX___to___t__ada_array(x))) ->
  database__account_num___in_range(t__ada_array___attr___ATTRIBUTE_FIRST(database__availability__Taccount_link_dataBX___to___t__ada_array(x)))))

axiom database__availability__Taccount_link_dataBX__index_in_range1 :
  (forall x:database__availability__Taccount_link_dataBX.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(database__availability__Taccount_link_dataBX___to___t__ada_array(x)) <= t__ada_array___attr___ATTRIBUTE_LAST(database__availability__Taccount_link_dataBX___to___t__ada_array(x))) ->
  database__account_num___in_range(t__ada_array___attr___ATTRIBUTE_LAST(database__availability__Taccount_link_dataBX___to___t__ada_array(x)))))

axiom database__availability__account_link_dataX___coerce :
  (forall x:database__availability__account_linkX t__ada_array
  [database__availability__account_link_dataX___to___t__ada_array(database__availability__account_link_dataX___from___t__ada_array(x))].
  (database__availability__account_link_dataX___to___t__ada_array(database__availability__account_link_dataX___from___t__ada_array(x)) = x))

axiom database__availability__account_link_dataX___unicity :
  (forall x:database__availability__account_linkX t__ada_array.
  forall y:database__availability__account_linkX t__ada_array
  [database__availability__account_link_dataX___from___t__ada_array(x),
  database__availability__account_link_dataX___from___t__ada_array(y)].
  ((database__availability__account_link_dataX___from___t__ada_array(x) = database__availability__account_link_dataX___from___t__ada_array(y)) ->
  (x = y)))

axiom database__availability__account_link_dataX___static_first :
  (forall a:database__availability__account_link_dataX.
  (t__ada_array___attr___ATTRIBUTE_FIRST(database__availability__account_link_dataX___to___t__ada_array(a)) = 1))

axiom database__availability__account_link_dataX___static_last :
  (forall a:database__availability__account_link_dataX.
  (t__ada_array___attr___ATTRIBUTE_LAST(database__availability__account_link_dataX___to___t__ada_array(a)) = 200000))

axiom database__availability__T3bX___range :
  (forall x:database__availability__T3bX.
  database__availability__T3bX___in_range(database__availability__T3bX___to___int(x)))

axiom database__availability__T3bX___coerce :
  (forall x:int
  [database__availability__T3bX___to___int(database__availability__T3bX___from___int(x))|
  database__availability__T3bX___in_range(x),
  database__availability__T3bX___from___int(x)].
  (database__availability__T3bX___in_range(x) ->
  (database__availability__T3bX___to___int(database__availability__T3bX___from___int(x)) = x)))

axiom database__availability__T3bX___unicity :
  (forall x:database__availability__T3bX.
  forall y:database__availability__T3bX
  [database__availability__T3bX___to___int(x),
  database__availability__T3bX___to___int(y)].
  ((database__availability__T3bX___to___int(x) = database__availability__T3bX___to___int(y)) ->
  (x = y)))

axiom database__availability__T4bX___coerce :
  (forall x:database__availability__account_linkX t__ada_array
  [database__availability__T4bX___to___t__ada_array(database__availability__T4bX___from___t__ada_array(x))].
  (database__availability__T4bX___to___t__ada_array(database__availability__T4bX___from___t__ada_array(x)) = x))

axiom database__availability__T4bX___unicity :
  (forall x:database__availability__account_linkX t__ada_array.
  forall y:database__availability__account_linkX t__ada_array
  [database__availability__T4bX___from___t__ada_array(x),
  database__availability__T4bX___from___t__ada_array(y)].
  ((database__availability__T4bX___from___t__ada_array(x) = database__availability__T4bX___from___t__ada_array(y)) ->
  (x = y)))

axiom database__availability__T4bX___static_first :
  (forall a:database__availability__T4bX.
  (t__ada_array___attr___ATTRIBUTE_FIRST(database__availability__T4bX___to___t__ada_array(a)) = 1))

axiom database__availability__T4bX___static_last :
  (forall a:database__availability__T4bX.
  (t__ada_array___attr___ATTRIBUTE_LAST(database__availability__T4bX___to___t__ada_array(a)) = 200000))

axiom database__Taccount_dataB___coerce :
  (forall x:database__account_rec t__ada_array
  [database__Taccount_dataB___to___t__ada_array(database__Taccount_dataB___from___t__ada_array(x))].
  (database__Taccount_dataB___to___t__ada_array(database__Taccount_dataB___from___t__ada_array(x)) = x))

axiom database__Taccount_dataB___unicity :
  (forall x:database__account_rec t__ada_array.
  forall y:database__account_rec t__ada_array
  [database__Taccount_dataB___from___t__ada_array(x),
  database__Taccount_dataB___from___t__ada_array(y)].
  ((database__Taccount_dataB___from___t__ada_array(x) = database__Taccount_dataB___from___t__ada_array(y)) ->
  (x = y)))

axiom database__Taccount_dataB__index_in_range :
  (forall x:database__Taccount_dataB.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(database__Taccount_dataB___to___t__ada_array(x)) <= t__ada_array___attr___ATTRIBUTE_LAST(database__Taccount_dataB___to___t__ada_array(x))) ->
  database__account_num___in_range(t__ada_array___attr___ATTRIBUTE_FIRST(database__Taccount_dataB___to___t__ada_array(x)))))

axiom database__Taccount_dataB__index_in_range1 :
  (forall x:database__Taccount_dataB.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(database__Taccount_dataB___to___t__ada_array(x)) <= t__ada_array___attr___ATTRIBUTE_LAST(database__Taccount_dataB___to___t__ada_array(x))) ->
  database__account_num___in_range(t__ada_array___attr___ATTRIBUTE_LAST(database__Taccount_dataB___to___t__ada_array(x)))))

axiom database__account_data___coerce :
  (forall x:database__account_rec t__ada_array
  [database__account_data___to___t__ada_array(database__account_data___from___t__ada_array(x))].
  (database__account_data___to___t__ada_array(database__account_data___from___t__ada_array(x)) = x))

axiom database__account_data___unicity :
  (forall x:database__account_rec t__ada_array.
  forall y:database__account_rec t__ada_array
  [database__account_data___from___t__ada_array(x),
  database__account_data___from___t__ada_array(y)].
  ((database__account_data___from___t__ada_array(x) = database__account_data___from___t__ada_array(y)) ->
  (x = y)))

axiom database__account_data___static_first :
  (forall a:database__account_data.
  (t__ada_array___attr___ATTRIBUTE_FIRST(database__account_data___to___t__ada_array(a)) = 1))

axiom database__account_data___static_last :
  (forall a:database__account_data.
  (t__ada_array___attr___ATTRIBUTE_LAST(database__account_data___to___t__ada_array(a)) = 200000))

axiom database__Taccount_balance_dataB___coerce :
  (forall x:database__account_balance t__ada_array
  [database__Taccount_balance_dataB___to___t__ada_array(database__Taccount_balance_dataB___from___t__ada_array(x))].
  (database__Taccount_balance_dataB___to___t__ada_array(database__Taccount_balance_dataB___from___t__ada_array(x)) = x))

axiom database__Taccount_balance_dataB___unicity :
  (forall x:database__account_balance t__ada_array.
  forall y:database__account_balance t__ada_array
  [database__Taccount_balance_dataB___from___t__ada_array(x),
  database__Taccount_balance_dataB___from___t__ada_array(y)].
  ((database__Taccount_balance_dataB___from___t__ada_array(x) = database__Taccount_balance_dataB___from___t__ada_array(y)) ->
  (x = y)))

axiom database__Taccount_balance_dataB__index_in_range :
  (forall x:database__Taccount_balance_dataB.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(database__Taccount_balance_dataB___to___t__ada_array(x)) <= t__ada_array___attr___ATTRIBUTE_LAST(database__Taccount_balance_dataB___to___t__ada_array(x))) ->
  database__account_num___in_range(t__ada_array___attr___ATTRIBUTE_FIRST(database__Taccount_balance_dataB___to___t__ada_array(x)))))

axiom database__Taccount_balance_dataB__index_in_range1 :
  (forall x:database__Taccount_balance_dataB.
  ((t__ada_array___attr___ATTRIBUTE_FIRST(database__Taccount_balance_dataB___to___t__ada_array(x)) <= t__ada_array___attr___ATTRIBUTE_LAST(database__Taccount_balance_dataB___to___t__ada_array(x))) ->
  database__account_num___in_range(t__ada_array___attr___ATTRIBUTE_LAST(database__Taccount_balance_dataB___to___t__ada_array(x)))))

axiom database__account_balance_data___coerce :
  (forall x:database__account_balance t__ada_array
  [database__account_balance_data___to___t__ada_array(database__account_balance_data___from___t__ada_array(x))].
  (database__account_balance_data___to___t__ada_array(database__account_balance_data___from___t__ada_array(x)) = x))

axiom database__account_balance_data___unicity :
  (forall x:database__account_balance t__ada_array.
  forall y:database__account_balance t__ada_array
  [database__account_balance_data___from___t__ada_array(x),
  database__account_balance_data___from___t__ada_array(y)].
  ((database__account_balance_data___from___t__ada_array(x) = database__account_balance_data___from___t__ada_array(y)) ->
  (x = y)))

axiom database__account_balance_data___static_first :
  (forall a:database__account_balance_data.
  (t__ada_array___attr___ATTRIBUTE_FIRST(database__account_balance_data___to___t__ada_array(a)) = 1))

axiom database__account_balance_data___static_last :
  (forall a:database__account_balance_data.
  (t__ada_array___attr___ATTRIBUTE_LAST(database__account_balance_data___to___t__ada_array(a)) = 200000))

axiom database__T19b___range :
  (forall x:database__T19b.
  database__T19b___in_range(database__T19b___to___int(x)))

axiom database__T19b___coerce :
  (forall x:int [database__T19b___to___int(database__T19b___from___int(x))|
  database__T19b___in_range(x), database__T19b___from___int(x)].
  (database__T19b___in_range(x) ->
  (database__T19b___to___int(database__T19b___from___int(x)) = x)))

axiom database__T19b___unicity :
  (forall x:database__T19b. forall y:database__T19b
  [database__T19b___to___int(x), database__T19b___to___int(y)].
  ((database__T19b___to___int(x) = database__T19b___to___int(y)) -> (x = y)))

axiom database__T20b___coerce :
  (forall x:database__account_rec t__ada_array
  [database__T20b___to___t__ada_array(database__T20b___from___t__ada_array(x))].
  (database__T20b___to___t__ada_array(database__T20b___from___t__ada_array(x)) = x))

axiom database__T20b___unicity :
  (forall x:database__account_rec t__ada_array.
  forall y:database__account_rec t__ada_array
  [database__T20b___from___t__ada_array(x),
  database__T20b___from___t__ada_array(y)].
  ((database__T20b___from___t__ada_array(x) = database__T20b___from___t__ada_array(y)) ->
  (x = y)))

axiom database__T20b___static_first :
  (forall a:database__T20b.
  (t__ada_array___attr___ATTRIBUTE_FIRST(database__T20b___to___t__ada_array(a)) = 1))

axiom database__T20b___static_last :
  (forall a:database__T20b.
  (t__ada_array___attr___ATTRIBUTE_LAST(database__T20b___to___t__ada_array(a)) = 200000))

axiom database__T21b___range :
  (forall x:database__T21b.
  database__T21b___in_range(database__T21b___to___int(x)))

axiom database__T21b___coerce :
  (forall x:int [database__T21b___to___int(database__T21b___from___int(x))|
  database__T21b___in_range(x), database__T21b___from___int(x)].
  (database__T21b___in_range(x) ->
  (database__T21b___to___int(database__T21b___from___int(x)) = x)))

axiom database__T21b___unicity :
  (forall x:database__T21b. forall y:database__T21b
  [database__T21b___to___int(x), database__T21b___to___int(y)].
  ((database__T21b___to___int(x) = database__T21b___to___int(y)) -> (x = y)))

axiom database__T22b___coerce :
  (forall x:database__account_balance t__ada_array
  [database__T22b___to___t__ada_array(database__T22b___from___t__ada_array(x))].
  (database__T22b___to___t__ada_array(database__T22b___from___t__ada_array(x)) = x))

axiom database__T22b___unicity :
  (forall x:database__account_balance t__ada_array.
  forall y:database__account_balance t__ada_array
  [database__T22b___from___t__ada_array(x),
  database__T22b___from___t__ada_array(y)].
  ((database__T22b___from___t__ada_array(x) = database__T22b___from___t__ada_array(y)) ->
  (x = y)))

axiom database__T22b___static_first :
  (forall a:database__T22b.
  (t__ada_array___attr___ATTRIBUTE_FIRST(database__T22b___to___t__ada_array(a)) = 1))

axiom database__T22b___static_last :
  (forall a:database__T22b.
  (t__ada_array___attr___ATTRIBUTE_LAST(database__T22b___to___t__ada_array(a)) = 200000))

axiom database__availability__no_account_linkX___logic_def_axiom :
  (database__availability__no_account_linkX = mk_database__availability__account_linkX(false,
  database__no_account_num, database__no_account_num))

axiom database__no_account_rec___logic_def_axiom :
  (database__no_account_rec = mk_database__account_rec(identity__no_name,
  identity__no_id, database__no_account_num))

axiom database__no_account_balance___logic_def_axiom :
  (database__no_account_balance = mk_database__account_balance(money__no_amount,
  database__no_account_num))

axiom database__availability__some_availableX___logic_def_axiom :
  (forall database__availability__first_availableX1:database__ext_account_num.
  ((database__availability__some_availableX(database__availability__first_availableX1) = true) ->
  (not (database__ext_account_num___to___int(database__availability__first_availableX1) = database__ext_account_num___to___int(database__no_account_num)))))

axiom database__availability__some_availableX___logic_def_axiom1 :
  (forall database__availability__first_availableX1:database__ext_account_num.
  ((not (database__ext_account_num___to___int(database__availability__first_availableX1) = database__ext_account_num___to___int(database__no_account_num))) ->
  (database__availability__some_availableX(database__availability__first_availableX1) = true)))

axiom database__availability__is_availableX___logic_def_axiom :
  (forall database__availability__is_availableX__account1:database__account_num.
  (forall database__availability__linksX1:database__availability__account_link_dataX.
  ((database__availability__is_availableX(database__availability__is_availableX__account1,
  database__availability__linksX1) = true) ->
  (database__availability__account_linkX__available(t__ada_array___access(database__account_num___to___int(database__availability__is_availableX__account1),
  database__availability__account_link_dataX___to___t__ada_array(database__availability__linksX1))) = true))))

axiom database__availability__is_availableX___logic_def_axiom1 :
  (forall database__availability__is_availableX__account1:database__account_num.
  (forall database__availability__linksX1:database__availability__account_link_dataX.
  ((database__availability__account_linkX__available(t__ada_array___access(database__account_num___to___int(database__availability__is_availableX__account1),
  database__availability__account_link_dataX___to___t__ada_array(database__availability__linksX1))) = true) ->
  (database__availability__is_availableX(database__availability__is_availableX__account1,
  database__availability__linksX1) = true))))

axiom database__max_account_reached___logic_def_axiom :
  (forall database__availability__first_availableX1:database__ext_account_num.
  ((database__max_account_reached(database__availability__first_availableX1) = true) ->
  (not (database__availability__some_availableX(database__availability__first_availableX1) = true))))

axiom database__max_account_reached___logic_def_axiom1 :
  (forall database__availability__first_availableX1:database__ext_account_num.
  ((not (database__availability__some_availableX(database__availability__first_availableX1) = true)) ->
  (database__max_account_reached(database__availability__first_availableX1) = true)))

axiom database__existing___logic_def_axiom :
  (forall database__existing__account1:database__account_num.
  (forall database__availability__linksX1:database__availability__account_link_dataX.
  ((database__existing(database__existing__account1,
  database__availability__linksX1) = true) ->
  (not (database__availability__is_availableX(database__existing__account1,
  database__availability__linksX1) = true)))))

axiom database__existing___logic_def_axiom1 :
  (forall database__existing__account1:database__account_num.
  (forall database__availability__linksX1:database__availability__account_link_dataX.
  ((not (database__availability__is_availableX(database__existing__account1,
  database__availability__linksX1) = true)) ->
  (database__existing(database__existing__account1,
  database__availability__linksX1) = true))))

axiom database__belongs_to___logic_def_axiom :
  (forall database__belongs_to__account1:database__account_num.
  (forall database__belongs_to__customer1:identity__name.
  (forall database__belongs_to__id1:identity__id.
  (forall database__accounts1:database__account_data.
  ((database__belongs_to(database__belongs_to__account1,
  database__belongs_to__customer1, database__belongs_to__id1,
  database__accounts1) = true) ->
  (t__ada_array___access(database__account_num___to___int(database__belongs_to__account1),
  database__account_data___to___t__ada_array(database__accounts1)) = mk_database__account_rec(database__belongs_to__customer1,
  database__belongs_to__id1,
  database__ext_account_num___from___int(database__account_num___to___int(database__belongs_to__account1)))))))))

axiom database__belongs_to___logic_def_axiom1 :
  (forall database__belongs_to__account1:database__account_num.
  (forall database__belongs_to__customer1:identity__name.
  (forall database__belongs_to__id1:identity__id.
  (forall database__accounts1:database__account_data.
  ((t__ada_array___access(database__account_num___to___int(database__belongs_to__account1),
  database__account_data___to___t__ada_array(database__accounts1)) = mk_database__account_rec(database__belongs_to__customer1,
  database__belongs_to__id1,
  database__ext_account_num___from___int(database__account_num___to___int(database__belongs_to__account1)))) ->
  (database__belongs_to(database__belongs_to__account1,
  database__belongs_to__customer1, database__belongs_to__id1,
  database__accounts1) = true))))))

axiom database__balance___logic_def_axiom :
  (forall database__balance__account1:database__account_num.
  (forall database__accounts_balance1:database__account_balance_data.
  (database__balance(database__balance__account1,
  database__accounts_balance1) = database__account_balance__value(t__ada_array___access(database__account_num___to___int(database__balance__account1),
  database__account_balance_data___to___t__ada_array(database__accounts_balance1))))))

axiom database__currency___logic_def_axiom :
  (forall database__currency__account1:database__account_num.
  (forall database__accounts_balance1:database__account_balance_data.
  (database__currency(database__currency__account1,
  database__accounts_balance1) = money__amount__currency(database__account_balance__value(t__ada_array___access(database__account_num___to___int(database__currency__account1),
  database__account_balance_data___to___t__ada_array(database__accounts_balance1)))))))

logic database__availability__some_availableX___result : bool ref

logic database__availability__is_availableX___result : bool ref

logic database__availability__num_availableX___result : database__ext_account_num ref

logic database__max_account_reached___result : bool ref

logic database__num_accounts___result : database__ext_account_num ref

logic database__existing___result : bool ref

logic database__belongs_to___result : bool ref

logic database__balance___result : money__amount ref

logic database__currency___result : money__cur ref

goal WP_parameter_database__open___def :
  (forall database__accounts_balance1:database__account_balance_data.
  (forall database__accounts1:database__account_data.
  (forall database__availability__first_availableX1:database__ext_account_num.
  (forall database__availability__linksX1:database__availability__account_link_dataX.
  ((not (database__max_account_reached(database__availability__first_availableX1) = true)) ->
  ((not (database__max_account_reached(database__availability__first_availableX1) = true)) ->
  ((database__availability__some_availableX(database__availability__first_availableX1) = true) ->
  (forall database__availability__reserve_first_availableX__account1:database__account_num.
  (forall database__availability__linksX2:database__availability__account_link_dataX.
  (((not (database__availability__is_availableX(database__availability__reserve_first_availableX__account1,
  database__availability__linksX2) = true)) and
  (forall database__availability__reserve_first_availableX__L13b__act:int.
  (((1 <= database__availability__reserve_first_availableX__L13b__act) and
  (database__availability__reserve_first_availableX__L13b__act <= 200000)) ->
  ((not (database__availability__reserve_first_availableX__L13b__act = database__account_num___to___int(database__availability__reserve_first_availableX__account1))) ->
  ((mk_database__availability__account_linkX_proj_1(t__ada_array___access(database__availability__reserve_first_availableX__L13b__act,
  database__availability__account_link_dataX___to___t__ada_array(database__availability__linksX2))) = true) <->
  (mk_database__availability__account_linkX_proj_1(t__ada_array___access(database__availability__reserve_first_availableX__L13b__act,
  database__availability__account_link_dataX___to___t__ada_array(database__availability__linksX1))) = true)))))) ->
  (forall database__open__account1:database__account_num.
  ((database__open__account1 = database__availability__reserve_first_availableX__account1) ->
  (database__ext_account_num___in_range(database__account_num___to___int(database__open__account1)) ->
  (forall result:database__ext_account_num.
  ((database__ext_account_num___to___int(result) = database__account_num___to___int(database__open__account1)) ->
  (((t__ada_array___attr___ATTRIBUTE_FIRST(database__account_data___to___t__ada_array(database__accounts1)) <= database__account_num___to___int(database__open__account1)) and
  (database__account_num___to___int(database__open__account1) <= t__ada_array___attr___ATTRIBUTE_LAST(database__account_data___to___t__ada_array(database__accounts1)))) ->
  (forall database__accounts2:database__account_data.
  ((database__accounts2 = database__account_data___from___t__ada_array(t__ada_array___update(database__account_num___to___int(database__open__account1),
  database__account_data___to___t__ada_array(database__accounts1),
  mk_database__account_rec(database__open__customer, database__open__id,
  result)))) -> (money__raw_amount___in_range(0) ->
  (forall result1:money__raw_amount.
  ((money__raw_amount___to___int(result1) = 0) ->
  (database__ext_account_num___in_range(database__account_num___to___int(database__open__account1)) ->
  (forall result2:database__ext_account_num.
  ((database__ext_account_num___to___int(result2) = database__account_num___to___int(database__open__account1)) ->
  (((t__ada_array___attr___ATTRIBUTE_FIRST(database__account_balance_data___to___t__ada_array(database__accounts_balance1)) <= database__account_num___to___int(database__open__account1)) and
  (database__account_num___to___int(database__open__account1) <= t__ada_array___attr___ATTRIBUTE_LAST(database__account_balance_data___to___t__ada_array(database__accounts_balance1)))) ->
  (forall database__accounts_balance2:database__account_balance_data.
  ((database__accounts_balance2 = database__account_balance_data___from___t__ada_array(t__ada_array___update(database__account_num___to___int(database__open__account1),
  database__account_balance_data___to___t__ada_array(database__accounts_balance1),
  mk_database__account_balance(mk_money__amount(database__open__cur,
  result1), result2)))) -> ((database__existing(database__open__account1,
  database__availability__linksX2) = true) ->
  ((not (database__belongs_to(database__open__account1,
  database__open__customer, database__open__id,
  database__accounts2) = true)) ->
  ((database__existing(database__open__account1,
  database__availability__linksX2) = true) and
  ((database__belongs_to(database__open__account1, database__open__customer,
  database__open__id, database__accounts2) = true) and
  (money__is_empty(database__balance(database__open__account1,
  database__accounts_balance2)) = true))))))))))))))))))))))))))))))))

