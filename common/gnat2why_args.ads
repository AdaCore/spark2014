------------------------------------------------------------------------------
--                                                                          --
--                            GNAT2WHY COMPONENTS                           --
--                                                                          --
--                          G N A T 2 W H Y _ A R G S                       --
--                                                                          --
--                                 S p e c                                  --
--                                                                          --
--                     Copyright (C) 2010-2019, AdaCore                     --
--                Copyright (C) 2017-2019, Altran UK Limited                --
--                                                                          --
-- gnat2why is  free  software;  you can redistribute  it and/or  modify it --
-- under terms of the  GNU General Public License as published  by the Free --
-- Software  Foundation;  either version 3,  or (at your option)  any later --
-- version.  gnat2why is distributed  in the hope that  it will be  useful, --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License for  more details.  You should have  received  a copy of the GNU --
-- General  Public License  distributed with  gnat2why;  see file COPYING3. --
-- If not,  go to  http://www.gnu.org/licenses  for a complete  copy of the --
-- license.                                                                 --
--                                                                          --
-- gnat2why is maintained by AdaCore (http://www.adacore.com)               --
--                                                                          --
------------------------------------------------------------------------------

with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with String_Utils;          use String_Utils;

package Gnat2Why_Args is

   --  This package defines extra options of gnat2why, that are not relevant to
   --  the GNAT frontend. It only implements reading of these extra options;
   --  writing is implemented in gnatprove.

   --  These extra options are stored in a file that is passed to gnat2why
   --  using the extra switch "-gnates=<file>". See the body of this package
   --  for the format of this file, the spec only describes what is needed for
   --  interfacing.

   ---------------
   -- Constants --
   ---------------

   --  Name of the object sub-directory in which files are generated by
   --  GNATprove.

   Name_GNATprove : constant String := "gnatprove";

   --  Maximum range of values to unroll a FOR loop with static bounds and no
   --  loop (in)variant.

   Max_Loop_Unrolling : constant := 20;

   -------------
   -- Options --
   -------------

   --  Warning mode for gnat2why. This is identical to Opt.Warning_Mode for the
   --  compiler. We duplicate this type here to avoid a dependency on compiler
   --  units.

   type SPARK_Warning_Mode_Type is (SW_Suppress, SW_Normal, SW_Treat_As_Error);

   Warning_Mode : SPARK_Warning_Mode_Type;

   --  Global generation mode. In this mode, gnat2why generates cross-reference
   --  information in ALI files about globals accessed by subprograms.

   Global_Gen_Mode : Boolean;

   --  SPARK 2014 checking mode. In this mode, gnat2why checks that code marked
   --  with SPARK_Mode => True does not violate SPARK 2014 rules.

   Check_Mode : Boolean;

   --  Check All mode. In this mode, gnat2why will do flow analysis but only
   --  report check related messages.

   Check_All_Mode : Boolean;

   --  Flow Analysis mode. In this mode, gnat2why will do only flow analysis

   Flow_Analysis_Mode : Boolean;

   --  Prove mode. In this mode gnat2why will also perform flow analysis, but
   --  only report soundness-related messages. Note that Flow_Analysis_Mode and
   --  Prove_Mode are mutually exclusive.

   Prove_Mode : Boolean;

   --  Enable basic debugging for gnat2why. This will dump the CFG and PDG is
   --  dot format, and print the gnatwhy3 command line.

   Debug_Mode : Boolean;

   --  This will enable additional tracing output and will call graphviz on
   --  each dumped graph.

   Flow_Advanced_Debug : Boolean;

   --  This will disable the simplification of trivial counterexamples in order
   --  to allow analysis of missing counterexamples.

   Debug_Trivial : Boolean;

   --  The SPARK RM does not make global contracts optional, rather this is a
   --  liberty we have taken in this implementation of SPARK. This flag is
   --  controlled by the --no-global-generation switch and will make sure the
   --  absence of a global contract means the same thing as Global => null. By
   --  default, in gnat2why we synthesize global contracts.

   Flow_Generate_Contracts : Boolean;

   --  This will show termination status (as far as flow is concerned) for each
   --  subprogram with a warning or info message.

   Flow_Termination_Proof : Boolean;

   --  This debug flag will show all generated contracts in a human-readable
   --  form. The main use are a few tests where we want to observe that GG is
   --  working correctly.

   Flow_Show_GG : Boolean;

   --  Generate guards for axioms of functions to avoid having an unsound axiom
   --  when a function has an inconsistent contract.

   Proof_Generate_Guards : Boolean;

   --  When Pedantic is True, issue warnings on features that could cause
   --  portability issues with other compilers than GNAT. For example, issue
   --  a warning when the Ada RM allows reassociation of operators in an
   --  expression (something GNAT never does), which could lead to different
   --  overflows, e.g. on
   --    A + B + C
   --  which is parsed as
   --    (A + B) + C
   --  but could be reassociated by another compiler as
   --    A + (B + C)

   Pedantic : Boolean;

   --  Issue CWE Ids in messages

   CWE : Boolean;

   --  Set the report mode (only failing VCs, all VCs, details)

   type Report_Mode_Type is (GPR_Fail,
                             GPR_All,
                             GPR_Provers,
                             GPR_Statistics);
   --  The modes for reporting of VCs.
   --    GPR_Fail means that only unproved VCs will be reported
   --    GPR_All means that all VCs will be reported
   --    GPR_Provers prints in addition which prover(s) proved a proved check
   --    GPR_Statistics in addition prints maximum steps and timings for proved
   --    checks.

   Report_Mode : Report_Mode_Type;

   --  Limit analysis to the given units

   Limit_Units : Boolean;

   --  Limit analysis to this subprogram

   Limit_Subp : Unbounded_String;

   --  Limit analysis to a selected region

   Limit_Region : Unbounded_String;

   --  Limit analysis to this line

   Limit_Line : Unbounded_String;

   --  The Why3 command will be run in this directory

   Why3_Dir : Unbounded_String;

   --  If CP_Res_Dir is "null", then CodePeer processing will be disabled.
   --  Otherwise, CodePeer results will be in this directory.

   CP_Res_Dir : Unbounded_String;

   --  IDE mode. Error messages may be formatted differently in this mode (e.g.
   --  JSON dict).

   Ide_Mode : Boolean;

   --  Generate warnings by generating VCs and calling provers. As it is
   --  costly, it is not enabled by default.

   Proof_Warnings : Boolean;

   --  Issue info messages related to gnatprove usage

   Info_Messages : Boolean;

   --  Do not inline local functions to prove their code in the calling
   --  context.

   No_Inlining : Boolean;

   --  The cmd line args to be passed to gnatwhy3. In fact the "gnatwhy3"
   --  executable name is not hardcoded and is passed as a first argument
   --  of this list.

   Why3_Args : String_Lists.List;

   --  Prevent loop unrolling

   No_Loop_Unrolling : Boolean;

   ---------------------------
   -- Loading option values --
   ---------------------------

   procedure Load (Args_File   : String;
                   Source_File : String)
   with Pre => Args_File /= "" and then Source_File /= "";
   --  Read the extra options information and set the corresponding global
   --  variables above.
   --  @param Args_File the filename to read the extra information from.
   --    Basically, you should pass Opt.SPARK_Switches_File_Name.all here. We
   --    want to avoid the dependency on Opt here, so you need to pass it
   --    yourself.
   --  @param Source_File key for the map with file-specific options

   ------------------
   -- Option names --
   ------------------

   --  Extra options are passed from gnatprove to gnat2why in a JSON file. The
   --  following package contains names of the JSON fields. The global
   --  variables above will be set to the values stored in the corresponding
   --  JSON fields.
   --
   --  Note: option names are intentionally kept in a dedicated package, so
   --  they can be added into the scope with "use Option_Names;" clause without
   --  adding names of the corresponding global variables (which would create
   --  conflicts with similarly named variables in the Configuration package).

   package Option_Names is
      Warning_Mode_Name            : constant String := "warning_mode";
      Global_Gen_Mode_Name         : constant String := "global_gen_mode";
      Check_Mode_Name              : constant String := "check_mode";
      Check_All_Mode_Name          : constant String := "check_all_mode";
      Flow_Analysis_Mode_Name      : constant String := "flow_analysis_mode";
      Prove_Mode_Name              : constant String := "prove_mode";
      Debug_Mode_Name              : constant String := "debug";
      Debug_Trivial_Name           : constant String := "debug_trivial";
      Flow_Advanced_Debug_Name     : constant String := "flow_advanced_debug";
      Flow_Generate_Contracts_Name : constant String :=
        "flow_generate_contracts";
      Flow_Termination_Name        : constant String :=
        "flow_termination_proof";
      Flow_Show_GG_Name            : constant String := "flow_show_gg";
      Proof_Generate_Guards_Name   : constant String :=
        "proof_generate_axiom_guards";
      Proof_Warnings_Name          : constant String := "proof_warnings";
      Limit_Units_Name             : constant String := "limit_units";
      Limit_Subp_Name              : constant String := "limit_subp";
      Limit_Region_Name            : constant String := "limit_region";
      Limit_Line_Name              : constant String := "limit_line";
      Pedantic_Name                : constant String := "pedantic";
      No_Loop_Unrolling_Name       : constant String := "no_loop_unrolling";
      Ide_Mode_Name                : constant String := "ide_mode";
      Report_Mode_Name             : constant String := "report_mode";
      Why3_Args_Name               : constant String := "why3_args";
      Why3_Dir_Name                : constant String := "why3_dir";
      CP_Dir_Name                  : constant String := "codepeer_dir";
      CWE_Name                     : constant String := "cwe";
      No_Inlining_Name             : constant String := "no_inlining";
      Info_Messages_Name           : constant String := "info_messages";
      File_Specific_Name           : constant String := "file_specific";
   end Option_Names;

end Gnat2Why_Args;
