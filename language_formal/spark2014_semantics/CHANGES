* Fixed typos:
eample: Vundef has been replaced by Undefined, but some Vundef were
forgotten in the process.

* Split some files.
For example we separate typing related definitions and proofs from
environment definitions. This allows for more flexibility when
modifying early defintions (no need to reprove everything before
testing)


* Add a sequence operator for declarations
The big step semantics of declarations needs to return a final state,
so we need a seq operator for declarations, as for statements.
Therefore no more ...decls... needed. This is maybe not the best way
to do this, we can backtrack.

* Add procedures on the store
To deal with local procedures, we need to store them on the stack.

* Renamed Procedure into Global_Procedure in language.v to avoid clash
with Procedure in values.




* Questions:
** About having a "Sequence" operator for statements
  Is it a good choice? There are several ways of representing the same
  concrete program with this representation. It would maybe be better
  to have something like.

Inductive Statement:=
 Assignment : ...
| loop: ...

Definition Program:= Statement list.

or (for coq related technical reasons) by two mutual inductive types:

Inductive Statement:=
 Assignment : ...
| loop: ...
with Program:=
 Skip: Program
| Seq: Statement -> Program -> Program.

