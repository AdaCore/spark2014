with "gnat2why_c";
with "gnatcoll";

project GNAT2Why is

   for Object_Dir use "obj";
   for Exec_Dir use "../install/bin";

   for Source_Dirs use ("why", ".", "spark", "utils", "..",
                        "flow", "../common", "obj", "gnat_src");

   for Main use ("gnat1drv.adb");


   type Build_Type is ("Debug", "Devel", "Production", "Coverage");
   --  Debug: all checks enabled
   --  Devel: inexpensive checks enabled, expensive checks disabled
   --  Production: all checks disabled

   Build : Build_Type := External ("Build", "Devel");

   Common_Switches := ("-gnatg", "-g");

   package Compiler is
      for Local_Configuration_Pragmas use "gnat.adc";

      case Build is
         when "Debug" | "Devel" =>
            for Switches ("Ada") use
               Common_Switches & ("-O0", "-gnata", "-gnatVa");
         when "Coverage" =>
            for Switches ("Ada") use
               Common_Switches & ("-O0", "-g", "-fpreserve-control-flow",
                                  "-fdump-scos");
         when "Production" =>
            for Switches ("Ada") use
               Common_Switches & ("-O2", "-gnatpn");
      end case;
   end Compiler;

   package Builder is
      for Executable ("gnat1drv.adb") use "gnat2why";

      case Build is
         when "Debug" =>
            for Global_Configuration_Pragmas use "debug.adc";
         when "Devel" =>
            for Global_Configuration_Pragmas use "devel.adc";
         when "Production" | "Coverage" =>
            null;
      end case;

      for Switches ("Ada") use ("-m");
   end Builder;

   package IDE is
      for VCS_Kind use "Auto";
   end IDE;

   package CodePeer is
      for Switches use ("-j0",
                        "-level", "1",
                        "-messages", "min",
                        "-no-html-output",
                        "-no-race-conditions",
                        "-gnatws");

      for Excluded_Source_Dirs use ("gnat_src");

      --  Exclude source files leading to false positives
      for Excluded_Source_Files use
        ("assumptions.ads",
         "assumptions.adb",
         "flow.ads",
         "flow-analysis.adb",
         "flow-analysis-sanity.adb",
         "flow-control_flow_graph.adb",
         "flow-data_dependence_graph.adb",
         "flow_generated_globals-partial.adb",
         "flow_generated_globals-phase_2.adb",
         "flow_utility.adb",
         "flow_visibility.adb",
         "gnat2why-expr.adb",
         "graphs.adb",
         "why-atree-sprint.adb");

   end CodePeer;

end GNAT2Why;
