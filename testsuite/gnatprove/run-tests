#! /usr/bin/env python

from e3.fs import find
from e3.testsuite import Testsuite
from e3.testsuite.testcase_finder import TestFinder, ParsedTest
from e3.testsuite.driver.adacore import AdaCoreLegacyTestDriver
import os
import os.path
import re
import sys


class ProofTestDriver(AdaCoreLegacyTestDriver):

    copy_test_directory = True

    default_testpy = ["from test_support import *", "prove_all()"]

    def get_script_command_line(self):
        script_file = self.working_dir('src', 'test.py')
        with open(script_file, "w") as fn:
            for line in self.default_testpy:
                fn.write(line + '\n')
        self.test_control.opt_results["CMD"] = script_file
        return super().get_script_command_line()


class FlowTestDriver(ProofTestDriver):

    default_testpy = ["from test_support import *", "do_flow()"]


class SPARKTestFinder(TestFinder):
    """Include all direct subdirs of the tests folder."""

    def __init__(self, root_dir, testlist=[], pattern=""):
        """
        Initialize a SPARKTestFinder instance.
        """
        self.testlist = testlist
        self.root_dir = root_dir
        if pattern:
            self.pattern = re.compile(pattern.encode('utf-8'))
        else:
            self.pattern = None

    def file_contains_regex(self, pattern, fn):
        """
        Return True iff the file [fn] contains [pattern], which is a compiled
        regex.
        """
        with open(fn, 'rb') as f:
            for line in f:
                if pattern.search(line):
                    return True
        return False

    def test_contains_pattern(self, test, pattern):
        """
        Return True iff the test contains an .adb/s file that contains
        [pattern], which is a compiled regex.
        """
        return any(self.file_contains_regex(pattern, fn)
                   for fn in find(test, "*.ad[bs]"))

    def probe(self, testsuite, dirpath, dirnames, filenames):
        """
        See documentation of e3.testsuite for the arguments of this method. We
        check if we consider [dirpath] a valid test of the testsuite, and
        return a ParsedTest object in that case, and [None] otherwise.
        """
        parent_name = os.path.dirname(dirpath)
        testname = os.path.basename(dirpath)
        allowed_testdirs = ["tests", "internal"]
        # If the dir is not a direct subdir of <root_dir/tests>, skip it
        if (os.path.basename(parent_name) not in allowed_testdirs or
                os.path.dirname(parent_name) != self.root_dir):
            return None
        # If testlist was passed and the dir is not in testlist, skip it
        if self.testlist and testname not in self.testlist:
            return None
        # If pattern was passed and dir doesn't contain files with the pattern,
        # skip it.
        if (self.pattern and not
                self.test_contains_pattern(dirpath, self.pattern)):
            return None

        # If the test contains a test.py, we use the AdaCoreLegacyTestDriver,
        # otherwise we use the default driver (proof).
        if "test.py" in filenames or "test.cmd" in filenames:
            driver = AdaCoreLegacyTestDriver
        else:
            if "__flow" in testname:
                driver = FlowTestDriver
            else:
                driver = ProofTestDriver
        # This is a valid test, return the ParsedTest object
        return ParsedTest(testname, driver, {}, dirpath)


class SPARKTestsuite(Testsuite):
    """Testsuite for SPARK."""
    @property
    def test_finders(self):
        return [SPARKTestFinder(self.root_dir,
                                self.testlist,
                                self.main.args.pattern)]

    def add_options(self, parser):
        parser.add_argument(
            "--cache", action="store_true",
            help="Use memcached to run testsuite faster")
        parser.add_argument(
            "--diffs", action="store_true",
            help="Synonym of --show-error-output/-E")
        parser.add_argument(
            "--disc", type=str,
            help="discriminants to be used")
        parser.add_argument(
            "--inverse-prover", action="store_true",
            help="run testsuite in inverse-prover mode")
        parser.add_argument(
            "--no-gaia-output", action="store_true",
            help="The opposite of --gaia-output (which is on by default).")
        parser.add_argument(
            "--pattern", type=str,
            help="Argument is a python regex. Run only tests whose \
                  .adb/ads files match the regex.")
        parser.add_argument(
            "--rewrite", action="store_true",
            help="Rewrite test baselines according to current outputs")
        parser.add_argument(
            "--testlist", type=str,
            help="Argument is a file which contains one test \
                  name per line. Run only those tests.")

    def compute_environ(self):
        python_lib = os.path.join(self.root_dir, "lib", "python")
        pypath = "PYTHONPATH"
        if pypath in os.environ:
            os.environ["PYTHONPATH"] += os.path.pathsep + python_lib
        else:
            os.environ["PYTHONPATH"] = python_lib
        if self.main.args.cache:
            os.environ["cache"] = "true"
        if self.main.args.inverse_prover:
            os.environ["inverse_prover"] = "true"
        return dict(os.environ)

    def set_up(self):
        super(SPARKTestsuite, self).set_up()
        if self.main.args.diffs:
            self.main.args.show_error_output = True
        if not self.main.args.no_gaia_output:
            self.main.args.gaia_output = True
        self.env.discs = self.env.discriminants
        if self.main.args.disc:
            self.env.discs += self.main.args.disc.split(',')
        if self.main.args.inverse_prover:
            self.env.discs += "inverse-prover"
        self.env.rewrite_baselines = self.main.args.rewrite
        self.env.test_environ = self.compute_environ()
        if self.main.args.testlist:
            with open(self.main.args.testlist, "r") as f:
                self.testlist = [s.strip() for s in f]
        else:
            self.testlist = []


if __name__ == "__main__":
    sys.exit(SPARKTestsuite().testsuite_main())
