#!/usr/bin/env python

"""
This script will update the expected output of all failed tests.
"""

import os
import re
import shutil
import subprocess
from glob import glob


def get_result(result_file):
    fd = open(result_file, "r")
    tmp = fd.read().strip()
    fd.close()

    return tmp.split(":")[0]


def output_too_long(result_file):
    fd = open(result_file, "r")
    tmp = fd.read().splitlines()
    fd.close()

    return len(tmp) > 1 and re.search("output too long", tmp[1]) is not None


for result_file in glob("out/*.result"):
    # Result is "DIFF" when run locally, and "D" in mailservers/nightly runs
    if get_result(result_file) == "DIFF" or get_result(result_file) == "D":
        # Output is in file .out.filtered when run locally, and in .out in
        # mailservers/nightly runs
        new_out_file = result_file.replace(".result", ".out.filtered")
        if not os.path.exists(new_out_file):
            new_out_file = result_file.replace(".result", ".out")
        old_out_file = result_file.replace("out/", "tests/").replace(
            ".result", "/test.out"
        )
        old_out_dir = result_file.replace("out/", "tests/").replace(".result", "")

        # If not a test in the public testsuite, it must be from internal one
        if not os.path.exists(old_out_dir):
            old_out_file = result_file.replace("out/", "internal/").replace(
                ".result", "/test.out"
            )
            old_out_dir = result_file.replace("out/", "internal/").replace(
                ".result", ""
            )

        if not os.path.exists(old_out_dir):
            print("IGNORE OUTPUT %s" % old_out_file)
            continue

        elif os.path.exists(new_out_file):
            if not os.path.exists(old_out_file):
                shutil.copyfile(new_out_file, old_out_file)
                print("Add output %s" % old_out_file)
                print("THIS OUTPUT SHOULD BE ADDED TO VERSION CONTROL")
            else:
                # If output is truncated due to mailserver limitations, apply the
                # diff file instead
                if output_too_long(new_out_file):
                    diff_file = new_out_file.replace(".out", ".diff")
                    subprocess.run(["patch", "-p", "0", old_out_file, diff_file])
                else:
                    shutil.copyfile(new_out_file, old_out_file)
                print("Update output %s" % old_out_file)
                if os.stat(new_out_file).st_size == 0:
                    print(
                        "THIS EMPTY OUTPUT SHOULD BE REMOVED\
                           FROM VERSION CONTROL"
                    )
        else:
            if os.path.exists(old_out_file):
                os.remove(old_out_file)
                print("Remove output %s" % old_out_file)
