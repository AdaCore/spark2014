#!/usr/bin/env python

"""
This script will update the expected output of all failed tests.
"""

import argparse
from e3.testsuite.optfileparser import OptFileParse
import os
import re
import shutil
import subprocess


parser = argparse.ArgumentParser(description="Script options")
parser.add_argument(
    "--result_dir", required=True, help="the directory with test results"
)
args = parser.parse_args()


def get_result(result_dir, result_file):
    fd = open(os.path.join(result_dir, result_file), "r")
    tmp = fd.read().strip()
    fd.close()
    return tmp.split(":")[0]


def output_too_long(output_file):
    fd = open(output_file, "r")
    tmp = fd.read().splitlines()
    fd.close()
    return len(tmp) > 1 and re.search("output too long", tmp[1]) is not None


def vcs_add(fn):
    d, f = os.path.split(fn)
    subprocess.run("git add " + f, cwd=d, shell=True, check=True)


def vcs_update(fn):
    d, f = os.path.split(fn)
    subprocess.run("git add " + f, cwd=d, shell=True, check=True)


def vcs_remove(fn):
    d, f = os.path.split(fn)
    subprocess.run("git rm " + f, cwd=d, shell=True, check=True)


def update_result(discs, result_dir, result_file):
    # Result is "D" in mailservers/nightly runs for a diff
    if get_result(result_dir, result_file) == "D":
        # Output is in .out in mailservers/nightly runs
        test_name = result_file[0 : -len(".result")]
        out_file = os.path.join(result_dir, result_file.replace(".result", ".out"))
        # If not a test in the public testsuite, it must be from internal one
        test_dir = (
            os.path.join("tests", test_name)
            if os.path.exists(os.path.join("tests", test_name))
            else os.path.join("internal", test_name)
        )
        test_opt = os.path.join(test_dir, "test.opt")
        if os.path.exists(test_opt):
            opt = OptFileParse(discs, test_opt)
            out = opt.get_value("OUT", "test.out")
            test_out = os.path.join(test_dir, out)
        else:
            test_out = os.path.join(test_dir, "test.out")

        print("out_file = " + out_file)

        if not os.path.exists(test_dir):
            print("IGNORE OUTPUT %s" % result_file)

        elif os.path.exists(out_file) and os.stat(out_file).st_size != 0:
            if not os.path.exists(test_out):
                shutil.copyfile(out_file, test_out)
                vcs_add(test_out)
                print("Add output %s" % test_out)
            else:
                # If output is truncated due to mailserver limitations, apply the
                # diff file instead
                if output_too_long(out_file):
                    diff_file = out_file.replace(".out", ".diff")
                    subprocess.run(["patch", "-p", "0", test_out, diff_file])
                else:
                    shutil.copyfile(out_file, test_out)
                vcs_update(test_out)
                print("Update output %s" % test_out)
        else:
            if os.path.exists(test_out):
                vcs_remove(test_out)
                print("Remove output %s" % test_out)


if __name__ == "__main__":
    result_dir = args.result_dir
    discs = ""
    with open(os.path.join(result_dir, "discs"), "r") as f:
        discs = f.read().split(" ")
    for result_file in [fn for fn in os.listdir(result_dir) if fn.endswith(".result")]:
        update_result(discs, result_dir, result_file)
