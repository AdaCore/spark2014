-------------------------------------------------------------------------------
-- Copyright: Omlis Ltd. 2014.  All rights reserved.
--
-- Omlis Confidential.
-- All information contained herein is and remains the property of Omlis Ltd.
-- The intellectual and technical concepts contained herein are proprietary to
-- Omlis Ltd. and may be covered by Patents or Patents in process and are
-- protected by trade secret or copyright law.  Dissemination of this material
-- or reproduction of this material is strictly forbidden unless prior written
-- permission is obtained from Omlis Ltd.
--
-- Description:
--   Defines commonly used types and constants.
-------------------------------------------------------------------------------
with Interfaces;

package CommonTypes is

   --  These are development exceptions, which indicates where work is to be
   --  done.
   UNDEFINED_PROCEDURE : exception;
   UNDEFINED_FUNCTION  : exception;

   --  unsigned byte
   subtype Byte_t is Interfaces.Unsigned_8; -- mod 2**8;

   --  unsigned 16 bit integer
   subtype Word_t is Interfaces.Unsigned_16; -- mod 2**16;

   --  unsigned 32 bit integer
   subtype LongWord_t is Interfaces.Unsigned_32; -- mod 2**32;
   NULLLongWord : constant LongWord_t := Interfaces.Unsigned_32(0);

   --  unsigned 64 bit integer
   subtype LongLongWord_t is Interfaces.Unsigned_64; -- mod 2**64;
   NULLLongLongWord : constant LongLongWord_t := Interfaces.Unsigned_64 (0);

   type ByteArray_t         is array (Integer range <>) of Byte_t;
   NULLByteArray : constant ByteArray_t (1 .. 0) := (others => 0);  -- an array of no bytes
   type WordArray_t         is array (Integer range <>) of Word_t;
   type LongWordArray_t     is array (Integer range <>) of LongWord_t;
   type LongLongWordArray_t is array (Integer range <>) of LongLongWord_t;

   --  8 byte array type
   subtype Index8_t is Integer range 1 .. 8;
   subtype ByteArray8_t is ByteArray_t (Index8_t);

   --  16 byte array type
   subtype Index16_t is Integer range 1 .. 16;
   subtype ByteArray16_t is ByteArray_t (Index16_t);
   NULLByteArray16 : constant ByteArray16_t := ByteArray16_t'(others => 0);

   subtype ByteArray512_t is ByteArray_t (0 .. 511);
   NULLByteArray512 : constant ByteArray512_t :=
     ByteArray512_t'(others => 0);

   subtype ByteArray256_t is ByteArray_t (0 .. 255);
   NULLByteArray256 : constant ByteArray256_t :=
     ByteArray256_t'(others => 0);

   --  ADT for 256-bit value
   type Uint256_t is private;
   NULLUint256 : constant Uint256_t;

   --  256-bit byte array
   --  ByteArray32_t is used in an unchecked conversion so should have a representation clause.
   --  Could not place representation close due to this being a subtype.
   subtype ByteArray32_t is ByteArray_t (0 .. 31);
   NULLByteArray32 : constant ByteArray32_t := (others => 0);

   --  256-bit word array
   subtype WordArray16_t is WordArray_t (0 .. 15);
   NULLWordArray16 : constant WordArray16_t := (others => 0);

   --  256-bit long word array
   subtype LongWordArray8_t is LongWordArray_t (0 .. 7);
   NULLLongWordArray8 : constant LongWordArray8_t := (others => 0);

   --  256-bit long long word array
   subtype LongLongWordArray4_t is LongLongWordArray_t (0 .. 3);
   NULLLongLongWordArray4 : constant LongLongWordArray4_t := (others => 0);

   --  512-bit byte array
   subtype ByteArray64_t is ByteArray_t (0 .. 63);
   NULLByteArray64 : constant ByteArray64_t := (others => 0);

   --  512-bit long word array
   subtype LongWordArray16_t is CommonTypes.LongWordArray_t (0 .. 15);
   NULLLongWordArray16 : constant LongWordArray16_t := (others => 0);

   --  Type used as Salt, generated by Scrypt and used by threefish
   type HashArray_t is new LongWordArray_t;
   subtype HashArray64_t is HashArray_t (0 .. 63);
   NULLHashArray64 : constant HashArray64_t := HashArray64_t'(others => 0);

   --  Type for Hash Array
   subtype HashArray8_t is HashArray_t (0 .. 7);
   NULLHashArray8 : constant HashArray8_t := HashArray8_t'(others => 0);

   --  type for the result of an operation
   type Status_t is (Success, Failure, Timeout);

   --  type for the responses from the Server
   type Ack_t is (Error, Accepted, CardInUse);
   for Ack_t use (Error => 0, Accepted => 1, CardInUse => 2);

   --  type for storing a single digit
   type Digit_t is range 0 .. 9;

   --  type for PIN
   PINLENGTH : constant Integer := 6;
   type PINIndex_t is range 1 .. PINLENGTH;
   type PIN_t is array (PINIndex_t) of Digit_t;
   NOPIN : constant PIN_t;

   --  type for Bank ID
   BANKIDLENGTH : constant Integer := 6;
   type BankIDIndex_t is range 1 .. BANKIDLENGTH;
   type BankID_t is array (BankIDIndex_t) of Digit_t;
   NOBANKID : constant BankID_t;

   --  type for mobile phone number
   PHONENUMBERLENGTH : constant Integer := 12;
   type PhoneNumberIndex_t is range 1 .. PHONENUMBERLENGTH;
   type PhoneNumber_t is array (PhoneNumberIndex_t) of Digit_t;
   NOPHONENUMBER : constant PhoneNumber_t;

   --  type for a hashed phone number
   subtype HashedPhoneNumber_t is LongLongWord_t;

   --  Types Used throughout the application.
   subtype AuthenticationCode_t is LongLongWord_t;
   NULLAuthenticationCode : constant AuthenticationCode_t := 0;

   ---------------------------------------------
   --  Description:
   --    Returns a Uint256 from 32 bytes.
   --
   --  # LOC estimate: 15 #
   ---------------------------------------------
   function Uint256 (Data : ByteArray32_t) return Uint256_t;

   ---------------------------------------------
   --  Description:
   --    Returns a Uint256 from 16 words.
   --
   --  # LOC estimate: 15 #
   ---------------------------------------------
   function Uint256 (Data : WordArray16_t) return Uint256_t;

   ---------------------------------------------
   --  Description:
   --    Returns a Uint256 from 8 long words.
   --
   --  # LOC estimate: 15 #
   ---------------------------------------------
   function Uint256 (Data : LongWordArray8_t) return Uint256_t;

   ---------------------------------------------
   --  Description:
   --    Returns a Uint256 in sprint byte order from 8 long words.
   --
   --  # LOC estimate: 15 #
   ---------------------------------------------
   function Uint256Sprint (Data : LongWordArray8_t) return Uint256_t;

   ---------------------------------------------
   --  Description:
   --    Returns a Uint256 from 4 long long words.
   --
   --  # LOC estimate: 15 #
   ---------------------------------------------
   function Uint256 (Data : LongLongWordArray4_t) return Uint256_t;

   ---------------------------------------------
   --  Description:
   --    Returns a Uint256 as 32 bytes.
   --
   --  # LOC estimate: 15 #
   ---------------------------------------------
   function Uint256AsBytes (Uint256Local : Uint256_t) return ByteArray32_t;

   ---------------------------------------------
   --  Description:
   --    Returns a Uint256 as 16 words.
   --
   --  # LOC estimate: 15 #
   ---------------------------------------------
   function Uint256AsWords (Uint256Local : Uint256_t) return WordArray16_t;

   ---------------------------------------------
   --  Description:
   --    Returns a Uint256 as 8 long words.
   --
   --  # LOC estimate: 15 #
   ---------------------------------------------
   function Uint256AsLongWords (Uint256Local : Uint256_t) return LongWordArray8_t;

   ---------------------------------------------
   --  Description:
   --    Returns a Uint256 as 4 long long words.
   --
   --  # LOC estimate: 15 #
   ---------------------------------------------
   function Uint256AsLongLongWords (Uint256Local : Uint256_t)
                                    return LongLongWordArray4_t;

   ---------------------------------------------
   --  Description :
   --    Takes in a String and returns a Uint2048_t, this allows us to store
   --    'N' as a Hex string.
   --
   --  # LOC estimate: 5 #
   ---------------------------------------------
   function Uint256 (Input : String) return Uint256_t with
     Global => null;

private

    --  No PIN number constant is all zeroes
   NOPIN : constant PIN_t := (others => 0);

   --  No Bank ID constant is all zeroes
   NOBANKID : constant BankID_t := (others => 0);

   --  No Bank ID constant is all zeroes
   NOPHONENUMBER : constant PhoneNumber_t := (others => 0);

   type Uint256_t is record
      Data : ByteArray32_t;
   end record;
   for Uint256_t use record
      Data at 0 range 0 .. 255;
   end record;

   NULLUint256 : constant Uint256_t := Uint256_t'(Data => NULLByteArray32);

end CommonTypes;
