swap_ranges.adb:9:23: info: range check proved (CVC4: 1 VC)
swap_ranges.adb:10:23: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:10:23: info: range check proved (CVC4: 2 VC)
swap_ranges.adb:11:23: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:11:23: info: range check proved (CVC4: 2 VC)
swap_ranges.adb:12:22: info: index check proved (CVC4: 4 VC)
swap_ranges.adb:12:22: info: initialization of "K" proved
swap_ranges.adb:13:13: info: index check proved (CVC4: 4 VC)
swap_ranges.adb:13:16: info: initialization of "K" proved
swap_ranges.adb:13:22: info: index check proved (CVC4: 4 VC)
swap_ranges.adb:13:22: info: initialization of "L" proved
swap_ranges.adb:14:13: info: index check proved (CVC4: 4 VC)
swap_ranges.adb:14:16: info: initialization of "L" proved
swap_ranges.adb:14:19: info: initialization of "Temp" proved
swap_ranges.adb:16:13: info: loop invariant initialization proved (CVC4: 1 VC)
swap_ranges.adb:16:13: medium: loop invariant might fail after first iteration, cannot prove B'Loop_Entry (B'First .. L) = A (A'First..K) (e.g. when A = (1 => 0, 2 => 1, others => 1) and A'First = 1 and B = (others => 0) and B'First = 1)
swap_ranges.adb:16:14: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:16:38: info: initialization of "L" proved
swap_ranges.adb:16:43: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:16:57: info: initialization of "K" proved
swap_ranges.adb:18:13: info: loop invariant initialization proved (CVC4: 1 VC)
swap_ranges.adb:18:13: medium: loop invariant might fail after first iteration, cannot prove A'Loop_Entry (A'First .. K) = B (B'First..L) (e.g. when A = (others => 0) and A'First = 1 and B = (1 => 0, 2 => 1, others => 1) and B'First = 1)
swap_ranges.adb:18:14: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:18:38: info: initialization of "K" proved
swap_ranges.adb:18:43: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:18:57: info: initialization of "L" proved
swap_ranges.adb:20:13: info: loop invariant initialization proved (CVC4: 2 VC)
swap_ranges.adb:23:16: medium: loop invariant might fail after first iteration, cannot prove B'Loop_Entry (L + 1 .. B'Last) = B (L + 1..B'Last) (e.g. when B = (Positive'Last-2 => -1, Positive'Last-1 => -1, Positive'Last => -1, others => -1) and B'Last = 2147483647 and L = Positive'Last-1)
swap_ranges.adb:23:17: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:23:32: info: initialization of "L" proved
swap_ranges.adb:23:32: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:23:49: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:23:54: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:25:13: info: loop invariant initialization proved (CVC4: 2 VC)
swap_ranges.adb:28:16: medium: loop invariant might fail after first iteration, cannot prove A'Loop_Entry (K + 1 .. A'Last) = A (K + 1..A'Last) (e.g. when A = (Positive'Last-2 => 0, Positive'Last-1 => 1, Positive'Last => 0, others => 1) and A'Last = 2147483647 and K = Positive'Last-1)
swap_ranges.adb:28:17: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:28:32: info: initialization of "K" proved
swap_ranges.adb:28:32: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:28:49: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:28:54: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:36:22: info: range check proved (CVC4: 1 VC)
swap_ranges.adb:37:40: info: index check proved (CVC4: 4 VC)
swap_ranges.adb:37:40: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:38:21: info: index check proved (CVC4: 4 VC)
swap_ranges.adb:38:21: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:38:40: info: index check proved (CVC4: 4 VC)
swap_ranges.adb:38:40: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:39:21: info: index check proved (CVC4: 4 VC)
swap_ranges.adb:39:21: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:39:29: info: initialization of "Temp" proved
swap_ranges.adb:42:13: info: loop invariant initialization proved (CVC4: 1 VC)
swap_ranges.adb:42:13: info: loop invariant preservation proved (Z3: 1 VC)
swap_ranges.adb:42:14: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:42:46: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:43:13: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:43:35: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:45:13: info: loop invariant initialization proved (CVC4: 1 VC)
swap_ranges.adb:45:13: info: loop invariant preservation proved (Z3: 1 VC)
swap_ranges.adb:45:14: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:45:46: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:46:13: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:46:35: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:48:13: info: loop invariant initialization proved (CVC4: 2 VC)
swap_ranges.adb:48:13: info: loop invariant preservation proved (CVC4: 2 VC)
swap_ranges.adb:49:23: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:51:16: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:51:37: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:51:41: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:52:15: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:52:26: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:52:30: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:54:13: info: loop invariant initialization proved (CVC4: 2 VC)
swap_ranges.adb:54:13: info: loop invariant preservation proved (CVC4: 2 VC)
swap_ranges.adb:55:23: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:57:16: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:57:37: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:57:41: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:58:15: info: range check proved (CVC4: 8 VC)
swap_ranges.adb:58:26: info: overflow check proved (CVC4: 2 VC)
swap_ranges.adb:58:30: info: overflow check proved (CVC4: 2 VC)
swap_ranges.ads:8:15: medium: postcondition might fail, cannot prove A'Old = B (e.g. when A'First = 0 and A'Last = 0 and A'Old = (others => 0) and B = (others => 0) and B'First = 0 and B'Last = 0)
swap_ranges.ads:14:15: info: postcondition proved (Z3: 2 VC)
