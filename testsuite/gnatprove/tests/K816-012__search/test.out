search.adb:19:10: info: range check proved (CVC4: 2 VC)
search.adb:20:24: medium: assertion might fail, cannot prove Found = 0 and not Found1 and not Found2) or else (Found = 1 and (Found1 or Found2)) or else (Found = 2 and Found1 and Found2 (e.g. when Found = 3 and Found1 = False and Found2 = False)
search.adb:20:25: info: initialization of "Found" proved
search.adb:20:43: info: initialization of "Found1" proved
search.adb:20:58: info: initialization of "Found2" proved
search.adb:23:24: info: initialization of "Found1" proved
search.adb:23:24: medium: assertion might fail, cannot prove Found1 = False or else Found2 = false (e.g. when Found1 = True and Found2 = True)
search.adb:23:47: info: initialization of "Found2" proved
search.adb:24:24: medium: assertion might fail, cannot prove not Found1 or else Table(Index1) = Value1 (e.g. when Found1 = True and Index1 = 0 and Table = (0 => 1, others => 0) and Table'First = 0 and Table'Last = 0 and Value1 = 0)
search.adb:24:28: info: initialization of "Found1" proved
search.adb:24:49: info: initialization of "Index1" proved
search.adb:24:49: medium: array index check might fail (e.g. when Index1 = -1 and Table = (others => 0) and Table'First = 0 and Table'Last = 0)
search.adb:25:24: medium: assertion might fail, cannot prove not Found2 or else Table(Index2) = Value2 (e.g. when Found2 = True and Index2 = 0 and Table = (0 => 1, others => 0) and Table'First = 0 and Table'Last = 0 and Value2 = 0)
search.adb:25:28: info: initialization of "Found2" proved
search.adb:25:49: info: initialization of "Index2" proved
search.adb:25:49: medium: array index check might fail (e.g. when Index2 = -1 and Table = (others => 0) and Table'First = 0 and Table'Last = 0)
search.adb:26:24: info: assertion proved (CodePeer)
search.adb:26:24: info: initialization of "Found" proved
search.adb:27:16: info: initialization of "Found1" proved
search.adb:30:21: info: initialization of "Found" proved
search.adb:30:27: info: overflow check proved (CodePeer)
search.adb:31:27: info: assertion proved (CodePeer)
search.adb:31:27: info: initialization of "Found1" proved
search.adb:31:43: info: initialization of "Index1" proved
search.adb:32:27: info: assertion proved (CodePeer)
search.adb:32:27: info: initialization of "Found" proved
search.adb:34:16: info: initialization of "Found2" proved
search.adb:37:21: info: initialization of "Found" proved
search.adb:37:27: info: overflow check proved (CodePeer)
search.adb:38:27: info: assertion proved (CodePeer)
search.adb:38:27: info: initialization of "Found2" proved
search.adb:38:43: info: initialization of "Index2" proved
search.adb:39:27: info: assertion proved (CVC4: 1 VC)
search.adb:39:27: info: initialization of "Found" proved
search.adb:41:19: info: initialization of "Found" proved
search.adb:53:19: info: index check proved (CVC4: 2 VC)
search.adb:53:51: info: index check proved (CVC4: 2 VC)
search.ads:9:06: info: initialization of "Found1" proved
search.ads:10:06: info: initialization of "Found2" proved
search.ads:11:06: info: initialization of "Index1" proved
search.ads:12:06: info: initialization of "Index2" proved
search.ads:13:25: info: postcondition proved (CVC4: 2 VC)
search.ads:13:29: info: initialization of "Found1" proved
search.ads:13:50: info: initialization of "Index1" proved
search.ads:13:50: medium: array index check might fail (e.g. when Index1 = -1 and Table = (others => 0) and Table'First = 0 and Table'Last = 0)
search.ads:14:29: info: initialization of "Found2" proved
search.ads:14:50: info: initialization of "Index2" proved
search.ads:14:50: medium: array index check might fail (e.g. when Index2 = -1 and Table = (others => 0) and Table'First = 0 and Table'Last = 0)
search.ads:24:25: info: postcondition proved (CVC4: 3 VC)
search.ads:24:53: info: index check proved (CVC4: 2 VC)
search.ads:25:55: info: index check proved (CVC4: 2 VC)
