main.adb:11:04: info: cannot unroll loop (too many loop iterations)
main.adb:11:04: info: in instantiation at parent.adb:20
main.adb:17:04: info: initialization of "Complex_One" proved
main.adb:17:17: info: initialization of "Complex_Two" proved
main.adb:23:10: warning: assuming "TEST" always terminates
main.adb:23:10: warning: no Always_Terminates aspect available for "TEST" [assumed-always-terminates]
main.adb:33:18: medium: precondition might fail
main.adb:33:18: warning: assuming "FAILED" always terminates
main.adb:33:18: warning: no Always_Terminates aspect available for "FAILED" [assumed-always-terminates]
main.adb:43:18: medium: precondition might fail
main.adb:43:18: warning: assuming "FAILED" always terminates
main.adb:43:18: warning: no Always_Terminates aspect available for "FAILED" [assumed-always-terminates]
main.adb:46:10: warning: assuming "RESULT" always terminates
main.adb:46:10: warning: no Always_Terminates aspect available for "RESULT" [assumed-always-terminates]
parent-child.adb:7:27: medium: overflow check might fail, cannot prove lower bound for Left.Real + Right.Real, in instantiation at parent.adb:11, in instantiation at main.adb:11 [reason for check: result of addition must fit in a 8-bits machine integer] [possible fix: add precondition (if Right.Real >= 0 then Left.Real <= 127 - Right.Real else Left.Real >= -128 - Right.Real) to subprogram at parent-child.ads:14]
parent-child.adb:7:27: medium: range check might fail, cannot prove lower bound for Left.Real + Right.Real, in instantiation at parent.adb:11, in instantiation at main.adb:11 [reason for check: result of addition must fit in component type] [possible fix: add precondition (if Right.Real >= 0 then Left.Real <= My_Integer'Last - Right.Real else Left.Real >= My_Integer'First - Right.Real) to subprogram at parent-child.ads:14]
parent-child.adb:7:51: medium: overflow check might fail, cannot prove lower bound for Left.Imag + Right.Imag, in instantiation at parent.adb:11, in instantiation at main.adb:11 [reason for check: result of addition must fit in a 8-bits machine integer] [possible fix: add precondition (if Right.Imag >= 0 then Left.Imag <= 127 - Right.Imag else Left.Imag >= -128 - Right.Imag) to subprogram at parent-child.ads:14]
parent-child.adb:7:51: medium: range check might fail, cannot prove lower bound for Left.Imag + Right.Imag, in instantiation at parent.adb:11, in instantiation at main.adb:11 [reason for check: result of addition must fit in component type] [possible fix: add precondition (if Right.Imag >= 0 then Left.Imag <= My_Integer'Last - Right.Imag else Left.Imag >= My_Integer'First - Right.Imag) to subprogram at parent-child.ads:14]
parent-child.ads:14:13: info: implicit aspect Always_Terminates on overriding operator "+" has been proved, subprogram will terminate, in instantiation at parent.adb:11, in instantiation at main.adb:11
parent-child.ads:17:13: info: implicit aspect Always_Terminates on overriding operator "-" has been proved, subprogram will terminate, in instantiation at parent.adb:11, in instantiation at main.adb:11
parent.ads:64:13: info: implicit aspect Always_Terminates on "Real_Part" has been proved, subprogram will terminate, in instantiation at main.adb:11
parent.ads:67:13: info: implicit aspect Always_Terminates on "Imag_Part" has been proved, subprogram will terminate, in instantiation at main.adb:11
parent.ads:70:13: info: implicit aspect Always_Terminates on "Complex" has been proved, subprogram will terminate, in instantiation at main.adb:11
parent.ads:74:13: info: implicit aspect Always_Terminates on overriding operator "*" has been proved, subprogram will terminate, in instantiation at main.adb:11
