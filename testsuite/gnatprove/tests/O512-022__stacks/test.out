main.adb:7:04: info: initialization of "Max" proved
main.adb:10:04: medium: unexpected exception might be raised
main.adb:10:09: medium: in value of subprogram parameter after the call at main.adb:10
main.adb:10:09: medium: range check might fail, cannot prove lower bound for Max [reason for check: output value must fit in argument type] [possible fix: postcondition of call at line 10 should mention Item (for argument Max)]
main.adb:11:04: medium: unexpected exception might be raised
main.adb:15:18: info: range check proved (CVC5: 2 VC)
main.adb:22:13: info: initialization of "Cmd" proved
main.adb:23:13: info: initialization of "Last" proved
main.adb:24:13: info: initialization of "V" proved
main.adb:27:13: medium: unexpected exception might be raised
main.adb:27:22: medium: in value of subprogram parameter after the call at main.adb:27
main.adb:27:22: medium: initialization check might fail
main.adb:28:34: info: range check proved (CVC5: 4 VC)
main.adb:29:16: medium: private part of "S" might not be initialized
main.adb:29:17: medium: precondition might fail [possible fix: loop at line 18 should mention S in a loop invariant]
main.adb:34:38: info: range check proved (CVC5: 4 VC)
main.adb:35:16: medium: unexpected exception might be raised
main.adb:35:21: info: range check proved (CVC5: 4 VC)
main.adb:35:41: warning: "Pos" is set by "Get" but not used after the call
main.adb:36:16: medium: private part of "S" might not be initialized
main.adb:36:17: medium: precondition might fail [possible fix: loop at line 18 should mention S in a loop invariant]
stacks.adb:11:22: medium: overflow check might fail, cannot prove upper bound for S.Top + 1 [reason for check: result of addition must fit in a 32-bits machine integer]
stacks.adb:12:16: medium: array index check might fail [reason for check: value must be a valid index into the array]
stacks.adb:21:22: info: range check proved (CVC5: 2 VC)
stacks.adb:27:35: info: cannot unroll loop (too many loop iterations)
stacks.adb:28:38: medium: array index check might fail [reason for check: value must be a valid index into the array]
stacks.ads:8:13: info: implicit aspect Always_Terminates on "Is_Empty" has been proved, subprogram will terminate
stacks.ads:18:13: info: implicit aspect Always_Terminates on "Is_Full" has been proved, subprogram will terminate
stacks.ads:24:13: info: implicit aspect Always_Terminates on "Size" has been proved, subprogram will terminate
stacks.ads:28:20: info: postcondition proved (CVC5: 1 VC)
stacks.ads:28:40: medium: overflow check might fail, cannot prove upper bound for S.Size'Old + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
stacks.ads:48:20: info: postcondition proved (CVC5: 1 VC)
stacks.ads:66:13: info: implicit aspect Always_Terminates on "Peer" has been proved, subprogram will terminate
stacks.ads:75:07: info: range check proved (CVC5: 2 VC)
stacks.ads:84:58: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: add precondition (S.Top in 1 .. Max) to subprogram at line 66]
