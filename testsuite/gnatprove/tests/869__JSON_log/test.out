simple.adb:5:16: high: range check might fail, cannot prove upper bound for X + Y (e.g. when X = 10 and Y = 1) [reason for check: returned value must fit in the result type of the function] [possible fix: add precondition (X <= T'Last - Y) to subprogram at simple.ads:12]
simple.adb:10:16: high: range check might fail, cannot prove upper bound for X * Y (e.g. when X = 2 and Y = 6) [reason for check: returned value must fit in the result type of the function] [possible fix: add precondition (X * Y <= T'Last) to subprogram at simple.ads:15]
simple.adb:15:24: high: overflow check might fail, cannot prove upper bound for Alice.Age + Bob.Age (e.g. when Alice = (Name => (others => 'NUL'), Age => Lifetime'Last) and Bob = (Name => (others => 'NUL'), Age => 8)) [reason for check: result of addition must fit in a 8-bits machine integer] [possible fix: add precondition (Alice.Age <= 127 - Bob.Age) to subprogram at simple.ads:18]
simple.adb:15:24: high: range check might fail, cannot prove upper bound for Alice.Age + Bob.Age (e.g. when Alice = (Name => (others => 'NUL'), Age => Lifetime'Last) and Bob = (Name => (others => 'NUL'), Age => 1)) [reason for check: returned value must fit in the result type of the function] [possible fix: add precondition (Alice.Age <= Lifetime'Last - Bob.Age) to subprogram at simple.ads:18]
simple.adb:20:18: high: divide by zero might fail (e.g. when N = 3.1415000E+0) [possible fix: add precondition ((N - 3.1415) /= 0) to subprogram at simple.ads:20]
simple.adb:20:18: info: float overflow check proved (colibri: 1 VC)
simple.adb:20:23: info: float overflow check proved (CVC5: 1 VC)
simple.adb:25:28: high: range check might fail, cannot prove upper bound for A (1) + A (2) + A (0) (e.g. when A = (0 => 0, 1 => 10, 2 => 1)) [reason for check: returned value must fit in the result type of the function] [possible fix: add precondition (A (1) + A (2) <= T'Last - A (0)) to subprogram at simple.ads:26]
simple.adb:29:07: info: initialization of "Z" proved
simple.adb:31:18: info: range check proved (CVC5: 2 VC)
simple.adb:32:16: high: divide by zero might fail (e.g. when Z = 0)
simple.adb:37:16: high: overflow check might fail, cannot prove upper bound for X * Y (e.g. when X = 129/128 and Y = 255) [reason for check: result of fixed-point multiplication must fit in the underlying 16-bits machine integer] [possible fix: subprogram at simple.ads:33 should mention X and Y in a precondition]
simple.adb:37:16: high: range check might fail, cannot prove upper bound for X * Y (e.g. when X = 129/128 and Y = 254) [reason for check: returned value must fit in the result type of the function] [possible fix: subprogram at simple.ads:33 should mention X and Y in a precondition]
simple.adb:42:16: high: divide by zero might fail (e.g. when N = 0) [possible fix: add precondition (N /= 0) to subprogram at simple.ads:35]
simple.adb:47:22: high: assertion might fail (e.g. when F = 2.4691358E+0) [possible fix: subprogram at simple.ads:37 should mention F in a precondition]
simple.adb:53:31: info: cannot unroll loop (too many loop iterations) [info-unrolling-inlining]
simple.adb:54:33: medium: overflow check might fail, cannot prove upper bound for Total_Age + Integer (T.People (N).Age) [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: loop at line 53 should mention Total_Age in a loop invariant]
simple.adb:56:22: high: assertion might fail (e.g. when Total_Age = 0) [possible fix: loop at line 53 should mention Total_Age in a loop invariant]
simple.adb:61:22: high: assertion might fail (e.g. when A = Chicken) [possible fix: subprogram at simple.ads:50 should mention A in a precondition]
simple.adb:66:22: high: assertion might fail (e.g. when S = "Michel" and S'First = 7) [possible fix: subprogram at simple.ads:52 should mention S in a precondition]
simple.ads:12:13: info: implicit aspect Always_Terminates on "Foo" has been proved, subprogram will terminate
simple.ads:13:19: info: postcondition proved (CVC5: 1 VC)
simple.ads:15:13: info: implicit aspect Always_Terminates on "Bar" has been proved, subprogram will terminate
simple.ads:16:19: info: postcondition proved (CVC5: 1 VC)
simple.ads:18:13: info: implicit aspect Always_Terminates on "Sum_People" has been proved, subprogram will terminate
simple.ads:20:13: info: implicit aspect Always_Terminates on "Div_Float" has been proved, subprogram will terminate
simple.ads:26:13: info: implicit aspect Always_Terminates on "Add_Array" has been proved, subprogram will terminate
simple.ads:28:13: info: implicit aspect Always_Terminates on "Nested_CE" has been proved, subprogram will terminate
simple.ads:33:13: info: implicit aspect Always_Terminates on "Fixed_Point" has been proved, subprogram will terminate
simple.ads:35:13: info: implicit aspect Always_Terminates on "Obvious_Div_By_Zero" has been proved, subprogram will terminate
simple.ads:37:14: warning: subprogram "Float_Precision" has no effect
simple.ads:46:14: warning: subprogram "Check_Town" has no effect
simple.ads:50:14: warning: subprogram "Mammals" has no effect
simple.ads:52:14: warning: subprogram "Not_Michel" has no effect
counterexample expected for check at simple.adb:5
  trace at simple.adb:5 --> X = 10 and Y = 1
  trace at simple.ads:12 --> X = 10 and Y = 1
counterexample expected for check at simple.adb:10
  trace at simple.adb:10 --> X = 2 and Y = 6
  trace at simple.ads:15 --> X = 2 and Y = 6
counterexample expected for check at simple.adb:15
  trace at simple.adb:15 --> Alice = (Name => (others => 'NUL'), Age => Lifetime'Last) and Bob = (Name => (others => 'NUL'), Age => 1)
  trace at simple.ads:18 --> Alice = (Name => (others => 'NUL'), Age => Lifetime'Last) and Bob = (Name => (others => 'NUL'), Age => 1)
counterexample expected for check at simple.adb:20
  trace at simple.adb:20 --> N = 3.1415000E+0
  trace at simple.ads:20 --> N = 3.1415000E+0
counterexample expected for check at simple.adb:25
  trace at simple.adb:25 --> A = (0 => 0, 1 => 10, 2 => 1)
  trace at simple.ads:26 --> A = (0 => 0, 1 => 10, 2 => 1)
counterexample expected for check at simple.adb:32
  trace at simple.adb:31 --> Z = 0
  trace at simple.adb:32 --> Z = 0
  trace at simple.ads:28 --> X = 5 and Y = 0
counterexample expected for check at simple.adb:37
  trace at simple.adb:37 --> X = 129/128 and Y = 254
  trace at simple.ads:33 --> X = 129/128 and Y = 254
counterexample expected for check at simple.adb:42
  trace at simple.adb:42 --> N = 0
  trace at simple.ads:35 --> N = 0
counterexample expected for check at simple.adb:47
  trace at simple.adb:47 --> F = 2.4691358E+0
  trace at simple.ads:37 --> F = 2.4691358E+0
counterexample expected for check at simple.adb:56
  trace at simple.adb:51 --> Total_Age = 0
  trace at simple.adb:56 --> Total_Age = 0
  trace at simple.ads:46 --> T = (Name => (others => 'NUL'), People => (others => (Name => (others => 'NUL'), Age => 0)))
counterexample expected for check at simple.adb:61
  trace at simple.adb:61 --> A = Chicken
  trace at simple.ads:50 --> A = Chicken
counterexample expected for check at simple.adb:66
  trace at simple.adb:66 --> S = "Michel" and S'First = 7
  trace at simple.ads:52 --> S = "Michel" and S'First = 7
