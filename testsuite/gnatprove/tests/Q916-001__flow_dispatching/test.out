ints.adb:12:30: info: overflow check proved (CVC4: 2 VC)
ints.adb:18:19: low: range check might fail, cannot prove upper bound for Msg & " - " [reason for check: input value must fit in parameter type] [possible fix: subprogram at ints.ads:13 should mention Msg in a precondition]
ints.adb:20:34: info: range check proved (CVC4: 2 VC)
ints.adb:20:59: info: range check proved (CVC4: 2 VC)
ints.adb:21:29: info: range check proved (CVC4: 2 VC)
ints.adb:21:54: info: range check proved (CVC4: 2 VC)
ints.adb:22:31: info: range check proved (CVC4: 2 VC)
ints.adb:22:58: info: range check proved (CVC4: 2 VC)
ints.adb:27:10: info: precondition proved (CVC4: 1 VC)
ints.adb:31:08: medium: overflow check might fail, cannot prove upper bound for abs (Arg1.Value - Arg2.Value) [reason for check: result of absolute value must fit in a 32-bits machine integer] [possible fix: add precondition (abs (Arg1.Value - Arg2.Value) in Integer) to subprogram at ints.ads:25]
ints.adb:31:24: medium: overflow check might fail, cannot prove lower bound for Arg1.Value - Arg2.Value [reason for check: result of subtraction must fit in a 32-bits machine integer] [possible fix: add precondition (Arg1.Value - Arg2.Value in Integer) to subprogram at ints.ads:25]
ints.adb:31:56: medium: overflow check might fail, cannot prove upper bound for Arg1.Precision + Arg2.Precision [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: add precondition (Arg1.Precision + Arg2.Precision in Integer) to subprogram at ints.ads:25]
ints.adb:35:30: info: overflow check proved (CVC4: 2 VC)
ints.adb:41:19: low: range check might fail, cannot prove upper bound for Msg & " - " [reason for check: input value must fit in parameter type] [possible fix: subprogram at ints.ads:28 should mention Msg in a precondition]
ints.adb:43:34: info: range check proved (CVC4: 2 VC)
ints.adb:43:59: info: range check proved (CVC4: 2 VC)
ints.adb:44:29: info: range check proved (CVC4: 2 VC)
ints.adb:44:54: info: range check proved (CVC4: 2 VC)
ints.adb:45:31: info: range check proved (CVC4: 2 VC)
ints.adb:45:58: info: range check proved (CVC4: 2 VC)
ints.adb:46:35: info: range check proved (CVC4: 2 VC)
ints.adb:46:66: info: range check proved (CVC4: 2 VC)
ints.adb:51:38: medium: overflow check might fail, cannot prove upper bound for Arg.Precision + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: subprogram at ints.ads:30 should mention Arg in a precondition]
ints.ads:11:40: medium: overflow check might fail, cannot prove lower bound for Arg.Max - 10 [reason for check: result of subtraction must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
ints.ads:12:20: info: postcondition proved (CVC4: 1 VC)
ints.ads:12:20: info: postcondition proved (CVC4: 1 VC), in inherited contract at ints.ads:26
ints.ads:16:34: medium: overflow check might fail, cannot prove lower bound for Arg.Max - 10 [reason for check: result of subtraction must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
ints.ads:17:14: info: postcondition proved (CVC4: 1 VC)
test_ints.adb:12:04: info: precondition proved (CVC4: 1 VC)
test_ints.adb:13:05: medium: precondition might fail
test_ints.adb:15:04: info: precondition proved (CVC4: 1 VC)
test_ints.adb:16:04: medium: precondition might fail [possible fix: call at line 15 should mention Arg (for argument AI) in a postcondition]
test_ints.adb:24:09: medium: precondition might fail
test_ints.adb:31:09: medium: precondition might fail
test_ints.adb:35:04: medium: precondition might fail
test_ints.adb:36:04: medium: precondition might fail
