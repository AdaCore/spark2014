abs_controller_oem_with_property.adb:25:07: info: initialization of "EpsIfZero_out1" proved
abs_controller_oem_with_property.adb:26:07: info: initialization of "Diff_out1" proved
abs_controller_oem_with_property.adb:27:07: info: initialization of "Difference_out1" proved
abs_controller_oem_with_property.adb:28:07: info: initialization of "Sum_out1" proved
abs_controller_oem_with_property.adb:33:22: info: assertion proved (CVC5: 1 VC)
abs_controller_oem_with_property.adb:56:26: info: float overflow check proved (colibri: 1 VC)
abs_controller_oem_with_property.adb:56:43: info: division check proved (colibri: 1 VC)
abs_controller_oem_with_property.adb:56:43: medium: float overflow check might fail [reason for check: result of floating-point division must be bounded]
abs_controller_oem_with_property.adb:64:32: info: float overflow check proved (colibri: 1 VC)
abs_controller_oem_with_property.adb:74:71: medium: float overflow check might fail [reason for check: result of floating-point subtraction must be bounded] [possible fix: you should consider adding a postcondition to function Boolean_To_Long_Float or turning it into an expression function in its unit spec]
abs_controller_oem_with_property.adb:88:22: medium: assertion might fail [user message: Violation of assertion at block ABS_Controller_oem_with_property/Applies Brake/nWhen At Rest/nConsequent] [possible fix: precondition of subprogram at abs_controller_oem_with_property.ads:17 should mention Vehicle_Speed]
abs_controller_oem_with_property.ads:20:08: info: initialization of "Apply_Brakes" proved
abs_controller_supplier_with_property.adb:27:07: info: initialization of "Sum_out1" proved
abs_controller_supplier_with_property.adb:28:07: info: initialization of "Sum_1_out1" proved
abs_controller_supplier_with_property.adb:29:07: info: initialization of "At_Rest_Switch_out1" proved
abs_controller_supplier_with_property.adb:30:07: info: initialization of "Sum_1_out1_sat" proved
abs_controller_supplier_with_property.adb:49:40: high: range check might fail, cannot prove upper bound for (10) * (Wheel_Speed) (e.g. when Wheel_Speed = 644245095) [reason for check: result of multiplication must be convertible to the target type of the conversion] [possible fix: add precondition ((10) * (Wheel_Speed) <= Unsigned_32(Integer_32'Last)) to subprogram at abs_controller_supplier_with_property.ads:19]
abs_controller_supplier_with_property.adb:49:58: info: overflow check proved (colibri: 2 VC)
abs_controller_supplier_with_property.adb:49:77: high: range check might fail, cannot prove upper bound for (8) * (Vehicle_Speed) (e.g. when Vehicle_Speed = Unsigned_32'Last) [reason for check: result of multiplication must be convertible to the target type of the conversion] [possible fix: add precondition ((8) * (Vehicle_Speed) <= Unsigned_32(Integer_32'Last)) to subprogram at abs_controller_supplier_with_property.ads:19]
abs_controller_supplier_with_property.adb:53:82: medium: overflow check might fail, cannot prove lower bound for (Boolean_To_Integer_8 ((Sum_out1) > (0))) - (Boolean_To_Integer_8 ((Sum_out1) < (0))) [reason for check: result of subtraction must fit in a 8-bits machine integer] [possible fix: you should consider adding a postcondition to function Boolean_To_Integer_8 or turning it into an expression function in its unit spec]
abs_controller_supplier_with_property.adb:62:41: info: range check proved (CVC5: 2 VC)
abs_controller_supplier_with_property.adb:93:22: info: assertion proved (CVC5: 1 VC)
abs_controller_supplier_with_property.ads:22:08: info: initialization of "Apply_Brakes" proved
assertionproperties.adb:21:07: info: initialization of "Sqrt_out1" proved
assertionproperties.adb:36:22: info: assertion proved (CVC5: 1 VC)
assertionproperties.adb:43:22: medium: assertion might fail [user message: Violation of assertion at block AssertionProperties/Consequent]
assertionproperties.ads:18:46: info: initialization of "y" proved
biaseddivide.adb:24:16: info: division check proved (colibri: 1 VC)
biaseddivide.adb:24:16: medium: float overflow check might fail [reason for check: result of floating-point division must be bounded] [possible fix: precondition of subprogram at biaseddivide.ads:16 should mention y]
biaseddivide.adb:24:23: info: float overflow check proved (colibri: 1 VC)
biaseddivide.ads:16:52: info: initialization of "r" proved
biaseddivide.ads:19:14: info: postcondition proved (CVC5: 1 VC)
biaseddivide.ads:19:20: info: division check proved (colibri: 1 VC)
biaseddivide.ads:19:20: info: float overflow check proved (CVC5: 1 VC)
biaseddivide.ads:19:25: info: float overflow check proved (CVC5: 1 VC)
dynamicsaturateassert.adb:24:07: info: initialization of "Saturation_Dynamic_out1" proved
dynamicsaturateassert.adb:58:22: info: assertion proved (CVC5: 2 VC)
dynamicsaturateassert.adb:71:22: info: assertion proved (CVC5: 1 VC)
dynamicsaturateassert.ads:23:08: info: initialization of "Saturated_Value" proved
errorexample.adb:23:07: info: initialization of "Abs_out1" proved
errorexample.adb:28:22: info: assertion proved (CVC5: 1 VC)
errorexample.adb:38:65: info: division check proved (CVC5: 1 VC)
errorexample.adb:47:22: high: assertion might fail [user message: Violation of assertion at block ErrorExample/Consequent:/nAcceptable/nRelative Error/n] (e.g. when Abs_out1 = 286331151)
errorexample.adb:47:35: info: range check proved (Trivial)
errorexample.ads:22:08: info: initialization of "Relative_Error" proved
errorexample.ads:26:14: info: postcondition proved (CVC5: 1 VC)
errorexample.ads:26:77: info: division check proved (CVC5: 1 VC)
errorexamplefloat.adb:24:07: info: initialization of "Abs_out1" proved
errorexamplefloat.adb:29:22: info: assertion proved (CVC5: 1 VC)
errorexamplefloat.adb:39:43: info: float overflow check proved (colibri: 1 VC)
errorexamplefloat.adb:39:65: info: division check proved (CVC5: 1 VC)
errorexamplefloat.adb:39:65: info: float overflow check proved (colibri: 1 VC)
errorexamplefloat.adb:48:22: medium: assertion might fail [user message: Violation of assertion at block ErrorExampleFloat/Consequent:/nAcceptable/nRelative Error/n]
errorexamplefloat.ads:21:08: info: initialization of "Relative_Error" proved
simulink_functions.adb:32:13: info: types in unchecked conversion have the same size (Trivial)
simulink_functions.adb:32:65: info: type is suitable as source for unchecked conversion (Trivial)
simulink_functions.adb:33:65: info: type is suitable for unchecked conversion (Trivial)
simulink_functions.adb:34:13: info: types in unchecked conversion have the same size (Trivial)
simulink_functions.adb:34:67: info: type is suitable as source for unchecked conversion (Trivial)
simulink_functions.adb:35:67: info: type is suitable for unchecked conversion (Trivial)
simulink_functions.adb:36:13: info: types in unchecked conversion have the same size (Trivial)
simulink_functions.adb:36:67: info: type is suitable as source for unchecked conversion (Trivial)
simulink_functions.adb:37:67: info: type is suitable for unchecked conversion (Trivial)
simulink_functions.adb:41:13: info: types in unchecked conversion have the same size (Trivial)
simulink_functions.adb:41:65: info: type is suitable as source for unchecked conversion (Trivial)
simulink_functions.adb:42:65: info: type is suitable for unchecked conversion (Trivial)
simulink_functions.adb:43:13: info: types in unchecked conversion have the same size (Trivial)
simulink_functions.adb:43:67: info: type is suitable as source for unchecked conversion (Trivial)
simulink_functions.adb:44:67: info: type is suitable for unchecked conversion (Trivial)
simulink_functions.adb:45:13: info: types in unchecked conversion have the same size (Trivial)
simulink_functions.adb:45:67: info: type is suitable as source for unchecked conversion (Trivial)
simulink_functions.adb:46:67: info: type is suitable for unchecked conversion (Trivial)
simulink_functions.adb:48:13: high: types used for unchecked conversion do not have the same size [possible explanation: Size of type Unsigned_32 and type Unsigned_16 differ]
simulink_functions.adb:48:65: info: type is suitable as source for unchecked conversion (Trivial)
simulink_functions.adb:49:67: info: type is suitable for unchecked conversion (Trivial)
simulink_functions.adb:50:13: high: types used for unchecked conversion do not have the same size [possible explanation: Size of type Unsigned_32 and type Unsigned_8 differ]
simulink_functions.adb:50:64: info: type is suitable as source for unchecked conversion (Trivial)
simulink_functions.adb:51:67: info: type is suitable for unchecked conversion (Trivial)
simulink_functions.adb:52:13: high: types used for unchecked conversion do not have the same size [possible explanation: Size of type Unsigned_32 and type Integer_16 differ]
simulink_functions.adb:52:67: info: type is suitable as source for unchecked conversion (Trivial)
simulink_functions.adb:53:67: info: type is suitable for unchecked conversion (Trivial)
simulink_functions.adb:54:13: high: types used for unchecked conversion do not have the same size [possible explanation: Size of type Unsigned_32 and type Integer_8 differ]
simulink_functions.adb:54:66: info: type is suitable as source for unchecked conversion (Trivial)
simulink_functions.adb:55:67: info: type is suitable for unchecked conversion (Trivial)
simulink_functions.adb:171:47: medium: overflow check might fail [reason for check: value must fit in a 32-bits machine integer] [possible fix: subprogram at simulink_functions.ads:55 should mention F in a precondition]
simulink_functions.adb:180:52: medium: overflow check might fail [reason for check: value must fit in a 64-bits machine integer] [possible fix: subprogram at simulink_functions.ads:56 should mention F in a precondition]
simulink_functions.adb:189:47: high: precondition might fail (e.g. when F = 0.0) [possible fix: subprogram at simulink_functions.ads:58 should mention F in a precondition]
simulink_functions.adb:199:14: high: precondition might fail (e.g. when F = 0.0) [possible fix: subprogram at simulink_functions.ads:59 should mention F in a precondition]
simulink_functions.adb:208:47: high: precondition might fail (e.g. when F = 0.0) [possible fix: subprogram at simulink_functions.ads:61 should mention F in a precondition]
simulink_functions.adb:219:14: high: precondition might fail (e.g. when F = 0.0) [possible fix: subprogram at simulink_functions.ads:62 should mention F in a precondition]
simulink_functions.adb:234:40: high: overflow check might fail, cannot prove upper bound for abs (Left) (e.g. when Left = Integer_8'First) [reason for check: result of absolute value must fit in a 8-bits machine integer] [possible fix: add precondition (abs (Left) <= 127) to subprogram at simulink_functions.ads:64]
simulink_functions.adb:234:51: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:234:51: info: range check proved (CVC5: 2 VC)
simulink_functions.adb:234:53: high: overflow check might fail, cannot prove upper bound for abs (Right) (e.g. when Right = Integer_8'First) [reason for check: result of absolute value must fit in a 8-bits machine integer] [possible fix: add precondition (abs (Right) <= 127) to subprogram at simulink_functions.ads:64]
simulink_functions.adb:236:28: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:236:36: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:236:47: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:236:52: high: overflow check might fail, cannot prove lower bound for ((-1) * Quotient - 1) * Right (e.g. when Quotient = 3 and Right = 40) [reason for check: result of multiplication must fit in a 8-bits machine integer] [possible fix: subprogram at simulink_functions.ads:64 should mention Left and Right in a precondition]
simulink_functions.adb:239:25: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:239:33: high: overflow check might fail, cannot prove upper bound for (Left / Right) (e.g. when Left = Integer_8'First and Right = -1) [reason for check: result of division must fit in a 8-bits machine integer] [possible fix: add precondition ((Left / Right) <= 127) to subprogram at simulink_functions.ads:64]
simulink_functions.adb:239:33: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:239:42: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:255:41: high: overflow check might fail, cannot prove upper bound for abs (Left) (e.g. when Left = Integer_16'First) [reason for check: result of absolute value must fit in a 16-bits machine integer] [possible fix: add precondition (abs (Left) <= 32767) to subprogram at simulink_functions.ads:65]
simulink_functions.adb:255:52: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:255:52: info: range check proved (CVC5: 2 VC)
simulink_functions.adb:255:54: high: overflow check might fail, cannot prove upper bound for abs (Right) (e.g. when Right = Integer_16'First) [reason for check: result of absolute value must fit in a 16-bits machine integer] [possible fix: add precondition (abs (Right) <= 32767) to subprogram at simulink_functions.ads:65]
simulink_functions.adb:257:28: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:257:36: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:257:47: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:257:52: high: overflow check might fail, cannot prove lower bound for ((-1) * Quotient - 1) * Right (e.g. when Quotient = 3 and Right = 10920) [reason for check: result of multiplication must fit in a 16-bits machine integer] [possible fix: subprogram at simulink_functions.ads:65 should mention Left and Right in a precondition]
simulink_functions.adb:261:20: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:261:28: high: overflow check might fail, cannot prove upper bound for (Left / Right) (e.g. when Left = Integer_16'First and Right = -1) [reason for check: result of division must fit in a 16-bits machine integer] [possible fix: add precondition ((Left / Right) <= 32767) to subprogram at simulink_functions.ads:65]
simulink_functions.adb:261:28: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:261:37: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:277:41: high: overflow check might fail, cannot prove upper bound for abs (Left) (e.g. when Left = Integer_32'First) [reason for check: result of absolute value must fit in a 32-bits machine integer] [possible fix: add precondition (abs (Left) <= 2147483647) to subprogram at simulink_functions.ads:66]
simulink_functions.adb:277:52: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:277:52: info: range check proved (CVC5: 2 VC)
simulink_functions.adb:277:54: high: overflow check might fail, cannot prove upper bound for abs (Right) (e.g. when Right = Integer_32'First) [reason for check: result of absolute value must fit in a 32-bits machine integer] [possible fix: add precondition (abs (Right) <= 2147483647) to subprogram at simulink_functions.ads:66]
simulink_functions.adb:279:28: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:279:36: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:279:47: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:279:52: high: overflow check might fail, cannot prove lower bound for ((-1) * Quotient - 1) * Right (e.g. when Quotient = 3 and Right = 715827880) [reason for check: result of multiplication must fit in a 32-bits machine integer] [possible fix: subprogram at simulink_functions.ads:66 should mention Left and Right in a precondition]
simulink_functions.adb:283:20: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:283:28: high: overflow check might fail, cannot prove upper bound for (Left / Right) (e.g. when Left = Integer_32'First and Right = -1) [reason for check: result of division must fit in a 32-bits machine integer] [possible fix: add precondition ((Left / Right) <= 2147483647) to subprogram at simulink_functions.ads:66]
simulink_functions.adb:283:28: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:283:37: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:297:30: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:310:30: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:323:30: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:336:22: medium: float overflow check might fail [reason for check: result of floating-point subtraction must be bounded] [possible fix: subprogram at simulink_functions.ads:72 should mention Left and Right in a precondition]
simulink_functions.adb:336:42: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:336:42: medium: float overflow check might fail [reason for check: result of floating-point division must be bounded] [possible fix: subprogram at simulink_functions.ads:72 should mention Left and Right in a precondition]
simulink_functions.adb:336:51: medium: float overflow check might fail [reason for check: result of floating-point multiplication must be bounded] [possible fix: subprogram at simulink_functions.ads:72 should mention Left and Right in a precondition]
simulink_functions.adb:349:22: medium: float overflow check might fail [reason for check: result of floating-point subtraction must be bounded] [possible fix: subprogram at simulink_functions.ads:73 should mention Left and Right in a precondition]
simulink_functions.adb:349:47: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:349:47: medium: float overflow check might fail [reason for check: result of floating-point division must be bounded] [possible fix: subprogram at simulink_functions.ads:73 should mention Left and Right in a precondition]
simulink_functions.adb:349:56: medium: float overflow check might fail [reason for check: result of floating-point multiplication must be bounded] [possible fix: subprogram at simulink_functions.ads:73 should mention Left and Right in a precondition]
simulink_functions.adb:362:22: medium: overflow check might fail, cannot prove lower bound for Left - Integer_8 (Float'Floor (Float (Left) / Float (Right))) * Right [reason for check: result of subtraction must fit in a 8-bits machine integer] [possible fix: add precondition (if Integer_8 (Float'Floor (Float (Left) / Float (Right))) * Right >= 0 then Left >= -128 + Integer_8 (Float'Floor (Float (Left) / Float (Right))) * Right else Left <= 127 + Integer_8 (Float'Floor (Float (Left) / Float (Right))) * Right) to subprogram at simulink_functions.ads:75]
simulink_functions.adb:363:29: medium: range check might fail, cannot prove upper bound for Float'Floor (Float (Left) / Float (Right)) [reason for check: value must be convertible to the target type of the conversion] [possible fix: subprogram at simulink_functions.ads:75 should mention Left and Right in a precondition]
simulink_functions.adb:363:44: info: range check proved (Trivial)
simulink_functions.adb:363:50: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:363:50: info: float overflow check proved (colibri: 1 VC)
simulink_functions.adb:363:59: info: range check proved (Trivial)
simulink_functions.adb:363:68: medium: overflow check might fail, cannot prove lower bound for Integer_8 (Float'Floor (Float (Left) / Float (Right))) * Right [reason for check: result of multiplication must fit in a 8-bits machine integer] [possible fix: add precondition (Integer_8 (Float'Floor (Float (Left) / Float (Right))) * Right >= -128) to subprogram at simulink_functions.ads:75]
simulink_functions.adb:376:22: medium: overflow check might fail, cannot prove lower bound for Left - Integer_16 (Float'Floor (Float (Left) / Float (Right))) * Right [reason for check: result of subtraction must fit in a 16-bits machine integer] [possible fix: add precondition (if Integer_16 (Float'Floor (Float (Left) / Float (Right))) * Right >= 0 then Left >= -32768 + Integer_16 (Float'Floor (Float (Left) / Float (Right))) * Right else Left <= 32767 + Integer_16 (Float'Floor (Float (Left) / Float (Right))) * Right) to subprogram at simulink_functions.ads:76]
simulink_functions.adb:377:30: medium: range check might fail, cannot prove upper bound for Float'Floor (Float (Left) / Float (Right)) [reason for check: value must be convertible to the target type of the conversion] [possible fix: subprogram at simulink_functions.ads:76 should mention Left and Right in a precondition]
simulink_functions.adb:377:45: info: range check proved (Trivial)
simulink_functions.adb:377:51: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:377:51: info: float overflow check proved (colibri: 1 VC)
simulink_functions.adb:377:60: info: range check proved (Trivial)
simulink_functions.adb:377:69: medium: overflow check might fail, cannot prove lower bound for Integer_16 (Float'Floor (Float (Left) / Float (Right))) * Right [reason for check: result of multiplication must fit in a 16-bits machine integer] [possible fix: add precondition (Integer_16 (Float'Floor (Float (Left) / Float (Right))) * Right >= -32768) to subprogram at simulink_functions.ads:76]
simulink_functions.adb:390:22: medium: overflow check might fail, cannot prove lower bound for Left - Integer_32 (Float'Floor (Float (Left) / Float (Right))) * Right [reason for check: result of subtraction must fit in a 32-bits machine integer] [possible fix: add precondition (if Integer_32 (Float'Floor (Float (Left) / Float (Right))) * Right >= 0 then Left >= -2147483648 + Integer_32 (Float'Floor (Float (Left) / Float (Right))) * Right else Left <= 2147483647 + Integer_32 (Float'Floor (Float (Left) / Float (Right))) * Right) to subprogram at simulink_functions.ads:77]
simulink_functions.adb:391:30: medium: range check might fail, cannot prove upper bound for Float'Floor (Float (Left) / Float (Right)) [reason for check: value must be convertible to the target type of the conversion] [possible fix: subprogram at simulink_functions.ads:77 should mention Left and Right in a precondition]
simulink_functions.adb:391:45: info: range check proved (Trivial)
simulink_functions.adb:391:51: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:391:51: info: float overflow check proved (colibri: 1 VC)
simulink_functions.adb:391:60: info: range check proved (Trivial)
simulink_functions.adb:391:69: medium: overflow check might fail, cannot prove lower bound for Integer_32 (Float'Floor (Float (Left) / Float (Right))) * Right [reason for check: result of multiplication must fit in a 32-bits machine integer] [possible fix: add precondition (Integer_32 (Float'Floor (Float (Left) / Float (Right))) * Right >= -2147483648) to subprogram at simulink_functions.ads:77]
simulink_functions.adb:404:30: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:417:30: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:430:30: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:443:22: medium: overflow check might fail, cannot prove lower bound for Left - Integer (Float'Floor (Float (Left) / Float (Right))) * Right [reason for check: result of subtraction must fit in a 32-bits machine integer] [possible fix: add precondition (if Integer (Float'Floor (Float (Left) / Float (Right))) * Right >= 0 then Left >= Integer'First + Integer (Float'Floor (Float (Left) / Float (Right))) * Right else Left <= Integer'Last + Integer (Float'Floor (Float (Left) / Float (Right))) * Right) to subprogram at simulink_functions.ads:83]
simulink_functions.adb:444:27: medium: range check might fail, cannot prove upper bound for Float'Floor (Float (Left) / Float (Right)) [reason for check: value must be convertible to the target type of the conversion] [possible fix: subprogram at simulink_functions.ads:83 should mention Left and Right in a precondition]
simulink_functions.adb:444:42: info: range check proved (Trivial)
simulink_functions.adb:444:48: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:444:48: info: float overflow check proved (colibri: 1 VC)
simulink_functions.adb:444:57: info: range check proved (Trivial)
simulink_functions.adb:444:66: medium: overflow check might fail, cannot prove lower bound for Integer (Float'Floor (Float (Left) / Float (Right))) * Right [reason for check: result of multiplication must fit in a 32-bits machine integer] [possible fix: add precondition (Integer (Float'Floor (Float (Left) / Float (Right))) * Right >= Integer'First) to subprogram at simulink_functions.ads:83]
simulink_functions.adb:457:22: medium: float overflow check might fail [reason for check: result of floating-point subtraction must be bounded] [possible fix: subprogram at simulink_functions.ads:84 should mention Left and Right in a precondition]
simulink_functions.adb:457:42: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:457:42: medium: float overflow check might fail [reason for check: result of floating-point division must be bounded] [possible fix: subprogram at simulink_functions.ads:84 should mention Left and Right in a precondition]
simulink_functions.adb:457:51: medium: float overflow check might fail [reason for check: result of floating-point multiplication must be bounded] [possible fix: subprogram at simulink_functions.ads:84 should mention Left and Right in a precondition]
simulink_functions.adb:470:22: medium: float overflow check might fail [reason for check: result of floating-point subtraction must be bounded] [possible fix: subprogram at simulink_functions.ads:85 should mention Left and Right in a precondition]
simulink_functions.adb:470:47: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:470:47: medium: float overflow check might fail [reason for check: result of floating-point division must be bounded] [possible fix: subprogram at simulink_functions.ads:85 should mention Left and Right in a precondition]
simulink_functions.adb:470:56: medium: float overflow check might fail [reason for check: result of floating-point multiplication must be bounded] [possible fix: subprogram at simulink_functions.ads:85 should mention Left and Right in a precondition]
simulink_functions.adb:483:22: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:483:30: high: overflow check might fail, cannot prove upper bound for (Left / Right) (e.g. when Left = Integer_8'First and Right = -1) [reason for check: result of division must fit in a 8-bits machine integer] [possible fix: add precondition ((Left / Right) <= 127) to subprogram at simulink_functions.ads:87]
simulink_functions.adb:483:30: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:483:39: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:496:22: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:496:30: high: overflow check might fail, cannot prove upper bound for (Left / Right) (e.g. when Left = Integer_16'First and Right = -1) [reason for check: result of division must fit in a 16-bits machine integer] [possible fix: add precondition ((Left / Right) <= 32767) to subprogram at simulink_functions.ads:88]
simulink_functions.adb:496:30: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:496:39: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:509:22: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:509:30: high: overflow check might fail, cannot prove upper bound for (Left / Right) (e.g. when Left = Integer_32'First and Right = -1) [reason for check: result of division must fit in a 32-bits machine integer] [possible fix: add precondition ((Left / Right) <= 2147483647) to subprogram at simulink_functions.ads:89]
simulink_functions.adb:509:30: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:509:39: info: overflow check proved (CVC5: 2 VC)
simulink_functions.adb:522:30: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:535:30: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:548:30: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:558:19: medium: float overflow check might fail [reason for check: result of floating-point subtraction must be bounded] [possible fix: subprogram at simulink_functions.ads:95 should mention Left and Right in a precondition]
simulink_functions.adb:558:44: medium: divide by zero might fail [possible fix: add precondition (Right /= 0) to subprogram at simulink_functions.ads:95]
simulink_functions.adb:558:44: medium: float overflow check might fail [reason for check: result of floating-point division must be bounded] [possible fix: subprogram at simulink_functions.ads:95 should mention Left and Right in a precondition]
simulink_functions.adb:558:53: medium: float overflow check might fail [reason for check: result of floating-point multiplication must be bounded] [possible fix: subprogram at simulink_functions.ads:95 should mention Left and Right in a precondition]
simulink_functions.adb:567:19: medium: float overflow check might fail [reason for check: result of floating-point subtraction must be bounded] [possible fix: subprogram at simulink_functions.ads:96 should mention Left and Right in a precondition]
simulink_functions.adb:567:49: medium: divide by zero might fail [possible fix: add precondition (Right /= 0) to subprogram at simulink_functions.ads:96]
simulink_functions.adb:567:49: medium: float overflow check might fail [reason for check: result of floating-point division must be bounded] [possible fix: subprogram at simulink_functions.ads:96 should mention Left and Right in a precondition]
simulink_functions.adb:567:58: medium: float overflow check might fail [reason for check: result of floating-point multiplication must be bounded] [possible fix: subprogram at simulink_functions.ads:96 should mention Left and Right in a precondition]
simulink_functions.adb:577:26: info: precondition proved (CVC5: 1 VC)
simulink_functions.adb:577:26: medium: range check might fail [reason for check: value must be convertible to the target type of the conversion] [possible fix: subprogram at simulink_functions.ads:98 should mention I in a precondition]
simulink_functions.adb:577:39: info: range check proved (Trivial)
simulink_functions.adb:587:27: info: precondition proved (CVC5: 1 VC)
simulink_functions.adb:587:27: medium: range check might fail [reason for check: value must be convertible to the target type of the conversion] [possible fix: subprogram at simulink_functions.ads:99 should mention I in a precondition]
simulink_functions.adb:587:40: info: range check proved (Trivial)
simulink_functions.adb:597:27: info: precondition proved (CVC5: 1 VC)
simulink_functions.adb:597:27: medium: range check might fail [reason for check: value must be convertible to the target type of the conversion] [possible fix: subprogram at simulink_functions.ads:100 should mention I in a precondition]
simulink_functions.adb:597:40: info: range check proved (Trivial)
simulink_functions.adb:607:25: high: precondition might fail (e.g. when I = -1) [possible fix: subprogram at simulink_functions.ads:102 should mention I in a precondition]
simulink_functions.adb:607:25: medium: range check might fail, cannot prove bounds for Sqrt (Float (I)) [reason for check: value must be convertible to the target type of the conversion] [possible fix: subprogram at simulink_functions.ads:102 should mention I in a precondition]
simulink_functions.adb:607:38: info: range check proved (Trivial)
simulink_functions.adb:617:26: high: precondition might fail (e.g. when I = -1) [possible fix: subprogram at simulink_functions.ads:103 should mention I in a precondition]
simulink_functions.adb:617:26: medium: range check might fail, cannot prove bounds for Sqrt (Float (I)) [reason for check: value must be convertible to the target type of the conversion] [possible fix: subprogram at simulink_functions.ads:103 should mention I in a precondition]
simulink_functions.adb:617:39: info: range check proved (Trivial)
simulink_functions.adb:627:26: high: precondition might fail (e.g. when I = -1) [possible fix: subprogram at simulink_functions.ads:104 should mention I in a precondition]
simulink_functions.adb:627:26: medium: range check might fail, cannot prove bounds for Sqrt (Float (I)) [reason for check: value must be convertible to the target type of the conversion] [possible fix: subprogram at simulink_functions.ads:104 should mention I in a precondition]
simulink_functions.adb:627:39: info: range check proved (Trivial)
simulink_functions.adb:637:21: high: precondition might fail (e.g. when F = -1.0) [possible fix: subprogram at simulink_functions.ads:106 should mention F in a precondition]
simulink_functions.adb:637:21: medium: range check might fail [reason for check: value must be convertible to the target type of the conversion] [possible fix: subprogram at simulink_functions.ads:106 should mention F in a precondition]
simulink_functions.adb:647:14: high: precondition might fail (e.g. when F = -1.0) [possible fix: subprogram at simulink_functions.ads:107 should mention F in a precondition]
simulink_functions.adb:1014:47: info: precondition proved (CVC5: 1 VC)
simulink_functions.adb:1023:52: info: precondition proved (CVC5: 1 VC)
simulink_functions.adb:1032:47: high: precondition might fail (e.g. when F = -2.0000002E+0) [possible fix: subprogram at simulink_functions.ads:151 should mention F in a precondition]
simulink_functions.adb:1041:52: high: precondition might fail (e.g. when LF = -2.0000000000E+0) [possible fix: subprogram at simulink_functions.ads:152 should mention LF in a precondition]
simulink_functions.adb:1050:47: high: precondition might fail (e.g. when F = -2.0000002E+0) [possible fix: subprogram at simulink_functions.ads:154 should mention F in a precondition]
simulink_functions.adb:1059:52: high: precondition might fail (e.g. when LF = -2.0000000000E+0) [possible fix: subprogram at simulink_functions.ads:155 should mention LF in a precondition]
simulink_functions.adb:1068:47: info: precondition proved (CVC5: 1 VC)
simulink_functions.adb:1077:52: info: precondition proved (CVC5: 1 VC)
simulink_functions.adb:1086:47: medium: overflow check might fail [reason for check: value must fit in a 32-bits machine integer] [possible fix: subprogram at simulink_functions.ads:160 should mention F in a precondition]
simulink_functions.adb:1095:52: medium: overflow check might fail [reason for check: value must fit in a 64-bits machine integer] [possible fix: subprogram at simulink_functions.ads:161 should mention LF in a precondition]
simulink_functions.adb:1104:47: medium: overflow check might fail [reason for check: value must fit in a 32-bits machine integer] [possible fix: subprogram at simulink_functions.ads:163 should mention F in a precondition]
simulink_functions.adb:1113:52: medium: overflow check might fail [reason for check: value must fit in a 64-bits machine integer] [possible fix: subprogram at simulink_functions.ads:164 should mention LF in a precondition]
simulink_functions.adb:1158:47: high: precondition might fail (e.g. when F = 0.0) [possible fix: subprogram at simulink_functions.ads:172 should mention F in a precondition]
simulink_functions.adb:1167:52: high: precondition might fail (e.g. when LF = 0.0) [possible fix: subprogram at simulink_functions.ads:173 should mention LF in a precondition]
simulink_functions.adb:1176:47: medium: overflow check might fail [reason for check: value must fit in a 32-bits machine integer] [possible fix: subprogram at simulink_functions.ads:175 should mention F in a precondition]
simulink_functions.adb:1185:52: medium: overflow check might fail [reason for check: value must fit in a 64-bits machine integer] [possible fix: subprogram at simulink_functions.ads:176 should mention LF in a precondition]
simulink_functions.adb:1194:21: medium: range check might fail [reason for check: value must be convertible to the target type of the conversion] [possible fix: subprogram at simulink_functions.ads:178 should mention Left and Right in a precondition]
simulink_functions.adb:1202:07: info: initialization of "Result" proved
simulink_functions.adb:1209:31: info: division check proved (colibri: 1 VC)
simulink_functions.adb:1209:31: info: float overflow check proved (colibri: 1 VC)
simulink_functions.adb:1212:33: info: float overflow check proved (colibri: 1 VC)
simulink_functions.adb:1214:33: info: float overflow check proved (colibri: 1 VC)
simulink_functions.adb:1219:33: info: division check proved (colibri: 1 VC)
simulink_functions.adb:1219:33: info: float overflow check proved (colibri: 1 VC)
simulink_functions.adb:1221:30: info: float overflow check proved (colibri: 1 VC)
simulink_functions.adb:1223:30: info: float overflow check proved (colibri: 1 VC)
simulink_functions.adb:1327:07: info: initialization of "Res" proved
simulink_functions.adb:1343:07: info: initialization of "Res" proved
simulink_functions.adb:1359:07: info: initialization of "Res" proved
simulink_functions.adb:1375:07: info: initialization of "Res" proved
simulink_functions.adb:1391:07: info: initialization of "Res" proved
simulink_functions.adb:1407:07: info: initialization of "Res" proved
simulink_functions.adb:1423:07: info: initialization of "Res" proved
simulink_functions.adb:1439:07: info: initialization of "Res" proved
simulink_functions.adb:1455:07: info: initialization of "Res" proved
simulink_functions.adb:1473:19: medium: overflow check might fail [reason for check: value must fit in a 32-bits machine integer] [possible fix: subprogram at simulink_functions.ads:205 should mention Left and Right in a precondition]
simulink_functions.adb:1484:19: medium: overflow check might fail [reason for check: value must fit in a 64-bits machine integer] [possible fix: subprogram at simulink_functions.ads:206 should mention Left and Right in a precondition]
simulink_functions.adb:1494:19: medium: overflow check might fail, cannot prove lower bound for Left ** Natural (Right) [reason for check: result of exponentiation must fit in a 8-bits machine integer] [possible fix: add precondition (Left ** Natural (Right) >= -128) to subprogram at simulink_functions.ads:207]
simulink_functions.adb:1494:31: high: range check might fail, cannot prove lower bound for Right (e.g. when Right = -1) [reason for check: value must be convertible to the target type of the conversion] [possible fix: add precondition (Right >= Integer_8(Natural'First)) to subprogram at simulink_functions.ads:207]
simulink_functions.adb:1504:19: medium: overflow check might fail, cannot prove lower bound for Left ** Natural (Right) [reason for check: result of exponentiation must fit in a 16-bits machine integer] [possible fix: add precondition (Left ** Natural (Right) >= -32768) to subprogram at simulink_functions.ads:208]
simulink_functions.adb:1504:31: high: range check might fail, cannot prove lower bound for Right (e.g. when Right = -1) [reason for check: value must be convertible to the target type of the conversion] [possible fix: add precondition (Right >= Integer_16(Natural'First)) to subprogram at simulink_functions.ads:208]
simulink_functions.adb:1514:19: medium: overflow check might fail, cannot prove lower bound for Left ** Natural (Right) [reason for check: result of exponentiation must fit in a 32-bits machine integer] [possible fix: add precondition (Left ** Natural (Right) >= -2147483648) to subprogram at simulink_functions.ads:209]
simulink_functions.adb:1514:31: high: range check might fail, cannot prove lower bound for Right (e.g. when Right = -1) [reason for check: value must be convertible to the target type of the conversion] [possible fix: add precondition (Right >= Integer_32(Natural'First)) to subprogram at simulink_functions.ads:209]
simulink_functions.adb:1523:41: high: range check might fail, cannot prove upper bound for Right (e.g. when Right = 2147483648) [reason for check: value must be convertible to the target type of the conversion] [possible fix: add precondition (Right <= Unsigned_32(Natural'Last)) to subprogram at simulink_functions.ads:211]
simulink_functions.adb:1523:48: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:1532:51: high: range check might fail, cannot prove upper bound for Right (e.g. when Right = 2147483648) [reason for check: value must be convertible to the target type of the conversion] [possible fix: add precondition (Right <= Unsigned_32(Natural'Last)) to subprogram at simulink_functions.ads:212]
simulink_functions.adb:1532:58: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:1541:50: high: range check might fail, cannot prove upper bound for Right (e.g. when Right = 2147483648) [reason for check: value must be convertible to the target type of the conversion] [possible fix: add precondition (Right <= Unsigned_32(Natural'Last)) to subprogram at simulink_functions.ads:213]
simulink_functions.adb:1541:57: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:1550:53: high: range check might fail, cannot prove upper bound for Right (e.g. when Right = 2147483648) [reason for check: value must be convertible to the target type of the conversion] [possible fix: add precondition (Right <= Unsigned_32(Natural'Last)) to subprogram at simulink_functions.ads:214]
simulink_functions.adb:1550:60: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:1559:53: high: range check might fail, cannot prove upper bound for Right (e.g. when Right = 2147483648) [reason for check: value must be convertible to the target type of the conversion] [possible fix: add precondition (Right <= Unsigned_32(Natural'Last)) to subprogram at simulink_functions.ads:215]
simulink_functions.adb:1559:60: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:1568:52: high: range check might fail, cannot prove upper bound for Right (e.g. when Right = 2147483648) [reason for check: value must be convertible to the target type of the conversion] [possible fix: add precondition (Right <= Unsigned_32(Natural'Last)) to subprogram at simulink_functions.ads:216]
simulink_functions.adb:1568:59: info: division check proved (CVC5: 1 VC)
simulink_functions.adb:1577:49: info: division check proved (CVC5: 2 VC)
simulink_functions.adb:1586:49: info: division check proved (CVC5: 2 VC)
simulink_functions.adb:1595:42: high: range check might fail, cannot prove upper bound for Right (e.g. when Right = 2147483648) [reason for check: value must be convertible to the target type of the conversion] [possible fix: add precondition (Right <= Unsigned_32(Natural'Last)) to subprogram at simulink_functions.ads:220]
simulink_functions.adb:1595:49: info: division check proved (CVC5: 1 VC)
simulink_functions.ads:39:13: info: implicit aspect Always_Terminates on "INT_And" has been proved, subprogram will terminate
simulink_functions.ads:40:13: info: implicit aspect Always_Terminates on "INT_And" has been proved, subprogram will terminate
simulink_functions.ads:41:13: info: implicit aspect Always_Terminates on "INT_And" has been proved, subprogram will terminate
simulink_functions.ads:43:13: info: implicit aspect Always_Terminates on "INT_Or" has been proved, subprogram will terminate
simulink_functions.ads:44:13: info: implicit aspect Always_Terminates on "INT_Or" has been proved, subprogram will terminate
simulink_functions.ads:45:13: info: implicit aspect Always_Terminates on "INT_Or" has been proved, subprogram will terminate
simulink_functions.ads:47:13: info: implicit aspect Always_Terminates on "INT_Xor" has been proved, subprogram will terminate
simulink_functions.ads:48:13: info: implicit aspect Always_Terminates on "INT_Xor" has been proved, subprogram will terminate
simulink_functions.ads:49:13: info: implicit aspect Always_Terminates on "INT_Xor" has been proved, subprogram will terminate
simulink_functions.ads:51:13: info: implicit aspect Always_Terminates on "INT_Not" has been proved, subprogram will terminate
simulink_functions.ads:52:13: info: implicit aspect Always_Terminates on "INT_Not" has been proved, subprogram will terminate
simulink_functions.ads:53:13: info: implicit aspect Always_Terminates on "INT_Not" has been proved, subprogram will terminate
simulink_functions.ads:55:13: info: implicit aspect Always_Terminates on "Exp_Fun" has been proved, subprogram will terminate
simulink_functions.ads:56:13: info: implicit aspect Always_Terminates on "Exp_Fun" has been proved, subprogram will terminate
simulink_functions.ads:58:13: info: implicit aspect Always_Terminates on "Log_Fun" has been proved, subprogram will terminate
simulink_functions.ads:59:13: info: implicit aspect Always_Terminates on "Log_Fun" has been proved, subprogram will terminate
simulink_functions.ads:61:13: info: implicit aspect Always_Terminates on "Log10_Fun" has been proved, subprogram will terminate
simulink_functions.ads:62:13: info: implicit aspect Always_Terminates on "Log10_Fun" has been proved, subprogram will terminate
simulink_functions.ads:64:13: info: implicit aspect Always_Terminates on "Mod_Fun_Sl" has been proved, subprogram will terminate
simulink_functions.ads:65:13: info: implicit aspect Always_Terminates on "Mod_Fun_Sl" has been proved, subprogram will terminate
simulink_functions.ads:66:13: info: implicit aspect Always_Terminates on "Mod_Fun_Sl" has been proved, subprogram will terminate
simulink_functions.ads:68:13: info: implicit aspect Always_Terminates on "Mod_Fun_Sl" has been proved, subprogram will terminate
simulink_functions.ads:69:13: info: implicit aspect Always_Terminates on "Mod_Fun_Sl" has been proved, subprogram will terminate
simulink_functions.ads:70:13: info: implicit aspect Always_Terminates on "Mod_Fun_Sl" has been proved, subprogram will terminate
simulink_functions.ads:72:13: info: implicit aspect Always_Terminates on "Mod_Fun_Sl" has been proved, subprogram will terminate
simulink_functions.ads:73:13: info: implicit aspect Always_Terminates on "Mod_Fun_Sl" has been proved, subprogram will terminate
simulink_functions.ads:75:13: info: implicit aspect Always_Terminates on "Mod_Fun" has been proved, subprogram will terminate
simulink_functions.ads:76:13: info: implicit aspect Always_Terminates on "Mod_Fun" has been proved, subprogram will terminate
simulink_functions.ads:77:13: info: implicit aspect Always_Terminates on "Mod_Fun" has been proved, subprogram will terminate
simulink_functions.ads:79:13: info: implicit aspect Always_Terminates on "Mod_Fun" has been proved, subprogram will terminate
simulink_functions.ads:80:13: info: implicit aspect Always_Terminates on "Mod_Fun" has been proved, subprogram will terminate
simulink_functions.ads:81:13: info: implicit aspect Always_Terminates on "Mod_Fun" has been proved, subprogram will terminate
simulink_functions.ads:83:13: info: implicit aspect Always_Terminates on "Mod_Fun" has been proved, subprogram will terminate
simulink_functions.ads:84:13: info: implicit aspect Always_Terminates on "Mod_Fun" has been proved, subprogram will terminate
simulink_functions.ads:85:13: info: implicit aspect Always_Terminates on "Mod_Fun" has been proved, subprogram will terminate
simulink_functions.ads:87:13: info: implicit aspect Always_Terminates on "Rem_Fun" has been proved, subprogram will terminate
simulink_functions.ads:88:13: info: implicit aspect Always_Terminates on "Rem_Fun" has been proved, subprogram will terminate
simulink_functions.ads:89:13: info: implicit aspect Always_Terminates on "Rem_Fun" has been proved, subprogram will terminate
simulink_functions.ads:91:13: info: implicit aspect Always_Terminates on "Rem_Fun" has been proved, subprogram will terminate
simulink_functions.ads:92:13: info: implicit aspect Always_Terminates on "Rem_Fun" has been proved, subprogram will terminate
simulink_functions.ads:93:13: info: implicit aspect Always_Terminates on "Rem_Fun" has been proved, subprogram will terminate
simulink_functions.ads:95:13: info: implicit aspect Always_Terminates on "Rem_Fun" has been proved, subprogram will terminate
simulink_functions.ads:96:13: info: implicit aspect Always_Terminates on "Rem_Fun" has been proved, subprogram will terminate
simulink_functions.ads:98:13: info: implicit aspect Always_Terminates on "Sqrt_Fun" has been proved, subprogram will terminate
simulink_functions.ads:99:13: info: implicit aspect Always_Terminates on "Sqrt_Fun" has been proved, subprogram will terminate
simulink_functions.ads:100:13: info: implicit aspect Always_Terminates on "Sqrt_Fun" has been proved, subprogram will terminate
simulink_functions.ads:102:13: info: implicit aspect Always_Terminates on "Sqrt_Fun" has been proved, subprogram will terminate
simulink_functions.ads:103:13: info: implicit aspect Always_Terminates on "Sqrt_Fun" has been proved, subprogram will terminate
simulink_functions.ads:104:13: info: implicit aspect Always_Terminates on "Sqrt_Fun" has been proved, subprogram will terminate
simulink_functions.ads:106:13: info: implicit aspect Always_Terminates on "Sqrt_Fun" has been proved, subprogram will terminate
simulink_functions.ads:107:13: info: implicit aspect Always_Terminates on "Sqrt_Fun" has been proved, subprogram will terminate
simulink_functions.ads:109:13: info: implicit aspect Always_Terminates on "max" has been proved, subprogram will terminate
simulink_functions.ads:110:13: info: implicit aspect Always_Terminates on "max" has been proved, subprogram will terminate
simulink_functions.ads:111:13: info: implicit aspect Always_Terminates on "max" has been proved, subprogram will terminate
simulink_functions.ads:113:13: info: implicit aspect Always_Terminates on "max" has been proved, subprogram will terminate
simulink_functions.ads:114:13: info: implicit aspect Always_Terminates on "max" has been proved, subprogram will terminate
simulink_functions.ads:115:13: info: implicit aspect Always_Terminates on "max" has been proved, subprogram will terminate
simulink_functions.ads:117:13: info: implicit aspect Always_Terminates on "max" has been proved, subprogram will terminate
simulink_functions.ads:118:13: info: implicit aspect Always_Terminates on "max" has been proved, subprogram will terminate
simulink_functions.ads:120:13: info: implicit aspect Always_Terminates on "min" has been proved, subprogram will terminate
simulink_functions.ads:121:13: info: implicit aspect Always_Terminates on "min" has been proved, subprogram will terminate
simulink_functions.ads:122:13: info: implicit aspect Always_Terminates on "min" has been proved, subprogram will terminate
simulink_functions.ads:124:13: info: implicit aspect Always_Terminates on "min" has been proved, subprogram will terminate
simulink_functions.ads:125:13: info: implicit aspect Always_Terminates on "min" has been proved, subprogram will terminate
simulink_functions.ads:126:13: info: implicit aspect Always_Terminates on "min" has been proved, subprogram will terminate
simulink_functions.ads:128:13: info: implicit aspect Always_Terminates on "min" has been proved, subprogram will terminate
simulink_functions.ads:129:13: info: implicit aspect Always_Terminates on "min" has been proved, subprogram will terminate
simulink_functions.ads:131:13: info: implicit aspect Always_Terminates on "sign" has been proved, subprogram will terminate
simulink_functions.ads:132:13: info: implicit aspect Always_Terminates on "sign" has been proved, subprogram will terminate
simulink_functions.ads:133:13: info: implicit aspect Always_Terminates on "sign" has been proved, subprogram will terminate
simulink_functions.ads:135:13: info: implicit aspect Always_Terminates on "sign" has been proved, subprogram will terminate
simulink_functions.ads:136:13: info: implicit aspect Always_Terminates on "sign" has been proved, subprogram will terminate
simulink_functions.ads:137:13: info: implicit aspect Always_Terminates on "sign" has been proved, subprogram will terminate
simulink_functions.ads:139:13: info: implicit aspect Always_Terminates on "sign" has been proved, subprogram will terminate
simulink_functions.ads:140:13: info: implicit aspect Always_Terminates on "sign" has been proved, subprogram will terminate
simulink_functions.ads:142:13: info: implicit aspect Always_Terminates on "cos" has been proved, subprogram will terminate
simulink_functions.ads:143:13: info: implicit aspect Always_Terminates on "cos" has been proved, subprogram will terminate
simulink_functions.ads:145:13: info: implicit aspect Always_Terminates on "sin" has been proved, subprogram will terminate
simulink_functions.ads:146:13: info: implicit aspect Always_Terminates on "sin" has been proved, subprogram will terminate
simulink_functions.ads:148:13: info: implicit aspect Always_Terminates on "tan" has been proved, subprogram will terminate
simulink_functions.ads:149:13: info: implicit aspect Always_Terminates on "tan" has been proved, subprogram will terminate
simulink_functions.ads:151:13: info: implicit aspect Always_Terminates on "asin" has been proved, subprogram will terminate
simulink_functions.ads:152:13: info: implicit aspect Always_Terminates on "asin" has been proved, subprogram will terminate
simulink_functions.ads:154:13: info: implicit aspect Always_Terminates on "acos" has been proved, subprogram will terminate
simulink_functions.ads:155:13: info: implicit aspect Always_Terminates on "acos" has been proved, subprogram will terminate
simulink_functions.ads:157:13: info: implicit aspect Always_Terminates on "atan" has been proved, subprogram will terminate
simulink_functions.ads:158:13: info: implicit aspect Always_Terminates on "atan" has been proved, subprogram will terminate
simulink_functions.ads:160:13: info: implicit aspect Always_Terminates on "sinh" has been proved, subprogram will terminate
simulink_functions.ads:161:13: info: implicit aspect Always_Terminates on "sinh" has been proved, subprogram will terminate
simulink_functions.ads:163:13: info: implicit aspect Always_Terminates on "cosh" has been proved, subprogram will terminate
simulink_functions.ads:164:13: info: implicit aspect Always_Terminates on "cosh" has been proved, subprogram will terminate
simulink_functions.ads:166:13: info: implicit aspect Always_Terminates on "tanh" has been proved, subprogram will terminate
simulink_functions.ads:167:13: info: implicit aspect Always_Terminates on "tanh" has been proved, subprogram will terminate
simulink_functions.ads:169:13: info: implicit aspect Always_Terminates on "asinh" has been proved, subprogram will terminate
simulink_functions.ads:170:13: info: implicit aspect Always_Terminates on "asinh" has been proved, subprogram will terminate
simulink_functions.ads:172:13: info: implicit aspect Always_Terminates on "acosh" has been proved, subprogram will terminate
simulink_functions.ads:173:13: info: implicit aspect Always_Terminates on "acosh" has been proved, subprogram will terminate
simulink_functions.ads:175:13: info: implicit aspect Always_Terminates on "atanh" has been proved, subprogram will terminate
simulink_functions.ads:176:13: info: implicit aspect Always_Terminates on "atanh" has been proved, subprogram will terminate
simulink_functions.ads:178:13: info: implicit aspect Always_Terminates on "atan2" has been proved, subprogram will terminate
simulink_functions.ads:179:13: info: implicit aspect Always_Terminates on "atan2" has been proved, subprogram will terminate
simulink_functions.ads:181:13: info: implicit aspect Always_Terminates on "Unsigned_8_To_Boolean" has been proved, subprogram will terminate
simulink_functions.ads:182:13: info: implicit aspect Always_Terminates on "Unsigned_16_To_Boolean" has been proved, subprogram will terminate
simulink_functions.ads:183:13: info: implicit aspect Always_Terminates on "Unsigned_32_To_Boolean" has been proved, subprogram will terminate
simulink_functions.ads:185:13: info: implicit aspect Always_Terminates on "Integer_8_To_Boolean" has been proved, subprogram will terminate
simulink_functions.ads:186:13: info: implicit aspect Always_Terminates on "Integer_16_To_Boolean" has been proved, subprogram will terminate
simulink_functions.ads:187:13: info: implicit aspect Always_Terminates on "Integer_32_To_Boolean" has been proved, subprogram will terminate
simulink_functions.ads:188:13: info: implicit aspect Always_Terminates on "Integer_To_Boolean" has been proved, subprogram will terminate
simulink_functions.ads:190:13: info: implicit aspect Always_Terminates on "Float_To_Boolean" has been proved, subprogram will terminate
simulink_functions.ads:191:13: info: implicit aspect Always_Terminates on "Long_Float_To_Boolean" has been proved, subprogram will terminate
simulink_functions.ads:193:13: info: implicit aspect Always_Terminates on "Boolean_To_Unsigned_8" has been proved, subprogram will terminate
simulink_functions.ads:194:13: info: implicit aspect Always_Terminates on "Boolean_To_Unsigned_16" has been proved, subprogram will terminate
simulink_functions.ads:195:13: info: implicit aspect Always_Terminates on "Boolean_To_Unsigned_32" has been proved, subprogram will terminate
simulink_functions.ads:197:13: info: implicit aspect Always_Terminates on "Boolean_To_Integer_8" has been proved, subprogram will terminate
simulink_functions.ads:198:13: info: implicit aspect Always_Terminates on "Boolean_To_Integer_16" has been proved, subprogram will terminate
simulink_functions.ads:199:13: info: implicit aspect Always_Terminates on "Boolean_To_Integer_32" has been proved, subprogram will terminate
simulink_functions.ads:200:13: info: implicit aspect Always_Terminates on "Boolean_To_Integer" has been proved, subprogram will terminate
simulink_functions.ads:202:13: info: implicit aspect Always_Terminates on "Boolean_To_Float" has been proved, subprogram will terminate
simulink_functions.ads:203:13: info: implicit aspect Always_Terminates on "Boolean_To_Long_Float" has been proved, subprogram will terminate
simulink_functions.ads:205:13: info: implicit aspect Always_Terminates on "pow" has been proved, subprogram will terminate
simulink_functions.ads:206:13: info: implicit aspect Always_Terminates on "pow" has been proved, subprogram will terminate
simulink_functions.ads:207:13: info: implicit aspect Always_Terminates on "pow" has been proved, subprogram will terminate
simulink_functions.ads:208:13: info: implicit aspect Always_Terminates on "pow" has been proved, subprogram will terminate
simulink_functions.ads:209:13: info: implicit aspect Always_Terminates on "pow" has been proved, subprogram will terminate
simulink_functions.ads:211:13: info: implicit aspect Always_Terminates on "Ga_Shift_Left_U32" has been proved, subprogram will terminate
simulink_functions.ads:212:13: info: implicit aspect Always_Terminates on "Ga_Shift_Left_U16" has been proved, subprogram will terminate
simulink_functions.ads:213:13: info: implicit aspect Always_Terminates on "Ga_Shift_Left_U8" has been proved, subprogram will terminate
simulink_functions.ads:214:13: info: implicit aspect Always_Terminates on "Ga_Shift_Left_S32" has been proved, subprogram will terminate
simulink_functions.ads:215:13: info: implicit aspect Always_Terminates on "Ga_Shift_Left_S16" has been proved, subprogram will terminate
simulink_functions.ads:216:13: info: implicit aspect Always_Terminates on "Ga_Shift_Left_S8" has been proved, subprogram will terminate
simulink_functions.ads:218:13: info: implicit aspect Always_Terminates on "Ga_Shift_Right" has been proved, subprogram will terminate
simulink_functions.ads:219:13: info: implicit aspect Always_Terminates on "Ga_Shift_Right" has been proved, subprogram will terminate
simulink_functions.ads:220:13: info: implicit aspect Always_Terminates on "Ga_Shift_Right" has been proved, subprogram will terminate
smoothing.adb:24:07: info: initialization of "Abs_Delta_out1" proved
smoothing.adb:25:07: info: initialization of "Compare_To_Zero_out1" proved
smoothing.adb:26:07: info: initialization of "Smoother_Value_out1" proved
smoothing.adb:27:07: info: initialization of "Abs_New_Delta_out1" proved
smoothing.adb:33:42: info: float overflow check proved (colibri: 1 VC)
smoothing.adb:46:22: info: assertion proved (CVC5: 1 VC)
smoothing.adb:54:22: info: assertion proved (colibri: 1 VC)
smoothing.adb:65:44: info: float overflow check proved (colibri: 1 VC)
smoothing.adb:65:60: info: float overflow check proved (CVC5: 1 VC)
smoothing.adb:65:77: info: division check proved (CVC5: 1 VC)
smoothing.adb:65:77: info: float overflow check proved (colibri: 1 VC)
smoothing.adb:76:56: info: float overflow check proved (colibri: 1 VC)
smoothing.adb:86:22: medium: assertion might fail [user message: Violation of assertion at block Smoothing/Consequent:/nSmoothing]
smoothing.adb:98:22: info: assertion proved (colibri: 1 VC)
smoothing.ads:20:08: info: initialization of "Smoothed_Value" proved
