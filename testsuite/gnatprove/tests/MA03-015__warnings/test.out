warn_suppr.adb:6:14: info: overflow check justified
warn_suppr.adb:8:14: medium: overflow check might fail, cannot prove lower bound for X * Y [reason for check: result of multiplication must fit in a 32-bits machine integer] [possible fix: add precondition (X * Y >= Integer'First) to subprogram at warn_suppr.ads:3]
warn_suppr.adb:9:14: medium: overflow check might fail, cannot prove lower bound for Z + K (e.g. when K = Integer'First and Z = -1073741822) [reason for check: result of addition must fit in a 32-bits machine integer]
warn_suppr.ads:3:14: warning: subprogram "P" has no effect
=========================
Summary of SPARK analysis
=========================

------------------------------------------------------------------------------
SPARK Analysis results        Total      Flow   Provers   Justified   Unproved
------------------------------------------------------------------------------
Data Dependencies                 .         .         .           .          .
Flow Dependencies                 .         .         .           .          .
Initialization                    .         .         .           .          .
Non-Aliasing                      .         .         .           .          .
Run-time Checks                   3         .         .           1          2
Assertions                        .         .         .           .          .
Functional Contracts              .         .         .           .          .
LSP Verification                  .         .         .           .          .
Termination                       .         .         .           .          .
Concurrency                       .         .         .           .          .
------------------------------------------------------------------------------
Total                             3         .         .     1 (33%)    2 (67%)


max steps used for successful proof: 0

============================
Most difficult proved checks
============================

No check found with max time greater than 1 second

========================
Detailed analysis report
========================

Analyzed 1 unit
in unit warn_suppr, 2 subprograms and packages out of 2 analyzed
  Warn_Suppr at warn_suppr.ads:1 flow analyzed (0 errors, 0 checks, 0 warnings and 0 pragma Assume statements) and proved (0 checks)
absence of run-time errors of Warn_Suppr fully established
  Warn_Suppr.P at warn_suppr.ads:3 flow analyzed (0 errors, 0 checks, 1 warnings and 0 pragma Assume statements) and not proved, 0 checks out of 2 proved
   Justified check messages:
    warn_suppr.adb:6:14: overflow check justified (marked as: intentional, reason: "deliberately ignored")
