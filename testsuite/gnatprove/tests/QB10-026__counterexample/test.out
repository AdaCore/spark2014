cartesian.adb:13:48: info: range check proved (CVC4: 1 VC)
cartesian.adb:13:56: info: overflow check proved (CVC4: 1 VC)
cartesian.adb:13:56: info: range check proved (CVC4: 1 VC)
cartesian.adb:13:64: info: range check proved (CVC4: 1 VC)
cartesian.adb:15:07: info: range check proved (CVC4: 2 VC)
cartesian.adb:16:09: info: length check proved (CVC4: 4 VC)
cartesian.adb:22:29: info: initialization of "result_index" proved
cartesian.adb:22:42: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:24:20: info: index check proved (CVC4: 8 VC)
cartesian.adb:24:34: info: initialization of "result" proved
cartesian.adb:24:34: info: initialization of "result_index" proved
cartesian.adb:27:35: info: initialization of "result_index" proved
cartesian.adb:27:35: info: loop invariant initialization proved (CVC4: 2 VC)
cartesian.adb:27:35: info: loop invariant preservation proved (CVC4: 2 VC)
cartesian.adb:27:58: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:27:74: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:27:82: info: range check proved (CVC4: 4 VC)
cartesian.adb:27:90: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:27:100: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:27:116: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:31:35: info: loop invariant initialization proved (CVC4: 2 VC)
cartesian.adb:32:38: info: initialization of "result" proved
cartesian.adb:32:38: medium: loop invariant might fail after first iteration, cannot prove result((index1 - array1'First)*array2'Length + (j - array2'First) + 1)(1) = array1(index1) (e.g. when array1 = (0 => -1, others => 0) and array1'First = 0 and array1'Last = 0 and array2 = (0 => -1, others => 0) and array2'First = 0 and array2'Last = 1 and index1 = 0 and index2 = 1 and j = 0 and result = (1 => (1 => 0, 2 => -1, others => -1), 2 => (1 => -1, 2 => 0, others => 2), 3 => (2 => 0, others => -1), others => (others => 2)))
cartesian.adb:32:53: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:32:68: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:32:75: info: range check proved (CVC4: 4 VC)
cartesian.adb:32:83: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:32:88: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:32:104: info: index check proved (CVC4: 8 VC)
cartesian.adb:32:104: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:32:121: info: index check proved (CVC4: 8 VC)
cartesian.adb:33:35: info: loop invariant initialization proved (CVC4: 2 VC)
cartesian.adb:33:35: info: loop invariant preservation proved (CVC4: 2 VC)
cartesian.adb:34:38: info: initialization of "result" proved
cartesian.adb:34:53: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:34:68: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:34:75: info: range check proved (CVC4: 4 VC)
cartesian.adb:34:83: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:34:88: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:34:104: info: index check proved (CVC4: 8 VC)
cartesian.adb:34:104: info: overflow check proved (CVC4: 4 VC)
cartesian.adb:34:121: info: index check proved (CVC4: 8 VC)
cartesian.adb:38:32: info: initialization of "result_index" proved
cartesian.adb:38:32: info: loop invariant initialization proved (CVC4: 1 VC)
cartesian.adb:38:32: info: loop invariant preservation proved (CVC4: 1 VC)
cartesian.adb:38:55: info: overflow check proved (CVC4: 2 VC)
cartesian.adb:38:70: info: overflow check proved (CVC4: 2 VC)
cartesian.adb:38:75: info: overflow check proved (CVC4: 2 VC)
cartesian.adb:38:83: info: range check proved (CVC4: 2 VC)
cartesian.adb:60:38: info: initialization of "result" proved
cartesian.adb:60:38: medium: loop invariant might fail after first iteration, cannot prove result((i - array1'First)*array2'Length + (j - array2'First) + 1)(1) = array1(i) (e.g. when array1 = (0 => 0, 1 => 0, 2 => 0, 3 => -1, 4 => 0, others => 6) and array1'First = 0 and array1'Last = 5 and array2 = (0 => 0, 1 => 0, 2 => 0, 3 => -1, 4 => 0, others => 6) and array2'First = 0 and array2'Last = 0 and i = 3 and index1 = 4 and j = 0 and result = (1 => (1 => 0, 2 => 0, others => 6), 2 => (1 => 0, 2 => 0, others => 6), 3 => (1 => 0, 2 => 0, others => 6), 4 => (1 => 0, 2 => 0, others => 6), 5 => (1 => 0, 2 => 0, others => 6), 6 => (1 => 0, 2 => 0, others => 6), 7 => (1 => 0, 2 => 0, others => 6), 8 => (1 => 0, 2 => 0, others => 6), 9 => (1 => 0, 2 => 0, others => 6), others => (others => 6)))
cartesian.adb:60:38: medium: loop invariant might fail in first iteration, cannot prove result((i - array1'First)*array2'Length + (j - array2'First) + 1)(1) = array1(i) (e.g. when array1 = (0 => 0, 1 => 0, 2 => 0, others => 1) and array1'First = 0 and array1'Last = 0 and array2 = (0 => 0, 1 => 0, 2 => 0, others => 1) and array2'First = 0 and array2'Last = 0 and i = 0 and index1 = 0 and j = 0 and result = (1 => (1 => 1, 2 => 0, others => 0), 2 => (2 => 0, others => 0), 3 => (2 => 0, others => 0), others => (others => 1)))
cartesian.adb:60:48: info: overflow check proved (CVC4: 2 VC)
cartesian.adb:60:63: info: overflow check proved (CVC4: 2 VC)
cartesian.adb:60:70: info: range check proved (CVC4: 2 VC)
cartesian.adb:60:78: info: overflow check proved (CVC4: 2 VC)
cartesian.adb:60:83: info: overflow check proved (CVC4: 2 VC)
cartesian.adb:60:99: info: index check proved (CVC4: 4 VC)
cartesian.adb:60:99: info: overflow check proved (CVC4: 2 VC)
cartesian.adb:60:116: info: index check proved (CVC4: 4 VC)
cartesian.adb:61:32: info: loop invariant initialization proved (CVC4: 1 VC)
cartesian.adb:63:38: info: initialization of "result" proved
cartesian.adb:63:38: medium: loop invariant might fail after first iteration, cannot prove result((i - array1'First)*array2'Length + (j - array2'First) + 1)(2) = array2(j) (e.g. when array1 = (0 => 0, 1 => 0, 2 => 0, 3 => -1, 4 => 0, 6 => 0, others => -1) and array1'First = 4 and array1'Last = 16 and array2 = (0 => 0, 1 => 0, 2 => 0, 3 => -1, 4 => 0, 6 => 0, others => -1) and array2'First = 0 and array2'Last = 4 and i = 5 and index1 = 6 and j = 3 and result = (1 => (2 => 0, others => -1), 11 => (others => 0), 2 => (2 => 0, others => -1), 3 => (2 => 0, others => -1), 4 => (2 => -1, others => -1), 5 => (2 => 0, others => -1), 6 => (2 => 0, others => -1), 7 => (2 => 0, others => -1), 8 => (2 => -1, others => 16), 9 => (2 => 0, others => -1), others => (others => 16)))
cartesian.adb:63:48: info: overflow check proved (CVC4: 2 VC)
cartesian.adb:63:63: info: overflow check proved (CVC4: 2 VC)
cartesian.adb:63:70: info: range check proved (CVC4: 2 VC)
cartesian.adb:63:78: info: overflow check proved (CVC4: 2 VC)
cartesian.adb:63:83: info: overflow check proved (CVC4: 2 VC)
cartesian.adb:63:99: info: index check proved (CVC4: 4 VC)
cartesian.adb:63:99: info: overflow check proved (CVC4: 2 VC)
cartesian.adb:63:116: info: index check proved (CVC4: 4 VC)
cartesian.adb:69:27: info: initialization of "result" proved
cartesian.adb:69:27: medium: assertion might fail, cannot prove result((i - array1'First)*array2'Length + (j - array2'First) + 1)(1) = array1(i) (e.g. when array1 = (0 => 0, 1 => 0, 2 => 0, others => 0) and array1'First = 0 and array1'Last = 0 and array2 = (0 => 0, 1 => 0, 2 => 0, others => 0) and array2'First = 0 and array2'Last = 0 and i = 0 and j = 0 and result = (others => (others => 1)))
cartesian.adb:69:37: info: overflow check proved (CVC4: 1 VC)
cartesian.adb:69:52: info: overflow check proved (CVC4: 1 VC)
cartesian.adb:69:59: info: range check proved (CVC4: 1 VC)
cartesian.adb:69:67: info: overflow check proved (CVC4: 1 VC)
cartesian.adb:69:72: info: overflow check proved (CVC4: 1 VC)
cartesian.adb:69:88: info: index check proved (CVC4: 2 VC)
cartesian.adb:69:88: info: overflow check proved (CVC4: 1 VC)
cartesian.adb:69:105: info: index check proved (CVC4: 2 VC)
cartesian.adb:72:27: info: initialization of "result" proved
cartesian.adb:72:27: medium: assertion might fail, cannot prove result((i - array1'First)*array2'Length + (j - array2'First) + 1)(2) = array2(j) (e.g. when array1 = (0 => 0, 1 => 0, 2 => 0, others => 0) and array1'First = 0 and array1'Last = 0 and array2 = (0 => 0, 1 => 0, 2 => 0, others => 0) and array2'First = 0 and array2'Last = 0 and i = 0 and j = 0 and result = (1 => (others => 1), others => (others => 1)))
cartesian.adb:72:37: info: overflow check proved (CVC4: 1 VC)
cartesian.adb:72:52: info: overflow check proved (CVC4: 1 VC)
cartesian.adb:72:59: info: range check proved (CVC4: 1 VC)
cartesian.adb:72:67: info: overflow check proved (CVC4: 1 VC)
cartesian.adb:72:72: info: overflow check proved (CVC4: 1 VC)
cartesian.adb:72:88: info: index check proved (CVC4: 1 VC; Z3: 1 VC)
cartesian.adb:72:88: info: overflow check proved (CVC4: 1 VC)
cartesian.adb:72:105: info: index check proved (CVC4: 2 VC)
cartesian.adb:74:14: info: initialization of "result" proved
cartesian.ads:25:15: info: index check proved (CVC4: 2 VC)
cartesian.ads:32:15: info: index check proved (CVC4: 2 VC)
cartesian.ads:53:21: medium: postcondition might fail, cannot prove in_array(pair_type'(array1(i), array2(j)), cartesian_product'result) (e.g. when array1 = (0 => 0, 1 => 0, 2 => 0, others => 1) and array1'First = 0 and array1'Last = 0 and array2 = (0 => 0, 1 => 0, 2 => 0, others => 1) and array2'First = 0 and array2'Last = 0 and cartesian_product'First = 1 and cartesian_product'Last = 1 and cartesian_product'Result = (1 => (1 => 0, 2 => 0, others => 1), 2 => (1 => 0, 2 => 0, others => 1), 3 => (1 => 0, 2 => 0, others => 1), others => (others => 1)) and i = 0 and j = 0)
cartesian.ads:53:48: info: index check proved (CVC4: 2 VC)
cartesian.ads:53:59: info: index check proved (CVC4: 2 VC)
