cartesian.adb:13:48: info: range check proved (CVC5: 2 VC)
cartesian.adb:13:56: info: overflow check proved (CVC5: 2 VC)
cartesian.adb:13:56: info: range check proved (CVC5: 2 VC)
cartesian.adb:13:64: info: range check proved (CVC5: 2 VC)
cartesian.adb:15:07: info: range check proved (CVC5: 2 VC)
cartesian.adb:16:09: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
cartesian.adb:22:42: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:24:20: medium: array index check might fail [reason for check: value must be a valid index into the array]
cartesian.adb:27:35: info: loop invariant initialization proved (CVC5: 2 VC)
cartesian.adb:27:35: info: loop invariant preservation proved (CVC5: 2 VC)
cartesian.adb:27:58: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:27:74: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:27:82: info: range check proved (CVC5: 8 VC)
cartesian.adb:27:90: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:27:100: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:27:116: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:31:35: info: loop invariant initialization proved (CVC5: 2 VC)
cartesian.adb:32:38: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove result((index1 - array1'First)*array2'Length + (j - array2'First) + 1)(1) = array1(index1)
cartesian.adb:32:53: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:32:68: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:32:75: info: range check proved (CVC5: 8 VC)
cartesian.adb:32:83: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:32:88: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:32:104: info: index check proved (CVC5: 8 VC)
cartesian.adb:32:104: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:32:121: info: index check proved (CVC5: 8 VC)
cartesian.adb:33:35: info: loop invariant initialization proved (CVC5: 2 VC)
cartesian.adb:33:35: info: loop invariant preservation proved (CVC5: 2 VC)
cartesian.adb:34:53: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:34:68: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:34:75: info: range check proved (CVC5: 8 VC)
cartesian.adb:34:83: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:34:88: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:34:104: info: index check proved (CVC5: 8 VC)
cartesian.adb:34:104: info: overflow check proved (CVC5: 8 VC)
cartesian.adb:34:121: info: index check proved (CVC5: 8 VC)
cartesian.adb:38:32: info: loop invariant initialization proved (CVC5: 1 VC)
cartesian.adb:38:32: info: loop invariant preservation proved (CVC5: 1 VC)
cartesian.adb:38:55: info: overflow check proved (CVC5: 4 VC)
cartesian.adb:38:70: info: overflow check proved (CVC5: 4 VC)
cartesian.adb:38:75: info: overflow check proved (CVC5: 4 VC)
cartesian.adb:38:83: info: range check proved (CVC5: 4 VC)
cartesian.adb:60:38: medium: loop invariant might fail in first iteration, cannot prove result((i - array1'First)*array2'Length + (j - array2'First) + 1)(1) = array1(i)
cartesian.adb:60:38: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove result((i - array1'First)*array2'Length + (j - array2'First) + 1)(1) = array1(i)
cartesian.adb:60:48: info: overflow check proved (CVC5: 4 VC)
cartesian.adb:60:63: medium: overflow check might fail, cannot prove upper bound for (i - array1'First)*array2'Length [reason for check: result of multiplication must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
cartesian.adb:60:70: info: range check proved (CVC5: 4 VC)
cartesian.adb:60:78: info: overflow check proved (CVC5: 4 VC)
cartesian.adb:60:83: info: overflow check proved (CVC5: 4 VC)
cartesian.adb:60:99: info: overflow check proved (CVC5: 4 VC)
cartesian.adb:60:99: medium: array index check might fail [reason for check: result of addition must be a valid index into the array]
cartesian.adb:60:116: info: index check proved (CVC5: 4 VC)
cartesian.adb:61:32: info: loop invariant initialization proved (CVC5: 1 VC)
cartesian.adb:63:38: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove result((i - array1'First)*array2'Length + (j - array2'First) + 1)(2) = array2(j)
cartesian.adb:63:48: info: overflow check proved (CVC5: 4 VC)
cartesian.adb:63:63: medium: overflow check might fail, cannot prove upper bound for (i - array1'First)*array2'Length [reason for check: result of multiplication must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
cartesian.adb:63:70: info: range check proved (CVC5: 4 VC)
cartesian.adb:63:78: info: overflow check proved (CVC5: 4 VC)
cartesian.adb:63:83: info: overflow check proved (CVC5: 4 VC)
cartesian.adb:63:99: info: overflow check proved (CVC5: 4 VC)
cartesian.adb:63:99: medium: array index check might fail [reason for check: result of addition must be a valid index into the array]
cartesian.adb:63:116: info: index check proved (CVC5: 4 VC)
cartesian.adb:67:21: info: assertion proved (CVC5: 1 VC)
cartesian.adb:69:37: info: overflow check proved (CVC5: 2 VC)
cartesian.adb:69:52: info: overflow check proved (CVC5: 2 VC)
cartesian.adb:69:59: info: range check proved (CVC5: 2 VC)
cartesian.adb:69:67: info: overflow check proved (CVC5: 2 VC)
cartesian.adb:69:72: info: overflow check proved (CVC5: 2 VC)
cartesian.adb:69:88: info: index check proved (CVC5: 2 VC)
cartesian.adb:69:88: info: overflow check proved (CVC5: 2 VC)
cartesian.adb:69:105: info: index check proved (CVC5: 2 VC)
cartesian.adb:70:21: info: assertion proved (CVC5: 1 VC)
cartesian.adb:72:37: info: overflow check proved (CVC5: 2 VC)
cartesian.adb:72:52: info: overflow check proved (CVC5: 2 VC)
cartesian.adb:72:59: info: range check proved (CVC5: 2 VC)
cartesian.adb:72:67: info: overflow check proved (CVC5: 2 VC)
cartesian.adb:72:72: info: overflow check proved (CVC5: 2 VC)
cartesian.adb:72:88: info: index check proved (CVC5: 2 VC)
cartesian.adb:72:88: info: overflow check proved (CVC5: 2 VC)
cartesian.adb:72:105: info: index check proved (CVC5: 2 VC)
cartesian.ads:21:13: info: implicit aspect Always_Terminates on "in_array" has been proved, subprogram will terminate
cartesian.ads:25:15: info: index check proved (CVC5: 2 VC)
cartesian.ads:28:13: info: implicit aspect Always_Terminates on "in_array" has been proved, subprogram will terminate
cartesian.ads:32:15: info: index check proved (CVC5: 2 VC)
cartesian.ads:35:13: info: implicit aspect Always_Terminates on "in_array" has been proved, subprogram will terminate
cartesian.ads:43:13: info: implicit aspect Always_Terminates on "cartesian_product" has been proved, subprogram will terminate
cartesian.ads:53:21: medium: postcondition might fail, cannot prove in_array(pair_type'(array1(i), array2(j)), cartesian_product'Result)
cartesian.ads:53:48: info: index check proved (CVC5: 2 VC)
cartesian.ads:53:59: info: index check proved (CVC5: 2 VC)
