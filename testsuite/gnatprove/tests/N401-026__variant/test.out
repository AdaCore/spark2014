loop_tutorial.adb:10:19: info: postcondition proved (CVC4: 2 VC)
loop_tutorial.adb:10:32: info: overflow check proved (CVC4: 2 VC)
loop_tutorial.adb:11:35: info: overflow check proved (CVC4: 2 VC)
loop_tutorial.adb:11:40: info: overflow check proved (CVC4: 2 VC)
loop_tutorial.adb:11:56: info: overflow check proved (CVC4: 2 VC)
loop_tutorial.adb:13:05: info: initialization of "Lower" proved
loop_tutorial.adb:13:12: info: initialization of "Upper" proved
loop_tutorial.adb:13:19: info: initialization of "Middle" proved
loop_tutorial.adb:21:20: info: overflow check proved (CVC4: 2 VC)
loop_tutorial.adb:27:33: info: loop invariant initialization proved (CVC4: 5 VC)
loop_tutorial.adb:27:33: info: loop invariant preservation proved (CVC4: 5 VC)
loop_tutorial.adb:30:43: high: overflow check might fail, cannot prove upper bound for Upper * Upper (e.g. when Upper = 46341) [reason for check: result of multiplication must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
loop_tutorial.adb:31:43: info: overflow check proved (CVC4: 4 VC)
loop_tutorial.adb:33:31: info: loop variant proved (CVC4: 1 VC)
loop_tutorial.adb:37:25: info: overflow check proved (CVC4: 2 VC)
loop_tutorial.adb:38:26: info: overflow check proved (CVC4: 2 VC)
loop_tutorial.adb:38:35: info: division check proved (CVC4: 1 VC)
loop_tutorial.adb:39:19: info: overflow check proved (CVC4: 2 VC)
