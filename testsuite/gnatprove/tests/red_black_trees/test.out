binary_trees.adb:12:13: info: implicit terminating annotation on "All_Indexes" has been proved, subprogram will terminate
binary_trees.adb:19:08: info: postcondition proved (CVC5: 2 VC)
binary_trees.adb:20:20: info: predicate check proved (Trivial: 1 VC)
binary_trees.adb:23:07: info: initialization of "S" proved
binary_trees.adb:26:33: info: loop invariant initialization proved (CVC5: 1 VC)
binary_trees.adb:26:33: info: loop invariant preservation proved (CVC5: 1 VC)
binary_trees.adb:26:33: info: predicate check proved (Trivial: 2 VC)
binary_trees.adb:28:13: info: loop invariant initialization proved (CVC5: 1 VC)
binary_trees.adb:28:13: info: loop invariant preservation proved (CVC5: 1 VC)
binary_trees.adb:28:53: info: range check proved (CVC5: 4 VC)
binary_trees.adb:29:33: info: loop invariant initialization proved (CVC5: 1 VC)
binary_trees.adb:29:33: info: loop invariant preservation proved (CVC5: 1 VC)
binary_trees.adb:30:15: info: precondition proved (CVC5: 1 VC)
binary_trees.adb:43:55: info: index check proved (CVC5: 2 VC)
binary_trees.adb:61:33: info: index check proved (CVC5: 2 VC)
binary_trees.adb:62:42: info: index check proved (CVC5: 2 VC)
binary_trees.adb:69:32: info: index check proved (CVC5: 2 VC)
binary_trees.adb:70:41: info: index check proved (CVC5: 2 VC)
binary_trees.adb:77:36: info: index check proved (CVC5: 2 VC)
binary_trees.adb:80:36: info: index check proved (CVC5: 2 VC)
binary_trees.adb:95:14: info: range check proved (CVC5: 2 VC)
binary_trees.adb:108:16: info: function contract might not be available on calls from enclosing unit
binary_trees.adb:108:16: info: implicit terminating annotation on "Next" has been proved, subprogram will terminate
binary_trees.adb:110:11: info: postcondition proved (CVC5: 2 VC)
binary_trees.adb:111:27: info: index check proved (CVC5: 2 VC)
binary_trees.adb:115:36: info: loop invariant initialization proved (CVC5: 1 VC)
binary_trees.adb:115:36: info: loop invariant preservation proved (CVC5: 1 VC)
binary_trees.adb:115:73: info: index check proved (CVC5: 4 VC)
binary_trees.adb:130:07: info: in default initialization of array component at tree_model.ads:29
binary_trees.adb:130:07: info: initialization of "R" proved
binary_trees.adb:130:07: info: predicate check proved on default value (CVC5: 1 VC)
binary_trees.adb:131:39: info: range check proved (CVC5: 2 VC)
binary_trees.adb:137:15: info: predicate check proved (CVC5: 1 VC)
binary_trees.adb:144:33: info: loop invariant initialization proved (CVC5: 1 VC)
binary_trees.adb:144:33: info: loop invariant preservation proved (CVC5: 1 VC)
binary_trees.adb:144:39: info: index check proved (CVC5: 4 VC)
binary_trees.adb:148:13: info: loop invariant initialization proved (CVC5: 1 VC; Trivial: 1 VC)
binary_trees.adb:149:32: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove R (J).K
binary_trees.adb:154:13: info: loop invariant initialization proved (CVC5: 1 VC; Trivial: 2 VC)
binary_trees.adb:154:13: info: loop invariant preservation proved (CVC5: 1 VC; Trivial: 2 VC)
binary_trees.adb:160:33: info: loop invariant initialization proved (CVC5: 2 VC)
binary_trees.adb:160:33: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove R (Root).K
binary_trees.adb:160:48: info: predicate check proved (Trivial: 2 VC)
binary_trees.adb:160:70: info: predicate check proved (Trivial: 2 VC)
binary_trees.adb:164:13: info: loop invariant initialization proved (CVC5: 2 VC; Trivial: 1 VC)
binary_trees.adb:165:45: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove F.C (J).Parent /= Empty
binary_trees.adb:166:34: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:172:13: info: loop invariant initialization proved (CVC5: 4 VC)
binary_trees.adb:174:20: medium: in inlined expression function body at tree_model.ads:59
binary_trees.adb:174:20: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Length (S2) - 1 = Length (S1)
binary_trees.adb:174:38: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:174:57: medium: range check might fail, cannot prove lower bound for F.C (J).Position [reason for check: input value must fit in parameter type]
binary_trees.adb:175:20: info: predicate check proved (Trivial: 2 VC)
binary_trees.adb:175:39: info: predicate check proved (Trivial: 2 VC)
binary_trees.adb:182:13: info: loop invariant initialization proved (CVC5: 2 VC; Trivial: 1 VC)
binary_trees.adb:184:63: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:185:22: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove R (J).K or ToDo (F.C (J).Parent)
binary_trees.adb:185:46: info: index check proved (CVC5: 4 VC)
binary_trees.adb:191:13: info: loop invariant initialization proved (CVC5: 1 VC; Trivial: 1 VC)
binary_trees.adb:192:50: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove not ToDo (F.C (J).Parent)
binary_trees.adb:192:67: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:196:13: info: loop invariant initialization proved (CVC5: 1 VC; Trivial: 2 VC)
binary_trees.adb:200:24: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove J = K
binary_trees.adb:204:33: info: loop invariant initialization proved (CVC5: 2 VC)
binary_trees.adb:204:33: info: loop invariant preservation proved (CVC5: 2 VC)
binary_trees.adb:204:48: info: predicate check proved (Trivial: 2 VC)
binary_trees.adb:204:70: info: predicate check proved (Trivial: 2 VC)
binary_trees.adb:209:13: info: loop invariant initialization proved (CVC5: 1 VC)
binary_trees.adb:210:15: info: predicate check proved (Trivial: 2 VC)
binary_trees.adb:210:15: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Length (R (J).A) <= To_Big_Integer (Tree_Model.Max) - Length (Unseen)
binary_trees.adb:211:55: info: predicate check proved (Trivial: 2 VC)
binary_trees.adb:216:13: info: loop invariant initialization proved (CVC5: 2 VC)
binary_trees.adb:217:15: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove (Contains (Unseen, J) = (not R (J).K or ToDo (J)))
binary_trees.adb:220:31: info: loop variant proved (CVC5: 1 VC)
binary_trees.adb:220:44: info: range check proved (CVC5: 2 VC)
binary_trees.adb:223:20: info: precondition proved (CVC5: 1 VC)
binary_trees.adb:223:36: info: range check proved (CVC5: 2 VC)
binary_trees.adb:226:13: info: initialization of "J" proved
binary_trees.adb:229:23: info: index check proved (CVC5: 2 VC)
binary_trees.adb:231:31: medium: assertion might fail
binary_trees.adb:232:19: info: index check proved (CVC5: 2 VC)
binary_trees.adb:232:28: info: predicate check proved (CVC5: 1 VC)
binary_trees.adb:233:34: info: precondition proved (CVC5: 1 VC)
binary_trees.adb:233:42: info: index check proved (CVC5: 2 VC)
binary_trees.adb:234:22: info: index check proved (CVC5: 2 VC)
binary_trees.adb:242:34: medium: assertion might fail, cannot prove J = K
binary_trees.adb:247:45: medium: assertion might fail, cannot prove not (R (J).A < R (K).A)
binary_trees.adb:250:23: info: index check proved (CVC5: 2 VC)
binary_trees.adb:252:31: medium: assertion might fail
binary_trees.adb:253:19: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: loop invariant at line 144 should mention J]
binary_trees.adb:253:28: medium: predicate check might fail
binary_trees.adb:254:34: medium: precondition might fail
binary_trees.adb:254:42: info: index check proved (CVC5: 2 VC)
binary_trees.adb:255:22: info: index check proved (CVC5: 2 VC)
binary_trees.adb:263:34: medium: assertion might fail, cannot prove J = K
binary_trees.adb:268:45: medium: assertion might fail, cannot prove not (R (J).A < R (K).A)
binary_trees.adb:272:16: info: index check proved (CVC5: 2 VC)
binary_trees.adb:288:18: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:288:18: info: precondition proved (CVC5: 2 VC)
binary_trees.adb:288:48: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:288:48: info: precondition proved (CVC5: 2 VC)
binary_trees.adb:289:20: medium: loop invariant might fail in first iteration, cannot prove not Model (F, T2) (I).K
binary_trees.adb:289:20: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove not Model (F, T2) (I).K
binary_trees.adb:289:24: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:289:24: info: precondition proved (CVC5: 2 VC)
binary_trees.adb:303:06: info: data dependencies proved
binary_trees.adb:318:23: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:318:23: info: precondition proved (CVC5: 1 VC)
binary_trees.adb:321:08: medium: postcondition might fail, cannot prove F2.C (Root).Position = Top
binary_trees.adb:324:17: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:324:17: medium: precondition might fail
binary_trees.adb:324:36: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:324:36: medium: precondition might fail
binary_trees.adb:333:18: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:333:18: medium: precondition might fail
binary_trees.adb:333:51: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:333:51: medium: precondition might fail
binary_trees.adb:334:17: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:334:17: medium: loop invariant might fail in first iteration, cannot prove Model (F2, Root) (I).K
binary_trees.adb:334:17: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Model (F2, Root) (I).K
binary_trees.adb:334:17: medium: precondition might fail
binary_trees.adb:340:18: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:340:18: medium: precondition might fail
binary_trees.adb:340:51: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:340:51: medium: precondition might fail
binary_trees.adb:341:17: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:341:17: medium: loop invariant might fail in first iteration, cannot prove Model (F1, Root) (I).K
binary_trees.adb:341:17: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Model (F1, Root) (I).K
binary_trees.adb:341:17: medium: precondition might fail
binary_trees.adb:349:18: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:349:18: medium: precondition might fail
binary_trees.adb:349:51: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:349:51: medium: precondition might fail
binary_trees.adb:350:17: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:350:17: medium: loop invariant might fail in first iteration, cannot prove ( Model (F2, Root) (I).A = Model (F1, Root) (I).A)
binary_trees.adb:350:17: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove ( Model (F2, Root) (I).A = Model (F1, Root) (I).A)
binary_trees.adb:350:17: medium: precondition might fail
binary_trees.adb:350:42: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:350:42: medium: precondition might fail
binary_trees.adb:359:16: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:359:16: medium: precondition might fail
binary_trees.adb:359:49: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:359:49: medium: precondition might fail
binary_trees.adb:360:16: medium: precondition might fail, cannot prove S1 = S2
binary_trees.adb:360:38: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:360:38: medium: precondition might fail
binary_trees.adb:360:64: info: index check proved (CVC5: 4 VC)
binary_trees.adb:361:38: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:361:38: medium: precondition might fail
binary_trees.adb:361:64: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:362:38: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:362:38: medium: precondition might fail
binary_trees.adb:363:38: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:363:38: medium: precondition might fail
binary_trees.adb:364:46: medium: range check might fail, cannot prove lower bound for F1.C (J).Position [reason for check: input value must fit in parameter type]
binary_trees.adb:371:21: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:371:21: medium: precondition might fail
binary_trees.adb:371:39: info: index check proved (CVC5: 4 VC)
binary_trees.adb:371:54: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:371:54: medium: precondition might fail
binary_trees.adb:371:72: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:372:20: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:372:20: medium: loop invariant might fail in first iteration, cannot prove ( Model (F2, Root) (I).A = Model (F1, Root) (I).A)
binary_trees.adb:372:20: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove ( Model (F2, Root) (I).A = Model (F1, Root) (I).A)
binary_trees.adb:372:20: medium: precondition might fail
binary_trees.adb:372:38: info: index check proved (CVC5: 4 VC)
binary_trees.adb:372:45: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:372:45: medium: precondition might fail
binary_trees.adb:372:63: info: index check proved (CVC5: 4 VC)
binary_trees.adb:387:06: info: data dependencies proved
binary_trees.adb:389:17: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:392:14: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:392:14: info: precondition proved (CVC5: 1 VC)
binary_trees.adb:394:18: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:396:22: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:396:22: info: precondition proved (CVC5: 1 VC)
binary_trees.adb:397:31: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:397:31: info: precondition proved (CVC5: 1 VC)
binary_trees.adb:397:55: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:397:55: info: precondition proved (CVC5: 1 VC)
binary_trees.adb:398:24: info: precondition proved (CVC5: 2 VC)
binary_trees.adb:398:24: medium: postcondition might fail, cannot prove Get (Model (F, Root) (J).A, Last (Model (F, Root) (I).A) + 1) /= D [possible fix: you should consider adding a postcondition to function Last and function Get or turning them into expression functions in their unit spec]
binary_trees.adb:398:29: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:398:29: info: precondition proved (CVC5: 1 VC)
binary_trees.adb:398:58: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:398:58: info: precondition proved (CVC5: 1 VC)
binary_trees.adb:398:81: medium: overflow check might fail, cannot prove upper bound for Last (Model (F, Root) (I).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
binary_trees.adb:404:18: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:404:18: info: precondition proved (CVC5: 2 VC)
binary_trees.adb:406:22: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:408:26: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:408:26: info: precondition proved (CVC5: 2 VC)
binary_trees.adb:409:34: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:409:34: info: precondition proved (CVC5: 2 VC)
binary_trees.adb:409:58: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:409:58: info: precondition proved (CVC5: 2 VC)
binary_trees.adb:410:40: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:410:40: info: precondition proved (CVC5: 2 VC)
binary_trees.adb:410:72: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:410:72: info: precondition proved (CVC5: 2 VC)
binary_trees.adb:410:95: medium: overflow check might fail, cannot prove upper bound for Last (Model (F, Root) (I).A) + N [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
binary_trees.adb:411:28: info: precondition proved (CVC5: 4 VC)
binary_trees.adb:411:28: medium: loop invariant might fail in first iteration, cannot prove Get (Model (F, Root) (J).A, Last (Model (F, Root) (I).A) + 1) /= D [possible fix: you should consider adding a postcondition to function Last and function Get or turning them into expression functions in their unit spec]
binary_trees.adb:411:28: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Get (Model (F, Root) (J).A, Last (Model (F, Root) (I).A) + 1) /= D [possible fix: you should consider adding a postcondition to function Last and function Get or turning them into expression functions in their unit spec]
binary_trees.adb:411:33: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:411:33: info: precondition proved (CVC5: 2 VC)
binary_trees.adb:411:62: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:411:62: info: precondition proved (CVC5: 2 VC)
binary_trees.adb:411:85: medium: overflow check might fail, cannot prove lower bound for Last (Model (F, Root) (I).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
binary_trees.adb:417:07: info: precondition proved (CVC5: 2 VC)
binary_trees.adb:434:09: info: data dependencies proved
binary_trees.adb:448:25: info: index check proved (CVC5: 2 VC)
binary_trees.adb:451:20: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:451:20: info: precondition proved (CVC5: 1 VC)
binary_trees.adb:451:41: info: index check proved (CVC5: 2 VC)
binary_trees.adb:464:30: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:464:30: medium: precondition might fail
binary_trees.adb:470:30: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:470:30: medium: precondition might fail
binary_trees.adb:477:17: medium: invariant check might fail
binary_trees.adb:477:17: medium: precondition might fail
binary_trees.adb:478:19: medium: invariant check might fail
binary_trees.adb:478:19: medium: precondition might fail
binary_trees.adb:478:40: info: index check proved (CVC5: 2 VC)
binary_trees.adb:478:48: medium: invariant check might fail
binary_trees.adb:478:48: medium: precondition might fail
binary_trees.adb:479:21: medium: invariant check might fail
binary_trees.adb:479:21: medium: postcondition might fail, cannot prove Model (F, V) (I).K
binary_trees.adb:479:21: medium: precondition might fail
binary_trees.adb:479:31: info: range check proved (CVC5: 2 VC)
binary_trees.adb:480:21: medium: invariant check might fail
binary_trees.adb:480:21: medium: precondition might fail
binary_trees.adb:485:26: medium: invariant check might fail
binary_trees.adb:485:26: medium: precondition might fail
binary_trees.adb:485:53: medium: invariant check might fail
binary_trees.adb:485:53: medium: precondition might fail
binary_trees.adb:490:26: medium: invariant check might fail
binary_trees.adb:490:26: medium: precondition might fail
binary_trees.adb:490:36: info: range check proved (CVC5: 2 VC)
binary_trees.adb:490:50: medium: invariant check might fail
binary_trees.adb:490:50: medium: precondition might fail
binary_trees.adb:494:26: medium: invariant check might fail
binary_trees.adb:494:26: medium: precondition might fail
binary_trees.adb:494:53: medium: invariant check might fail
binary_trees.adb:494:53: medium: precondition might fail
binary_trees.adb:494:77: medium: invariant check might fail
binary_trees.adb:494:77: medium: precondition might fail
binary_trees.adb:501:26: medium: invariant check might fail
binary_trees.adb:501:26: medium: precondition might fail
binary_trees.adb:501:36: info: range check proved (CVC5: 2 VC)
binary_trees.adb:502:25: medium: precondition might fail
binary_trees.adb:502:41: medium: invariant check might fail
binary_trees.adb:502:41: medium: precondition might fail
binary_trees.adb:502:62: info: index check proved (CVC5: 2 VC)
binary_trees.adb:503:41: medium: invariant check might fail
binary_trees.adb:503:41: medium: precondition might fail
binary_trees.adb:503:51: info: range check proved (CVC5: 2 VC)
binary_trees.adb:504:41: medium: invariant check might fail
binary_trees.adb:504:41: medium: precondition might fail
binary_trees.adb:508:60: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:509:25: medium: invariant check might fail
binary_trees.adb:509:25: medium: precondition might fail
binary_trees.adb:509:39: info: range check proved (CVC5: 2 VC)
binary_trees.adb:509:44: medium: invariant check might fail
binary_trees.adb:509:44: medium: precondition might fail
binary_trees.adb:509:54: info: range check proved (CVC5: 2 VC)
binary_trees.adb:520:21: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:520:21: medium: precondition might fail
binary_trees.adb:520:62: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:520:62: medium: precondition might fail
binary_trees.adb:521:23: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:521:23: medium: precondition might fail
binary_trees.adb:521:44: info: index check proved (CVC5: 4 VC)
binary_trees.adb:521:52: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:521:52: medium: precondition might fail
binary_trees.adb:522:25: medium: invariant check might fail
binary_trees.adb:522:25: medium: loop invariant might fail in first iteration, cannot prove Model (F, V) (I).K
binary_trees.adb:522:25: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Model (F, V) (I).K
binary_trees.adb:522:25: medium: precondition might fail
binary_trees.adb:522:35: info: range check proved (CVC5: 4 VC)
binary_trees.adb:523:25: medium: invariant check might fail
binary_trees.adb:523:25: medium: precondition might fail
binary_trees.adb:529:21: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:529:21: medium: precondition might fail
binary_trees.adb:529:58: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:529:58: medium: precondition might fail
binary_trees.adb:530:23: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:530:23: medium: loop invariant might fail in first iteration, cannot prove Model (F_Old, Root) (I).K
binary_trees.adb:530:23: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Model (F_Old, Root) (I).K
binary_trees.adb:530:23: medium: precondition might fail
binary_trees.adb:536:21: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:536:21: medium: precondition might fail
binary_trees.adb:536:31: info: range check proved (CVC5: 4 VC)
binary_trees.adb:536:55: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:536:55: medium: precondition might fail
binary_trees.adb:536:65: info: range check proved (CVC5: 4 VC)
binary_trees.adb:537:23: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:537:23: medium: loop invariant might fail in first iteration, cannot prove Model (F_Old, Root) (I).K
binary_trees.adb:537:23: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Model (F_Old, Root) (I).K
binary_trees.adb:537:23: medium: precondition might fail
binary_trees.adb:547:21: medium: invariant check might fail
binary_trees.adb:547:21: medium: precondition might fail
binary_trees.adb:547:62: medium: invariant check might fail
binary_trees.adb:547:62: medium: precondition might fail
binary_trees.adb:548:23: medium: invariant check might fail
binary_trees.adb:548:23: medium: precondition might fail
binary_trees.adb:548:50: medium: invariant check might fail
binary_trees.adb:548:50: medium: loop invariant might fail in first iteration, cannot prove (( Model (F, Root) (I).A = Model (F_Old, Root) (I).A))
binary_trees.adb:548:50: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove (( Model (F, Root) (I).A = Model (F_Old, Root) (I).A))
binary_trees.adb:548:50: medium: precondition might fail
binary_trees.adb:548:74: medium: invariant check might fail
binary_trees.adb:548:74: medium: precondition might fail
binary_trees.adb:556:21: medium: invariant check might fail
binary_trees.adb:556:21: medium: precondition might fail
binary_trees.adb:556:62: medium: invariant check might fail
binary_trees.adb:556:62: medium: precondition might fail
binary_trees.adb:557:23: medium: invariant check might fail
binary_trees.adb:557:23: medium: precondition might fail
binary_trees.adb:557:33: info: range check proved (CVC5: 4 VC)
binary_trees.adb:558:22: medium: in inlined expression function body at tree_model.ads:42
binary_trees.adb:558:22: medium: in inlined expression function body at tree_model.ads:42
binary_trees.adb:558:22: medium: loop invariant might fail in first iteration, cannot prove Length (P) - Length (V) = Length (Q)
binary_trees.adb:558:22: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Length (P) - Length (V) = Length (Q)
binary_trees.adb:558:22: medium: precondition might fail
binary_trees.adb:558:38: medium: invariant check might fail
binary_trees.adb:558:38: medium: precondition might fail
binary_trees.adb:558:59: info: index check proved (CVC5: 4 VC)
binary_trees.adb:559:38: medium: invariant check might fail
binary_trees.adb:559:38: medium: precondition might fail
binary_trees.adb:559:48: info: range check proved (CVC5: 4 VC)
binary_trees.adb:560:38: medium: invariant check might fail
binary_trees.adb:560:38: medium: precondition might fail
binary_trees.adb:572:19: medium: invariant check might fail
binary_trees.adb:572:19: medium: precondition might fail
binary_trees.adb:573:33: medium: invariant check might fail
binary_trees.adb:573:33: medium: precondition might fail
binary_trees.adb:574:27: medium: invariant check might fail
binary_trees.adb:574:27: medium: precondition might fail
binary_trees.adb:576:19: medium: precondition might fail, cannot prove S1 = S2
binary_trees.adb:576:41: medium: invariant check might fail
binary_trees.adb:576:41: medium: precondition might fail
binary_trees.adb:576:66: info: index check proved (CVC5: 4 VC)
binary_trees.adb:577:41: medium: invariant check might fail
binary_trees.adb:577:41: medium: precondition might fail
binary_trees.adb:577:70: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:578:41: medium: invariant check might fail
binary_trees.adb:578:41: medium: precondition might fail
binary_trees.adb:579:41: medium: invariant check might fail
binary_trees.adb:579:41: medium: precondition might fail
binary_trees.adb:580:49: medium: range check might fail, cannot prove lower bound for F.C (KI).Position [reason for check: input value must fit in parameter type]
binary_trees.adb:587:19: medium: invariant check might fail
binary_trees.adb:587:19: medium: precondition might fail
binary_trees.adb:588:33: medium: invariant check might fail
binary_trees.adb:588:33: medium: precondition might fail
binary_trees.adb:589:27: medium: invariant check might fail
binary_trees.adb:589:27: medium: precondition might fail
binary_trees.adb:589:37: info: range check proved (CVC5: 4 VC)
binary_trees.adb:592:19: medium: precondition might fail, cannot prove Length (T) <= Max
binary_trees.adb:592:42: medium: invariant check might fail
binary_trees.adb:592:42: medium: precondition might fail
binary_trees.adb:592:52: info: range check proved (CVC5: 4 VC)
binary_trees.adb:592:64: info: index check proved (CVC5: 4 VC)
binary_trees.adb:593:42: medium: invariant check might fail
binary_trees.adb:593:42: medium: precondition might fail
binary_trees.adb:593:71: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:594:42: medium: invariant check might fail
binary_trees.adb:594:42: medium: precondition might fail
binary_trees.adb:594:52: info: range check proved (CVC5: 4 VC)
binary_trees.adb:595:42: medium: invariant check might fail
binary_trees.adb:595:42: medium: precondition might fail
binary_trees.adb:596:42: medium: invariant check might fail
binary_trees.adb:596:42: medium: precondition might fail
binary_trees.adb:596:63: info: index check proved (CVC5: 4 VC)
binary_trees.adb:597:50: medium: range check might fail, cannot prove lower bound for F.C (KI).Position [reason for check: input value must fit in parameter type]
binary_trees.adb:605:24: medium: invariant check might fail
binary_trees.adb:605:24: medium: precondition might fail
binary_trees.adb:605:45: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:605:65: medium: invariant check might fail
binary_trees.adb:605:65: medium: precondition might fail
binary_trees.adb:605:86: info: index check proved (CVC5: 4 VC)
binary_trees.adb:606:26: medium: invariant check might fail
binary_trees.adb:606:26: medium: precondition might fail
binary_trees.adb:606:43: info: index check proved (CVC5: 4 VC)
binary_trees.adb:606:53: medium: invariant check might fail
binary_trees.adb:606:53: medium: loop invariant might fail in first iteration, cannot prove (( Model (F, Root) (I).A = Model (F_Old, Root) (I).A))
binary_trees.adb:606:53: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove (( Model (F, Root) (I).A = Model (F_Old, Root) (I).A))
binary_trees.adb:606:53: medium: precondition might fail
binary_trees.adb:606:70: info: index check proved (CVC5: 4 VC)
binary_trees.adb:606:77: medium: invariant check might fail
binary_trees.adb:606:77: medium: precondition might fail
binary_trees.adb:606:98: info: index check proved (CVC5: 4 VC)
binary_trees.adb:609:24: medium: invariant check might fail
binary_trees.adb:609:24: medium: precondition might fail
binary_trees.adb:609:45: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:609:65: medium: invariant check might fail
binary_trees.adb:609:65: medium: precondition might fail
binary_trees.adb:609:86: info: index check proved (CVC5: 4 VC)
binary_trees.adb:610:26: medium: invariant check might fail
binary_trees.adb:610:26: medium: precondition might fail
binary_trees.adb:610:36: info: range check proved (CVC5: 4 VC)
binary_trees.adb:610:40: info: index check proved (CVC5: 4 VC)
binary_trees.adb:611:25: medium: in inlined expression function body at tree_model.ads:42
binary_trees.adb:611:25: medium: in inlined expression function body at tree_model.ads:42
binary_trees.adb:611:25: medium: loop invariant might fail in first iteration, cannot prove Length (P) - Length (V) = Length (Q)
binary_trees.adb:611:25: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Length (P) - Length (V) = Length (Q)
binary_trees.adb:611:25: medium: precondition might fail
binary_trees.adb:611:41: medium: invariant check might fail
binary_trees.adb:611:41: medium: precondition might fail
binary_trees.adb:611:62: info: index check proved (CVC5: 4 VC)
binary_trees.adb:612:41: medium: invariant check might fail
binary_trees.adb:612:41: medium: precondition might fail
binary_trees.adb:612:51: info: range check proved (CVC5: 4 VC)
binary_trees.adb:612:55: info: index check proved (CVC5: 4 VC)
binary_trees.adb:613:41: medium: invariant check might fail
binary_trees.adb:613:41: medium: precondition might fail
binary_trees.adb:613:62: info: index check proved (CVC5: 4 VC)
binary_trees.adb:619:16: medium: invariant check might fail
binary_trees.adb:619:16: medium: precondition might fail, cannot prove Valid_Root (F, T1)
binary_trees.adb:620:16: medium: precondition might fail, cannot prove Tree_Structure (F1)
binary_trees.adb:624:56: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:625:24: medium: in inlined expression function body at tree_model.ads:55
binary_trees.adb:625:24: medium: in inlined expression function body at tree_model.ads:55
binary_trees.adb:625:24: medium: invariant check might fail
binary_trees.adb:625:24: medium: loop invariant might fail in first iteration, cannot prove M1 (I).A = M2 (I).A
binary_trees.adb:625:24: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove M1 (I).A = M2 (I).A
binary_trees.adb:625:24: medium: precondition might fail
binary_trees.adb:625:38: info: range check proved (CVC5: 4 VC)
binary_trees.adb:625:43: medium: invariant check might fail
binary_trees.adb:625:43: medium: precondition might fail
binary_trees.adb:625:53: info: range check proved (CVC5: 4 VC)
binary_trees.adb:638:25: medium: assertion might fail
binary_trees.adb:638:30: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:639:15: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:640:15: info: index check proved (CVC5: 2 VC)
binary_trees.adb:643:22: medium: assertion might fail
binary_trees.adb:646:10: medium: invariant check might fail
binary_trees.adb:646:10: medium: precondition might fail, cannot prove F.S = F_Old.S
binary_trees.adb:667:09: info: data dependencies proved
binary_trees.adb:682:29: info: index check proved (CVC5: 2 VC)
binary_trees.adb:685:25: info: index check proved (CVC5: 2 VC)
binary_trees.adb:686:20: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:686:20: info: precondition proved (CVC5: 1 VC)
binary_trees.adb:686:46: info: index check proved (CVC5: 2 VC)
binary_trees.adb:686:48: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:699:30: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:699:30: medium: precondition might fail
binary_trees.adb:705:30: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:705:30: medium: precondition might fail
binary_trees.adb:709:11: medium: invariant check might fail
binary_trees.adb:709:11: medium: postcondition might fail, cannot prove Model (F, Root) (V).K
binary_trees.adb:709:11: medium: precondition might fail
binary_trees.adb:709:28: info: index check proved (CVC5: 2 VC)
binary_trees.adb:715:26: medium: invariant check might fail
binary_trees.adb:715:26: medium: precondition might fail
binary_trees.adb:716:28: medium: invariant check might fail
binary_trees.adb:716:28: medium: precondition might fail
binary_trees.adb:716:45: info: index check proved (CVC5: 2 VC)
binary_trees.adb:716:53: medium: invariant check might fail
binary_trees.adb:716:53: medium: precondition might fail
binary_trees.adb:717:30: medium: invariant check might fail
binary_trees.adb:717:30: medium: precondition might fail
binary_trees.adb:717:44: info: range check proved (CVC5: 2 VC)
binary_trees.adb:718:30: medium: invariant check might fail
binary_trees.adb:718:30: medium: precondition might fail
binary_trees.adb:722:26: medium: invariant check might fail
binary_trees.adb:722:26: medium: precondition might fail
binary_trees.adb:722:57: medium: invariant check might fail
binary_trees.adb:722:57: medium: precondition might fail
binary_trees.adb:725:26: medium: invariant check might fail
binary_trees.adb:725:26: medium: precondition might fail
binary_trees.adb:725:40: info: range check proved (CVC5: 2 VC)
binary_trees.adb:725:54: medium: invariant check might fail
binary_trees.adb:725:54: medium: precondition might fail
binary_trees.adb:729:26: medium: invariant check might fail
binary_trees.adb:729:26: medium: precondition might fail
binary_trees.adb:729:57: medium: invariant check might fail
binary_trees.adb:729:57: medium: precondition might fail
binary_trees.adb:729:81: medium: invariant check might fail
binary_trees.adb:729:81: medium: precondition might fail
binary_trees.adb:735:26: medium: invariant check might fail
binary_trees.adb:735:26: medium: precondition might fail
binary_trees.adb:735:40: info: range check proved (CVC5: 2 VC)
binary_trees.adb:736:25: medium: precondition might fail
binary_trees.adb:736:41: medium: invariant check might fail
binary_trees.adb:736:41: medium: precondition might fail
binary_trees.adb:736:58: info: index check proved (CVC5: 2 VC)
binary_trees.adb:737:41: medium: invariant check might fail
binary_trees.adb:737:41: medium: precondition might fail
binary_trees.adb:737:55: info: range check proved (CVC5: 2 VC)
binary_trees.adb:738:41: medium: invariant check might fail
binary_trees.adb:738:41: medium: precondition might fail
binary_trees.adb:742:60: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:743:25: medium: invariant check might fail
binary_trees.adb:743:25: medium: precondition might fail
binary_trees.adb:743:39: info: range check proved (CVC5: 2 VC)
binary_trees.adb:743:44: medium: invariant check might fail
binary_trees.adb:743:44: medium: precondition might fail
binary_trees.adb:743:54: info: range check proved (CVC5: 2 VC)
binary_trees.adb:749:21: info: predicate check proved (Trivial: 2 VC)
binary_trees.adb:749:29: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:749:29: medium: precondition might fail
binary_trees.adb:749:46: info: index check proved (CVC5: 4 VC)
binary_trees.adb:749:54: info: predicate check proved (Trivial: 2 VC)
binary_trees.adb:750:29: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:750:29: medium: precondition might fail
binary_trees.adb:751:35: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:751:35: medium: precondition might fail
binary_trees.adb:753:24: medium: invariant check might fail
binary_trees.adb:753:24: medium: precondition might fail
binary_trees.adb:753:41: info: index check proved (CVC5: 4 VC)
binary_trees.adb:753:49: medium: invariant check might fail
binary_trees.adb:753:49: medium: precondition might fail
binary_trees.adb:754:26: medium: invariant check might fail
binary_trees.adb:754:26: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Model (F_Old, V) (I).K
binary_trees.adb:754:26: medium: precondition might fail
binary_trees.adb:754:40: info: range check proved (CVC5: 4 VC)
binary_trees.adb:755:26: medium: invariant check might fail
binary_trees.adb:755:26: medium: loop invariant might fail in first iteration, cannot prove Model (F_Old, Root) (I).K
binary_trees.adb:755:26: medium: precondition might fail
binary_trees.adb:761:21: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:761:21: medium: precondition might fail
binary_trees.adb:761:62: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:761:62: medium: precondition might fail
binary_trees.adb:762:23: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:762:23: medium: loop invariant might fail in first iteration, cannot prove Model (F, Root) (I).K
binary_trees.adb:762:23: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Model (F, Root) (I).K
binary_trees.adb:762:23: medium: precondition might fail
binary_trees.adb:769:21: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:769:21: medium: precondition might fail
binary_trees.adb:769:35: info: range check proved (CVC5: 4 VC)
binary_trees.adb:770:35: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:770:35: medium: precondition might fail
binary_trees.adb:770:49: info: range check proved (CVC5: 4 VC)
binary_trees.adb:771:29: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:771:29: medium: precondition might fail
binary_trees.adb:771:51: info: index check proved (CVC5: 4 VC)
binary_trees.adb:771:53: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:772:23: medium: invariant check might fail
binary_trees.adb:772:23: medium: loop invariant might fail in first iteration, cannot prove Model (F, Root) (I).K
binary_trees.adb:772:23: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Model (F, Root) (I).K
binary_trees.adb:772:23: medium: precondition might fail
binary_trees.adb:781:21: medium: invariant check might fail
binary_trees.adb:781:21: medium: precondition might fail
binary_trees.adb:781:58: medium: invariant check might fail
binary_trees.adb:781:58: medium: precondition might fail
binary_trees.adb:782:23: medium: invariant check might fail
binary_trees.adb:782:23: medium: precondition might fail
binary_trees.adb:782:54: medium: invariant check might fail
binary_trees.adb:782:54: medium: loop invariant might fail in first iteration, cannot prove (( Model (F, Root) (I).A = Model (F_Old, Root) (I).A))
binary_trees.adb:782:54: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove (( Model (F, Root) (I).A = Model (F_Old, Root) (I).A))
binary_trees.adb:782:54: medium: precondition might fail
binary_trees.adb:782:78: medium: invariant check might fail
binary_trees.adb:782:78: medium: precondition might fail
binary_trees.adb:790:21: medium: invariant check might fail
binary_trees.adb:790:21: medium: precondition might fail
binary_trees.adb:790:58: medium: invariant check might fail
binary_trees.adb:790:58: medium: precondition might fail
binary_trees.adb:791:23: medium: invariant check might fail
binary_trees.adb:791:23: medium: precondition might fail
binary_trees.adb:791:37: info: range check proved (CVC5: 4 VC)
binary_trees.adb:792:22: medium: in inlined expression function body at tree_model.ads:42
binary_trees.adb:792:22: medium: in inlined expression function body at tree_model.ads:42
binary_trees.adb:792:22: medium: loop invariant might fail in first iteration, cannot prove Length (P) - Length (V) = Length (Q)
binary_trees.adb:792:22: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Length (P) - Length (V) = Length (Q)
binary_trees.adb:792:22: medium: precondition might fail
binary_trees.adb:792:38: medium: invariant check might fail
binary_trees.adb:792:38: medium: precondition might fail
binary_trees.adb:792:55: info: index check proved (CVC5: 4 VC)
binary_trees.adb:793:38: medium: invariant check might fail
binary_trees.adb:793:38: medium: precondition might fail
binary_trees.adb:793:52: info: range check proved (CVC5: 4 VC)
binary_trees.adb:794:38: medium: invariant check might fail
binary_trees.adb:794:38: medium: precondition might fail
binary_trees.adb:806:19: medium: invariant check might fail
binary_trees.adb:806:19: medium: precondition might fail
binary_trees.adb:807:33: medium: invariant check might fail
binary_trees.adb:807:33: medium: precondition might fail
binary_trees.adb:808:27: medium: invariant check might fail
binary_trees.adb:808:27: medium: precondition might fail
binary_trees.adb:810:19: medium: precondition might fail, cannot prove S1 = S2
binary_trees.adb:810:41: medium: invariant check might fail
binary_trees.adb:810:41: medium: precondition might fail
binary_trees.adb:810:66: info: index check proved (CVC5: 4 VC)
binary_trees.adb:811:41: medium: invariant check might fail
binary_trees.adb:811:41: medium: precondition might fail
binary_trees.adb:811:70: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:812:41: medium: invariant check might fail
binary_trees.adb:812:41: medium: precondition might fail
binary_trees.adb:813:41: medium: invariant check might fail
binary_trees.adb:813:41: medium: precondition might fail
binary_trees.adb:814:49: medium: range check might fail, cannot prove lower bound for F.C (KI).Position [reason for check: input value must fit in parameter type]
binary_trees.adb:821:19: medium: invariant check might fail
binary_trees.adb:821:19: medium: precondition might fail
binary_trees.adb:822:33: medium: invariant check might fail
binary_trees.adb:822:33: medium: precondition might fail
binary_trees.adb:823:27: medium: invariant check might fail
binary_trees.adb:823:27: medium: precondition might fail
binary_trees.adb:823:41: info: range check proved (CVC5: 4 VC)
binary_trees.adb:826:19: medium: precondition might fail, cannot prove Length (T) <= Max
binary_trees.adb:826:42: medium: invariant check might fail
binary_trees.adb:826:42: medium: precondition might fail
binary_trees.adb:826:56: info: range check proved (CVC5: 4 VC)
binary_trees.adb:826:68: info: index check proved (CVC5: 4 VC)
binary_trees.adb:827:42: medium: invariant check might fail
binary_trees.adb:827:42: medium: precondition might fail
binary_trees.adb:827:67: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:828:42: medium: invariant check might fail
binary_trees.adb:828:42: medium: precondition might fail
binary_trees.adb:828:56: info: range check proved (CVC5: 4 VC)
binary_trees.adb:829:42: medium: invariant check might fail
binary_trees.adb:829:42: medium: precondition might fail
binary_trees.adb:830:42: medium: invariant check might fail
binary_trees.adb:830:42: medium: precondition might fail
binary_trees.adb:830:59: info: index check proved (CVC5: 4 VC)
binary_trees.adb:831:50: medium: range check might fail, cannot prove lower bound for F.C (KI).Position [reason for check: input value must fit in parameter type]
binary_trees.adb:839:24: medium: invariant check might fail
binary_trees.adb:839:24: medium: precondition might fail
binary_trees.adb:839:41: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:839:61: medium: invariant check might fail
binary_trees.adb:839:61: medium: precondition might fail
binary_trees.adb:839:78: info: index check proved (CVC5: 4 VC)
binary_trees.adb:840:26: medium: invariant check might fail
binary_trees.adb:840:26: medium: precondition might fail
binary_trees.adb:840:47: info: index check proved (CVC5: 4 VC)
binary_trees.adb:840:57: medium: invariant check might fail
binary_trees.adb:840:57: medium: loop invariant might fail in first iteration, cannot prove (( Model (F, Root) (I).A = Model (F_Old, Root) (I).A))
binary_trees.adb:840:57: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove (( Model (F, Root) (I).A = Model (F_Old, Root) (I).A))
binary_trees.adb:840:57: medium: precondition might fail
binary_trees.adb:840:74: info: index check proved (CVC5: 4 VC)
binary_trees.adb:840:81: medium: invariant check might fail
binary_trees.adb:840:81: medium: precondition might fail
binary_trees.adb:840:102: info: index check proved (CVC5: 4 VC)
binary_trees.adb:843:24: medium: invariant check might fail
binary_trees.adb:843:24: medium: precondition might fail
binary_trees.adb:843:41: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:843:61: medium: invariant check might fail
binary_trees.adb:843:61: medium: precondition might fail
binary_trees.adb:843:78: info: index check proved (CVC5: 4 VC)
binary_trees.adb:844:26: medium: invariant check might fail
binary_trees.adb:844:26: medium: precondition might fail
binary_trees.adb:844:40: info: range check proved (CVC5: 4 VC)
binary_trees.adb:844:44: info: index check proved (CVC5: 4 VC)
binary_trees.adb:845:25: medium: in inlined expression function body at tree_model.ads:42
binary_trees.adb:845:25: medium: in inlined expression function body at tree_model.ads:42
binary_trees.adb:845:25: medium: loop invariant might fail in first iteration, cannot prove Length (P) - Length (V) = Length (Q)
binary_trees.adb:845:25: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Length (P) - Length (V) = Length (Q)
binary_trees.adb:845:25: medium: precondition might fail
binary_trees.adb:845:41: medium: invariant check might fail
binary_trees.adb:845:41: medium: precondition might fail
binary_trees.adb:845:58: info: index check proved (CVC5: 4 VC)
binary_trees.adb:846:41: medium: invariant check might fail
binary_trees.adb:846:41: medium: precondition might fail
binary_trees.adb:846:55: info: range check proved (CVC5: 4 VC)
binary_trees.adb:846:59: info: index check proved (CVC5: 4 VC)
binary_trees.adb:847:41: medium: invariant check might fail
binary_trees.adb:847:41: medium: precondition might fail
binary_trees.adb:847:58: info: index check proved (CVC5: 4 VC)
binary_trees.adb:860:16: medium: invariant check might fail
binary_trees.adb:860:16: medium: precondition might fail, cannot prove Valid_Root (F, T1)
binary_trees.adb:861:16: medium: invariant check might fail
binary_trees.adb:861:16: medium: precondition might fail, cannot prove Valid_Root (F, T1)
binary_trees.adb:861:45: info: range check proved (CVC5: 4 VC)
binary_trees.adb:862:16: medium: precondition might fail, cannot prove Tree_Structure (F1)
binary_trees.adb:869:55: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:870:20: medium: in inlined expression function body at tree_model.ads:55
binary_trees.adb:870:20: medium: in inlined expression function body at tree_model.ads:55
binary_trees.adb:870:20: medium: invariant check might fail
binary_trees.adb:870:20: medium: loop invariant might fail in first iteration, cannot prove M1 (I).A = M2 (I).A
binary_trees.adb:870:20: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove M1 (I).A = M2 (I).A
binary_trees.adb:870:20: medium: precondition might fail
binary_trees.adb:870:30: info: range check proved (CVC5: 4 VC)
binary_trees.adb:870:35: medium: invariant check might fail
binary_trees.adb:870:35: medium: precondition might fail
binary_trees.adb:870:49: info: range check proved (CVC5: 4 VC)
binary_trees.adb:881:15: info: index check proved (CVC5: 2 VC)
binary_trees.adb:882:15: info: index check proved (CVC5: 2 VC)
binary_trees.adb:884:10: medium: invariant check might fail
binary_trees.adb:884:10: medium: precondition might fail, cannot prove F.S = F_Old.S
binary_trees.adb:905:09: info: data dependencies proved
binary_trees.adb:918:24: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:918:24: info: precondition proved (CVC5: 1 VC)
binary_trees.adb:922:20: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:922:20: medium: precondition might fail
binary_trees.adb:922:48: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:941:30: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:941:30: medium: precondition might fail
binary_trees.adb:947:30: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:947:30: medium: precondition might fail
binary_trees.adb:952:18: medium: invariant check might fail
binary_trees.adb:952:18: medium: precondition might fail
binary_trees.adb:952:49: medium: invariant check might fail
binary_trees.adb:952:49: medium: postcondition might fail, cannot prove Model (F, Root) (I).K
binary_trees.adb:952:49: medium: precondition might fail
binary_trees.adb:955:20: medium: invariant check might fail
binary_trees.adb:955:20: medium: precondition might fail
binary_trees.adb:960:26: medium: invariant check might fail
binary_trees.adb:960:26: medium: precondition might fail
binary_trees.adb:960:64: medium: invariant check might fail
binary_trees.adb:960:64: medium: precondition might fail
binary_trees.adb:964:26: medium: invariant check might fail
binary_trees.adb:964:26: medium: precondition might fail
binary_trees.adb:964:57: medium: invariant check might fail
binary_trees.adb:964:57: medium: precondition might fail
binary_trees.adb:964:81: medium: invariant check might fail
binary_trees.adb:964:81: medium: precondition might fail
binary_trees.adb:968:49: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:969:25: medium: invariant check might fail
binary_trees.adb:969:25: medium: precondition might fail
binary_trees.adb:969:39: info: range check proved (CVC5: 2 VC)
binary_trees.adb:969:44: medium: invariant check might fail
binary_trees.adb:969:44: medium: precondition might fail
binary_trees.adb:969:54: info: range check proved (CVC5: 2 VC)
binary_trees.adb:978:21: medium: invariant check might fail
binary_trees.adb:978:21: medium: precondition might fail
binary_trees.adb:978:62: medium: invariant check might fail
binary_trees.adb:978:62: medium: precondition might fail
binary_trees.adb:979:23: medium: invariant check might fail
binary_trees.adb:979:23: medium: loop invariant might fail in first iteration, cannot prove Model (F, Root) (I).K
binary_trees.adb:979:23: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Model (F, Root) (I).K
binary_trees.adb:979:23: medium: precondition might fail
binary_trees.adb:985:21: medium: invariant check might fail
binary_trees.adb:985:21: medium: precondition might fail
binary_trees.adb:985:62: medium: invariant check might fail
binary_trees.adb:985:62: medium: precondition might fail
binary_trees.adb:986:23: medium: invariant check might fail
binary_trees.adb:986:23: medium: loop invariant might fail in first iteration, cannot prove ( Model (F, Root) (I).A = Model (F_Old, Root) (I).A)
binary_trees.adb:986:23: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove ( Model (F, Root) (I).A = Model (F_Old, Root) (I).A)
binary_trees.adb:986:23: medium: precondition might fail
binary_trees.adb:986:47: medium: invariant check might fail
binary_trees.adb:986:47: medium: precondition might fail
binary_trees.adb:992:22: medium: invariant check might fail
binary_trees.adb:992:22: medium: precondition might fail
binary_trees.adb:993:36: medium: invariant check might fail
binary_trees.adb:993:36: medium: precondition might fail
binary_trees.adb:995:24: medium: invariant check might fail
binary_trees.adb:995:24: medium: loop invariant might fail in first iteration, cannot prove Model (F_Old, Root) (I).K
binary_trees.adb:995:24: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Model (F_Old, Root) (I).K
binary_trees.adb:995:24: medium: precondition might fail
binary_trees.adb:1004:19: medium: invariant check might fail
binary_trees.adb:1004:19: medium: precondition might fail
binary_trees.adb:1004:61: medium: invariant check might fail
binary_trees.adb:1004:61: medium: precondition might fail
binary_trees.adb:1005:19: medium: precondition might fail, cannot prove S1 = S2
binary_trees.adb:1005:41: medium: invariant check might fail
binary_trees.adb:1005:41: medium: precondition might fail
binary_trees.adb:1005:66: info: index check proved (CVC5: 4 VC)
binary_trees.adb:1006:41: medium: invariant check might fail
binary_trees.adb:1006:41: medium: precondition might fail
binary_trees.adb:1006:70: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:1007:41: medium: invariant check might fail
binary_trees.adb:1007:41: medium: precondition might fail
binary_trees.adb:1008:41: medium: invariant check might fail
binary_trees.adb:1008:41: medium: precondition might fail
binary_trees.adb:1009:49: medium: range check might fail, cannot prove lower bound for F.C (KI).Position [reason for check: input value must fit in parameter type]
binary_trees.adb:1017:24: medium: invariant check might fail
binary_trees.adb:1017:24: medium: precondition might fail
binary_trees.adb:1017:45: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:1017:65: medium: invariant check might fail
binary_trees.adb:1017:65: medium: precondition might fail
binary_trees.adb:1017:86: info: index check proved (CVC5: 4 VC)
binary_trees.adb:1018:23: medium: invariant check might fail
binary_trees.adb:1018:23: medium: loop invariant might fail in first iteration, cannot prove ( Model (F, Root) (I).A = Model (F_Old, Root) (I).A)
binary_trees.adb:1018:23: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove ( Model (F, Root) (I).A = Model (F_Old, Root) (I).A)
binary_trees.adb:1018:23: medium: precondition might fail
binary_trees.adb:1018:40: info: index check proved (CVC5: 4 VC)
binary_trees.adb:1018:47: medium: invariant check might fail
binary_trees.adb:1018:47: medium: precondition might fail
binary_trees.adb:1018:68: info: index check proved (CVC5: 4 VC)
binary_trees.adb:1031:16: medium: invariant check might fail
binary_trees.adb:1031:16: medium: precondition might fail, cannot prove Valid_Root (F, T1)
binary_trees.adb:1032:16: medium: precondition might fail, cannot prove Tree_Structure (F1)
binary_trees.adb:1039:44: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.adb:1040:20: medium: in inlined expression function body at tree_model.ads:55
binary_trees.adb:1040:20: medium: in inlined expression function body at tree_model.ads:55
binary_trees.adb:1040:20: medium: invariant check might fail
binary_trees.adb:1040:20: medium: loop invariant might fail in first iteration, cannot prove M1 (I).A = M2 (I).A
binary_trees.adb:1040:20: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove M1 (I).A = M2 (I).A
binary_trees.adb:1040:20: medium: precondition might fail
binary_trees.adb:1040:34: info: range check proved (CVC5: 4 VC)
binary_trees.adb:1040:39: medium: invariant check might fail
binary_trees.adb:1040:39: medium: precondition might fail
binary_trees.adb:1040:49: info: range check proved (CVC5: 4 VC)
binary_trees.adb:1045:16: info: range check proved (CVC5: 2 VC)
binary_trees.adb:1058:18: medium: range check might fail, cannot prove lower bound for F.S + 1 [reason for check: result of addition must fit in the target type of the assignment]
binary_trees.adb:1059:07: medium: invariant check might fail
binary_trees.adb:1059:07: medium: precondition might fail, cannot prove F_Old.C (Root).Position = Top
binary_trees.adb:1076:09: info: data dependencies proved
binary_trees.adb:1090:26: info: index check proved (CVC5: 2 VC)
binary_trees.adb:1091:16: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:1091:16: medium: in inlined expression function body at tree_model.ads:55
binary_trees.adb:1091:16: medium: postcondition might fail, cannot prove M1 (I).A = M2 (I).A
binary_trees.adb:1091:16: medium: precondition might fail
binary_trees.adb:1091:30: info: range check proved (CVC5: 2 VC)
binary_trees.adb:1091:35: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:1091:35: medium: precondition might fail
binary_trees.adb:1091:45: info: range check proved (CVC5: 2 VC)
binary_trees.adb:1095:45: info: invariant check proved (CVC5: 1 VC)
binary_trees.adb:1095:45: medium: precondition might fail
binary_trees.adb:1106:21: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:1106:21: medium: precondition might fail
binary_trees.adb:1107:23: medium: loop invariant might fail in first iteration, cannot prove Last (Model (F, Root) (J).A) > N [possible fix: you should consider adding a postcondition to function Last or turning it into an expression function in its unit spec]
binary_trees.adb:1107:23: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Last (Model (F, Root) (J).A) > N [possible fix: you should consider adding a postcondition to function Last or turning it into an expression function in its unit spec]
binary_trees.adb:1107:29: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:1107:29: medium: precondition might fail
binary_trees.adb:1116:16: medium: precondition might fail, cannot prove F1.C (I) = F2.C (I)
binary_trees.adb:1123:30: info: index check proved (CVC5: 4 VC)
binary_trees.adb:1123:53: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:1123:53: medium: in inlined expression function body at tree_model.ads:55
binary_trees.adb:1123:53: medium: in inlined expression function body at tree_model.ads:55
binary_trees.adb:1123:53: medium: loop invariant might fail in first iteration, cannot prove M1 (I).A = M2 (I).A
binary_trees.adb:1123:53: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove M1 (I).A = M2 (I).A
binary_trees.adb:1123:53: medium: precondition might fail
binary_trees.adb:1123:67: info: range check proved (CVC5: 4 VC)
binary_trees.adb:1123:72: info: invariant check proved (CVC5: 2 VC)
binary_trees.adb:1123:72: medium: precondition might fail
binary_trees.adb:1123:82: info: range check proved (CVC5: 4 VC)
binary_trees.adb:1127:18: info: range check proved (CVC5: 2 VC)
binary_trees.adb:1128:16: info: range check proved (CVC5: 2 VC)
binary_trees.adb:1129:07: info: precondition proved (CVC5: 6 VC)
binary_trees.adb:1129:07: medium: invariant check might fail
binary_trees.ads:14:09: info: default initial condition proved (CVC5: 1 VC)
binary_trees.ads:14:61: medium: invariant check might fail
binary_trees.ads:17:13: info: implicit terminating annotation on "Size" has been proved, subprogram will terminate
binary_trees.ads:20:13: info: implicit terminating annotation on "Valid_Root" has been proved, subprogram will terminate
binary_trees.ads:21:14: info: postcondition proved (CVC5: 1 VC; Trivial: 1 VC)
binary_trees.ads:21:22: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:24:13: info: implicit terminating annotation on "Parent" has been proved, subprogram will terminate
binary_trees.ads:25:14: info: postcondition proved (CVC5: 2 VC; Trivial: 2 VC)
binary_trees.ads:25:18: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:26:21: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:29:13: info: implicit terminating annotation on "Position" has been proved, subprogram will terminate
binary_trees.ads:30:13: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:33:13: info: implicit terminating annotation on "Peek" has been proved, subprogram will terminate
binary_trees.ads:35:17: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:35:17: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:35:34: info: range check proved (CVC5: 2 VC)
binary_trees.ads:36:26: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:36:41: info: range check proved (CVC5: 2 VC)
binary_trees.ads:39:23: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:39:46: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:39:46: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:39:46: medium: postcondition might fail, cannot prove Position (F, J) /= D
binary_trees.ads:41:23: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:41:50: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:41:50: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:45:13: info: function contract might not be available on implicit recursive calls
binary_trees.ads:45:13: info: implicit terminating annotation on "Model" has been proved, subprogram will terminate
binary_trees.ads:53:14: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:56:08: medium: postcondition might fail, cannot prove Model'Result (Root).K
binary_trees.ads:64:25: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:65:47: info: index check proved (CVC5: 2 VC)
binary_trees.ads:65:47: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:74:47: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:74:47: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.ads:75:33: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:75:33: medium: precondition might fail
binary_trees.ads:93:06: info: data dependencies proved
binary_trees.ads:94:14: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:97:17: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:97:17: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:100:17: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:105:20: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:105:20: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:106:29: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:106:29: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:106:53: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:106:53: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:107:22: info: precondition proved (CVC5: 2 VC)
binary_trees.ads:107:22: medium: postcondition might fail, cannot prove Get (Model (F, Root) (J).A, Last (Model (F, Root) (I).A) + 1) /= D [possible fix: you should consider adding a postcondition to function Last and function Get or turning them into expression functions in their unit spec]
binary_trees.ads:107:27: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:107:27: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:107:56: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:107:56: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:107:79: medium: overflow check might fail, cannot prove upper bound for Last (Model (F, Root) (I).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
binary_trees.ads:114:06: info: data dependencies proved
binary_trees.ads:116:17: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:117:17: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:119:16: medium: postcondition might fail, cannot prove (not Model (F, T1) (I).K or not Model (F, T2) (I).K)
binary_trees.ads:119:21: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:119:21: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:119:48: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:119:48: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:121:14: medium: invariant check might fail
binary_trees.ads:124:23: info: initialization of "V" proved
binary_trees.ads:131:08: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:134:17: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:134:17: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:137:08: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:137:08: medium: postcondition might fail, cannot prove Size (F) = Size (F)'Old
binary_trees.ads:137:19: medium: invariant check might fail
binary_trees.ads:140:17: medium: invariant check might fail
binary_trees.ads:143:21: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:144:17: medium: invariant check might fail
binary_trees.ads:149:25: medium: invariant check might fail
binary_trees.ads:149:41: medium: invariant check might fail
binary_trees.ads:154:34: medium: invariant check might fail
binary_trees.ads:155:25: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:155:25: medium: invariant check might fail
binary_trees.ads:155:43: medium: invariant check might fail
binary_trees.ads:155:43: medium: precondition might fail
binary_trees.ads:161:27: medium: invariant check might fail
binary_trees.ads:161:44: medium: invariant check might fail
binary_trees.ads:166:23: medium: invariant check might fail
binary_trees.ads:167:25: medium: invariant check might fail
binary_trees.ads:171:23: medium: invariant check might fail
binary_trees.ads:172:25: medium: invariant check might fail
binary_trees.ads:172:25: medium: precondition might fail
binary_trees.ads:172:40: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:172:40: medium: invariant check might fail
binary_trees.ads:175:37: medium: invariant check might fail
binary_trees.ads:175:52: medium: range check might fail, cannot prove lower bound for V [reason for check: input value must fit in parameter type]
binary_trees.ads:181:23: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:181:23: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:183:37: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:183:37: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:183:58: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.ads:183:66: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:183:66: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:184:31: medium: invariant check might fail
binary_trees.ads:184:31: medium: precondition might fail
binary_trees.ads:184:41: info: range check proved (CVC5: 2 VC)
binary_trees.ads:185:31: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:185:31: medium: invariant check might fail
binary_trees.ads:190:23: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:190:23: medium: invariant check might fail
binary_trees.ads:190:50: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:190:50: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:195:43: medium: invariant check might fail
binary_trees.ads:195:43: medium: precondition might fail
binary_trees.ads:195:53: medium: range check might fail, cannot prove lower bound for V [reason for check: input value must fit in parameter type]
binary_trees.ads:195:67: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:195:67: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:199:23: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:199:23: medium: invariant check might fail
binary_trees.ads:199:50: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:199:50: medium: invariant check might fail
binary_trees.ads:199:74: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:199:74: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:204:43: medium: invariant check might fail
binary_trees.ads:204:43: medium: precondition might fail
binary_trees.ads:204:53: medium: range check might fail, cannot prove lower bound for V [reason for check: input value must fit in parameter type]
binary_trees.ads:205:25: medium: precondition might fail
binary_trees.ads:205:41: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:205:41: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:205:62: info: index check proved (CVC5: 2 VC)
binary_trees.ads:206:41: medium: invariant check might fail
binary_trees.ads:206:41: medium: precondition might fail
binary_trees.ads:206:51: info: range check proved (CVC5: 2 VC)
binary_trees.ads:207:41: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:207:41: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:209:14: medium: invariant check might fail
binary_trees.ads:219:08: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:222:17: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:222:17: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:225:17: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:231:37: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:231:52: info: range check proved (CVC5: 2 VC)
binary_trees.ads:234:08: medium: invariant check might fail
binary_trees.ads:234:08: medium: postcondition might fail, cannot prove Size (F) = Size (F'Old)
binary_trees.ads:234:19: medium: invariant check might fail
binary_trees.ads:237:21: medium: invariant check might fail
binary_trees.ads:241:23: medium: invariant check might fail
binary_trees.ads:241:66: medium: invariant check might fail
binary_trees.ads:243:23: medium: invariant check might fail
binary_trees.ads:243:46: medium: invariant check might fail
binary_trees.ads:248:25: medium: invariant check might fail
binary_trees.ads:248:41: medium: invariant check might fail
binary_trees.ads:253:34: medium: invariant check might fail
binary_trees.ads:254:25: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:254:25: medium: invariant check might fail
binary_trees.ads:254:43: medium: invariant check might fail
binary_trees.ads:254:43: medium: precondition might fail
binary_trees.ads:260:27: medium: invariant check might fail
binary_trees.ads:260:44: medium: invariant check might fail
binary_trees.ads:265:23: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:265:23: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:265:54: medium: invariant check might fail
binary_trees.ads:265:54: medium: precondition might fail
binary_trees.ads:270:43: medium: invariant check might fail
binary_trees.ads:270:43: medium: precondition might fail
binary_trees.ads:270:57: medium: range check might fail, cannot prove lower bound for V [reason for check: input value must fit in parameter type] [possible fix: add precondition (V >= Index_Type'First) to subprogram at line 209]
binary_trees.ads:271:25: medium: invariant check might fail
binary_trees.ads:271:25: medium: precondition might fail
binary_trees.ads:277:23: medium: invariant check might fail
binary_trees.ads:277:23: medium: precondition might fail
binary_trees.ads:278:49: medium: invariant check might fail
binary_trees.ads:278:49: medium: precondition might fail
binary_trees.ads:278:66: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: add precondition (V in Index_Type) to subprogram at line 209]
binary_trees.ads:278:74: medium: invariant check might fail
binary_trees.ads:278:74: medium: precondition might fail
binary_trees.ads:279:31: medium: invariant check might fail
binary_trees.ads:279:31: medium: precondition might fail
binary_trees.ads:279:45: info: range check proved (CVC5: 2 VC)
binary_trees.ads:280:31: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:280:31: medium: invariant check might fail
binary_trees.ads:284:23: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:284:23: medium: invariant check might fail
binary_trees.ads:285:25: medium: invariant check might fail
binary_trees.ads:285:25: medium: precondition might fail
binary_trees.ads:285:49: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:285:49: medium: invariant check might fail
binary_trees.ads:291:43: medium: invariant check might fail
binary_trees.ads:291:43: medium: precondition might fail
binary_trees.ads:291:57: medium: range check might fail, cannot prove lower bound for V [reason for check: input value must fit in parameter type] [possible fix: add precondition (V >= Index_Type'First) to subprogram at line 209]
binary_trees.ads:292:25: medium: precondition might fail
binary_trees.ads:292:41: medium: invariant check might fail
binary_trees.ads:292:41: medium: precondition might fail
binary_trees.ads:292:58: medium: array index check might fail [reason for check: value must be a valid index into the array]
binary_trees.ads:292:58: medium: invariant check might fail
binary_trees.ads:293:41: medium: invariant check might fail
binary_trees.ads:293:41: medium: precondition might fail
binary_trees.ads:293:55: info: range check proved (CVC5: 2 VC)
binary_trees.ads:294:41: medium: invariant check might fail
binary_trees.ads:294:41: medium: precondition might fail
binary_trees.ads:298:23: medium: invariant check might fail
binary_trees.ads:299:25: medium: invariant check might fail
binary_trees.ads:299:25: medium: precondition might fail
binary_trees.ads:299:40: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:299:40: medium: invariant check might fail
binary_trees.ads:301:14: medium: invariant check might fail
binary_trees.ads:304:22: info: initialization of "V" proved
binary_trees.ads:311:08: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:314:17: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:314:17: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:317:17: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:320:17: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:323:08: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:323:08: medium: postcondition might fail, cannot prove Size (F) = Size (F)'Old + 1
binary_trees.ads:323:19: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:326:17: medium: invariant check might fail
binary_trees.ads:326:17: medium: precondition might fail
binary_trees.ads:329:17: medium: invariant check might fail
binary_trees.ads:333:23: medium: invariant check might fail
binary_trees.ads:333:50: medium: invariant check might fail
binary_trees.ads:334:29: medium: invariant check might fail
binary_trees.ads:337:17: medium: invariant check might fail
binary_trees.ads:337:17: medium: precondition might fail
binary_trees.ads:338:21: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:338:21: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:343:25: medium: invariant check might fail
binary_trees.ads:343:41: medium: invariant check might fail
binary_trees.ads:348:34: medium: invariant check might fail
binary_trees.ads:349:25: medium: invariant check might fail
binary_trees.ads:349:25: medium: precondition might fail
binary_trees.ads:349:43: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:349:43: medium: invariant check might fail
binary_trees.ads:355:27: medium: invariant check might fail
binary_trees.ads:355:44: medium: invariant check might fail
binary_trees.ads:360:23: medium: invariant check might fail
binary_trees.ads:360:23: medium: precondition might fail
binary_trees.ads:361:25: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:361:25: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:365:23: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:365:23: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:365:54: medium: invariant check might fail
binary_trees.ads:365:54: medium: precondition might fail
binary_trees.ads:369:23: medium: invariant check might fail
binary_trees.ads:369:23: medium: precondition might fail
binary_trees.ads:370:25: medium: invariant check might fail
binary_trees.ads:370:25: medium: precondition might fail
binary_trees.ads:370:49: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:370:49: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:373:25: medium: invariant check might fail
binary_trees.ads:373:25: medium: precondition might fail
binary_trees.ads:373:51: medium: invariant check might fail
binary_trees.ads:373:51: medium: precondition might fail
binary_trees.ads:377:37: medium: invariant check might fail
binary_trees.ads:378:25: medium: invariant check might fail
binary_trees.ads:378:25: medium: precondition might fail
binary_trees.ads:378:40: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:378:40: medium: invariant check might fail
binary_trees.ads:380:14: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:380:39: info: initialization of "Root" proved
binary_trees.ads:383:14: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:384:14: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:384:25: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:387:17: medium: postcondition might fail, cannot prove not Valid_Root (F'Old, Root)
binary_trees.ads:387:21: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:388:17: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:391:45: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:391:61: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:395:23: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:395:51: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:395:51: medium: invariant check might fail
binary_trees.ads:395:69: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:395:69: medium: precondition might fail
binary_trees.ads:399:23: info: invariant check proved (CVC5: 1 VC)
binary_trees.ads:399:50: medium: invariant check might fail
binary_trees.ads:401:23: medium: invariant check might fail
binary_trees.ads:401:60: medium: invariant check might fail
binary_trees.ads:405:23: medium: invariant check might fail
binary_trees.ads:405:50: medium: invariant check might fail
binary_trees.ads:405:50: medium: precondition might fail
binary_trees.ads:405:65: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:405:65: medium: invariant check might fail
binary_trees.ads:409:42: info: precondition proved (CVC5: 1 VC)
binary_trees.ads:409:42: medium: invariant check might fail
binary_trees.ads:418:09: medium: invariant check might fail on default value
binary_trees.ads:426:13: info: implicit terminating annotation on "Tree_Structure" has been proved, subprogram will terminate
binary_trees.ads:427:06: info: data dependencies proved
red_black_trees.adb:16:13: info: implicit terminating annotation on "Eq" has been proved, subprogram will terminate
red_black_trees.adb:18:17: info: postcondition proved (CVC5: 1 VC)
red_black_trees.adb:23:13: info: implicit terminating annotation on "Nb_Blacks" has been proved, subprogram will terminate
red_black_trees.adb:31:08: medium: postcondition might fail, cannot prove Nb_Blacks'Result (Empty) = (True, 0, 0)
red_black_trees.adb:36:20: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:38:37: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:39:40: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:43:37: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:44:38: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:50:18: medium: overflow check might fail, cannot prove lower bound for (if T.Color (I) = Black then 1 else 0) + Nb_Blacks'Result (Peek (T.Struct, I, Left)).Count [reason for check: result of addition must fit in a 32-bits machine integer]
red_black_trees.adb:50:38: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:58:36: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:67:33: info: loop invariant initialization proved (CVC5: 1 VC)
red_black_trees.adb:67:33: medium: loop invariant might not be preserved by an arbitrary iteration
red_black_trees.adb:71:13: info: loop invariant initialization proved (CVC5: 1 VC)
red_black_trees.adb:71:40: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Res (I).Count <= Res (I).Depth
red_black_trees.adb:75:13: info: loop invariant initialization proved (CVC5: 1 VC)
red_black_trees.adb:76:15: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Res (I).Depth = Max or Res (I).Depth <= N
red_black_trees.adb:84:21: medium: loop invariant might fail in first iteration, cannot prove Last (M (I).A) < Max - N [possible fix: you should consider adding a postcondition to function Last or turning it into an expression function in its unit spec]
red_black_trees.adb:84:21: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Last (M (I).A) < Max - N [possible fix: you should consider adding a postcondition to function Last or turning it into an expression function in its unit spec]
red_black_trees.adb:88:26: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:89:26: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:91:26: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:92:26: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:95:23: medium: overflow check might fail, cannot prove lower bound for (if T.Color (I) = Black then 1 else 0) + Res (Peek (T.Struct, I, Left)).Count [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
red_black_trees.adb:95:30: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:102:30: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:103:30: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:104:19: medium: loop invariant might fail in first iteration, cannot prove Res (J).Depth <= N
red_black_trees.adb:104:19: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Res (J).Depth <= N
red_black_trees.adb:109:36: info: loop invariant initialization proved (CVC5: 1 VC)
red_black_trees.adb:109:36: medium: loop invariant might not be preserved by an arbitrary iteration
red_black_trees.adb:113:16: info: loop invariant initialization proved (CVC5: 1 VC)
red_black_trees.adb:113:43: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Res (I).Count <= Res (I).Depth
red_black_trees.adb:118:16: info: loop invariant initialization proved (CVC5: 1 VC)
red_black_trees.adb:119:18: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Res (J).Depth = Max or Res (J).Depth <= N + 1
red_black_trees.adb:119:23: info: index check proved (CVC5: 4 VC)
red_black_trees.adb:119:46: medium: array index check might fail [reason for check: value must be a valid index into the array]
red_black_trees.adb:121:16: info: loop invariant initialization proved (CVC5: 1 VC)
red_black_trees.adb:122:18: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Res (J).Depth = Max or Res (J).Depth <= N
red_black_trees.adb:122:23: info: index check proved (CVC5: 4 VC)
red_black_trees.adb:122:46: medium: array index check might fail [reason for check: value must be a valid index into the array]
red_black_trees.adb:130:24: medium: loop invariant might fail in first iteration, cannot prove Last (M (J).A) < Max - N [possible fix: you should consider adding a postcondition to function Last or turning it into an expression function in its unit spec]
red_black_trees.adb:130:24: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Last (M (J).A) < Max - N [possible fix: you should consider adding a postcondition to function Last or turning it into an expression function in its unit spec]
red_black_trees.adb:132:16: info: loop invariant initialization proved (CVC5: 1 VC; Trivial: 1 VC)
red_black_trees.adb:133:25: info: index check proved (CVC5: 4 VC)
red_black_trees.adb:133:39: medium: array index check might fail [reason for check: value must be a valid index into the array]
red_black_trees.adb:134:24: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Last (M (J).A) < Max - (N + 1) [possible fix: you should consider adding a postcondition to function Last or turning it into an expression function in its unit spec]
red_black_trees.adb:134:33: info: index check proved (CVC5: 4 VC)
red_black_trees.adb:143:23: medium: loop invariant might fail in first iteration, cannot prove Res (J).Status = (Res (Peek (T.Struct, J, Left)).Count = Res (Peek (T.Struct, J, Right)).Count)
red_black_trees.adb:143:23: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Res (J).Status = (Res (Peek (T.Struct, J, Left)).Count = Res (Peek (T.Struct, J, Right)).Count)
red_black_trees.adb:144:29: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:145:29: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:147:29: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:148:29: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:151:26: medium: overflow check might fail, cannot prove lower bound for (if T.Color (J) = Black then 1 else 0) + Res (Peek (T.Struct, J, Left)).Count [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
red_black_trees.adb:151:33: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:157:16: info: loop invariant initialization proved (CVC5: 1 VC; Trivial: 1 VC)
red_black_trees.adb:159:33: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:160:33: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:161:24: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Res (J).Depth <= N
red_black_trees.adb:163:16: info: loop invariant initialization proved (CVC5: 1 VC; Trivial: 1 VC)
red_black_trees.adb:164:25: medium: array index check might fail [reason for check: value must be a valid index into the array]
red_black_trees.adb:165:33: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:165:49: info: range check proved (CVC5: 4 VC)
red_black_trees.adb:166:33: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:166:49: info: range check proved (CVC5: 4 VC)
red_black_trees.adb:167:24: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Res (J).Depth <= N + 1
red_black_trees.adb:167:29: medium: array index check might fail [reason for check: value must be a valid index into the array]
red_black_trees.adb:177:26: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:179:26: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:185:56: medium: range check might fail, cannot prove lower bound for Count_L.Count + 1 [reason for check: result of addition must fit in the target type of the assignment]
red_black_trees.adb:200:22: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:201:27: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:214:45: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:215:52: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:216:21: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:216:50: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:220:49: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:221:17: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:225:14: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:225:55: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:227:49: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:227:67: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:231:52: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:232:20: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:232:48: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:233:24: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:234:37: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:234:59: info: index check proved (CVC5: 2 VC)
red_black_trees.adb:234:59: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:235:14: medium: postcondition might fail
red_black_trees.adb:247:27: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:248:33: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:249:29: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:249:29: medium: assertion might fail, cannot prove Nb_Blacks (T) (Peek (T.Struct, I, D)).Count = Nb_Blacks (T_Old) (Peek (T_Old.Struct, I, D)).Count
red_black_trees.adb:249:44: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:250:26: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:250:45: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:254:22: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:255:30: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:256:35: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:257:24: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:257:24: medium: loop invariant might fail in first iteration, cannot prove Nb_Blacks (T) (I).Count = Nb_Blacks (T_Old) (I).Count
red_black_trees.adb:257:24: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Nb_Blacks (T) (I).Count = Nb_Blacks (T_Old) (I).Count
red_black_trees.adb:257:50: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:260:22: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:261:30: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:262:24: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:262:24: medium: loop invariant might fail in first iteration, cannot prove Nb_Blacks (T) (I).Status
red_black_trees.adb:262:24: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Nb_Blacks (T) (I).Status
red_black_trees.adb:276:45: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:279:18: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:279:43: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:283:22: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:284:24: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:284:52: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:288:11: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:289:30: info: index check proved (CVC5: 2 VC)
red_black_trees.adb:289:30: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:290:34: info: index check proved (CVC5: 2 VC)
red_black_trees.adb:290:34: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:293:33: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:294:33: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:296:14: medium: postcondition might fail
red_black_trees.adb:307:19: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:308:25: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:310:27: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:311:27: info: precondition proved (CVC5: 4 VC)
red_black_trees.adb:312:24: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:312:24: medium: loop invariant might fail in first iteration, cannot prove Nb_Blacks (T) (I).Count = Nb_Blacks (T_Old) (I).Count + 1
red_black_trees.adb:312:24: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Nb_Blacks (T) (I).Count = Nb_Blacks (T_Old) (I).Count + 1
red_black_trees.adb:312:50: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:313:24: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:313:50: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:316:19: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:317:25: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:318:21: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:318:21: medium: loop invariant might fail in first iteration, cannot prove Nb_Blacks (T) (I).Status
red_black_trees.adb:318:21: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Nb_Blacks (T) (I).Status
red_black_trees.adb:320:13: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:321:28: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:321:28: medium: assertion might fail
red_black_trees.adb:322:28: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:322:28: medium: assertion might fail
red_black_trees.adb:323:30: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:328:16: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:328:48: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:328:48: medium: assertion might fail, cannot prove Nb_Blacks (T) (I).Status
red_black_trees.adb:341:49: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:342:15: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:346:18: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:346:43: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:347:51: info: index check proved (CVC5: 2 VC)
red_black_trees.adb:347:51: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:348:15: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:349:08: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:349:28: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:349:28: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:350:15: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:350:31: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:350:57: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:351:23: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:352:15: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:352:31: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:352:31: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:357:66: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:358:28: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:359:22: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:360:22: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:360:46: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:363:14: medium: postcondition might fail
red_black_trees.adb:365:34: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:365:34: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:367:22: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:367:22: medium: assertion might fail
red_black_trees.adb:367:52: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:380:19: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:382:25: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:383:21: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:383:21: medium: loop invariant might fail in first iteration, cannot prove Nb_Blacks (T) (I).Count = Nb_Blacks (T_Old) (I).Count
red_black_trees.adb:383:21: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Nb_Blacks (T) (I).Count = Nb_Blacks (T_Old) (I).Count
red_black_trees.adb:383:47: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:385:13: info: loop invariant preservation proved (CVC5: 1 VC; Trivial: 1 VC)
red_black_trees.adb:385:16: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:386:18: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:386:18: medium: loop invariant might fail in first iteration, cannot prove Nb_Blacks (T) (Y).Count = Nb_Blacks (T_Old) (Y).Count
red_black_trees.adb:386:44: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:389:19: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:391:25: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:392:21: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:392:21: medium: loop invariant might fail in first iteration, cannot prove Nb_Blacks (T) (I).Status
red_black_trees.adb:392:21: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Nb_Blacks (T) (I).Status
red_black_trees.adb:394:13: info: loop invariant preservation proved (CVC5: 1 VC; Trivial: 1 VC)
red_black_trees.adb:394:16: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:395:18: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:395:18: medium: loop invariant might fail in first iteration, cannot prove Nb_Blacks (T) (Y).Status
red_black_trees.adb:397:13: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:398:28: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:398:28: medium: assertion might fail
red_black_trees.adb:399:28: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:399:28: medium: assertion might fail
red_black_trees.adb:399:54: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:400:28: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:400:28: medium: assertion might fail
red_black_trees.adb:401:28: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:401:28: medium: assertion might fail
red_black_trees.adb:401:54: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:403:13: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:404:28: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:404:28: medium: assertion might fail
red_black_trees.adb:405:30: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:410:16: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:410:48: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:410:48: medium: assertion might fail, cannot prove Nb_Blacks (T) (I).Status
red_black_trees.adb:424:49: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:425:15: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:426:15: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:426:35: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:426:35: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:429:18: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:429:43: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:431:28: info: index check proved (CVC5: 2 VC)
red_black_trees.adb:431:28: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:432:28: info: index check proved (CVC5: 2 VC)
red_black_trees.adb:432:28: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:432:48: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:432:48: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:433:15: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:434:08: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:434:28: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:434:28: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:436:21: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:436:37: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:436:63: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:437:21: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:438:15: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:438:31: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:438:31: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:443:66: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:444:28: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:445:22: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:446:22: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:446:46: medium: precondition might fail, cannot prove Model (T) (I).K
red_black_trees.adb:448:24: info: index check proved (CVC5: 2 VC)
red_black_trees.adb:448:24: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:451:28: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:452:14: medium: postcondition might fail
red_black_trees.adb:454:34: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:454:34: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:469:19: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:470:25: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:473:21: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:473:21: medium: loop invariant might fail in first iteration, cannot prove Nb_Blacks (T) (I).Count = Nb_Blacks (T_Old) (I).Count
red_black_trees.adb:473:21: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Nb_Blacks (T) (I).Count = Nb_Blacks (T_Old) (I).Count
red_black_trees.adb:473:47: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:476:19: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:477:25: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:480:21: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:480:21: medium: loop invariant might fail in first iteration, cannot prove Nb_Blacks (T) (I).Status
red_black_trees.adb:480:21: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Nb_Blacks (T) (I).Status
red_black_trees.adb:482:16: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:483:18: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:483:18: medium: loop invariant might fail in first iteration, cannot prove Nb_Blacks (T) (X).Status
red_black_trees.adb:483:18: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Nb_Blacks (T) (X).Status
red_black_trees.adb:484:17: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:484:43: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:485:17: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:486:17: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:486:43: info: precondition proved (CVC5: 2 VC)
red_black_trees.adb:488:13: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:489:28: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:489:28: medium: assertion might fail, cannot prove Nb_Blacks (T) (X).Status
red_black_trees.adb:490:32: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:490:58: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:491:28: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:491:28: medium: assertion might fail, cannot prove Nb_Blacks (T) (Y).Status
red_black_trees.adb:492:32: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:492:58: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:495:21: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:497:28: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:497:28: medium: assertion might fail
red_black_trees.adb:498:28: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:498:28: medium: assertion might fail, cannot prove Nb_Blacks (T) (Parent (T_Old.Struct, X)).Status
red_black_trees.adb:499:32: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:500:30: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:505:16: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:505:48: info: precondition proved (CVC5: 1 VC)
red_black_trees.adb:505:48: medium: assertion might fail, cannot prove Nb_Blacks (T) (I).Status
red_black_trees.adb:510:07: info: initialization of "X" proved
red_black_trees.adb:510:10: info: initialization of "Y" proved
red_black_trees.adb:512:28: info: invariant check proved (CVC5: 1 VC)
red_black_trees.adb:515:07: medium: precondition might fail
red_black_trees.adb:517:10: medium: precondition might fail, cannot prove Same_Nb_Blacks (T_Old) [possible fix: call at line 515 should mention T (for argument T) in a postcondition]
red_black_trees.adb:520:16: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: call at line 515 should mention I (for argument X) in a postcondition]
red_black_trees.adb:521:22: medium: assertion might fail [possible fix: call at line 515 should mention T (for argument T) and I (for argument X) in a postcondition]
red_black_trees.adb:521:22: medium: precondition might fail [possible fix: call at line 515 should mention T (for argument T) in a postcondition]
red_black_trees.adb:522:07: medium: precondition might fail, cannot prove Same_Nb_Blacks (T_Old) [possible fix: call at line 515 should mention T (for argument T) in a postcondition]
red_black_trees.adb:523:22: medium: assertion might fail, cannot prove not Contains (S1, E) [possible fix: call at line 515 should mention T (for argument T) in a postcondition]
red_black_trees.adb:523:22: medium: in inlined expression function body at tree_model.ads:85
red_black_trees.adb:530:33: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: call at line 515 should mention T (for argument T) in a postcondition]
red_black_trees.adb:531:18: medium: assertion might fail, cannot prove T.Color (I) = Black [possible fix: call at line 515 should mention T (for argument T) in a postcondition]
red_black_trees.adb:535:18: medium: precondition might fail [possible fix: call at line 515 should mention T (for argument T) in a postcondition]
red_black_trees.adb:535:71: medium: range check might fail, cannot prove lower bound for X [reason for check: input value must fit in parameter type] [possible fix: call at line 515 should mention I (for argument X) in a postcondition]
red_black_trees.adb:536:33: info: loop invariant initialization proved (CVC5: 1 VC)
red_black_trees.adb:536:33: info: loop invariant preservation proved (CVC5: 1 VC)
red_black_trees.adb:537:33: info: loop invariant initialization proved (CVC5: 1 VC)
red_black_trees.adb:537:33: medium: loop invariant might not be preserved by an arbitrary iteration
red_black_trees.adb:538:33: info: loop invariant initialization proved (CVC5: 1 VC)
red_black_trees.adb:538:33: medium: loop invariant might not be preserved by an arbitrary iteration
red_black_trees.adb:538:33: medium: precondition might fail
red_black_trees.adb:538:51: medium: precondition might fail
red_black_trees.adb:539:33: medium: loop invariant might fail in first iteration
red_black_trees.adb:539:33: medium: loop invariant might not be preserved by an arbitrary iteration
red_black_trees.adb:539:33: medium: precondition might fail
red_black_trees.adb:539:51: info: index check proved (CVC5: 4 VC)
red_black_trees.adb:540:33: medium: loop invariant might fail in first iteration
red_black_trees.adb:540:33: medium: loop invariant might not be preserved by an arbitrary iteration
red_black_trees.adb:541:33: medium: loop invariant might fail in first iteration
red_black_trees.adb:541:33: medium: loop invariant might not be preserved by an arbitrary iteration
red_black_trees.adb:541:43: medium: precondition might fail
red_black_trees.adb:547:36: medium: array index check might fail [reason for check: value must be a valid index into the array]
red_black_trees.adb:548:21: medium: loop invariant might fail in first iteration, cannot prove T.Color (I) = Black
red_black_trees.adb:548:21: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove T.Color (I) = Black
red_black_trees.adb:549:33: medium: loop invariant might fail in first iteration
red_black_trees.adb:549:33: medium: loop invariant might not be preserved by an arbitrary iteration
red_black_trees.adb:550:33: info: loop invariant initialization proved (CVC5: 1 VC)
red_black_trees.adb:550:33: medium: loop invariant might not be preserved by an arbitrary iteration
red_black_trees.adb:553:13: medium: precondition might fail
red_black_trees.adb:553:33: medium: range check might fail, cannot prove lower bound for Parent (T.Struct, X) [reason for check: input value must fit in parameter type]
red_black_trees.adb:553:51: medium: range check might fail, cannot prove lower bound for X [reason for check: input value must fit in parameter type]
red_black_trees.adb:557:18: medium: precondition might fail, cannot prove Size (T) /= 0
red_black_trees.adb:557:34: medium: range check might fail, cannot prove lower bound for Parent (T.Struct, Parent (T.Struct, X)) [reason for check: input value must fit in parameter type]
red_black_trees.adb:557:52: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:557:70: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:564:25: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: loop invariant at line 536 should mention Y]
red_black_trees.adb:565:25: info: index check proved (CVC5: 2 VC)
red_black_trees.adb:565:43: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:566:25: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: loop invariant at line 536 should mention Y]
red_black_trees.adb:566:43: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:570:39: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:571:16: medium: precondition might fail, cannot prove Size (T.Struct) /= 0 [possible fix: loop invariant at line 536 should mention T_Old]
red_black_trees.adb:571:53: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:579:23: medium: precondition might fail, cannot prove Size (T) /= 0
red_black_trees.adb:579:39: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:579:57: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:580:42: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:581:19: medium: precondition might fail, cannot prove Size (T) > 0
red_black_trees.adb:581:42: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:582:19: medium: precondition might fail, cannot prove Size (T_Old.Struct) /= 0 [possible fix: loop invariant at line 536 should mention T_Old]
red_black_trees.adb:582:58: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:586:31: medium: assertion might fail
red_black_trees.adb:586:49: medium: range check might fail, cannot prove lower bound for Parent (T.Struct, X) [reason for check: input value must fit in parameter type]
red_black_trees.adb:586:67: medium: range check might fail, cannot prove lower bound for X [reason for check: input value must fit in parameter type]
red_black_trees.adb:587:31: medium: assertion might fail
red_black_trees.adb:587:31: medium: precondition might fail, cannot prove Size (T) /= 0
red_black_trees.adb:588:31: medium: range check might fail, cannot prove lower bound for Parent (T.Struct, Parent (T.Struct, X)) [reason for check: input value must fit in parameter type]
red_black_trees.adb:588:49: medium: range check might fail, cannot prove lower bound for Parent (T.Struct, X) [reason for check: input value must fit in parameter type]
red_black_trees.adb:588:67: medium: range check might fail, cannot prove lower bound for X [reason for check: input value must fit in parameter type]
red_black_trees.adb:592:25: medium: array index check might fail [reason for check: value must be a valid index into the array]
red_black_trees.adb:592:43: medium: range check might fail, cannot prove lower bound for X [reason for check: input value must fit in parameter type]
red_black_trees.adb:593:25: medium: array index check might fail [reason for check: value must be a valid index into the array]
red_black_trees.adb:593:43: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:593:61: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:594:16: medium: precondition might fail, cannot prove Size (T) > 0
red_black_trees.adb:594:40: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:594:58: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:594:76: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:595:16: medium: precondition might fail, cannot prove Same_Nb_Blacks (T_Old) [possible fix: loop invariant at line 536 should mention T_Old]
red_black_trees.adb:596:29: medium: range check might fail, cannot prove lower bound for Parent (T_Old.Struct, Parent (T_Old.Struct, X)) [reason for check: input value must fit in parameter type] [possible fix: loop invariant at line 536 should mention T_Old]
red_black_trees.adb:596:51: medium: range check might fail, cannot prove lower bound for Parent (T_Old.Struct, X) [reason for check: input value must fit in parameter type] [possible fix: loop invariant at line 536 should mention T_Old]
red_black_trees.adb:596:73: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:600:31: medium: assertion might fail
red_black_trees.adb:600:59: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:605:42: medium: array index check might fail [reason for check: value must be a valid index into the array]
red_black_trees.adb:606:27: medium: assertion might fail, cannot prove T.Color (I) = Black
red_black_trees.adb:607:31: medium: assertion might fail, cannot prove not Contains (S1, E) [possible fix: precondition of subprogram at red_black_trees.ads:27 should mention V]
red_black_trees.adb:607:31: medium: in inlined expression function body at tree_model.ads:85
red_black_trees.adb:613:18: medium: precondition might fail, cannot prove Size (T) /= 0
red_black_trees.adb:613:34: medium: range check might fail, cannot prove lower bound for Parent (T.Struct, Parent (T.Struct, X)) [reason for check: input value must fit in parameter type]
red_black_trees.adb:613:52: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:613:70: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:620:25: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: loop invariant at line 536 should mention Y]
red_black_trees.adb:621:25: info: index check proved (CVC5: 2 VC)
red_black_trees.adb:621:43: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:622:25: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: loop invariant at line 536 should mention Y]
red_black_trees.adb:622:43: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:626:39: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:627:16: medium: precondition might fail, cannot prove Size (T.Struct) /= 0 [possible fix: loop invariant at line 536 should mention T_Old]
red_black_trees.adb:627:53: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:635:23: medium: precondition might fail, cannot prove Size (T) /= 0
red_black_trees.adb:635:39: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:635:57: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:636:42: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:637:19: medium: precondition might fail, cannot prove Size (T) > 0
red_black_trees.adb:637:43: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:638:19: medium: precondition might fail, cannot prove Size (T_Old.Struct) /= 0 [possible fix: loop invariant at line 536 should mention T_Old]
red_black_trees.adb:638:58: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:642:31: medium: assertion might fail
red_black_trees.adb:642:49: medium: range check might fail, cannot prove lower bound for Parent (T.Struct, X) [reason for check: input value must fit in parameter type]
red_black_trees.adb:642:67: medium: range check might fail, cannot prove lower bound for X [reason for check: input value must fit in parameter type]
red_black_trees.adb:643:31: medium: assertion might fail
red_black_trees.adb:643:31: medium: precondition might fail, cannot prove Size (T) /= 0
red_black_trees.adb:644:31: medium: range check might fail, cannot prove lower bound for Parent (T.Struct, Parent (T.Struct, X)) [reason for check: input value must fit in parameter type]
red_black_trees.adb:644:49: medium: range check might fail, cannot prove lower bound for Parent (T.Struct, X) [reason for check: input value must fit in parameter type]
red_black_trees.adb:644:67: medium: range check might fail, cannot prove lower bound for X [reason for check: input value must fit in parameter type]
red_black_trees.adb:648:25: medium: array index check might fail [reason for check: value must be a valid index into the array]
red_black_trees.adb:648:43: medium: range check might fail, cannot prove lower bound for X [reason for check: input value must fit in parameter type]
red_black_trees.adb:649:25: medium: array index check might fail [reason for check: value must be a valid index into the array]
red_black_trees.adb:649:43: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:649:61: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:650:16: medium: precondition might fail, cannot prove Size (T) > 0
red_black_trees.adb:650:39: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:650:57: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:650:75: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:651:16: medium: precondition might fail, cannot prove Same_Nb_Blacks (T_Old) [possible fix: loop invariant at line 536 should mention T_Old]
red_black_trees.adb:652:29: medium: range check might fail, cannot prove lower bound for Parent (T_Old.Struct, Parent (T_Old.Struct, X)) [reason for check: input value must fit in parameter type] [possible fix: loop invariant at line 536 should mention T_Old]
red_black_trees.adb:652:51: medium: range check might fail, cannot prove lower bound for Parent (T_Old.Struct, X) [reason for check: input value must fit in parameter type] [possible fix: loop invariant at line 536 should mention T_Old]
red_black_trees.adb:652:73: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:656:31: medium: assertion might fail
red_black_trees.adb:656:59: info: range check proved (CVC5: 2 VC)
red_black_trees.adb:661:42: medium: array index check might fail [reason for check: value must be a valid index into the array]
red_black_trees.adb:662:27: medium: assertion might fail, cannot prove T.Color (I) = Black
red_black_trees.adb:663:31: medium: assertion might fail, cannot prove not Contains (S1, E) [possible fix: precondition of subprogram at red_black_trees.ads:27 should mention V]
red_black_trees.adb:663:31: medium: in inlined expression function body at tree_model.ads:85
red_black_trees.adb:667:22: medium: assertion might fail, cannot prove not Contains (S1, E)
red_black_trees.adb:667:22: medium: in inlined expression function body at tree_model.ads:85
red_black_trees.adb:670:21: medium: precondition might fail
red_black_trees.adb:672:32: medium: array index check might fail [reason for check: value must be a valid index into the array]
red_black_trees.adb:673:18: medium: assertion might fail, cannot prove T.Color (I) = Black
red_black_trees.adb:678:16: medium: precondition might fail
red_black_trees.adb:679:07: medium: precondition might fail, cannot prove Same_Nb_Blacks (T_Old) [possible fix: loop invariant at line 536 should mention T_Old]
red_black_trees.ads:19:13: info: implicit terminating annotation on "Size" has been proved, subprogram will terminate
red_black_trees.ads:21:13: info: implicit terminating annotation on "Values" has been proved, subprogram will terminate
red_black_trees.ads:22:18: info: invariant check proved (CVC5: 1 VC)
red_black_trees.ads:22:36: medium: postcondition might fail, cannot prove Is_Empty (Values'Result)
red_black_trees.ads:24:13: info: implicit terminating annotation on "Contains" has been proved, subprogram will terminate
red_black_trees.ads:25:14: medium: postcondition might fail
red_black_trees.ads:25:42: info: invariant check proved (CVC5: 1 VC)
red_black_trees.ads:27:14: medium: invariant check might fail
red_black_trees.ads:28:14: info: invariant check proved (CVC5: 1 VC)
red_black_trees.ads:29:18: info: invariant check proved (CVC5: 1 VC)
red_black_trees.ads:29:43: info: invariant check proved (CVC5: 1 VC)
red_black_trees.ads:29:43: medium: postcondition might fail, cannot prove  Values (T) = Values (T'Old)
red_black_trees.ads:29:56: info: invariant check proved (CVC5: 1 VC)
red_black_trees.ads:30:28: info: invariant check proved (CVC5: 1 VC)
red_black_trees.ads:30:47: info: invariant check proved (CVC5: 1 VC)
red_black_trees.ads:36:09: medium: invariant check might fail on default value
red_black_trees.ads:42:13: info: implicit terminating annotation on "Color" has been proved, subprogram will terminate
red_black_trees.ads:43:46: info: index check proved (CVC5: 2 VC)
red_black_trees.ads:45:13: info: implicit terminating annotation on "Same_Nb_Blacks" has been proved, subprogram will terminate
red_black_trees.ads:46:14: info: postcondition proved (CVC5: 1 VC)
red_black_trees.ads:48:13: info: implicit terminating annotation on "Invariant" has been proved, subprogram will terminate
red_black_trees.ads:51:29: info: index check proved (CVC5: 2 VC)
search_trees.adb:12:08: info: refined post proved (CVC5: 3 VC; Trivial: 2 VC)
search_trees.adb:15:18: info: precondition proved (CVC5: 1 VC)
search_trees.adb:15:36: info: range check proved (CVC5: 2 VC)
search_trees.adb:20:29: info: precondition proved (CVC5: 1 VC)
search_trees.adb:20:47: info: range check proved (CVC5: 2 VC)
search_trees.adb:22:07: info: initialization of "S" proved
search_trees.adb:29:13: info: precondition proved (CVC5: 2 VC)
search_trees.adb:29:31: info: range check proved (CVC5: 4 VC)
search_trees.adb:32:18: info: precondition proved (CVC5: 2 VC)
search_trees.adb:34:33: info: loop invariant initialization proved (CVC5: 1 VC)
search_trees.adb:34:33: info: loop invariant preservation proved (CVC5: 1 VC)
search_trees.adb:34:33: info: predicate check proved (Trivial: 2 VC)
search_trees.adb:36:13: info: loop invariant initialization proved (CVC5: 1 VC; Trivial: 1 VC)
search_trees.adb:37:19: info: precondition proved (CVC5: 2 VC)
search_trees.adb:37:37: info: range check proved (CVC5: 4 VC)
search_trees.adb:37:45: info: index check proved (CVC5: 4 VC)
search_trees.adb:37:55: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Contains (S, T.Values (I)) [possible fix: you should consider adding a postcondition to function Contains or turning it into an expression function in its unit spec]
search_trees.adb:37:78: info: index check proved (CVC5: 4 VC)
search_trees.adb:39:13: info: loop invariant initialization proved (CVC5: 1 VC; Trivial: 1 VC)
search_trees.adb:39:13: medium: loop invariant might not be preserved by an arbitrary iteration [possible fix: you should consider adding a postcondition to function Contains or turning it into an expression function in its unit spec]
search_trees.adb:42:25: info: precondition proved (CVC5: 2 VC)
search_trees.adb:42:43: info: range check proved (CVC5: 4 VC)
search_trees.adb:53:13: info: implicit terminating annotation on "Ordered_Prefix" has been proved, subprogram will terminate
search_trees.adb:54:10: info: precondition proved (CVC5: 2 VC)
search_trees.adb:54:47: info: overflow check proved (CVC5: 2 VC)
search_trees.adb:58:14: info: postcondition proved (CVC5: 1 VC)
search_trees.adb:67:14: info: precondition proved (CVC5: 1 VC)
search_trees.adb:68:22: info: precondition proved (CVC5: 1 VC)
search_trees.adb:69:22: info: precondition proved (CVC5: 1 VC)
search_trees.adb:69:46: info: precondition proved (CVC5: 1 VC)
search_trees.adb:70:16: info: precondition proved (CVC5: 3 VC)
search_trees.adb:70:32: info: precondition proved (CVC5: 1 VC)
search_trees.adb:78:13: info: implicit terminating annotation on "All_Less_Than" has been proved, subprogram will terminate
search_trees.adb:80:13: info: precondition proved (CVC5: 1 VC)
search_trees.adb:82:13: info: implicit terminating annotation on "All_More_Than" has been proved, subprogram will terminate
search_trees.adb:84:13: info: precondition proved (CVC5: 1 VC)
search_trees.adb:87:13: info: implicit terminating annotation on "Correct_Place" has been proved, subprogram will terminate
search_trees.adb:90:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:90:51: info: precondition proved (CVC5: 1 VC)
search_trees.adb:92:28: info: precondition proved (CVC5: 2 VC)
search_trees.adb:92:42: info: precondition proved (CVC5: 1 VC)
search_trees.adb:92:65: info: overflow check proved (CVC5: 2 VC)
search_trees.adb:93:30: info: precondition proved (CVC5: 1 VC)
search_trees.adb:94:30: info: precondition proved (CVC5: 1 VC)
search_trees.adb:104:13: info: implicit terminating annotation on "Find_Root" has been proved, subprogram will terminate
search_trees.adb:111:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:114:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:117:08: info: precondition proved (CVC5: 1 VC)
search_trees.adb:120:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:120:17: medium: postcondition might fail, cannot prove Model (F, Root) (Find_Root'Result).A <= Model (F, Root) (I).A
search_trees.adb:120:57: info: precondition proved (CVC5: 1 VC)
search_trees.adb:123:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:123:57: info: precondition proved (CVC5: 1 VC)
search_trees.adb:129:28: medium: precondition might fail
search_trees.adb:129:33: info: precondition proved (CVC5: 1 VC)
search_trees.adb:129:62: info: precondition proved (CVC5: 1 VC)
search_trees.adb:129:100: info: overflow check proved (CVC5: 2 VC)
search_trees.adb:130:28: medium: precondition might fail
search_trees.adb:130:33: info: precondition proved (CVC5: 1 VC)
search_trees.adb:130:62: info: precondition proved (CVC5: 1 VC)
search_trees.adb:130:100: medium: overflow check might fail, cannot prove upper bound for Last (Model (F, Root) (Find_Root'Result).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer]
search_trees.adb:133:35: info: precondition proved (CVC5: 1 VC)
search_trees.adb:138:31: medium: loop variant might fail
search_trees.adb:138:44: info: range check proved (CVC5: 2 VC)
search_trees.adb:138:76: info: range check proved (CVC5: 2 VC)
search_trees.adb:139:33: info: loop invariant initialization proved (CVC5: 2 VC)
search_trees.adb:139:51: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove M (KI).A <= M (I).A
search_trees.adb:140:33: info: loop invariant initialization proved (CVC5: 2 VC)
search_trees.adb:140:51: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove M (KJ).A <= M (J).A
search_trees.adb:142:13: info: loop invariant initialization proved (CVC5: 1 VC; Trivial: 1 VC)
search_trees.adb:142:16: info: predicate check proved (Trivial: 2 VC)
search_trees.adb:142:36: info: predicate check proved (Trivial: 2 VC)
search_trees.adb:142:59: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove KJ = J
search_trees.adb:144:13: info: loop invariant initialization proved (CVC5: 1 VC; Trivial: 1 VC)
search_trees.adb:144:16: info: predicate check proved (Trivial: 2 VC)
search_trees.adb:144:36: info: predicate check proved (Trivial: 2 VC)
search_trees.adb:144:59: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove KI = I
search_trees.adb:145:13: info: predicate check proved (Trivial: 1 VC)
search_trees.adb:145:33: info: predicate check proved (Trivial: 1 VC)
search_trees.adb:146:19: info: range check proved (CVC5: 2 VC)
search_trees.adb:147:16: info: predicate check proved (Trivial: 1 VC)
search_trees.adb:147:36: info: predicate check proved (Trivial: 1 VC)
search_trees.adb:148:19: info: range check proved (CVC5: 2 VC)
search_trees.adb:150:19: medium: range check might fail, cannot prove lower bound for Parent (F, KI) [reason for check: value must fit in the target type of the assignment]
search_trees.adb:151:19: medium: range check might fail, cannot prove lower bound for Parent (F, KJ) [reason for check: value must fit in the target type of the assignment]
search_trees.adb:163:43: info: precondition proved (CVC5: 1 VC)
search_trees.adb:165:14: info: precondition proved (CVC5: 2 VC)
search_trees.adb:165:14: medium: postcondition might fail [possible fix: you should consider adding a postcondition to function Last and function Get or turning them into expression functions in their unit spec]
search_trees.adb:165:19: info: precondition proved (CVC5: 1 VC)
search_trees.adb:165:36: info: index check proved (CVC5: 2 VC)
search_trees.adb:165:61: info: precondition proved (CVC5: 1 VC)
search_trees.adb:165:84: info: overflow check proved (CVC5: 2 VC)
search_trees.adb:180:83: info: precondition proved (CVC5: 1 VC)
search_trees.adb:181:14: info: precondition proved (CVC5: 1 VC)
search_trees.adb:181:14: medium: in inlined expression function body at search_trees.adb:80
search_trees.adb:181:14: medium: postcondition might fail, cannot prove Values (J) < V
search_trees.adb:184:07: info: precondition proved (CVC5: 3 VC)
search_trees.adb:196:82: info: precondition proved (CVC5: 1 VC)
search_trees.adb:197:14: info: precondition proved (CVC5: 1 VC)
search_trees.adb:197:14: medium: in inlined expression function body at search_trees.adb:84
search_trees.adb:197:14: medium: postcondition might fail, cannot prove Values (J) > V
search_trees.adb:200:07: info: precondition proved (CVC5: 3 VC)
search_trees.adb:213:15: info: predicate check proved (Trivial: 1 VC)
search_trees.adb:213:28: info: predicate check proved (Trivial: 1 VC)
search_trees.adb:213:54: info: precondition proved (CVC5: 2 VC)
search_trees.adb:214:15: info: precondition proved (CVC5: 1 VC)
search_trees.adb:215:19: info: precondition proved (CVC5: 2 VC)
search_trees.adb:215:42: info: precondition proved (CVC5: 1 VC)
search_trees.adb:216:21: info: precondition proved (CVC5: 1 VC)
search_trees.adb:217:14: medium: in inlined expression function body at search_trees.adb:93
search_trees.adb:217:14: medium: postcondition might fail, cannot prove All_Less_Than (F, V, Values, Values (I))
search_trees.adb:237:06: info: data dependencies proved
search_trees.adb:243:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:244:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:246:23: info: precondition proved (CVC5: 1 VC)
search_trees.adb:247:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:247:54: info: precondition proved (CVC5: 1 VC)
search_trees.adb:248:27: info: precondition proved (CVC5: 1 VC)
search_trees.adb:249:27: info: precondition proved (CVC5: 1 VC)
search_trees.adb:251:23: info: precondition proved (CVC5: 1 VC)
search_trees.adb:251:50: info: precondition proved (CVC5: 1 VC)
search_trees.adb:253:43: info: precondition proved (CVC5: 1 VC)
search_trees.adb:253:67: info: precondition proved (CVC5: 1 VC)
search_trees.adb:255:23: info: precondition proved (CVC5: 1 VC)
search_trees.adb:255:50: info: precondition proved (CVC5: 1 VC)
search_trees.adb:255:74: info: precondition proved (CVC5: 1 VC)
search_trees.adb:257:43: info: precondition proved (CVC5: 1 VC)
search_trees.adb:258:22: medium: precondition might fail
search_trees.adb:258:38: info: precondition proved (CVC5: 1 VC)
search_trees.adb:259:38: info: precondition proved (CVC5: 1 VC)
search_trees.adb:260:38: info: precondition proved (CVC5: 1 VC)
search_trees.adb:263:08: info: precondition proved (CVC5: 1 VC)
search_trees.adb:266:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:271:17: medium: in inlined expression function body at search_trees.adb:93
search_trees.adb:271:17: medium: postcondition might fail, cannot prove All_Less_Than (F, V, Values, Values (I))
search_trees.adb:271:35: info: precondition proved (CVC5: 1 VC)
search_trees.adb:279:19: info: precondition proved (CVC5: 2 VC)
search_trees.adb:279:36: info: index check proved (CVC5: 4 VC)
search_trees.adb:280:20: info: precondition proved (CVC5: 2 VC)
search_trees.adb:280:37: info: index check proved (CVC5: 4 VC)
search_trees.adb:280:44: info: precondition proved (CVC5: 2 VC)
search_trees.adb:282:22: info: precondition proved (CVC5: 4 VC)
search_trees.adb:282:27: info: precondition proved (CVC5: 2 VC)
search_trees.adb:283:25: info: precondition proved (CVC5: 2 VC)
search_trees.adb:283:42: info: index check proved (CVC5: 4 VC)
search_trees.adb:283:48: medium: overflow check might fail, cannot prove upper bound for Last (Model (F, Root) (K).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
search_trees.adb:284:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:284:24: medium: in inlined expression function body at search_trees.adb:80
search_trees.adb:284:24: medium: in inlined expression function body at search_trees.adb:80
search_trees.adb:284:24: medium: loop invariant might fail in first iteration, cannot prove Values (J) < V
search_trees.adb:284:24: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Values (J) < V
search_trees.adb:284:61: info: index check proved (CVC5: 4 VC)
search_trees.adb:285:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:285:61: info: index check proved (CVC5: 4 VC)
search_trees.adb:295:13: info: loop invariant initialization proved (CVC5: 1 VC; Trivial: 1 VC)
search_trees.adb:297:20: info: precondition proved (CVC5: 2 VC)
search_trees.adb:297:37: info: index check proved (CVC5: 4 VC)
search_trees.adb:298:28: info: precondition proved (CVC5: 2 VC)
search_trees.adb:299:28: info: precondition proved (CVC5: 2 VC)
search_trees.adb:299:45: info: index check proved (CVC5: 4 VC)
search_trees.adb:299:52: info: precondition proved (CVC5: 2 VC)
search_trees.adb:300:22: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Ordered_Prefix (Model (F, Root), Values, K, J)
search_trees.adb:300:22: medium: precondition might fail, cannot prove Model (I).A < Model (J).A
search_trees.adb:300:38: info: precondition proved (CVC5: 2 VC)
search_trees.adb:300:63: info: range check proved (CVC5: 4 VC)
search_trees.adb:307:16: info: precondition proved (CVC5: 2 VC)
search_trees.adb:308:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:309:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:309:48: info: precondition proved (CVC5: 2 VC)
search_trees.adb:311:31: info: precondition proved (CVC5: 2 VC)
search_trees.adb:311:31: medium: assertion might fail
search_trees.adb:311:59: info: precondition proved (CVC5: 2 VC)
search_trees.adb:312:31: medium: assertion might fail
search_trees.adb:312:31: medium: precondition might fail, cannot prove Model (I).K
search_trees.adb:312:47: info: precondition proved (CVC5: 2 VC)
search_trees.adb:318:21: info: precondition proved (CVC5: 2 VC)
search_trees.adb:319:29: info: precondition proved (CVC5: 2 VC)
search_trees.adb:319:46: medium: array index check might fail [reason for check: value must be a valid index into the array]
search_trees.adb:320:29: info: precondition proved (CVC5: 2 VC)
search_trees.adb:320:53: info: precondition proved (CVC5: 2 VC)
search_trees.adb:320:70: info: index check proved (CVC5: 4 VC)
search_trees.adb:321:23: medium: loop invariant might fail in first iteration, cannot prove Ordered_Prefix (Model (F, Root), Values, I, K)
search_trees.adb:321:23: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Ordered_Prefix (Model (F, Root), Values, I, K)
search_trees.adb:321:23: medium: precondition might fail, cannot prove Model (I).A < Model (J).A
search_trees.adb:321:39: info: precondition proved (CVC5: 2 VC)
search_trees.adb:321:67: info: range check proved (CVC5: 4 VC)
search_trees.adb:329:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:330:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:331:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:331:49: info: precondition proved (CVC5: 1 VC)
search_trees.adb:332:19: medium: assertion might fail, cannot prove Ordered_Prefix (Model (F, Root), Values, K, J)
search_trees.adb:332:19: medium: precondition might fail, cannot prove Model (I).A < Model (J).A
search_trees.adb:332:35: info: precondition proved (CVC5: 1 VC)
search_trees.adb:335:22: info: precondition proved (CVC5: 1 VC)
search_trees.adb:335:22: medium: assertion might fail
search_trees.adb:343:13: info: loop invariant initialization proved (CVC5: 1 VC; Trivial: 1 VC)
search_trees.adb:345:20: info: precondition proved (CVC5: 2 VC)
search_trees.adb:345:34: medium: array index check might fail [reason for check: value must be a valid index into the array]
search_trees.adb:346:28: info: precondition proved (CVC5: 2 VC)
search_trees.adb:347:28: info: precondition proved (CVC5: 2 VC)
search_trees.adb:347:42: info: index check proved (CVC5: 4 VC)
search_trees.adb:347:49: info: precondition proved (CVC5: 2 VC)
search_trees.adb:348:22: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Ordered_Prefix (Model (F, V), Values, K, J)
search_trees.adb:348:22: medium: precondition might fail, cannot prove Model (I).A < Model (J).A
search_trees.adb:348:38: info: precondition proved (CVC5: 2 VC)
search_trees.adb:348:60: info: range check proved (CVC5: 4 VC)
search_trees.adb:355:16: info: precondition proved (CVC5: 2 VC)
search_trees.adb:356:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:357:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:357:45: info: precondition proved (CVC5: 2 VC)
search_trees.adb:359:31: info: precondition proved (CVC5: 2 VC)
search_trees.adb:359:31: medium: assertion might fail
search_trees.adb:359:59: info: precondition proved (CVC5: 2 VC)
search_trees.adb:360:31: medium: assertion might fail
search_trees.adb:360:31: medium: precondition might fail, cannot prove Model (I).K
search_trees.adb:360:47: info: precondition proved (CVC5: 2 VC)
search_trees.adb:366:21: info: precondition proved (CVC5: 2 VC)
search_trees.adb:367:29: info: precondition proved (CVC5: 2 VC)
search_trees.adb:367:43: medium: array index check might fail [reason for check: value must be a valid index into the array]
search_trees.adb:368:29: info: precondition proved (CVC5: 2 VC)
search_trees.adb:368:50: info: precondition proved (CVC5: 2 VC)
search_trees.adb:368:64: info: index check proved (CVC5: 4 VC)
search_trees.adb:369:23: medium: loop invariant might fail in first iteration, cannot prove Ordered_Prefix (Model (F, V), Values, I, K)
search_trees.adb:369:23: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Ordered_Prefix (Model (F, V), Values, I, K)
search_trees.adb:369:23: medium: precondition might fail, cannot prove Model (I).A < Model (J).A
search_trees.adb:369:39: info: precondition proved (CVC5: 2 VC)
search_trees.adb:369:64: info: range check proved (CVC5: 4 VC)
search_trees.adb:377:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:378:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:379:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:379:46: info: precondition proved (CVC5: 1 VC)
search_trees.adb:380:19: medium: assertion might fail, cannot prove Ordered_Prefix (Model (F, V), Values, K, J)
search_trees.adb:380:19: medium: precondition might fail, cannot prove Model (I).A < Model (J).A
search_trees.adb:380:35: info: precondition proved (CVC5: 1 VC)
search_trees.adb:383:22: info: precondition proved (CVC5: 1 VC)
search_trees.adb:383:22: medium: assertion might fail
search_trees.adb:398:06: info: data dependencies proved
search_trees.adb:404:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:405:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:406:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:407:39: info: precondition proved (CVC5: 1 VC)
search_trees.adb:409:23: info: precondition proved (CVC5: 1 VC)
search_trees.adb:410:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:410:50: info: precondition proved (CVC5: 1 VC)
search_trees.adb:411:27: info: precondition proved (CVC5: 1 VC)
search_trees.adb:412:27: info: precondition proved (CVC5: 1 VC)
search_trees.adb:414:23: info: precondition proved (CVC5: 1 VC)
search_trees.adb:414:54: info: precondition proved (CVC5: 1 VC)
search_trees.adb:416:43: info: precondition proved (CVC5: 1 VC)
search_trees.adb:416:71: info: precondition proved (CVC5: 1 VC)
search_trees.adb:418:23: info: precondition proved (CVC5: 1 VC)
search_trees.adb:418:54: info: precondition proved (CVC5: 1 VC)
search_trees.adb:418:82: info: precondition proved (CVC5: 1 VC)
search_trees.adb:420:43: info: precondition proved (CVC5: 1 VC)
search_trees.adb:421:22: medium: precondition might fail
search_trees.adb:421:38: info: precondition proved (CVC5: 1 VC)
search_trees.adb:422:38: info: precondition proved (CVC5: 1 VC)
search_trees.adb:423:38: info: precondition proved (CVC5: 1 VC)
search_trees.adb:426:08: info: precondition proved (CVC5: 1 VC)
search_trees.adb:426:08: medium: postcondition might fail
search_trees.adb:433:13: info: loop invariant initialization proved (CVC5: 1 VC; Trivial: 1 VC)
search_trees.adb:435:20: info: precondition proved (CVC5: 2 VC)
search_trees.adb:435:37: medium: array index check might fail [reason for check: value must be a valid index into the array]
search_trees.adb:436:28: info: precondition proved (CVC5: 2 VC)
search_trees.adb:437:28: info: precondition proved (CVC5: 2 VC)
search_trees.adb:437:45: info: index check proved (CVC5: 4 VC)
search_trees.adb:437:52: info: precondition proved (CVC5: 2 VC)
search_trees.adb:438:22: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Ordered_Prefix (Model (F, Root), Values, K, J)
search_trees.adb:438:22: medium: precondition might fail, cannot prove Model (I).A < Model (J).A
search_trees.adb:438:38: info: precondition proved (CVC5: 2 VC)
search_trees.adb:438:63: info: range check proved (CVC5: 4 VC)
search_trees.adb:446:16: info: precondition proved (CVC5: 2 VC)
search_trees.adb:447:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:448:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:448:48: info: precondition proved (CVC5: 2 VC)
search_trees.adb:451:34: info: precondition proved (CVC5: 2 VC)
search_trees.adb:451:34: medium: assertion might fail
search_trees.adb:451:62: info: precondition proved (CVC5: 2 VC)
search_trees.adb:452:34: info: precondition proved (CVC5: 2 VC)
search_trees.adb:452:34: medium: assertion might fail
search_trees.adb:452:62: info: precondition proved (CVC5: 2 VC)
search_trees.adb:453:34: info: precondition proved (CVC5: 2 VC)
search_trees.adb:453:34: medium: assertion might fail
search_trees.adb:453:62: info: precondition proved (CVC5: 2 VC)
search_trees.adb:454:34: medium: assertion might fail
search_trees.adb:454:34: medium: precondition might fail, cannot prove Model (I).A < Model (J).A
search_trees.adb:454:50: info: precondition proved (CVC5: 2 VC)
search_trees.adb:455:42: medium: assertion might fail
search_trees.adb:455:42: medium: precondition might fail, cannot prove Model (I).K
search_trees.adb:455:58: info: precondition proved (CVC5: 2 VC)
search_trees.adb:463:16: info: precondition proved (CVC5: 2 VC)
search_trees.adb:464:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:465:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:465:48: info: precondition proved (CVC5: 2 VC)
search_trees.adb:468:34: info: precondition proved (CVC5: 2 VC)
search_trees.adb:468:34: medium: assertion might fail
search_trees.adb:468:59: info: precondition proved (CVC5: 2 VC)
search_trees.adb:469:34: medium: assertion might fail
search_trees.adb:469:34: medium: precondition might fail, cannot prove Model (I).A < Model (J).A
search_trees.adb:469:50: info: precondition proved (CVC5: 2 VC)
search_trees.adb:470:42: medium: assertion might fail
search_trees.adb:470:42: medium: precondition might fail, cannot prove Model (I).K
search_trees.adb:470:58: info: precondition proved (CVC5: 2 VC)
search_trees.adb:478:16: info: precondition proved (CVC5: 2 VC)
search_trees.adb:479:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:480:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:480:48: info: precondition proved (CVC5: 2 VC)
search_trees.adb:492:34: info: precondition proved (CVC5: 2 VC)
search_trees.adb:492:34: medium: assertion might fail
search_trees.adb:492:59: info: precondition proved (CVC5: 2 VC)
search_trees.adb:494:22: info: precondition proved (CVC5: 6 VC)
search_trees.adb:495:45: info: precondition proved (CVC5: 2 VC)
search_trees.adb:495:45: medium: assertion might fail
search_trees.adb:495:73: info: precondition proved (CVC5: 2 VC)
search_trees.adb:497:34: info: precondition proved (CVC5: 4 VC)
search_trees.adb:497:34: medium: assertion might fail [possible fix: you should consider adding a postcondition to function Last and function Get or turning them into expression functions in their unit spec]
search_trees.adb:497:39: info: precondition proved (CVC5: 2 VC)
search_trees.adb:497:68: info: precondition proved (CVC5: 2 VC)
search_trees.adb:497:91: info: overflow check proved (CVC5: 4 VC)
search_trees.adb:498:36: medium: precondition might fail
search_trees.adb:498:41: info: precondition proved (CVC5: 2 VC)
search_trees.adb:498:70: info: precondition proved (CVC5: 2 VC)
search_trees.adb:498:93: medium: overflow check might fail, cannot prove lower bound for Last (Model (F, Root) (I).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
search_trees.adb:500:42: medium: assertion might fail
search_trees.adb:500:42: medium: precondition might fail, cannot prove Model (I).K
search_trees.adb:500:58: info: precondition proved (CVC5: 2 VC)
search_trees.adb:507:16: info: precondition proved (CVC5: 2 VC)
search_trees.adb:508:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:513:16: info: precondition proved (CVC5: 6 VC)
search_trees.adb:520:31: medium: assertion might fail
search_trees.adb:520:36: info: precondition proved (CVC5: 2 VC)
search_trees.adb:520:60: info: precondition proved (CVC5: 2 VC)
search_trees.adb:526:21: info: precondition proved (CVC5: 2 VC)
search_trees.adb:527:29: info: precondition proved (CVC5: 2 VC)
search_trees.adb:527:46: medium: array index check might fail [reason for check: value must be a valid index into the array]
search_trees.adb:528:29: info: precondition proved (CVC5: 2 VC)
search_trees.adb:528:53: info: precondition proved (CVC5: 2 VC)
search_trees.adb:528:70: info: index check proved (CVC5: 4 VC)
search_trees.adb:529:23: medium: loop invariant might fail in first iteration, cannot prove (Ordered_Prefix (Model (F, Root), Values, I, K))
search_trees.adb:529:23: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove (Ordered_Prefix (Model (F, Root), Values, I, K))
search_trees.adb:529:24: medium: precondition might fail, cannot prove Model (I).A < Model (J).A
search_trees.adb:529:40: info: precondition proved (CVC5: 2 VC)
search_trees.adb:529:68: info: range check proved (CVC5: 4 VC)
search_trees.adb:547:15: info: precondition proved (CVC5: 1 VC)
search_trees.adb:547:34: info: precondition proved (CVC5: 1 VC)
search_trees.adb:549:22: info: precondition proved (CVC5: 1 VC)
search_trees.adb:549:48: info: precondition proved (CVC5: 1 VC)
search_trees.adb:550:14: medium: in inlined expression function body at search_trees.adb:93
search_trees.adb:550:14: medium: postcondition might fail, cannot prove All_Less_Than (F, V, Values, Values (I))
search_trees.adb:554:13: info: precondition proved (CVC5: 2 VC)
search_trees.adb:554:45: info: precondition proved (CVC5: 2 VC)
search_trees.adb:555:28: medium: assertion might fail, cannot prove Model (F1, Root) (I).K
search_trees.adb:555:28: medium: precondition might fail
search_trees.adb:555:55: medium: precondition might fail
search_trees.adb:556:16: info: precondition proved (CVC5: 4 VC)
search_trees.adb:556:30: info: precondition proved (CVC5: 2 VC)
search_trees.adb:556:54: medium: overflow check might fail, cannot prove upper bound for Last (Model (F2, Root) (I).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: you should consider adding a postcondition to function Last or turning it into an expression function in its unit spec]
search_trees.adb:557:31: info: precondition proved (CVC5: 4 VC)
search_trees.adb:557:31: medium: assertion might fail [possible fix: you should consider adding a postcondition to function Last and function Get or turning them into expression functions in their unit spec]
search_trees.adb:557:45: medium: precondition might fail
search_trees.adb:557:69: medium: overflow check might fail, cannot prove upper bound for Last (Model (F1, Root) (I).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
search_trees.adb:558:31: medium: assertion might fail, cannot prove Values (J) < V
search_trees.adb:558:31: medium: in inlined expression function body at search_trees.adb:80
search_trees.adb:558:31: medium: precondition might fail
search_trees.adb:559:31: info: precondition proved (CVC5: 2 VC)
search_trees.adb:559:31: medium: assertion might fail, cannot prove Values (J) < V
search_trees.adb:559:31: medium: in inlined expression function body at search_trees.adb:80
search_trees.adb:561:31: info: precondition proved (CVC5: 4 VC)
search_trees.adb:561:31: medium: assertion might fail [possible fix: you should consider adding a postcondition to function Last and function Get or turning them into expression functions in their unit spec]
search_trees.adb:561:45: medium: precondition might fail
search_trees.adb:561:69: medium: overflow check might fail, cannot prove upper bound for Last (Model (F1, Root) (I).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
search_trees.adb:562:31: medium: assertion might fail, cannot prove Values (J) > V
search_trees.adb:562:31: medium: in inlined expression function body at search_trees.adb:84
search_trees.adb:562:31: medium: precondition might fail
search_trees.adb:563:31: info: precondition proved (CVC5: 2 VC)
search_trees.adb:563:31: medium: assertion might fail, cannot prove Values (J) > V
search_trees.adb:563:31: medium: in inlined expression function body at search_trees.adb:84
search_trees.adb:568:19: info: precondition proved (CVC5: 2 VC)
search_trees.adb:568:37: info: index check proved (CVC5: 4 VC)
search_trees.adb:568:51: info: precondition proved (CVC5: 2 VC)
search_trees.adb:568:69: info: index check proved (CVC5: 4 VC)
search_trees.adb:570:22: info: precondition proved (CVC5: 4 VC)
search_trees.adb:570:36: info: precondition proved (CVC5: 2 VC)
search_trees.adb:570:54: info: index check proved (CVC5: 4 VC)
search_trees.adb:570:60: medium: overflow check might fail, cannot prove upper bound for Last (Model (F2, Root) (K).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
search_trees.adb:571:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:571:24: medium: in inlined expression function body at search_trees.adb:80
search_trees.adb:571:24: medium: in inlined expression function body at search_trees.adb:80
search_trees.adb:571:24: medium: loop invariant might fail in first iteration, cannot prove Values (J) < V
search_trees.adb:571:24: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Values (J) < V
search_trees.adb:571:63: info: index check proved (CVC5: 4 VC)
search_trees.adb:572:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:572:63: info: index check proved (CVC5: 4 VC)
search_trees.adb:587:06: info: data dependencies proved
search_trees.adb:594:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:597:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:597:36: info: precondition proved (CVC5: 1 VC)
search_trees.adb:600:08: info: precondition proved (CVC5: 1 VC)
search_trees.adb:600:08: medium: postcondition might fail
search_trees.adb:606:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:607:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:608:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:608:50: info: precondition proved (CVC5: 1 VC)
search_trees.adb:609:19: info: precondition proved (CVC5: 1 VC)
search_trees.adb:609:19: medium: assertion might fail, cannot prove Model (F2, Root) (I).K
search_trees.adb:610:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:611:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:611:50: info: precondition proved (CVC5: 1 VC)
search_trees.adb:612:25: info: precondition proved (CVC5: 2 VC)
search_trees.adb:612:30: info: precondition proved (CVC5: 1 VC)
search_trees.adb:612:60: info: precondition proved (CVC5: 1 VC)
search_trees.adb:612:84: medium: overflow check might fail, cannot prove upper bound for Last (Model (F1, Root) (I).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
search_trees.adb:613:25: info: precondition proved (CVC5: 2 VC)
search_trees.adb:613:30: info: precondition proved (CVC5: 1 VC)
search_trees.adb:613:60: info: precondition proved (CVC5: 1 VC)
search_trees.adb:613:84: medium: overflow check might fail, cannot prove upper bound for Last (Model (F2, Root) (I).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
search_trees.adb:617:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:618:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:619:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:619:50: info: precondition proved (CVC5: 1 VC)
search_trees.adb:620:23: info: precondition proved (CVC5: 2 VC)
search_trees.adb:620:28: info: precondition proved (CVC5: 1 VC)
search_trees.adb:621:34: info: precondition proved (CVC5: 1 VC)
search_trees.adb:621:58: medium: overflow check might fail, cannot prove upper bound for Last (Model (F1, Root) (I).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
search_trees.adb:623:25: medium: assertion might fail, cannot prove Values (J) < Values (I)
search_trees.adb:636:06: info: data dependencies proved
search_trees.adb:639:42: info: range check proved (CVC5: 2 VC)
search_trees.adb:641:42: info: range check proved (CVC5: 2 VC)
search_trees.adb:642:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:642:45: info: range check proved (CVC5: 2 VC)
search_trees.adb:643:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:643:45: info: range check proved (CVC5: 2 VC)
search_trees.adb:645:23: info: precondition proved (CVC5: 1 VC)
search_trees.adb:645:43: info: range check proved (CVC5: 2 VC)
search_trees.adb:646:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:646:45: info: range check proved (CVC5: 2 VC)
search_trees.adb:648:23: info: precondition proved (CVC5: 1 VC)
search_trees.adb:648:43: info: range check proved (CVC5: 2 VC)
search_trees.adb:649:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:649:45: info: range check proved (CVC5: 2 VC)
search_trees.adb:652:08: info: invariant check proved (CVC5: 1 VC)
search_trees.adb:652:08: medium: postcondition might fail
search_trees.adb:652:22: info: invariant check proved (CVC5: 1 VC)
search_trees.adb:668:06: info: data dependencies proved
search_trees.adb:675:40: info: range check proved (CVC5: 2 VC)
search_trees.adb:676:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:676:43: info: range check proved (CVC5: 2 VC)
search_trees.adb:683:17: info: precondition proved (CVC5: 1 VC)
search_trees.adb:683:35: info: range check proved (CVC5: 2 VC)
search_trees.adb:690:23: info: precondition proved (CVC5: 1 VC)
search_trees.adb:690:41: info: range check proved (CVC5: 2 VC)
search_trees.adb:691:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:691:43: info: range check proved (CVC5: 2 VC)
search_trees.adb:691:58: info: precondition proved (CVC5: 1 VC)
search_trees.adb:691:76: info: range check proved (CVC5: 2 VC)
search_trees.adb:692:31: info: precondition proved (CVC5: 2 VC)
search_trees.adb:692:36: info: precondition proved (CVC5: 1 VC)
search_trees.adb:692:54: info: range check proved (CVC5: 2 VC)
search_trees.adb:692:74: info: precondition proved (CVC5: 1 VC)
search_trees.adb:692:92: info: range check proved (CVC5: 2 VC)
search_trees.adb:692:106: medium: overflow check might fail, cannot prove upper bound for Last (Model (T.Struct, T.Root) (I).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
search_trees.adb:697:14: info: precondition proved (CVC5: 1 VC)
search_trees.adb:697:32: info: range check proved (CVC5: 2 VC)
search_trees.adb:697:50: medium: postcondition might fail, cannot prove T.Values (I) /= V
search_trees.adb:705:10: info: precondition proved (CVC5: 3 VC)
search_trees.adb:705:40: info: range check proved (CVC5: 2 VC)
search_trees.adb:707:10: info: precondition proved (CVC5: 3 VC)
search_trees.adb:707:40: info: range check proved (CVC5: 2 VC)
search_trees.adb:711:16: info: precondition proved (CVC5: 1 VC)
search_trees.adb:711:34: info: range check proved (CVC5: 2 VC)
search_trees.adb:711:56: info: precondition proved (CVC5: 3 VC)
search_trees.adb:711:78: info: range check proved (CVC5: 2 VC)
search_trees.adb:712:18: medium: assertion might fail, cannot prove T.Values (I) /= V
search_trees.adb:720:07: info: initialization of "X" proved
search_trees.adb:720:10: info: initialization of "Y" proved
search_trees.adb:721:07: info: initialization of "YL" proved
search_trees.adb:732:07: info: initialization of "Dummy_1" proved
search_trees.adb:732:16: info: initialization of "Dummy_2" proved
search_trees.adb:732:25: info: initialization of "Dummy_3" proved
search_trees.adb:732:34: info: initialization of "Dummy_4" proved
search_trees.adb:732:43: info: initialization of "Dummy_5" proved
search_trees.adb:738:17: info: add a contract to analyze it separately from calling contexts
search_trees.adb:738:17: info: local subprogram "Prove_Extract_X" only analyzed in the context of calls
search_trees.adb:747:16: medium: precondition might fail, cannot prove Valid_Root (F_Old, Root), in call inlined at search_trees.adb:953
search_trees.adb:747:55: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:953
search_trees.adb:750:16: medium: assertion might fail, cannot prove Ordered_Leafs (T.Struct, T.Root, T.Values), in call inlined at search_trees.adb:953
search_trees.adb:750:16: medium: precondition might fail, in call inlined at search_trees.adb:953
search_trees.adb:750:42: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:953 [reason for check: input value must fit in parameter type]
search_trees.adb:751:25: medium: precondition might fail, in call inlined at search_trees.adb:953
search_trees.adb:753:30: medium: precondition might fail, in call inlined at search_trees.adb:953
search_trees.adb:753:44: medium: invariant check might fail, in call inlined at search_trees.adb:953
search_trees.adb:753:44: medium: precondition might fail, in call inlined at search_trees.adb:953
search_trees.adb:754:27: medium: precondition might fail, in call inlined at search_trees.adb:953
search_trees.adb:754:44: medium: invariant check might fail, in call inlined at search_trees.adb:953
search_trees.adb:754:44: medium: precondition might fail, in call inlined at search_trees.adb:953
search_trees.adb:754:63: medium: precondition might fail, in call inlined at search_trees.adb:953
search_trees.adb:759:17: info: add a contract to analyze it separately from calling contexts
search_trees.adb:759:17: info: local subprogram "Prove_Extract_Y" only analyzed in the context of calls
search_trees.adb:765:13: medium: precondition might fail, cannot prove Valid_Root (F_Old, Root), in call inlined at search_trees.adb:958
search_trees.adb:766:28: medium: assertion might fail, in call inlined at search_trees.adb:958 [possible fix: you should consider adding a postcondition to function Get or turning it into an expression function in its unit spec]
search_trees.adb:766:28: medium: precondition might fail, in call inlined at search_trees.adb:958
search_trees.adb:766:33: medium: precondition might fail, in call inlined at search_trees.adb:958
search_trees.adb:767:28: medium: assertion might fail, in call inlined at search_trees.adb:958
search_trees.adb:768:28: medium: assertion might fail, cannot prove Values (J) > V, in call inlined at search_trees.adb:958
search_trees.adb:768:28: medium: in inlined expression function body at search_trees.adb:84
search_trees.adb:768:28: medium: precondition might fail, in call inlined at search_trees.adb:958
search_trees.adb:774:16: medium: precondition might fail, cannot prove Valid_Root (F1, Root), in call inlined at search_trees.adb:958
search_trees.adb:774:59: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:958 [reason for check: input value must fit in parameter type]
search_trees.adb:778:16: medium: assertion might fail, cannot prove Ordered_Leafs (T.Struct, T.Root, T.Values), in call inlined at search_trees.adb:958
search_trees.adb:778:16: medium: precondition might fail, in call inlined at search_trees.adb:958
search_trees.adb:778:42: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:958 [reason for check: input value must fit in parameter type]
search_trees.adb:779:25: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:958
search_trees.adb:780:25: medium: precondition might fail, in call inlined at search_trees.adb:958
search_trees.adb:782:25: medium: precondition might fail, in call inlined at search_trees.adb:958
search_trees.adb:783:46: medium: precondition might fail, in call inlined at search_trees.adb:958
search_trees.adb:783:64: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:958
search_trees.adb:783:73: medium: precondition might fail, in call inlined at search_trees.adb:958
search_trees.adb:783:90: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:958
search_trees.adb:785:30: medium: precondition might fail, in call inlined at search_trees.adb:958
search_trees.adb:786:27: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:958
search_trees.adb:786:56: medium: precondition might fail, in call inlined at search_trees.adb:958
search_trees.adb:791:17: info: add a contract to analyze it separately from calling contexts
search_trees.adb:791:17: info: local subprogram "Prove_Extract_YL" only analyzed in the context of calls
search_trees.adb:798:16: medium: precondition might fail, cannot prove Valid_Root (F_Old, Root), in call inlined at search_trees.adb:963
search_trees.adb:798:59: medium: range check might fail, cannot prove lower bound for YL, in call inlined at search_trees.adb:963 [reason for check: input value must fit in parameter type]
search_trees.adb:799:31: medium: assertion might fail, in call inlined at search_trees.adb:963 [possible fix: you should consider adding a postcondition to function Get or turning it into an expression function in its unit spec]
search_trees.adb:799:31: medium: precondition might fail, in call inlined at search_trees.adb:963
search_trees.adb:799:36: medium: precondition might fail, in call inlined at search_trees.adb:963
search_trees.adb:799:56: info: index check proved (CVC5: 2 VC), in call inlined at search_trees.adb:963
search_trees.adb:806:16: medium: precondition might fail, cannot prove Valid_Root (F2, Root), in call inlined at search_trees.adb:963
search_trees.adb:812:13: medium: precondition might fail, cannot prove Valid_Root (F1, Root), in call inlined at search_trees.adb:963
search_trees.adb:814:16: medium: precondition might fail, cannot prove Valid_Root (F1, Root), in call inlined at search_trees.adb:963
search_trees.adb:814:59: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:963 [reason for check: input value must fit in parameter type]
search_trees.adb:818:16: medium: assertion might fail, cannot prove Ordered_Leafs (T.Struct, T.Root, T.Values), in call inlined at search_trees.adb:963
search_trees.adb:818:16: medium: precondition might fail, in call inlined at search_trees.adb:963
search_trees.adb:818:42: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:963 [reason for check: input value must fit in parameter type]
search_trees.adb:819:25: medium: precondition might fail, in call inlined at search_trees.adb:963
search_trees.adb:820:25: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:963
search_trees.adb:821:46: medium: precondition might fail, in call inlined at search_trees.adb:963
search_trees.adb:821:71: medium: range check might fail, cannot prove lower bound for YL, in call inlined at search_trees.adb:963 [reason for check: input value must fit in parameter type]
search_trees.adb:823:25: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:963
search_trees.adb:825:46: medium: precondition might fail, in call inlined at search_trees.adb:963
search_trees.adb:825:71: medium: range check might fail, cannot prove lower bound for YL, in call inlined at search_trees.adb:963 [reason for check: input value must fit in parameter type]
search_trees.adb:826:46: medium: precondition might fail, in call inlined at search_trees.adb:963
search_trees.adb:826:64: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:963
search_trees.adb:826:73: medium: precondition might fail, in call inlined at search_trees.adb:963
search_trees.adb:826:90: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:963
search_trees.adb:828:30: medium: precondition might fail, in call inlined at search_trees.adb:963
search_trees.adb:829:27: medium: precondition might fail, in call inlined at search_trees.adb:963
search_trees.adb:829:56: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:963
search_trees.adb:829:107: medium: precondition might fail, in call inlined at search_trees.adb:963
search_trees.adb:829:124: medium: range check might fail, cannot prove lower bound for YL, in call inlined at search_trees.adb:963 [reason for check: input value must fit in parameter type]
search_trees.adb:834:17: info: add a contract to analyze it separately from calling contexts
search_trees.adb:834:17: info: local subprogram "Prove_Plug_YL" only analyzed in the context of calls
search_trees.adb:839:13: medium: precondition might fail, cannot prove Valid_Root (F, Root), in call inlined at search_trees.adb:968
search_trees.adb:844:31: medium: assertion might fail, in call inlined at search_trees.adb:968 [possible fix: you should consider adding a postcondition to function Get or turning it into an expression function in its unit spec]
search_trees.adb:844:31: medium: precondition might fail, in call inlined at search_trees.adb:968
search_trees.adb:844:36: medium: precondition might fail, in call inlined at search_trees.adb:968
search_trees.adb:844:57: medium: array index check might fail, in call inlined at search_trees.adb:968 [reason for check: value must be a valid index into the array]
search_trees.adb:849:16: medium: precondition might fail, cannot prove Valid_Root (F, Root), in call inlined at search_trees.adb:968
search_trees.adb:849:56: medium: precondition might fail, in call inlined at search_trees.adb:968
search_trees.adb:849:77: info: index check proved (CVC5: 2 VC), in call inlined at search_trees.adb:968
search_trees.adb:849:87: medium: range check might fail, cannot prove lower bound for YL, in call inlined at search_trees.adb:968 [reason for check: input value must fit in parameter type]
search_trees.adb:850:16: medium: precondition might fail, cannot prove Valid_Root (F_Old, Root), in call inlined at search_trees.adb:968
search_trees.adb:850:56: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:968
search_trees.adb:857:16: medium: precondition might fail, cannot prove Valid_Root (F1, Root), in call inlined at search_trees.adb:968
search_trees.adb:863:13: medium: precondition might fail, cannot prove Valid_Root (F1, Root), in call inlined at search_trees.adb:968
search_trees.adb:865:16: medium: precondition might fail, cannot prove Valid_Root (F1, Root), in call inlined at search_trees.adb:968
search_trees.adb:865:59: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:968 [reason for check: input value must fit in parameter type]
search_trees.adb:869:16: medium: assertion might fail, cannot prove Ordered_Leafs (T.Struct, T.Root, T.Values), in call inlined at search_trees.adb:968
search_trees.adb:869:16: medium: precondition might fail, in call inlined at search_trees.adb:968
search_trees.adb:869:42: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:968 [reason for check: input value must fit in parameter type]
search_trees.adb:870:25: medium: precondition might fail, in call inlined at search_trees.adb:968
search_trees.adb:871:25: medium: precondition might fail, in call inlined at search_trees.adb:968
search_trees.adb:872:25: medium: precondition might fail, in call inlined at search_trees.adb:968
search_trees.adb:874:46: medium: precondition might fail, in call inlined at search_trees.adb:968
search_trees.adb:874:64: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:968
search_trees.adb:874:73: medium: precondition might fail, in call inlined at search_trees.adb:968
search_trees.adb:874:90: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:968
search_trees.adb:876:30: medium: precondition might fail, in call inlined at search_trees.adb:968
search_trees.adb:877:27: medium: precondition might fail, in call inlined at search_trees.adb:968
search_trees.adb:877:56: medium: precondition might fail, in call inlined at search_trees.adb:968
search_trees.adb:882:17: info: add a contract to analyze it separately from calling contexts
search_trees.adb:882:17: info: local subprogram "Prove_Plug_X" only analyzed in the context of calls
search_trees.adb:888:13: medium: precondition might fail, cannot prove Valid_Root (F, Root), in call inlined at search_trees.adb:973
search_trees.adb:890:13: medium: precondition might fail, cannot prove Valid_Root (F, Root), in call inlined at search_trees.adb:973
search_trees.adb:890:53: medium: precondition might fail, in call inlined at search_trees.adb:973
search_trees.adb:891:13: medium: precondition might fail, cannot prove Valid_Root (F_Old, Root), in call inlined at search_trees.adb:973
search_trees.adb:897:16: medium: precondition might fail, cannot prove Valid_Root (F1, Root), in call inlined at search_trees.adb:973
search_trees.adb:897:59: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:973 [reason for check: input value must fit in parameter type]
search_trees.adb:901:37: medium: precondition might fail, in call inlined at search_trees.adb:973
search_trees.adb:901:63: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:973
search_trees.adb:902:25: medium: precondition might fail, in call inlined at search_trees.adb:973
search_trees.adb:903:46: medium: assertion might fail, cannot prove M1 (I).A = M2 (I).A, in call inlined at search_trees.adb:973
search_trees.adb:903:46: medium: in inlined expression function body at tree_model.ads:55
search_trees.adb:903:46: medium: precondition might fail, in call inlined at search_trees.adb:973
search_trees.adb:903:64: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:973
search_trees.adb:903:73: medium: precondition might fail, in call inlined at search_trees.adb:973
search_trees.adb:903:90: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:973
search_trees.adb:905:30: medium: precondition might fail, in call inlined at search_trees.adb:973
search_trees.adb:905:57: medium: precondition might fail, in call inlined at search_trees.adb:973
search_trees.adb:910:17: info: add a contract to analyze it separately from calling contexts
search_trees.adb:910:17: info: local subprogram "Prove_Plug_Y" only analyzed in the context of calls
search_trees.adb:916:28: medium: assertion might fail, cannot prove M1 (I).A = M2 (I).A, in call inlined at search_trees.adb:981
search_trees.adb:916:28: medium: in inlined expression function body at tree_model.ads:55
search_trees.adb:916:28: medium: precondition might fail, in call inlined at search_trees.adb:981
search_trees.adb:916:45: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:981
search_trees.adb:916:54: medium: precondition might fail, in call inlined at search_trees.adb:981
search_trees.adb:916:71: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:981
search_trees.adb:917:13: medium: precondition might fail, cannot prove S1 = S2, in call inlined at search_trees.adb:981
search_trees.adb:917:35: medium: precondition might fail, in call inlined at search_trees.adb:981
search_trees.adb:917:53: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:981
search_trees.adb:918:35: medium: precondition might fail, in call inlined at search_trees.adb:981
search_trees.adb:918:50: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:981
search_trees.adb:919:35: medium: precondition might fail, in call inlined at search_trees.adb:981
search_trees.adb:919:53: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:981
search_trees.adb:920:35: medium: precondition might fail, in call inlined at search_trees.adb:981
search_trees.adb:920:50: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:981
search_trees.adb:925:13: medium: precondition might fail, cannot prove Valid_Root (F_Old, Root), in call inlined at search_trees.adb:981
search_trees.adb:925:51: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:981
search_trees.adb:926:13: medium: in inlined expression function body at search_trees.adb:88
search_trees.adb:926:13: medium: precondition might fail, cannot prove Valid_Root (F, Root), in call inlined at search_trees.adb:981
search_trees.adb:927:35: medium: precondition might fail, in call inlined at search_trees.adb:981
search_trees.adb:927:50: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:981
search_trees.adb:927:65: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:981
search_trees.adb:932:13: medium: precondition might fail, cannot prove Valid_Root (F_Old, Root), in call inlined at search_trees.adb:981
search_trees.adb:932:51: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:981
search_trees.adb:934:16: medium: assertion might fail, cannot prove Valid_Root (T.Struct, T.Root), in call inlined at search_trees.adb:981
search_trees.adb:934:39: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:981
search_trees.adb:935:25: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:981
search_trees.adb:935:51: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:981
search_trees.adb:937:30: medium: precondition might fail, in call inlined at search_trees.adb:981
search_trees.adb:937:45: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:981
search_trees.adb:938:28: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:981
search_trees.adb:938:46: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:981
search_trees.adb:947:16: info: range check proved (CVC5: 2 VC)
search_trees.adb:949:15: medium: range check might fail, cannot prove lower bound for Parent (T.Struct, I) [reason for check: value must fit in the target type of the assignment]
search_trees.adb:950:15: info: precondition proved (CVC5: 1 VC)
search_trees.adb:951:10: medium: precondition might fail, cannot prove Model (F, Root) (I).K
search_trees.adb:951:30: info: range check proved (CVC5: 2 VC)
search_trees.adb:951:43: medium: range check might fail, cannot prove lower bound for X [reason for check: output value must fit in argument type]
search_trees.adb:953:07: info: analyzing call to "Prove_Extract_X" in context
search_trees.adb:957:07: medium: precondition might fail, cannot prove Valid_Root (F, Root)
search_trees.adb:957:39: medium: range check might fail, cannot prove lower bound for Y [reason for check: output value must fit in argument type]
search_trees.adb:958:07: info: analyzing call to "Prove_Extract_Y" in context
search_trees.adb:962:07: medium: precondition might fail, cannot prove Valid_Root (F, Root)
search_trees.adb:963:07: info: analyzing call to "Prove_Extract_YL" in context
search_trees.adb:967:07: medium: precondition might fail, cannot prove Valid_Root (F, Root)
search_trees.adb:968:07: info: analyzing call to "Prove_Plug_YL" in context
search_trees.adb:972:07: medium: precondition might fail, cannot prove Valid_Root (F, Root)
search_trees.adb:973:07: info: analyzing call to "Prove_Plug_X" in context
search_trees.adb:980:10: medium: precondition might fail, cannot prove Valid_Root (F, Root)
search_trees.adb:980:27: medium: range check might fail, cannot prove lower bound for T.Root [reason for check: input value must fit in parameter type]
search_trees.adb:981:10: info: analyzing call to "Prove_Plug_Y" in context
search_trees.adb:984:07: medium: precondition might fail, cannot prove T1.Root /= Empty
search_trees.adb:987:30: medium: assertion might fail, cannot prove Parent (T, J) = Parent (T_Old, J)
search_trees.adb:987:30: medium: invariant check might fail
search_trees.adb:987:46: medium: invariant check might fail
search_trees.adb:988:38: medium: invariant check might fail
search_trees.adb:988:66: info: precondition proved (CVC5: 1 VC)
search_trees.adb:988:66: medium: invariant check might fail
search_trees.adb:988:84: medium: invariant check might fail
search_trees.adb:988:84: medium: precondition might fail
search_trees.adb:991:31: medium: invariant check might fail
search_trees.adb:991:54: info: precondition proved (CVC5: 1 VC)
search_trees.adb:991:54: medium: invariant check might fail
search_trees.adb:995:30: info: precondition proved (CVC5: 2 VC)
search_trees.adb:995:30: medium: assertion might fail, cannot prove Peek (T, I, C) = Peek (T_Old, I, C)
search_trees.adb:995:30: medium: invariant check might fail
search_trees.adb:995:47: medium: invariant check might fail
search_trees.adb:995:47: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.adb:1003:07: info: initialization of "X" proved
search_trees.adb:1003:10: info: initialization of "Y" proved
search_trees.adb:1004:07: info: initialization of "XR" proved
search_trees.adb:1005:41: info: invariant check proved (CVC5: 1 VC)
search_trees.adb:1005:41: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1021:17: info: add a contract to analyze it separately from calling contexts
search_trees.adb:1021:17: info: local subprogram "Prove_Extract_Y" only analyzed in the context of calls
search_trees.adb:1028:16: medium: precondition might fail, cannot prove Valid_Root (F_Old, Root), in call inlined at search_trees.adb:1234
search_trees.adb:1028:55: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1234
search_trees.adb:1031:16: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:1234
search_trees.adb:1031:42: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1234
search_trees.adb:1032:25: medium: precondition might fail, in call inlined at search_trees.adb:1234
search_trees.adb:1034:30: medium: assertion might fail, cannot prove Model (F_Old, Root (T)) (I).K = (Model (T.Struct, Root (T)) (I).K or Model (T.Struct, Y) (I).K), in call inlined at search_trees.adb:1234
search_trees.adb:1034:30: medium: precondition might fail, in call inlined at search_trees.adb:1234
search_trees.adb:1034:44: medium: invariant check might fail, in call inlined at search_trees.adb:1234
search_trees.adb:1034:44: medium: precondition might fail, in call inlined at search_trees.adb:1234
search_trees.adb:1035:27: medium: precondition might fail, in call inlined at search_trees.adb:1234
search_trees.adb:1035:44: medium: invariant check might fail, in call inlined at search_trees.adb:1234
search_trees.adb:1035:44: medium: precondition might fail, in call inlined at search_trees.adb:1234
search_trees.adb:1035:63: medium: precondition might fail, in call inlined at search_trees.adb:1234
search_trees.adb:1040:17: info: add a contract to analyze it separately from calling contexts
search_trees.adb:1040:17: info: local subprogram "Prove_Extract_X" only analyzed in the context of calls
search_trees.adb:1046:13: medium: precondition might fail, cannot prove Valid_Root (F_Old, Root), in call inlined at search_trees.adb:1239
search_trees.adb:1047:28: medium: assertion might fail, in call inlined at search_trees.adb:1239 [possible fix: you should consider adding a postcondition to function Get or turning it into an expression function in its unit spec]
search_trees.adb:1047:28: medium: precondition might fail, in call inlined at search_trees.adb:1239
search_trees.adb:1047:33: medium: precondition might fail, in call inlined at search_trees.adb:1239
search_trees.adb:1048:28: medium: assertion might fail, in call inlined at search_trees.adb:1239
search_trees.adb:1049:28: medium: assertion might fail, cannot prove Values (J) < V, in call inlined at search_trees.adb:1239
search_trees.adb:1049:28: medium: in inlined expression function body at search_trees.adb:80
search_trees.adb:1049:28: medium: precondition might fail, in call inlined at search_trees.adb:1239
search_trees.adb:1055:16: medium: precondition might fail, cannot prove Valid_Root (F1, Root), in call inlined at search_trees.adb:1239
search_trees.adb:1055:59: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:1239 [reason for check: input value must fit in parameter type]
search_trees.adb:1059:16: medium: assertion might fail, cannot prove Ordered_Leafs (T.Struct, T.Root, T.Values), in call inlined at search_trees.adb:1239
search_trees.adb:1059:16: medium: precondition might fail, in call inlined at search_trees.adb:1239
search_trees.adb:1059:42: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:1239 [reason for check: input value must fit in parameter type]
search_trees.adb:1060:25: medium: precondition might fail, in call inlined at search_trees.adb:1239
search_trees.adb:1061:25: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:1239
search_trees.adb:1063:25: medium: precondition might fail, in call inlined at search_trees.adb:1239
search_trees.adb:1064:46: medium: precondition might fail, in call inlined at search_trees.adb:1239
search_trees.adb:1064:64: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1239
search_trees.adb:1064:73: medium: precondition might fail, in call inlined at search_trees.adb:1239
search_trees.adb:1064:90: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1239
search_trees.adb:1066:30: medium: precondition might fail, in call inlined at search_trees.adb:1239
search_trees.adb:1067:27: medium: precondition might fail, in call inlined at search_trees.adb:1239
search_trees.adb:1067:56: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:1239
search_trees.adb:1072:17: info: add a contract to analyze it separately from calling contexts
search_trees.adb:1072:17: info: local subprogram "Prove_Extract_XR" only analyzed in the context of calls
search_trees.adb:1079:16: medium: precondition might fail, cannot prove Valid_Root (F_Old, Root), in call inlined at search_trees.adb:1244
search_trees.adb:1079:59: medium: range check might fail, cannot prove lower bound for XR, in call inlined at search_trees.adb:1244 [reason for check: input value must fit in parameter type]
search_trees.adb:1080:31: medium: assertion might fail, in call inlined at search_trees.adb:1244 [possible fix: you should consider adding a postcondition to function Get or turning it into an expression function in its unit spec]
search_trees.adb:1080:31: medium: precondition might fail, in call inlined at search_trees.adb:1244
search_trees.adb:1080:36: medium: precondition might fail, in call inlined at search_trees.adb:1244
search_trees.adb:1080:56: info: index check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1244
search_trees.adb:1087:16: medium: precondition might fail, cannot prove Valid_Root (F2, Root), in call inlined at search_trees.adb:1244
search_trees.adb:1093:13: medium: precondition might fail, cannot prove Valid_Root (F1, Root), in call inlined at search_trees.adb:1244
search_trees.adb:1095:16: medium: precondition might fail, cannot prove Valid_Root (F1, Root), in call inlined at search_trees.adb:1244
search_trees.adb:1095:59: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:1244 [reason for check: input value must fit in parameter type]
search_trees.adb:1099:16: medium: assertion might fail, cannot prove Ordered_Leafs (T.Struct, T.Root, T.Values), in call inlined at search_trees.adb:1244
search_trees.adb:1099:16: medium: precondition might fail, in call inlined at search_trees.adb:1244
search_trees.adb:1099:42: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:1244 [reason for check: input value must fit in parameter type]
search_trees.adb:1100:25: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:1244
search_trees.adb:1101:25: medium: precondition might fail, in call inlined at search_trees.adb:1244
search_trees.adb:1102:46: medium: precondition might fail, in call inlined at search_trees.adb:1244
search_trees.adb:1102:71: medium: range check might fail, cannot prove lower bound for XR, in call inlined at search_trees.adb:1244 [reason for check: input value must fit in parameter type]
search_trees.adb:1104:25: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:1244
search_trees.adb:1106:46: medium: precondition might fail, in call inlined at search_trees.adb:1244
search_trees.adb:1106:71: medium: range check might fail, cannot prove lower bound for XR, in call inlined at search_trees.adb:1244 [reason for check: input value must fit in parameter type]
search_trees.adb:1107:46: medium: precondition might fail, in call inlined at search_trees.adb:1244
search_trees.adb:1107:64: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1244
search_trees.adb:1107:73: medium: precondition might fail, in call inlined at search_trees.adb:1244
search_trees.adb:1107:90: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1244
search_trees.adb:1109:30: medium: precondition might fail, in call inlined at search_trees.adb:1244
search_trees.adb:1110:27: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:1244
search_trees.adb:1110:56: medium: precondition might fail, in call inlined at search_trees.adb:1244
search_trees.adb:1110:107: medium: precondition might fail, in call inlined at search_trees.adb:1244
search_trees.adb:1110:124: medium: range check might fail, cannot prove lower bound for XR, in call inlined at search_trees.adb:1244 [reason for check: input value must fit in parameter type]
search_trees.adb:1115:17: info: add a contract to analyze it separately from calling contexts
search_trees.adb:1115:17: info: local subprogram "Prove_Plug_XR" only analyzed in the context of calls
search_trees.adb:1120:13: medium: precondition might fail, cannot prove Valid_Root (F, Root), in call inlined at search_trees.adb:1249
search_trees.adb:1125:31: medium: assertion might fail, in call inlined at search_trees.adb:1249 [possible fix: you should consider adding a postcondition to function Get or turning it into an expression function in its unit spec]
search_trees.adb:1125:31: medium: precondition might fail, in call inlined at search_trees.adb:1249
search_trees.adb:1125:36: medium: precondition might fail, in call inlined at search_trees.adb:1249
search_trees.adb:1125:57: medium: array index check might fail, in call inlined at search_trees.adb:1249 [reason for check: value must be a valid index into the array]
search_trees.adb:1130:16: medium: precondition might fail, cannot prove Valid_Root (F, Root), in call inlined at search_trees.adb:1249
search_trees.adb:1130:56: medium: precondition might fail, in call inlined at search_trees.adb:1249
search_trees.adb:1130:77: info: index check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1249
search_trees.adb:1130:87: medium: range check might fail, cannot prove lower bound for XR, in call inlined at search_trees.adb:1249 [reason for check: input value must fit in parameter type]
search_trees.adb:1131:16: medium: precondition might fail, cannot prove Valid_Root (F_Old, Root), in call inlined at search_trees.adb:1249
search_trees.adb:1131:56: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1249
search_trees.adb:1138:16: medium: precondition might fail, cannot prove Valid_Root (F1, Root), in call inlined at search_trees.adb:1249
search_trees.adb:1144:13: medium: precondition might fail, cannot prove Valid_Root (F1, Root), in call inlined at search_trees.adb:1249
search_trees.adb:1146:16: medium: precondition might fail, cannot prove Valid_Root (F1, Root), in call inlined at search_trees.adb:1249
search_trees.adb:1146:59: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:1249 [reason for check: input value must fit in parameter type]
search_trees.adb:1150:16: medium: assertion might fail, cannot prove Ordered_Leafs (T.Struct, T.Root, T.Values), in call inlined at search_trees.adb:1249
search_trees.adb:1150:16: medium: precondition might fail, in call inlined at search_trees.adb:1249
search_trees.adb:1150:42: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:1249 [reason for check: input value must fit in parameter type]
search_trees.adb:1151:25: medium: precondition might fail, in call inlined at search_trees.adb:1249
search_trees.adb:1152:25: medium: precondition might fail, in call inlined at search_trees.adb:1249
search_trees.adb:1153:25: medium: precondition might fail, in call inlined at search_trees.adb:1249
search_trees.adb:1155:46: medium: precondition might fail, in call inlined at search_trees.adb:1249
search_trees.adb:1155:64: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1249
search_trees.adb:1155:73: medium: precondition might fail, in call inlined at search_trees.adb:1249
search_trees.adb:1155:90: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1249
search_trees.adb:1157:30: medium: precondition might fail, in call inlined at search_trees.adb:1249
search_trees.adb:1158:27: medium: precondition might fail, in call inlined at search_trees.adb:1249
search_trees.adb:1158:56: medium: precondition might fail, in call inlined at search_trees.adb:1249
search_trees.adb:1163:17: info: add a contract to analyze it separately from calling contexts
search_trees.adb:1163:17: info: local subprogram "Prove_Plug_Y" only analyzed in the context of calls
search_trees.adb:1169:13: medium: precondition might fail, cannot prove Valid_Root (F, Root), in call inlined at search_trees.adb:1254
search_trees.adb:1171:13: medium: precondition might fail, cannot prove Valid_Root (F, Root), in call inlined at search_trees.adb:1254
search_trees.adb:1171:53: medium: precondition might fail, in call inlined at search_trees.adb:1254
search_trees.adb:1172:13: medium: precondition might fail, cannot prove Valid_Root (F_Old, Root), in call inlined at search_trees.adb:1254
search_trees.adb:1178:16: medium: precondition might fail, cannot prove Valid_Root (F1, Root), in call inlined at search_trees.adb:1254
search_trees.adb:1178:59: medium: range check might fail, cannot prove lower bound for T.Root, in call inlined at search_trees.adb:1254 [reason for check: input value must fit in parameter type]
search_trees.adb:1182:37: medium: precondition might fail, in call inlined at search_trees.adb:1254
search_trees.adb:1182:63: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1254
search_trees.adb:1183:25: medium: precondition might fail, in call inlined at search_trees.adb:1254
search_trees.adb:1184:46: medium: assertion might fail, cannot prove M1 (I).A = M2 (I).A, in call inlined at search_trees.adb:1254
search_trees.adb:1184:46: medium: in inlined expression function body at tree_model.ads:55
search_trees.adb:1184:46: medium: precondition might fail, in call inlined at search_trees.adb:1254
search_trees.adb:1184:64: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1254
search_trees.adb:1184:73: medium: precondition might fail, in call inlined at search_trees.adb:1254
search_trees.adb:1184:90: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1254
search_trees.adb:1186:30: medium: precondition might fail, in call inlined at search_trees.adb:1254
search_trees.adb:1186:57: medium: precondition might fail, in call inlined at search_trees.adb:1254
search_trees.adb:1191:17: info: add a contract to analyze it separately from calling contexts
search_trees.adb:1191:17: info: local subprogram "Prove_Plug_X" only analyzed in the context of calls
search_trees.adb:1197:28: medium: assertion might fail, cannot prove M1 (I).A = M2 (I).A, in call inlined at search_trees.adb:1262
search_trees.adb:1197:28: medium: in inlined expression function body at tree_model.ads:55
search_trees.adb:1197:28: medium: precondition might fail, in call inlined at search_trees.adb:1262
search_trees.adb:1197:45: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1197:54: medium: precondition might fail, in call inlined at search_trees.adb:1262
search_trees.adb:1197:71: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1198:13: medium: precondition might fail, cannot prove S1 = S2, in call inlined at search_trees.adb:1262
search_trees.adb:1198:35: medium: precondition might fail, in call inlined at search_trees.adb:1262
search_trees.adb:1198:53: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1199:35: medium: precondition might fail, in call inlined at search_trees.adb:1262
search_trees.adb:1199:50: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1200:35: medium: precondition might fail, in call inlined at search_trees.adb:1262
search_trees.adb:1200:53: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1201:35: medium: precondition might fail, in call inlined at search_trees.adb:1262
search_trees.adb:1201:50: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1206:13: medium: precondition might fail, cannot prove Valid_Root (F_Old, Root), in call inlined at search_trees.adb:1262
search_trees.adb:1206:51: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1207:13: medium: in inlined expression function body at search_trees.adb:88
search_trees.adb:1207:13: medium: precondition might fail, cannot prove Valid_Root (F, Root), in call inlined at search_trees.adb:1262
search_trees.adb:1208:35: medium: precondition might fail, in call inlined at search_trees.adb:1262
search_trees.adb:1208:50: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1208:65: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1213:13: medium: precondition might fail, cannot prove Valid_Root (F_Old, Root), in call inlined at search_trees.adb:1262
search_trees.adb:1213:51: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1215:16: medium: assertion might fail, cannot prove Valid_Root (T.Struct, T.Root), in call inlined at search_trees.adb:1262
search_trees.adb:1215:39: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1216:25: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1216:51: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1218:30: medium: precondition might fail, in call inlined at search_trees.adb:1262
search_trees.adb:1218:45: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1219:28: info: precondition proved (CVC5: 1 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1219:46: info: range check proved (CVC5: 2 VC), in call inlined at search_trees.adb:1262
search_trees.adb:1228:16: info: range check proved (CVC5: 2 VC)
search_trees.adb:1230:15: medium: range check might fail, cannot prove lower bound for Parent (T.Struct, I) [reason for check: value must fit in the target type of the assignment]
search_trees.adb:1231:15: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1232:10: medium: precondition might fail, cannot prove Model (F, Root) (I).K
search_trees.adb:1232:30: info: range check proved (CVC5: 2 VC)
search_trees.adb:1232:43: medium: range check might fail, cannot prove lower bound for Y [reason for check: output value must fit in argument type]
search_trees.adb:1234:07: info: analyzing call to "Prove_Extract_Y" in context
search_trees.adb:1238:07: medium: precondition might fail, cannot prove Valid_Root (F, Root)
search_trees.adb:1238:38: medium: range check might fail, cannot prove lower bound for X [reason for check: output value must fit in argument type]
search_trees.adb:1239:07: info: analyzing call to "Prove_Extract_X" in context
search_trees.adb:1243:07: medium: precondition might fail, cannot prove Valid_Root (F, Root)
search_trees.adb:1244:07: info: analyzing call to "Prove_Extract_XR" in context
search_trees.adb:1248:07: medium: precondition might fail, cannot prove Valid_Root (F, Root)
search_trees.adb:1249:07: info: analyzing call to "Prove_Plug_XR" in context
search_trees.adb:1253:07: medium: precondition might fail, cannot prove Valid_Root (F, Root)
search_trees.adb:1254:07: info: analyzing call to "Prove_Plug_Y" in context
search_trees.adb:1261:10: medium: precondition might fail, cannot prove Valid_Root (F, Root)
search_trees.adb:1261:27: medium: range check might fail, cannot prove lower bound for T.Root [reason for check: input value must fit in parameter type]
search_trees.adb:1262:10: info: analyzing call to "Prove_Plug_X" in context
search_trees.adb:1265:07: medium: precondition might fail, cannot prove T1.Root /= Empty
search_trees.adb:1268:30: medium: assertion might fail, cannot prove Parent (T, J) = Parent (T_Old, J)
search_trees.adb:1268:30: medium: invariant check might fail
search_trees.adb:1268:46: medium: invariant check might fail
search_trees.adb:1269:38: medium: invariant check might fail
search_trees.adb:1269:66: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1269:66: medium: invariant check might fail
search_trees.adb:1269:84: medium: invariant check might fail
search_trees.adb:1269:84: medium: precondition might fail
search_trees.adb:1272:31: medium: invariant check might fail
search_trees.adb:1272:54: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1272:54: medium: invariant check might fail
search_trees.adb:1276:30: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1276:30: medium: assertion might fail, cannot prove Peek (T, I, C) = Peek (T_Old, I, C)
search_trees.adb:1276:30: medium: invariant check might fail
search_trees.adb:1276:47: medium: invariant check might fail
search_trees.adb:1276:47: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.adb:1289:33: info: loop invariant initialization proved (CVC5: 1 VC)
search_trees.adb:1289:33: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1289:33: medium: loop invariant might not be preserved by an arbitrary iteration
search_trees.adb:1289:51: info: range check proved (CVC5: 4 VC)
search_trees.adb:1289:59: info: index check proved (CVC5: 4 VC)
search_trees.adb:1290:31: medium: loop variant might fail
search_trees.adb:1290:50: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1290:68: info: range check proved (CVC5: 4 VC)
search_trees.adb:1290:76: info: index check proved (CVC5: 4 VC)
search_trees.adb:1295:13: info: loop invariant initialization proved (CVC5: 2 VC; Trivial: 2 VC)
search_trees.adb:1296:18: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1296:36: info: range check proved (CVC5: 4 VC)
search_trees.adb:1297:20: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1297:38: info: range check proved (CVC5: 4 VC)
search_trees.adb:1297:53: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1297:71: info: range check proved (CVC5: 4 VC)
search_trees.adb:1297:79: info: index check proved (CVC5: 4 VC)
search_trees.adb:1298:26: info: precondition proved (CVC5: 4 VC)
search_trees.adb:1298:31: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1298:49: info: range check proved (CVC5: 4 VC)
search_trees.adb:1298:57: info: index check proved (CVC5: 4 VC)
search_trees.adb:1298:75: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1298:93: info: range check proved (CVC5: 4 VC)
search_trees.adb:1298:107: medium: overflow check might fail, cannot prove lower bound for Last (Model (T.Struct, T.Root) (I).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
search_trees.adb:1299:28: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove V < T.Values (I) [possible fix: subprogram at search_trees.ads:42 should mention T and V in a precondition]
search_trees.adb:1303:27: info: index check proved (CVC5: 2 VC)
search_trees.adb:1305:30: info: index check proved (CVC5: 2 VC)
search_trees.adb:1306:40: info: range check proved (CVC5: 2 VC)
search_trees.adb:1308:40: info: range check proved (CVC5: 2 VC)
search_trees.adb:1316:10: medium: precondition might fail, cannot prove V < T.Values (I) [possible fix: loop invariant at line 1289 should mention Previous]
search_trees.adb:1316:32: info: range check proved (CVC5: 2 VC)
search_trees.adb:1337:09: info: data dependencies proved
search_trees.adb:1348:20: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1348:46: info: range check proved (CVC5: 2 VC)
search_trees.adb:1355:26: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1355:52: info: range check proved (CVC5: 2 VC)
search_trees.adb:1356:28: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1356:54: info: range check proved (CVC5: 2 VC)
search_trees.adb:1356:69: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1356:95: info: range check proved (CVC5: 2 VC)
search_trees.adb:1357:34: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1357:39: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1357:65: info: range check proved (CVC5: 2 VC)
search_trees.adb:1357:85: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1357:111: info: range check proved (CVC5: 2 VC)
search_trees.adb:1357:125: medium: overflow check might fail, cannot prove upper bound for Last (Model (T_Old.Struct, T_Old.Root) (I).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
search_trees.adb:1364:43: info: range check proved (CVC5: 2 VC)
search_trees.adb:1370:26: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1370:44: info: range check proved (CVC5: 2 VC)
search_trees.adb:1371:25: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1371:47: info: range check proved (CVC5: 2 VC)
search_trees.adb:1373:26: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1373:48: info: range check proved (CVC5: 2 VC)
search_trees.adb:1373:66: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1373:84: info: range check proved (CVC5: 2 VC)
search_trees.adb:1377:26: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1377:48: info: range check proved (CVC5: 2 VC)
search_trees.adb:1378:28: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1378:46: info: range check proved (CVC5: 2 VC)
search_trees.adb:1378:61: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1378:83: info: range check proved (CVC5: 2 VC)
search_trees.adb:1381:28: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1381:46: info: range check proved (CVC5: 2 VC)
search_trees.adb:1381:63: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1381:81: info: range check proved (CVC5: 2 VC)
search_trees.adb:1381:89: info: index check proved (CVC5: 2 VC)
search_trees.adb:1385:26: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1385:48: info: range check proved (CVC5: 2 VC)
search_trees.adb:1388:30: info: index check proved (CVC5: 2 VC)
search_trees.adb:1390:11: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1390:11: medium: postcondition might fail
search_trees.adb:1390:37: medium: range check might fail, cannot prove lower bound for T.Root [reason for check: input value must fit in parameter type] [possible fix: add precondition (T.Root >= Index_Type'First) to subprogram at line 1335]
search_trees.adb:1403:16: info: precondition proved (CVC5: 6 VC)
search_trees.adb:1403:50: medium: range check might fail, cannot prove lower bound for T.Root [reason for check: input value must fit in parameter type] [possible fix: add precondition (T.Root >= Index_Type'First) to subprogram at line 1335]
search_trees.adb:1409:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1409:46: info: range check proved (CVC5: 4 VC)
search_trees.adb:1410:32: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1410:50: info: range check proved (CVC5: 4 VC)
search_trees.adb:1410:65: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1410:83: info: range check proved (CVC5: 4 VC)
search_trees.adb:1411:26: info: precondition proved (CVC5: 4 VC)
search_trees.adb:1411:26: medium: assertion might fail, cannot prove Get (Model (T.Struct, T.Root) (J).A, Last (Model (T.Struct, T.Root) (L).A) + 1) /= D [possible fix: you should consider adding a postcondition to function Last and function Get or turning them into expression functions in their unit spec]
search_trees.adb:1411:31: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1411:49: info: range check proved (CVC5: 4 VC)
search_trees.adb:1411:69: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1411:87: info: range check proved (CVC5: 4 VC)
search_trees.adb:1411:101: medium: overflow check might fail, cannot prove upper bound for Last (Model (T.Struct, T.Root) (L).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
search_trees.adb:1416:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1416:42: info: range check proved (CVC5: 4 VC)
search_trees.adb:1417:23: medium: assertion might fail, cannot prove not (Model (T.Struct, T.Root) (I).A < Model (T.Struct, T.Root) (J).A)
search_trees.adb:1417:28: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1417:46: info: range check proved (CVC5: 4 VC)
search_trees.adb:1417:54: info: index check proved (CVC5: 4 VC)
search_trees.adb:1417:61: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1417:79: info: range check proved (CVC5: 4 VC)
search_trees.adb:1427:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1427:42: medium: range check might fail, cannot prove lower bound for T.Root [reason for check: input value must fit in parameter type] [possible fix: add precondition (T.Root >= Index_Type'First) to subprogram at line 1335]
search_trees.adb:1428:32: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1428:50: info: range check proved (CVC5: 4 VC)
search_trees.adb:1430:32: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1430:50: info: range check proved (CVC5: 4 VC)
search_trees.adb:1430:66: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1430:84: info: range check proved (CVC5: 4 VC)
search_trees.adb:1431:26: medium: assertion might fail, cannot prove Ordered_Prefix (Model (T_Old.Struct, T_Old.Root), T_Old.Values, KI, J)
search_trees.adb:1431:26: medium: precondition might fail, cannot prove Model (I).K
search_trees.adb:1431:42: medium: precondition might fail
search_trees.adb:1431:68: medium: range check might fail, cannot prove lower bound for T_Old.Root [reason for check: input value must fit in parameter type]
search_trees.adb:1436:22: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1436:40: medium: range check might fail, cannot prove lower bound for T.Root [reason for check: input value must fit in parameter type] [possible fix: add precondition (T.Root >= Index_Type'First) to subprogram at line 1335]
search_trees.adb:1437:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1437:42: info: range check proved (CVC5: 4 VC)
search_trees.adb:1437:58: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1437:76: info: range check proved (CVC5: 4 VC)
search_trees.adb:1437:84: info: index check proved (CVC5: 4 VC)
search_trees.adb:1438:26: medium: assertion might fail, cannot prove KI = L or Model (T.Struct, T.Root) (KI).A < Model (T.Struct, T.Root) (L).A
search_trees.adb:1438:36: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1438:54: info: range check proved (CVC5: 4 VC)
search_trees.adb:1438:70: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1438:88: info: range check proved (CVC5: 4 VC)
search_trees.adb:1447:24: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1447:42: medium: range check might fail, cannot prove lower bound for T.Root [reason for check: input value must fit in parameter type] [possible fix: add precondition (T.Root >= Index_Type'First) to subprogram at line 1335]
search_trees.adb:1449:32: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1449:50: info: range check proved (CVC5: 4 VC)
search_trees.adb:1450:32: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1450:50: info: range check proved (CVC5: 4 VC)
search_trees.adb:1450:66: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1450:84: info: range check proved (CVC5: 4 VC)
search_trees.adb:1451:26: medium: assertion might fail, cannot prove Ordered_Prefix (Model (T.Struct, T.Root), T.Values, KI, J)
search_trees.adb:1451:26: medium: precondition might fail, cannot prove Model (I).A < Model (J).A
search_trees.adb:1451:42: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1451:60: info: range check proved (CVC5: 4 VC)
search_trees.adb:1458:23: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1458:41: medium: range check might fail, cannot prove lower bound for T.Root [reason for check: input value must fit in parameter type] [possible fix: add precondition (T.Root >= Index_Type'First) to subprogram at line 1335]
search_trees.adb:1458:49: medium: array index check might fail [reason for check: value must be a valid index into the array]
search_trees.adb:1459:31: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1459:49: info: range check proved (CVC5: 4 VC)
search_trees.adb:1460:31: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1460:49: info: range check proved (CVC5: 4 VC)
search_trees.adb:1460:57: info: index check proved (CVC5: 4 VC)
search_trees.adb:1460:64: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1460:82: info: range check proved (CVC5: 4 VC)
search_trees.adb:1461:25: medium: loop invariant might fail in first iteration, cannot prove Ordered_Prefix (Model (T.Struct, T.Root), T.Values, I, J)
search_trees.adb:1461:25: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Ordered_Prefix (Model (T.Struct, T.Root), T.Values, I, J)
search_trees.adb:1461:25: medium: precondition might fail, cannot prove Model (I).A < Model (J).A
search_trees.adb:1461:41: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1461:59: info: range check proved (CVC5: 4 VC)
search_trees.adb:1461:77: info: range check proved (CVC5: 4 VC)
search_trees.adb:1466:13: info: assertion proved (CVC5: 1 VC; Trivial: 2 VC)
search_trees.adb:1468:20: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1468:38: medium: range check might fail, cannot prove lower bound for T.Root [reason for check: input value must fit in parameter type] [possible fix: add precondition (T.Root >= Index_Type'First) to subprogram at line 1335]
search_trees.adb:1469:22: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1469:40: info: range check proved (CVC5: 2 VC)
search_trees.adb:1470:31: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1470:49: info: range check proved (CVC5: 2 VC)
search_trees.adb:1470:64: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1470:82: info: range check proved (CVC5: 2 VC)
search_trees.adb:1471:24: medium: precondition might fail, cannot prove Model (I).A < Model (J).A
search_trees.adb:1471:40: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1471:58: info: range check proved (CVC5: 2 VC)
search_trees.adb:1478:10: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1479:20: info: index check proved (CVC5: 2 VC)
search_trees.adb:1493:36: info: loop invariant initialization proved (CVC5: 1 VC)
search_trees.adb:1493:36: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1493:36: medium: loop invariant might not be preserved by an arbitrary iteration
search_trees.adb:1493:54: info: range check proved (CVC5: 4 VC)
search_trees.adb:1493:62: info: index check proved (CVC5: 4 VC)
search_trees.adb:1500:21: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1500:39: info: range check proved (CVC5: 4 VC)
search_trees.adb:1501:23: medium: precondition might fail
search_trees.adb:1501:41: info: range check proved (CVC5: 4 VC)
search_trees.adb:1501:56: info: precondition proved (CVC5: 2 VC)
search_trees.adb:1501:74: info: range check proved (CVC5: 4 VC)
search_trees.adb:1501:82: info: index check proved (CVC5: 4 VC)
search_trees.adb:1502:31: info: precondition proved (CVC5: 4 VC)
search_trees.adb:1502:36: medium: precondition might fail
search_trees.adb:1502:54: info: range check proved (CVC5: 4 VC)
search_trees.adb:1502:62: info: index check proved (CVC5: 4 VC)
search_trees.adb:1502:80: medium: precondition might fail
search_trees.adb:1502:98: info: range check proved (CVC5: 4 VC)
search_trees.adb:1502:112: medium: overflow check might fail, cannot prove lower bound for Last (Model (T.Struct, T.Root) (I).A) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit SPARK.Big_Integers]
search_trees.adb:1503:33: medium: loop invariant might fail in first iteration, cannot prove V < T.Values (I) [possible fix: precondition of subprogram at search_trees.ads:45 should mention V]
search_trees.adb:1503:33: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove V < T.Values (I) [possible fix: precondition of subprogram at search_trees.ads:45 should mention V]
search_trees.adb:1507:30: info: index check proved (CVC5: 2 VC)
search_trees.adb:1509:31: medium: assertion might fail [possible fix: precondition of subprogram at search_trees.ads:45 should mention V]
search_trees.adb:1510:33: info: invariant check proved (CVC5: 1 VC)
search_trees.adb:1510:33: info: precondition proved (CVC5: 1 VC)
search_trees.adb:1511:31: info: invariant check proved (CVC5: 1 VC)
search_trees.adb:1511:31: medium: assertion might fail [possible fix: precondition of subprogram at search_trees.ads:45 should mention V]
search_trees.adb:1513:33: info: index check proved (CVC5: 2 VC)
search_trees.adb:1518:40: info: range check proved (CVC5: 2 VC)
search_trees.adb:1526:10: medium: precondition might fail, cannot prove V < T.Values (I) [possible fix: loop invariant at line 1493 should mention Previous]
search_trees.adb:1526:32: info: range check proved (CVC5: 2 VC)
search_trees.adb:1528:10: medium: precondition might fail, cannot prove Valid_Root (F, Root) [possible fix: loop invariant at line 1493 should mention D and Previous]
search_trees.adb:1528:29: info: range check proved (CVC5: 2 VC)
search_trees.adb:1528:36: info: range check proved (CVC5: 2 VC)
search_trees.adb:1529:20: info: index check proved (CVC5: 2 VC)
search_trees.adb:1530:10: info: invariant check proved (CVC5: 1 VC)
search_trees.adb:1530:10: medium: precondition might fail, cannot prove T_Old.Values (L) /= V [possible fix: loop invariant at line 1493 should mention D and Previous]
search_trees.adb:1530:34: info: range check proved (CVC5: 2 VC)
search_trees.ads:17:09: info: default initial condition proved (CVC5: 1 VC)
search_trees.ads:18:06: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:20:13: info: implicit terminating annotation on "Size" has been proved, subprogram will terminate
search_trees.ads:22:13: info: implicit terminating annotation on "Root" has been proved, subprogram will terminate
search_trees.ads:23:13: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:25:13: info: implicit terminating annotation on "Parent" has been proved, subprogram will terminate
search_trees.ads:26:14: info: postcondition proved (CVC5: 1 VC; Trivial: 1 VC)
search_trees.ads:26:18: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:28:13: info: implicit terminating annotation on "Position" has been proved, subprogram will terminate
search_trees.ads:29:13: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:31:13: info: implicit terminating annotation on "Model" has been proved, subprogram will terminate
search_trees.ads:33:13: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:35:13: info: implicit terminating annotation on "Peek" has been proved, subprogram will terminate
search_trees.ads:36:13: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:36:36: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:36:36: info: precondition proved (CVC5: 1 VC)
search_trees.ads:38:13: info: implicit terminating annotation on "Values" has been proved, subprogram will terminate
search_trees.ads:40:14: info: postcondition proved (CVC5: 1 VC; Trivial: 1 VC)
search_trees.ads:40:18: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:42:13: info: implicit terminating annotation on "Contains" has been proved, subprogram will terminate
search_trees.ads:43:14: medium: postcondition might fail
search_trees.ads:43:42: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:45:14: medium: invariant check might fail
search_trees.ads:46:44: info: initialization of "I" proved
search_trees.ads:50:08: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:51:06: info: disjoint contract cases proved (CVC5: 1 VC)
search_trees.ads:59:19: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:59:34: medium: contract case might fail
search_trees.ads:61:20: medium: invariant check might fail
search_trees.ads:61:20: medium: precondition might fail
search_trees.ads:61:31: medium: invariant check might fail
search_trees.ads:61:31: medium: precondition might fail
search_trees.ads:62:20: medium: invariant check might fail
search_trees.ads:62:31: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:63:20: medium: invariant check might fail
search_trees.ads:63:33: medium: invariant check might fail
search_trees.ads:64:48: medium: invariant check might fail
search_trees.ads:64:64: medium: invariant check might fail
search_trees.ads:66:26: medium: invariant check might fail
search_trees.ads:67:28: info: precondition proved (CVC5: 1 VC)
search_trees.ads:67:28: medium: invariant check might fail
search_trees.ads:67:46: info: precondition proved (CVC5: 1 VC)
search_trees.ads:67:46: medium: invariant check might fail
search_trees.ads:69:26: medium: invariant check might fail
search_trees.ads:69:26: medium: precondition might fail
search_trees.ads:69:47: medium: invariant check might fail
search_trees.ads:69:47: medium: precondition might fail
search_trees.ads:71:26: medium: invariant check might fail
search_trees.ads:71:26: medium: precondition might fail
search_trees.ads:71:51: medium: invariant check might fail
search_trees.ads:71:51: medium: precondition might fail
search_trees.ads:74:32: medium: invariant check might fail
search_trees.ads:74:32: medium: precondition might fail
search_trees.ads:75:33: medium: invariant check might fail
search_trees.ads:75:33: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:75:54: medium: invariant check might fail
search_trees.ads:75:54: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:80:09: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:80:22: medium: contract case might fail
search_trees.ads:82:20: medium: invariant check might fail
search_trees.ads:83:20: medium: invariant check might fail
search_trees.ads:83:20: medium: precondition might fail
search_trees.ads:84:28: medium: invariant check might fail
search_trees.ads:84:47: medium: invariant check might fail
search_trees.ads:86:31: medium: invariant check might fail
search_trees.ads:86:31: medium: precondition might fail
search_trees.ads:86:49: medium: invariant check might fail
search_trees.ads:86:49: medium: precondition might fail
search_trees.ads:87:48: medium: invariant check might fail
search_trees.ads:87:64: medium: invariant check might fail
search_trees.ads:94:16: medium: contract case might fail
search_trees.ads:96:20: medium: invariant check might fail
search_trees.ads:96:20: medium: precondition might fail
search_trees.ads:96:31: medium: array index check might fail [reason for check: value must be a valid index into the array]
search_trees.ads:97:20: medium: invariant check might fail
search_trees.ads:97:20: medium: precondition might fail
search_trees.ads:97:31: info: precondition proved (CVC5: 1 VC)
search_trees.ads:97:31: medium: invariant check might fail
search_trees.ads:98:20: medium: invariant check might fail
search_trees.ads:98:31: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:99:28: medium: invariant check might fail
search_trees.ads:99:47: medium: invariant check might fail
search_trees.ads:101:38: medium: invariant check might fail
search_trees.ads:101:54: medium: invariant check might fail
search_trees.ads:103:37: medium: invariant check might fail
search_trees.ads:104:28: info: precondition proved (CVC5: 1 VC)
search_trees.ads:104:28: medium: invariant check might fail
search_trees.ads:104:46: medium: invariant check might fail
search_trees.ads:104:46: medium: precondition might fail
search_trees.ads:106:37: medium: invariant check might fail
search_trees.ads:106:37: medium: precondition might fail
search_trees.ads:107:28: info: precondition proved (CVC5: 1 VC)
search_trees.ads:107:28: medium: invariant check might fail
search_trees.ads:109:26: info: precondition proved (CVC5: 1 VC)
search_trees.ads:109:26: medium: invariant check might fail
search_trees.ads:110:28: medium: invariant check might fail
search_trees.ads:110:28: medium: precondition might fail
search_trees.ads:111:47: medium: invariant check might fail
search_trees.ads:111:47: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:111:56: info: range check proved (CVC5: 2 VC)
search_trees.ads:112:20: medium: invariant check might fail
search_trees.ads:112:20: medium: precondition might fail, cannot prove Model (T) (I).K
search_trees.ads:112:33: medium: invariant check might fail
search_trees.ads:112:33: medium: range check might fail, cannot prove lower bound for Parent (T, I) [reason for check: input value must fit in parameter type]
search_trees.ads:112:44: info: range check proved (CVC5: 2 VC)
search_trees.ads:112:48: medium: invariant check might fail
search_trees.ads:112:48: medium: precondition might fail
search_trees.ads:112:61: info: range check proved (CVC5: 2 VC)
search_trees.ads:115:32: medium: invariant check might fail
search_trees.ads:115:32: medium: precondition might fail
search_trees.ads:117:39: medium: invariant check might fail
search_trees.ads:117:50: info: range check proved (CVC5: 2 VC)
search_trees.ads:117:61: medium: invariant check might fail
search_trees.ads:117:61: medium: precondition might fail
search_trees.ads:117:74: info: range check proved (CVC5: 2 VC)
search_trees.ads:119:33: medium: invariant check might fail
search_trees.ads:119:33: medium: precondition might fail, cannot prove Model (T) (I).K
search_trees.ads:119:54: medium: invariant check might fail
search_trees.ads:119:54: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:121:14: medium: invariant check might fail
search_trees.ads:124:08: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:127:17: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:127:17: info: precondition proved (CVC5: 1 VC)
search_trees.ads:130:17: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:130:17: info: precondition proved (CVC5: 2 VC)
search_trees.ads:133:08: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:133:08: medium: postcondition might fail, cannot prove Size (T) = Size (T)'Old
search_trees.ads:133:19: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:137:21: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:137:21: info: precondition proved (CVC5: 1 VC)
search_trees.ads:137:44: medium: invariant check might fail
search_trees.ads:137:44: medium: precondition might fail
search_trees.ads:137:55: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:137:55: info: precondition proved (CVC5: 1 VC)
search_trees.ads:138:23: medium: invariant check might fail
search_trees.ads:138:23: medium: precondition might fail
search_trees.ads:138:34: medium: invariant check might fail
search_trees.ads:138:34: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:142:17: medium: invariant check might fail
search_trees.ads:142:33: medium: invariant check might fail
search_trees.ads:142:33: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:143:17: medium: invariant check might fail
search_trees.ads:143:17: medium: precondition might fail
search_trees.ads:147:17: medium: invariant check might fail
search_trees.ads:147:28: medium: invariant check might fail
search_trees.ads:147:28: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:147:28: medium: range check might fail, cannot prove lower bound for Peek (T'Old, I, Right) [reason for check: input value must fit in parameter type]
search_trees.ads:147:54: medium: invariant check might fail
search_trees.ads:148:21: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:148:21: info: precondition proved (CVC5: 1 VC)
search_trees.ads:149:23: medium: invariant check might fail
search_trees.ads:149:23: medium: precondition might fail
search_trees.ads:149:36: info: range check proved (CVC5: 2 VC)
search_trees.ads:149:36: medium: invariant check might fail
search_trees.ads:149:36: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:149:62: medium: invariant check might fail
search_trees.ads:149:62: medium: precondition might fail
search_trees.ads:153:21: medium: invariant check might fail
search_trees.ads:153:21: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:153:34: info: range check proved (CVC5: 2 VC)
search_trees.ads:153:34: medium: invariant check might fail
search_trees.ads:153:34: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:154:23: medium: invariant check might fail
search_trees.ads:154:34: medium: invariant check might fail
search_trees.ads:154:34: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:154:34: medium: range check might fail, cannot prove lower bound for Peek (T'Old, Peek (T'Old, I, Right), Left) [reason for check: input value must fit in parameter type]
search_trees.ads:154:47: info: range check proved (CVC5: 2 VC)
search_trees.ads:154:47: medium: invariant check might fail
search_trees.ads:154:47: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:155:29: medium: invariant check might fail
search_trees.ads:155:29: medium: precondition might fail
search_trees.ads:155:42: info: range check proved (CVC5: 2 VC)
search_trees.ads:155:42: medium: invariant check might fail
search_trees.ads:155:42: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:155:55: info: range check proved (CVC5: 2 VC)
search_trees.ads:155:55: medium: invariant check might fail
search_trees.ads:155:55: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:161:32: medium: invariant check might fail
search_trees.ads:162:40: medium: invariant check might fail
search_trees.ads:162:40: medium: precondition might fail
search_trees.ads:163:32: medium: invariant check might fail
search_trees.ads:164:40: medium: invariant check might fail
search_trees.ads:164:55: medium: invariant check might fail
search_trees.ads:164:55: medium: range check might fail, cannot prove lower bound for Parent (T'Old, J) [reason for check: input value must fit in parameter type]
search_trees.ads:165:40: medium: invariant check might fail
search_trees.ads:165:40: medium: precondition might fail
search_trees.ads:165:57: info: range check proved (CVC5: 2 VC)
search_trees.ads:165:57: medium: invariant check might fail
search_trees.ads:166:40: info: precondition proved (CVC5: 1 VC)
search_trees.ads:166:40: medium: invariant check might fail
search_trees.ads:167:25: medium: invariant check might fail
search_trees.ads:167:41: medium: invariant check might fail
search_trees.ads:173:31: medium: invariant check might fail
search_trees.ads:174:32: medium: invariant check might fail
search_trees.ads:175:40: info: precondition proved (CVC5: 1 VC)
search_trees.ads:175:40: medium: invariant check might fail
search_trees.ads:176:32: medium: invariant check might fail
search_trees.ads:176:47: medium: invariant check might fail
search_trees.ads:176:47: medium: range check might fail, cannot prove lower bound for Parent (T'Old, J) [reason for check: input value must fit in parameter type]
search_trees.ads:177:40: medium: invariant check might fail
search_trees.ads:177:40: medium: precondition might fail
search_trees.ads:177:57: info: range check proved (CVC5: 2 VC)
search_trees.ads:177:57: medium: invariant check might fail
search_trees.ads:178:40: info: precondition proved (CVC5: 1 VC)
search_trees.ads:178:40: medium: invariant check might fail
search_trees.ads:179:25: medium: invariant check might fail
search_trees.ads:179:25: medium: precondition might fail
search_trees.ads:179:43: info: precondition proved (CVC5: 1 VC)
search_trees.ads:179:43: medium: invariant check might fail
search_trees.ads:186:23: medium: invariant check might fail
search_trees.ads:186:23: medium: precondition might fail
search_trees.ads:186:44: medium: invariant check might fail
search_trees.ads:186:44: medium: precondition might fail
search_trees.ads:188:23: medium: invariant check might fail
search_trees.ads:188:23: medium: precondition might fail
search_trees.ads:188:48: medium: invariant check might fail
search_trees.ads:188:48: medium: precondition might fail
search_trees.ads:191:17: medium: invariant check might fail
search_trees.ads:191:30: medium: invariant check might fail
search_trees.ads:195:17: medium: invariant check might fail
search_trees.ads:195:17: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:195:38: medium: invariant check might fail
search_trees.ads:195:38: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:195:51: info: range check proved (CVC5: 2 VC)
search_trees.ads:195:51: medium: invariant check might fail
search_trees.ads:195:51: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:198:21: medium: invariant check might fail
search_trees.ads:199:23: medium: invariant check might fail
search_trees.ads:199:23: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:199:32: medium: invariant check might fail
search_trees.ads:199:32: medium: range check might fail, cannot prove lower bound for Parent (T'Old, I) [reason for check: input value must fit in parameter type]
search_trees.ads:199:51: info: precondition proved (CVC5: 1 VC)
search_trees.ads:199:51: medium: invariant check might fail
search_trees.ads:200:23: medium: invariant check might fail
search_trees.ads:200:23: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:203:17: medium: invariant check might fail
search_trees.ads:203:17: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:203:26: info: range check proved (CVC5: 2 VC)
search_trees.ads:203:26: medium: invariant check might fail
search_trees.ads:203:26: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:210:28: medium: invariant check might fail
search_trees.ads:210:59: medium: invariant check might fail
search_trees.ads:210:59: medium: precondition might fail
search_trees.ads:211:28: medium: invariant check might fail
search_trees.ads:211:28: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:212:22: medium: invariant check might fail
search_trees.ads:212:22: medium: precondition might fail
search_trees.ads:213:22: medium: invariant check might fail
search_trees.ads:213:22: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:213:39: medium: invariant check might fail
search_trees.ads:213:39: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:215:14: medium: invariant check might fail
search_trees.ads:218:08: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:221:17: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:221:17: info: precondition proved (CVC5: 1 VC)
search_trees.ads:224:17: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:224:17: info: precondition proved (CVC5: 2 VC)
search_trees.ads:227:08: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:227:08: medium: postcondition might fail, cannot prove Size (T) = Size (T)'Old
search_trees.ads:227:19: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:231:21: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:231:21: info: precondition proved (CVC5: 1 VC)
search_trees.ads:231:44: medium: invariant check might fail
search_trees.ads:231:44: medium: precondition might fail
search_trees.ads:231:55: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:231:55: info: precondition proved (CVC5: 1 VC)
search_trees.ads:232:23: medium: invariant check might fail
search_trees.ads:232:23: medium: precondition might fail
search_trees.ads:232:34: medium: invariant check might fail
search_trees.ads:232:34: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:236:17: medium: invariant check might fail
search_trees.ads:236:33: medium: invariant check might fail
search_trees.ads:236:33: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:237:17: medium: invariant check might fail
search_trees.ads:237:17: medium: precondition might fail
search_trees.ads:241:17: medium: invariant check might fail
search_trees.ads:241:28: medium: invariant check might fail
search_trees.ads:241:28: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:241:28: medium: range check might fail, cannot prove lower bound for Peek (T'Old, I, Left) [reason for check: input value must fit in parameter type]
search_trees.ads:241:53: medium: invariant check might fail
search_trees.ads:242:21: info: invariant check proved (CVC5: 1 VC)
search_trees.ads:242:21: info: precondition proved (CVC5: 1 VC)
search_trees.ads:243:23: medium: invariant check might fail
search_trees.ads:243:23: medium: precondition might fail
search_trees.ads:243:36: info: range check proved (CVC5: 2 VC)
search_trees.ads:243:36: medium: invariant check might fail
search_trees.ads:243:36: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:243:61: medium: invariant check might fail
search_trees.ads:243:61: medium: precondition might fail
search_trees.ads:247:21: medium: invariant check might fail
search_trees.ads:247:21: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:247:34: info: range check proved (CVC5: 2 VC)
search_trees.ads:247:34: medium: invariant check might fail
search_trees.ads:247:34: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:248:23: medium: invariant check might fail
search_trees.ads:248:34: medium: invariant check might fail
search_trees.ads:248:34: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:248:34: medium: range check might fail, cannot prove lower bound for Peek (T'Old, Peek (T'Old, I, Left), Right) [reason for check: input value must fit in parameter type]
search_trees.ads:248:47: info: range check proved (CVC5: 2 VC)
search_trees.ads:248:47: medium: invariant check might fail
search_trees.ads:248:47: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:249:29: medium: invariant check might fail
search_trees.ads:249:29: medium: precondition might fail
search_trees.ads:249:42: info: range check proved (CVC5: 2 VC)
search_trees.ads:249:42: medium: invariant check might fail
search_trees.ads:249:42: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:249:55: info: range check proved (CVC5: 2 VC)
search_trees.ads:249:55: medium: invariant check might fail
search_trees.ads:249:55: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:255:32: medium: invariant check might fail
search_trees.ads:256:40: medium: invariant check might fail
search_trees.ads:256:40: medium: precondition might fail
search_trees.ads:257:32: medium: invariant check might fail
search_trees.ads:258:40: medium: invariant check might fail
search_trees.ads:258:55: medium: invariant check might fail
search_trees.ads:258:55: medium: range check might fail, cannot prove lower bound for Parent (T'Old, J) [reason for check: input value must fit in parameter type]
search_trees.ads:259:40: medium: invariant check might fail
search_trees.ads:259:40: medium: precondition might fail
search_trees.ads:259:57: info: range check proved (CVC5: 2 VC)
search_trees.ads:259:57: medium: invariant check might fail
search_trees.ads:260:40: info: precondition proved (CVC5: 1 VC)
search_trees.ads:260:40: medium: invariant check might fail
search_trees.ads:261:25: medium: invariant check might fail
search_trees.ads:261:41: medium: invariant check might fail
search_trees.ads:267:31: medium: invariant check might fail
search_trees.ads:268:32: medium: invariant check might fail
search_trees.ads:269:40: info: precondition proved (CVC5: 1 VC)
search_trees.ads:269:40: medium: invariant check might fail
search_trees.ads:270:32: medium: invariant check might fail
search_trees.ads:270:47: medium: invariant check might fail
search_trees.ads:270:47: medium: range check might fail, cannot prove lower bound for Parent (T'Old, J) [reason for check: input value must fit in parameter type]
search_trees.ads:271:40: medium: invariant check might fail
search_trees.ads:271:40: medium: precondition might fail
search_trees.ads:271:57: info: range check proved (CVC5: 2 VC)
search_trees.ads:271:57: medium: invariant check might fail
search_trees.ads:272:40: info: precondition proved (CVC5: 1 VC)
search_trees.ads:272:40: medium: invariant check might fail
search_trees.ads:273:25: medium: invariant check might fail
search_trees.ads:273:25: medium: precondition might fail
search_trees.ads:273:43: info: precondition proved (CVC5: 1 VC)
search_trees.ads:273:43: medium: invariant check might fail
search_trees.ads:280:23: medium: invariant check might fail
search_trees.ads:280:23: medium: precondition might fail
search_trees.ads:280:44: medium: invariant check might fail
search_trees.ads:280:44: medium: precondition might fail
search_trees.ads:282:23: medium: invariant check might fail
search_trees.ads:282:23: medium: precondition might fail
search_trees.ads:282:48: medium: invariant check might fail
search_trees.ads:282:48: medium: precondition might fail
search_trees.ads:285:17: medium: invariant check might fail
search_trees.ads:285:30: medium: invariant check might fail
search_trees.ads:289:17: medium: invariant check might fail
search_trees.ads:289:17: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:289:37: medium: invariant check might fail
search_trees.ads:289:37: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:289:50: info: range check proved (CVC5: 2 VC)
search_trees.ads:289:50: medium: invariant check might fail
search_trees.ads:289:50: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:292:21: medium: invariant check might fail
search_trees.ads:293:23: medium: invariant check might fail
search_trees.ads:293:23: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:293:32: medium: invariant check might fail
search_trees.ads:293:32: medium: range check might fail, cannot prove lower bound for Parent (T'Old, I) [reason for check: input value must fit in parameter type]
search_trees.ads:293:51: info: precondition proved (CVC5: 1 VC)
search_trees.ads:293:51: medium: invariant check might fail
search_trees.ads:294:23: medium: invariant check might fail
search_trees.ads:294:23: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:297:17: medium: invariant check might fail
search_trees.ads:297:17: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:297:26: info: range check proved (CVC5: 2 VC)
search_trees.ads:297:26: medium: invariant check might fail
search_trees.ads:297:26: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:304:28: medium: invariant check might fail
search_trees.ads:304:59: medium: invariant check might fail
search_trees.ads:304:59: medium: precondition might fail
search_trees.ads:305:28: medium: invariant check might fail
search_trees.ads:305:28: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:306:22: medium: invariant check might fail
search_trees.ads:306:22: medium: precondition might fail
search_trees.ads:307:22: medium: invariant check might fail
search_trees.ads:307:22: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:307:39: medium: invariant check might fail
search_trees.ads:307:39: medium: precondition might fail, cannot prove Size (T) /= 0
search_trees.ads:313:09: info: invariant check proved on default value (CVC5: 1 VC)
search_trees.ads:321:40: info: range check proved (CVC5: 2 VC)
search_trees.ads:322:20: info: precondition proved (CVC5: 1 VC)
search_trees.ads:322:43: info: range check proved (CVC5: 2 VC)
search_trees.ads:324:13: info: implicit terminating annotation on "Ordered_Leafs" has been proved, subprogram will terminate
search_trees.ads:333:14: info: postcondition proved (CVC5: 1 VC)
search_trees.ads:336:07: info: precondition proved (CVC5: 1 VC)
search_trees.ads:336:25: info: range check proved (CVC5: 2 VC)
search_trees.ads:342:08: info: range check proved (CVC5: 2 VC)
search_trees.ads:348:07: info: precondition proved (CVC5: 1 VC)
tree_model.ads:33:22: info: predicate check proved (Trivial: 1 VC)
tree_model.ads:33:46: info: predicate check proved (Trivial: 1 VC)
tree_model.ads:41:13: info: implicit terminating annotation on "Is_Concat" has been proved, subprogram will terminate
tree_model.ads:42:07: info: predicate check proved (Trivial: 1 VC)
tree_model.ads:42:20: info: predicate check proved (Trivial: 1 VC)
tree_model.ads:42:33: info: predicate check proved (Trivial: 1 VC)
tree_model.ads:43:47: info: precondition proved (CVC5: 2 VC)
tree_model.ads:43:60: info: precondition proved (CVC5: 2 VC)
tree_model.ads:45:18: info: precondition proved (CVC5: 2 VC)
tree_model.ads:45:28: info: overflow check proved (CVC5: 2 VC)
tree_model.ads:45:42: info: precondition proved (CVC5: 2 VC)
tree_model.ads:46:39: info: overflow check proved (CVC5: 2 VC)
tree_model.ads:47:18: info: precondition proved (CVC5: 2 VC)
tree_model.ads:47:28: info: overflow check proved (CVC5: 2 VC)
tree_model.ads:47:28: info: range check proved (CVC5: 2 VC)
tree_model.ads:47:42: info: precondition proved (CVC5: 2 VC)
tree_model.ads:47:50: info: range check proved (CVC5: 2 VC)
tree_model.ads:48:16: info: predicate check proved (Trivial: 1 VC)
tree_model.ads:48:41: info: predicate check proved (Trivial: 1 VC)
tree_model.ads:54:13: info: implicit terminating annotation on overriding operator "=" has been proved, subprogram will terminate
tree_model.ads:57:13: info: implicit terminating annotation on "Is_Add" has been proved, subprogram will terminate
tree_model.ads:59:07: info: predicate check proved (Trivial: 1 VC)
tree_model.ads:59:21: info: predicate check proved (Trivial: 1 VC)
tree_model.ads:59:25: info: predicate check proved (Trivial: 1 VC)
tree_model.ads:60:16: info: precondition proved (CVC5: 2 VC)
tree_model.ads:64:06: info: data dependencies proved
tree_model.ads:68:14: info: postcondition proved (CVC5: 1 VC)
tree_model.ads:72:06: info: data dependencies proved
tree_model.ads:73:14: info: predicate check proved (Trivial: 1 VC)
tree_model.ads:73:28: info: predicate check proved (Trivial: 1 VC)
tree_model.ads:74:17: info: precondition proved (CVC5: 1 VC)
tree_model.ads:77:14: info: postcondition proved (CVC5: 4 VC)
tree_model.ads:77:14: info: precondition proved (CVC5: 1 VC)
tree_model.ads:83:13: info: implicit terminating annotation on "Is_Add" has been proved, subprogram will terminate
