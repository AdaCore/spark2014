arithmetic.adb:7:19: info: postcondition proved (CVC5: 1 VC)
arithmetic.adb:7:38: info: overflow check proved (CVC5: 2 VC)
arithmetic.adb:10:16: high: overflow check might fail, cannot prove lower bound for A - B (e.g. when A = Integer'First and B = 1) [reason for check: result of subtraction must fit in a 32-bits machine integer] [possible fix: add precondition (if B >= 0 then A >= Integer'First + B else A <= Integer'Last + B) to subprogram at line 6]
arithmetic.adb:14:19: info: postcondition proved (CVC5: 1 VC)
arithmetic.adb:14:39: info: overflow check proved (CVC5: 2 VC)
arithmetic.adb:17:14: high: overflow check might fail, cannot prove upper bound for -A (e.g. when A = Integer'First) [reason for check: result of negation must fit in a 32-bits machine integer] [possible fix: add precondition (-A in Integer) to subprogram at line 13]
arithmetic.adb:21:19: info: postcondition proved (CVC5: 1 VC)
arithmetic.adb:21:41: info: overflow check proved (CVC5: 2 VC)
arithmetic.adb:24:16: high: overflow check might fail, cannot prove lower bound for A * B (e.g. when A = -1073741825 and B = 2) [reason for check: result of multiplication must fit in a 32-bits machine integer] [possible fix: add precondition (A * B in Integer) to subprogram at line 20]
arithmetic.adb:27:04: warning: analyzing unreferenced function "Multiply_B"
arithmetic.adb:29:07: info: initialization of "R" proved
arithmetic.adb:32:11: info: range check proved (CVC5: 2 VC)
arithmetic.adb:33:17: info: overflow check proved (CVC5: 4 VC)
arithmetic.adb:34:33: info: loop invariant initialization proved (CVC5: 2 VC)
arithmetic.adb:34:33: info: loop invariant preservation proved (CVC5: 2 VC)
arithmetic.adb:43:07: info: initialization of "R" proved
arithmetic.adb:45:14: info: overflow check proved (CVC5: 2 VC)
arithmetic.adb:45:14: info: range check proved (CVC5: 2 VC)
arithmetic.adb:53:11: info: flow dependencies proved
arithmetic.adb:56:07: info: initialization of "C" proved
arithmetic.adb:59:22: high: assertion might fail (e.g. when C = 323 and Double_A = 17 and Double_B = 19)
arithmetic.adb:59:31: high: overflow check might fail, cannot prove upper bound for Double_A * Double_B (e.g. when Double_A = 2 and Double_B = 1073741824) [reason for check: result of multiplication must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
arithmetic.adb:65:11: info: flow dependencies proved
arithmetic.adb:68:07: info: initialization of "C" proved
arithmetic.adb:71:22: medium: assertion might fail
arithmetic.adb:71:24: high: overflow check might fail, cannot prove upper bound for A * B (e.g. when A = 2 and B = 1073741824) [reason for check: result of multiplication must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
arithmetic.adb:76:21: high: overflow check might fail, cannot prove lower bound for A + B (e.g. when A = Integer'First and B = -1) [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
arithmetic.adb:77:19: info: postcondition proved (CVC5: 1 VC)
arithmetic.adb:77:35: info: overflow check proved (CVC5: 2 VC)
arithmetic.adb:79:07: info: initialization of "R" proved
arithmetic.adb:83:14: info: range check proved (CVC5: 2 VC)
arithmetic.adb:84:32: info: overflow check proved (CVC5: 2 VC)
arithmetic.adb:85:36: info: loop invariant initialization proved (CVC5: 2 VC)
arithmetic.adb:85:36: info: loop invariant preservation proved (CVC5: 2 VC)
arithmetic.adb:85:42: info: overflow check proved (CVC5: 4 VC)
arithmetic.adb:88:14: info: range check proved (CVC5: 2 VC)
arithmetic.adb:89:32: info: overflow check proved (CVC5: 2 VC)
arithmetic.adb:90:36: info: loop invariant initialization proved (CVC5: 2 VC)
arithmetic.adb:90:36: info: loop invariant preservation proved (CVC5: 2 VC)
arithmetic.adb:90:42: info: overflow check proved (CVC5: 4 VC)
arithmetic.adb:97:19: info: postcondition proved (CVC5: 1 VC)
arithmetic.adb:101:07: info: initialization of "R" proved
arithmetic.adb:103:22: info: assertion proved (Trivial)
arithmetic.adb:107:33: info: loop invariant initialization proved (CVC5: 2 VC)
arithmetic.adb:107:33: info: loop invariant preservation proved (CVC5: 2 VC)
arithmetic.adb:113:19: medium: postcondition might fail (e.g. when Halve_B'Result = 0 and N = 2) [possible fix: add or complete related loop invariants or postconditions]
arithmetic.adb:117:07: info: initialization of "R" proved
arithmetic.adb:119:22: info: assertion proved (Trivial)
arithmetic.adb:124:13: info: loop invariant initialization proved (CVC5: 3 VC)
arithmetic.adb:124:13: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove N > R + R + 1
arithmetic.adb:130:19: info: postcondition proved (CVC5: 1 VC)
arithmetic.adb:134:07: info: initialization of "R" proved
arithmetic.adb:136:22: info: assertion proved (Trivial)
arithmetic.adb:140:33: info: loop invariant initialization proved (CVC5: 4 VC)
arithmetic.adb:140:33: info: loop invariant preservation proved (CVC5: 4 VC)
arithmetic.adb:148:19: info: postcondition proved (CVC5: 1 VC)
arithmetic.adb:148:38: info: division check proved (CVC5: 1 VC)
arithmetic.adb:150:07: info: initialization of "R" proved
arithmetic.adb:156:33: info: loop invariant initialization proved (CVC5: 4 VC)
arithmetic.adb:156:33: info: loop invariant preservation proved (CVC5: 4 VC)
arithmetic.adb:164:19: info: postcondition proved (CVC5: 1 VC)
arithmetic.adb:164:39: info: overflow check proved (CVC5: 2 VC)
arithmetic.adb:166:07: info: initialization of "R" proved
arithmetic.adb:169:24: info: range check proved (CVC5: 2 VC)
arithmetic.adb:171:24: high: overflow check might fail, cannot prove upper bound for -N (e.g. when N = Integer'First) [reason for check: result of negation must fit in a 32-bits machine integer] [possible fix: add precondition (-N in Integer) to subprogram at line 163]
arithmetic.adb:171:24: info: range check proved (CVC5: 2 VC)
arithmetic.adb:178:19: info: postcondition proved (CVC5: 1 VC)
arithmetic.adb:178:39: info: overflow check proved (CVC5: 2 VC)
arithmetic.adb:180:07: info: initialization of "R" proved
arithmetic.adb:183:24: info: range check proved (CVC5: 2 VC)
arithmetic.adb:185:24: info: overflow check proved (CVC5: 2 VC)
arithmetic.adb:185:24: info: range check proved (CVC5: 2 VC)
arithmetic.adb:191:19: info: postcondition proved (CVC5: 1 VC)
arithmetic.adb:191:39: info: overflow check proved (CVC5: 2 VC)
arithmetic.adb:194:14: high: overflow check might fail, cannot prove upper bound for abs (N) (e.g. when N = Integer'First) [reason for check: result of absolute value must fit in a 32-bits machine integer] [possible fix: add precondition (abs (N) in Integer) to subprogram at line 190]
arithmetic.adb:198:19: medium: postcondition might fail
arithmetic.adb:201:16: info: division check proved (CVC5: 1 VC)
arithmetic.adb:205:19: high: postcondition might fail (e.g. when N = 1 and Test_Mod_B'Result = 0)
arithmetic.adb:208:16: info: division check proved (CVC5: 1 VC)
arithmetic.adb:215:19: high: postcondition might fail (e.g. when A = 1 and Test_Mod_C'Result = 2)
arithmetic.adb:218:16: info: division check proved (CVC5: 1 VC)
arithmetic.adb:223:04: warning: analyzing unreferenced function "Test_Div_A"
arithmetic.adb:226:36: high: assertion might fail, cannot prove N / 10 < 0 (e.g. when N = -1) [possible fix: subprogram at line 223 should mention N in a precondition]
arithmetic.adb:226:38: info: division check proved (CVC5: 1 VC)
arithmetic.adb:234:19: medium: postcondition might fail
arithmetic.adb:237:16: info: division check proved (CVC5: 1 VC)
arithmetic.adb:244:19: info: postcondition proved (CVC5: 1 VC)
arithmetic.adb:244:39: medium: overflow check might fail, cannot prove upper bound for - ((A / B) * B) [reason for check: result of negation must fit in a 8-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
arithmetic.adb:244:45: info: division check proved (CVC5: 1 VC)
arithmetic.adb:244:45: medium: overflow check might fail, cannot prove upper bound for A / B [reason for check: result of division must fit in a 8-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
arithmetic.adb:244:50: info: overflow check proved (CVC5: 2 VC)
arithmetic.adb:244:55: info: overflow check proved (CVC5: 2 VC)
arithmetic.adb:247:16: info: division check proved (CVC5: 1 VC)
arithmetic.adb:254:41: high: overflow check might fail, cannot prove lower bound for A + B (e.g. when A = Byte'First and B = -1) [reason for check: result of addition must fit in a 8-bits machine integer] [possible fix: use "and then" instead of "and" in precondition]
arithmetic.adb:257:17: info: overflow check proved (CVC5: 2 VC)
arithmetic.adb:257:22: medium: divide by zero might fail [possible fix: add precondition ((A rem B) + C /= 0) to subprogram at line 250]
arithmetic.adb:257:30: info: division check proved (CVC5: 1 VC)
arithmetic.adb:257:37: medium: overflow check might fail, cannot prove lower bound for (A rem B) + C [reason for check: result of addition must fit in a 8-bits machine integer] [possible fix: add precondition (if C >= 0 then A rem B <= 127 - C else A rem B >= -128 - C) to subprogram at line 250]
arithmetic.adb:262:11: info: flow dependencies proved
arithmetic.adb:266:22: info: assertion proved (Z3: 1 VC)
arithmetic.adb:266:26: info: division check proved (CVC5: 1 VC)
arithmetic.adb:273:11: info: flow dependencies proved
arithmetic.adb:277:22: high: assertion might fail (e.g. when A = 2)
arithmetic.adb:277:26: info: division check proved (CVC5: 1 VC)
arithmetic.adb:283:19: info: postcondition proved (CVC5: 2 VC; Trivial: 2 VC)
arithmetic.adb:288:29: info: range check proved (CVC5: 2 VC)
arithmetic.adb:288:47: info: division check proved (CVC5: 1 VC)
arithmetic.adb:293:22: medium: postcondition might fail, cannot prove IsPositive_Wrong'Result = 0
arithmetic.adb:298:29: info: range check proved (CVC5: 2 VC)
arithmetic.adb:298:47: info: division check proved (CVC5: 1 VC)
counterexample expected for check at arithmetic.adb:10
  trace at arithmetic.adb:6 --> A = Integer'First and B = 1
  trace at arithmetic.adb:10 --> A = Integer'First and B = 1
counterexample expected for check at arithmetic.adb:17
  trace at arithmetic.adb:13 --> A = Integer'First
  trace at arithmetic.adb:17 --> A = Integer'First
counterexample expected for check at arithmetic.adb:76
  trace at arithmetic.adb:75 --> A = Integer'First and B = -1
  trace at arithmetic.adb:76 --> A = Integer'First and B = -1
counterexample expected for check at arithmetic.adb:171
  trace at arithmetic.adb:163 --> N = Integer'First
  trace at arithmetic.adb:168 --> N = Integer'First
  trace at arithmetic.adb:171 --> N = Integer'First
counterexample expected for check at arithmetic.adb:194
  trace at arithmetic.adb:190 --> N = Integer'First
  trace at arithmetic.adb:194 --> N = Integer'First
counterexample expected for check at arithmetic.adb:226
  trace at arithmetic.adb:223 --> N = -1
  trace at arithmetic.adb:226 --> N = -1
counterexample expected for check at arithmetic.adb:254
  trace at arithmetic.adb:250 --> A = Byte'First and C = 0
  trace at arithmetic.adb:251 --> B = -1
  trace at arithmetic.adb:252 --> C = 0
  trace at arithmetic.adb:254 --> A = Byte'First and B = -1
