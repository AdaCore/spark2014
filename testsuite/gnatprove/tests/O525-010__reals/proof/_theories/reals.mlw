module Reals__real
 use "real".RealInfix
 use "int".Int

 type real__ = real

 function bool_eq (a : real__) (b : real__) : bool = a = b
 val bool_eq (a : real__) (b : real__) : bool
  ensures { result <-> (a = b) }

 val function user_eq (a : real__) (b : real__) : bool

 val function value__size : int

 val function object__size (a : real__) : int

 axiom value__size_axiom :
  value__size >= 0

 axiom object__size_axiom :
  forall a  : real__. (object__size a >= 0)

 predicate dynamic_invariant real__ bool bool bool bool = true
 
 predicate default_initial_assumption real__ bool = true

end

module Reals__zero
 val constant zero : real
 ensures { result = 0.0 }
end

module Reals__Oadd
 use real.RealInfix
 let function oadd__logic (x : real) (y : real) : real = x +. y
 let function oadd (x : real) (y : real) : real = x +. y
end

module Reals__Osubtract
 use real.RealInfix
 let function osubtract__logic (x : real) (y : real) : real = x -. y
 let function osubtract (x : real) (y : real) : real = x -. y
end

module Reals__Omultiply
 use real.RealInfix
 let function omultiply__logic (x : real) (y : real) : real = x *. y
 let function omultiply (x : real) (y : real) : real = x *. y
end

module Reals__Odivide
 use real.RealInfix
 function odivide__logic (x : real) (y : real) : real = x /. y
 val odivide__logic (x : real) (y : real) : real
 ensures { result = (x /. y) }
 function odivide (x : real) (y : real) : real = x /. y
 val odivide (x : real) (y : real) : real
 ensures { result = (x /. y) }
end

module Reals__Olt
 use real.RealInfix
 function olt__logic (x : real) (y : real) : bool = x <. y
 function olt (x : real) (y : real) : bool = x <. y
end

module Reals__Ole
 use real.RealInfix
 let function ole__logic (x : real) (y : real) : bool = x <=. y
 let function ole (x : real) (y : real) : bool = x <=. y
end

module Reals__Ogt
 use real.RealInfix
 let function ogt__logic (x : real) (y : real) : bool = x >. y
 let function ogt (x : real) (y : real) : bool = x >. y
end

module Reals__Oge
 use real.RealInfix
 let function oge__logic (x : real) (y : real) : bool = x >=. y
 let function oge (x : real) (y : real) : bool = x >=. y
end
