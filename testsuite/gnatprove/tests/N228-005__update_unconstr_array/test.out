update_checks_1.adb:9:09: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
update_checks_1.adb:9:21: medium: array index check might fail (e.g. when A = (others => 0) and A'First = 2 and A'Last = 0 and I = 1) [reason for check: value must be a valid index into the array] [possible fix: subprogram at update_checks_1.ads:5 should mention I in a precondition]
update_checks_1.adb:14:09: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
update_checks_1.adb:14:23: medium: array index check might fail (e.g. when A = (others => 0) and A'First = 3 and A'Last = 0 and I = 1) [reason for check: result of addition must be a valid index into the array] [possible fix: subprogram at update_checks_1.ads:8 should mention I in a precondition]
update_checks_1.adb:14:23: medium: range check might fail (e.g. when I = 8) [reason for check: result of addition must fit in component type] [possible fix: subprogram at update_checks_1.ads:8 should mention I in a precondition]
update_checks_1.adb:19:09: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
update_checks_1.adb:19:23: medium: array index check might fail (e.g. when A = (others => 0) and A'First = 2 and A'Last = 0) [reason for check: value must be a valid index into the array] [possible fix: subprogram at update_checks_1.ads:11 should mention I in a precondition]
update_checks_1.adb:26:09: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
update_checks_1.adb:26:24: medium: array index check might fail (e.g. when A = (others => 0) and A'First = 2 and A'Last = 0) [reason for check: value must be a valid index into the array] [possible fix: subprogram at update_checks_1.ads:14 should mention I in a precondition]
update_checks_1.adb:26:37: medium: array index check might fail (e.g. when A = (others => 0) and A'First = 2 and A'Last = 0) [reason for check: value must be a valid index into the array] [possible fix: subprogram at update_checks_1.ads:14 should mention J and K in a precondition]
update_checks_1.adb:26:44: medium: array index check might fail (e.g. when A = (others => 0) and A'First = 2 and A'Last = 0 and L = 1) [reason for check: value must be a valid index into the array] [possible fix: subprogram at update_checks_1.ads:14 should mention L in a precondition]
update_checks_1.adb:29:04: warning: analyzing unreferenced procedure "P6"
update_checks_1.adb:33:09: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
update_checks_1.adb:33:27: medium: array index check might fail (e.g. when A = (others => 0) and A'First = 2 and A'Last = 0) [reason for check: value must be a valid index into the array]
update_checks_1.adb:51:09: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
update_checks_1.adb:51:21: info: index check proved (CVC4: 2 VC)
update_checks_1.adb:62:10: medium: array index check might fail (e.g. when A'First = 2 and I = 1 and New_Val = 0) [reason for check: value must be a valid index into the array] [possible fix: subprogram at update_checks_1.ads:23 should mention I in a precondition]
update_checks_1.adb:69:07: medium: range check might fail (e.g. when A'First = 3 and I = 2) [reason for check: slice bounds must fit in the underlying array] [possible fix: subprogram at update_checks_1.ads:26 should mention A and I in a precondition]
update_checks_1.adb:69:18: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
update_checks_1.adb:69:21: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
update_checks_1.adb:69:21: info: range check proved (CVC4: 2 VC)
update_checks_1.adb:69:24: info: range check proved (CVC4: 2 VC)
update_checks_1.adb:76:21: medium: array index check might fail (e.g. when I = 6) [reason for check: value must be a valid index into the array] [possible fix: subprogram at update_checks_1.ads:29 should mention I in a precondition]
update_checks_1.adb:76:21: medium: range check might fail (e.g. when I = 6) [reason for check: value must fit in component type] [possible fix: subprogram at update_checks_1.ads:29 should mention I in a precondition]
update_checks_1.adb:83:21: info: index check proved (CVC4: 2 VC)
update_checks_1.ads:6:19: info: postcondition proved (CVC4: 1 VC; Trivial: 1 VC)
update_checks_1.ads:9:19: info: postcondition proved (CVC4: 1 VC; Trivial: 1 VC)
update_checks_1.ads:9:39: info: range check proved (CVC4: 1 VC)
update_checks_1.ads:12:19: info: postcondition proved (CVC4: 1 VC; Trivial: 1 VC)
update_checks_1.ads:15:19: info: postcondition proved (CVC4: 1 VC; Trivial: 1 VC)
update_checks_1.ads:19:14: info: postcondition proved (CVC4: 1 VC; Trivial: 1 VC)
update_checks_1.ads:24:19: info: postcondition proved (CVC4: 1 VC)
update_checks_1.ads:24:22: info: index check proved (CVC4: 2 VC)
update_checks_1.ads:27:19: medium: postcondition might fail, cannot prove A (1 .. I) = (1 .. I => New_Val) (e.g. when A = (1 => -1, others => 0) and I = 2 and New_Val = 0)
update_checks_1.ads:27:19: medium: range check might fail (e.g. when A'First = 2 and I = 2) [reason for check: slice bounds must fit in the underlying array]
update_checks_1.ads:27:32: info: range check proved (CVC4: 2 VC)
update_checks_1.ads:27:35: info: range check proved (CVC4: 2 VC)
update_checks_1.ads:30:19: info: postcondition proved (CVC4: 1 VC; Trivial: 1 VC)
update_checks_1.ads:30:37: info: range check proved (CVC4: 1 VC)
update_checks_1.ads:33:19: info: postcondition proved (CVC4: 1 VC; Trivial: 1 VC)
