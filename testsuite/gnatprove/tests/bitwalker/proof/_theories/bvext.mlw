module Bvext__nth
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Standard__natural
 use        Interfaces__unsigned_64

 function nth__logic (value : BV64.t) (pos : int)  :bool
   = BV64.nth value pos

 val nth  (value : BV64.t) (pos : int)  :bool
  requires { true }
  ensures  { result = nth__logic value pos }
end

module Bvext__nth__2
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        Standard__natural
 use        Interfaces__unsigned_8

 function nth__2__logic (value : BV8.t) (pos : int)  :bool
   = BV8.nth value pos

 val nth__2  (value : BV8.t) (pos : int)  :bool
  requires { true }
  ensures { result = nth__2__logic value pos }
end

module Bvext__nth_bv
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Standard__natural
 use        Interfaces__unsigned_64

 function nth_bv__logic (value pos : BV64.t)  :bool
   = BV64.nth_bv value pos

 val nth_bv  (value pos : BV64.t)  :bool
  requires { true }
  ensures  { result = nth_bv__logic value pos }
end

module Bvext__nth_bv__2
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        Standard__natural
 use        Interfaces__unsigned_8

 function nth_bv__2__logic (value pos : BV8.t)  :bool
   = BV8.nth_bv value pos

 val nth_bv__2  (value pos : BV8.t)  :bool
  requires { true }
  ensures { result = nth_bv__2__logic value pos }

end

module Bvext__eq_sub
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function eq_sub__logic (a : BV64.t) (b : BV64.t) (i n : int) : bool
          = BV64.eq_sub a b i n

 val eq_sub (a : BV64.t) (b : BV64.t) (i n : int) : bool
  requires { true }
  ensures { (result = (eq_sub__logic a b i n)) }
end

module Bvext__eq_sub_bv
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function eq_sub_bv__logic (a : BV64.t) (b : BV64.t) (i n : BV64.t) : bool
          = BV64.eq_sub_bv a b i n

 val eq_sub_bv (a : BV64.t) (b : BV64.t) (i n : BV64.t) : bool
  requires { true }
  ensures { (result = (eq_sub_bv__logic a b i n)) }
end

module Bvext__eq
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 predicate eq__logic (a : BV64.t) (b : BV64.t)
          = (a = b)

 val eq (a : BV64.t) (b : BV64.t) : bool
  requires { true }
  ensures { (result = (eq__logic a b)) }
end
