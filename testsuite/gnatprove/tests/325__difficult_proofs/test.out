p.ads:5:13: info: implicit aspect Always_Terminates on "Is_Prime" has been proved, subprogram will terminate
p.ads:6:50: info: division check proved (CVC5: 1 VC)
p.ads:8:19: info: assertion proved (CVC5: 1 VC)
p.ads:9:19: medium: assertion might fail
p.ads:10:19: medium: assertion might fail
=========================
Summary of SPARK analysis
=========================

-
SPARK Analysis results Total Flow Provers Justified Unproved
-
Data Dependencies . . . . .
Flow Dependencies . . . . .
Initialization . . . . .
Non-Aliasing . . . . .
Run-time Checks 1 . 1 . .
Assertions 3 . 1 . 2
Functional Contracts . . . . .
LSP Verification . . . . .
Termination 1 1 . . .
Concurrency . . . . .
-
Total 5 1 (20%) 2 (40%) . 2 (40%)


max steps used for successful proof: 19779

============================
Most difficult proved checks
============================

p.ads:8:19: assertion proved in max nnn seconds

========================
Detailed analysis report
========================

Analyzed 1 unit
in unit p, 2 subprograms and packages out of 2 analyzed
 P at p.ads:1 flow analyzed (0 errors, 0 checks, 0 warnings and 0 pragma Assume statements) and not proved, 1 checks out of 3 proved
 P.Is_Prime at p.ads:5 flow analyzed (0 errors, 0 checks, 0 warnings and 0 pragma Assume statements) and proved (1 checks)
absence of run-time errors of P.Is_Prime fully established
