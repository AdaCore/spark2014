<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="4">
<prover id="0" name="CVC4" version="1.5-gnatprove" timelimit="60" steplimit="0" memlimit="0"/>
<prover id="1" name="Z3" version="4.5.1-gnatprove" timelimit="10" steplimit="0" memlimit="0"/>
<file name="../../../gnatprove/use_ordered_maps.mlw">
<theory name="Standard__short_short_integer" proved="true">
</theory>
<theory name="Standard__short_short_integer__rep" proved="true">
</theory>
<theory name="Standard__short_integer" proved="true">
</theory>
<theory name="Standard__short_integer__rep" proved="true">
</theory>
<theory name="Standard__integer" proved="true">
</theory>
<theory name="Standard__integer__rep" proved="true">
</theory>
<theory name="Standard__long_integer" proved="true">
</theory>
<theory name="Standard__long_integer__rep" proved="true">
</theory>
<theory name="Standard__long_long_integer" proved="true">
</theory>
<theory name="Standard__long_long_integer__rep" proved="true">
</theory>
<theory name="Standard__natural" proved="true">
</theory>
<theory name="Standard__natural__rep" proved="true">
</theory>
<theory name="Standard__positive" proved="true">
</theory>
<theory name="Standard__positive__rep" proved="true">
</theory>
<theory name="Standard__short_float" proved="true">
</theory>
<theory name="Standard__short_float__rep" proved="true">
</theory>
<theory name="Standard__float" proved="true">
</theory>
<theory name="Standard__float__rep" proved="true">
</theory>
<theory name="Standard__long_float" proved="true">
</theory>
<theory name="Standard__long_float__rep" proved="true">
</theory>
<theory name="Standard__character" proved="true">
</theory>
<theory name="Standard__character__rep" proved="true">
</theory>
<theory name="Standard__wide_character" proved="true">
</theory>
<theory name="Standard__wide_character__rep" proved="true">
</theory>
<theory name="Standard__wide_wide_character" proved="true">
</theory>
<theory name="Standard__wide_wide_character__rep" proved="true">
</theory>
<theory name="Array__Int__Standard__character" proved="true">
</theory>
<theory name="Array__Int__Standard__character__Concat" proved="true">
</theory>
<theory name="Array__Int__Standard__character_Comp" proved="true">
</theory>
<theory name="Standard__string" proved="true">
</theory>
<theory name="Array__Int__Standard__wide_character" proved="true">
</theory>
<theory name="Array__Int__Standard__wide_character__Concat" proved="true">
</theory>
<theory name="Array__Int__Standard__wide_character_Comp" proved="true">
</theory>
<theory name="Standard__wide_string" proved="true">
</theory>
<theory name="Array__Int__Standard__wide_wide_character" proved="true">
</theory>
<theory name="Array__Int__Standard__wide_wide_character__Concat" proved="true">
</theory>
<theory name="Array__Int__Standard__wide_wide_character_Comp" proved="true">
</theory>
<theory name="Standard__wide_wide_string" proved="true">
</theory>
<theory name="Standard__duration" proved="true">
</theory>
<theory name="Standard__integer_8" proved="true">
</theory>
<theory name="Standard__integer_8__rep" proved="true">
</theory>
<theory name="Standard__integer_16" proved="true">
</theory>
<theory name="Standard__integer_16__rep" proved="true">
</theory>
<theory name="Standard__integer_32" proved="true">
</theory>
<theory name="Standard__integer_32__rep" proved="true">
</theory>
<theory name="Standard__integer_64" proved="true">
</theory>
<theory name="Standard__integer_64__rep" proved="true">
</theory>
<theory name="Standard__universal_integer" proved="true">
</theory>
<theory name="Standard__universal_integer__rep" proved="true">
</theory>
<theory name="Ada__containers__hash_type" proved="true">
</theory>
<theory name="Ada__containers__hash_type__rep" proved="true">
</theory>
<theory name="Ada__containers__Tcount_typeB" proved="true">
</theory>
<theory name="Ada__containers__Tcount_typeB__rep" proved="true">
</theory>
<theory name="Ada__containers__count_type" proved="true">
</theory>
<theory name="Ada__containers__count_type__rep" proved="true">
</theory>
<theory name="System__name" proved="true">
</theory>
<theory name="System__name__rep" proved="true">
</theory>
<theory name="System__system_name" proved="true">
</theory>
<theory name="System__address" proved="true">
</theory>
<theory name="System__address__rep" proved="true">
</theory>
<theory name="System__null_address" proved="true">
</theory>
<theory name="System__Olt__left" proved="true">
</theory>
<theory name="System__Olt__left___axiom" proved="true">
</theory>
<theory name="System__Olt__right" proved="true">
</theory>
<theory name="System__Olt__right___axiom" proved="true">
</theory>
<theory name="System__Olt" proved="true">
</theory>
<theory name="System__Ole__left" proved="true">
</theory>
<theory name="System__Ole__left___axiom" proved="true">
</theory>
<theory name="System__Ole__right" proved="true">
</theory>
<theory name="System__Ole__right___axiom" proved="true">
</theory>
<theory name="System__Ole" proved="true">
</theory>
<theory name="System__Ogt__left" proved="true">
</theory>
<theory name="System__Ogt__left___axiom" proved="true">
</theory>
<theory name="System__Ogt__right" proved="true">
</theory>
<theory name="System__Ogt__right___axiom" proved="true">
</theory>
<theory name="System__Ogt" proved="true">
</theory>
<theory name="System__Oge__left" proved="true">
</theory>
<theory name="System__Oge__left___axiom" proved="true">
</theory>
<theory name="System__Oge__right" proved="true">
</theory>
<theory name="System__Oge__right___axiom" proved="true">
</theory>
<theory name="System__Oge" proved="true">
</theory>
<theory name="System__Oeq__left" proved="true">
</theory>
<theory name="System__Oeq__left___axiom" proved="true">
</theory>
<theory name="System__Oeq__right" proved="true">
</theory>
<theory name="System__Oeq__right___axiom" proved="true">
</theory>
<theory name="System__Oeq" proved="true">
</theory>
<theory name="System__bit_order" proved="true">
</theory>
<theory name="System__bit_order__rep" proved="true">
</theory>
<theory name="System__default_bit_order" proved="true">
</theory>
<theory name="System__max_priority" proved="true">
</theory>
<theory name="System__max_interrupt_priority" proved="true">
</theory>
<theory name="System__any_priority" proved="true">
</theory>
<theory name="System__any_priority__rep" proved="true">
</theory>
<theory name="System__priority" proved="true">
</theory>
<theory name="System__priority__rep" proved="true">
</theory>
<theory name="System__interrupt_priority" proved="true">
</theory>
<theory name="System__interrupt_priority__rep" proved="true">
</theory>
<theory name="System__default_priority" proved="true">
</theory>
<theory name="System__backend_divide_checks" proved="true">
</theory>
<theory name="System__backend_overflow_checks" proved="true">
</theory>
<theory name="System__command_line_args" proved="true">
</theory>
<theory name="System__configurable_run_time" proved="true">
</theory>
<theory name="System__denorm" proved="true">
</theory>
<theory name="System__duration_32_bits" proved="true">
</theory>
<theory name="System__exit_status_supported" proved="true">
</theory>
<theory name="System__fractional_fixed_ops" proved="true">
</theory>
<theory name="System__frontend_layout" proved="true">
</theory>
<theory name="System__machine_overflows" proved="true">
</theory>
<theory name="System__machine_rounds" proved="true">
</theory>
<theory name="System__preallocated_stacks" proved="true">
</theory>
<theory name="System__signed_zeros" proved="true">
</theory>
<theory name="System__stack_check_default" proved="true">
</theory>
<theory name="System__stack_check_probes" proved="true">
</theory>
<theory name="System__stack_check_limits" proved="true">
</theory>
<theory name="System__support_aggregates" proved="true">
</theory>
<theory name="System__support_atomic_primitives" proved="true">
</theory>
<theory name="System__support_composite_assign" proved="true">
</theory>
<theory name="System__support_composite_compare" proved="true">
</theory>
<theory name="System__support_long_shifts" proved="true">
</theory>
<theory name="System__always_compatible_rep" proved="true">
</theory>
<theory name="System__suppress_standard_library" proved="true">
</theory>
<theory name="System__use_ada_main_program_name" proved="true">
</theory>
<theory name="System__frontend_exceptions" proved="true">
</theory>
<theory name="System__zcx_by_default" proved="true">
</theory>
<theory name="System__finalization_root__root_controlled__rep" proved="true">
</theory>
<theory name="System__finalization_root__root_controlled" proved="true">
</theory>
<theory name="Ada__finalization__controlled" proved="true">
</theory>
<theory name="Ada__finalization__limited_controlled" proved="true">
</theory>
<theory name="System__atomic_counters__atomic_unsigned" proved="true">
</theory>
<theory name="System__atomic_counters__atomic_unsigned__rep" proved="true">
</theory>
<theory name="System__atomic_counters__atomic_counter__rep" proved="true">
</theory>
<theory name="System__atomic_counters__atomic_counter" proved="true">
</theory>
<theory name="System__atomic_counters__is_one__item" proved="true">
</theory>
<theory name="System__atomic_counters__is_one__item___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__is_one" proved="true">
</theory>
<theory name="Ada__containers__helpers__tamper_counts__rep" proved="true">
</theory>
<theory name="Ada__containers__helpers__tamper_counts" proved="true">
</theory>
<theory name="Ada__containers__red_black_trees__color_type" proved="true">
</theory>
<theory name="Ada__containers__red_black_trees__color_type__rep" proved="true">
</theory>
<theory name="Ada__streams__root_stream_type__rep" proved="true">
</theory>
<theory name="Ada__streams__root_stream_type" proved="true">
</theory>
<theory name="Ada__streams__stream_element" proved="true">
</theory>
<theory name="Ada__streams__stream_element__rep" proved="true">
</theory>
<theory name="Ada__streams__Tstream_element_offsetB" proved="true">
</theory>
<theory name="Ada__streams__Tstream_element_offsetB__rep" proved="true">
</theory>
<theory name="Ada__streams__stream_element_offset" proved="true">
</theory>
<theory name="Ada__streams__stream_element_offset__rep" proved="true">
</theory>
<theory name="Ada__streams__stream_element_count" proved="true">
</theory>
<theory name="Ada__streams__stream_element_count__rep" proved="true">
</theory>
<theory name="Array__Int__Ada__streams__stream_element" proved="true">
</theory>
<theory name="Array__Int__Ada__streams__stream_element__Concat" proved="true">
</theory>
<theory name="Array__Int__Ada__streams__stream_element_Comp" proved="true">
</theory>
<theory name="Ada__streams__stream_element_array" proved="true">
</theory>
<theory name="Ada__streams__write__item" proved="true">
</theory>
<theory name="Ada__streams__write__item___axiom" proved="true">
</theory>
<theory name="Ada__streams__write_sea__v" proved="true">
</theory>
<theory name="Ada__streams__write_sea__v___axiom" proved="true">
</theory>
<theory name="Ada__streams__stream_element_arraySW__v" proved="true">
</theory>
<theory name="Ada__streams__stream_element_arraySW__v___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__hash__id" proved="true">
</theory>
<theory name="Use_ordered_maps__hash__id___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__hash" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__key_type" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__key_type__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element_type" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element_type__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__equivalent_keys__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__equivalent_keys__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__equivalent_keys__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__equivalent_keys__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__Olt__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__Olt__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__Olt__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__Olt__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__Olt" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__equivalent_keys" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__map__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__map" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__cursor__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__cursor" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__no_element" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__empty_map" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__empty_map___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__length__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__length__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__length" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__positive_count_type" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__positive_count_type__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__key_type" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__key_type__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__element_type" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__element_type__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__enable_handling_of_equivalence" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__map__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__map" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_key__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_key__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_key__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_key__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__private_key__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__private_key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_first__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_first__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_first" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_next__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_next__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_next__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_next__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_has_element__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_has_element__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_has_element__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_has_element__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_has_element" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_next" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_element__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_element__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_element__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_element__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_element" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_key__L27s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_key__L27s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__get__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__get__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__get__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__get__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__witness__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__witness__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__witness__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__witness__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_witness__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_witness__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_witness__witness" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_witness__witness___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_witness" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__witness" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__w_get__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__w_get__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__w_get__witness" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__w_get__witness___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__w_get" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__get__L28s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__get__L28s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__get" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__length__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__length__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__length" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Ole__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Ole__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Ole__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Ole__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Ole__L29s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Ole__L29s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Ole" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Oeq__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Oeq__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Oeq__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Oeq__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Oeq__L30s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Oeq__L30s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Oeq__L31s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Oeq__L31s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Oeq" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__is_empty__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__is_empty__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__is_empty__L32s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__is_empty__L32s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__is_empty" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included__L33s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included__L33s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__same_keys__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__same_keys__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__same_keys__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__same_keys__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__same_keys" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__new_key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__new_key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__L34s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__L34s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__2__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__2__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__2__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__2__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__2__x" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__2__x___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__2__y" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__2__y___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__2__L35s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__2__L35s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__2" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__new_key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__new_key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__L36s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__L36s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__2__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__2__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__2__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__2__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__2__x" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__2__x___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__2__y" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__2__y___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__2__L37s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__2__L37s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__2" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__add__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__add__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__add__new_key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__add__new_key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__add__new_item" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__add__new_item___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__add" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__set__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__set__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__set__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__set__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__set__new_item" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__set__new_item___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__set" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__index_type" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__index_type__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__element_type" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__element_type__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__extended_index" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__extended_index__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__sequence__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__sequence" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__length__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__length__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__length" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__get__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__get__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__get__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__get__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__last__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__last__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__last" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__get" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__first" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Oeq__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Oeq__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Oeq__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Oeq__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Oeq__L93s__T94s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Oeq" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Olt__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Olt__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Olt__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Olt__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Olt__L95s__T96s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Olt" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Ole__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Ole__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Ole__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Ole__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Ole__L97s__T98s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Ole" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__contains__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__contains__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__contains__fst" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__contains__fst___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__contains__lst" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__contains__lst___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__contains__item" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__contains__item___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__contains__L99s__T100s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__contains" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__constant_range__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__constant_range__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__constant_range__fst" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__constant_range__fst___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__constant_range__lst" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__constant_range__lst___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__constant_range__item" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__constant_range__item___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__constant_range__L101s__T102s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__constant_range" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__L103s__T104s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__2__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__2__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__2__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__2__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__2__x" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__2__x___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__2__y" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__2__y___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__2__L105s__T106s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__2" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_equal__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_equal__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_equal__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_equal__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_equal__fst" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_equal__fst___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_equal__lst" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_equal__lst___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_equal__L107s__T108s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_equal" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__fst" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__fst___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__lst" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__lst___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__offset" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__offset___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__L109s__T110s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__L111s__T112s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__set__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__set__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__set__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__set__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__set__new_item" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__set__new_item___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__set" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add__new_item" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add__new_item___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add__2__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add__2__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add__2__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add__2__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add__2__new_item" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add__2__new_item___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add__2" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__remove__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__remove__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__remove__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__remove__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__remove" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_first__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_first__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_first" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_has_element__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_has_element__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_has_element__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_has_element__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_has_element" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_next__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_next__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_next__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_next__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_next" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_bigger_than_range__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_bigger_than_range__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_bigger_than_range__fst" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_bigger_than_range__fst___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_bigger_than_range__lst" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_bigger_than_range__lst___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_bigger_than_range__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_bigger_than_range__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_bigger_than_range__L184s__T185s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_bigger_than_range" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_smaller_than_range__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_smaller_than_range__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_smaller_than_range__fst" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_smaller_than_range__fst___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_smaller_than_range__lst" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_smaller_than_range__lst___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_smaller_than_range__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_smaller_than_range__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_smaller_than_range__L186s__T187s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_smaller_than_range" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_is_find__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_is_find__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_is_find__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_is_find__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_is_find__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_is_find__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_is_find" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__find__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__find__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__find__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__find__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__find" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__key_type" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__element_type" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__element_type__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__enable_handling_of_equivalence" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__map__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__map" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_key__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_key__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_key__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_key__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__private_key__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__private_key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_first__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_first__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_first" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_next__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_next__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_next__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_next__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_has_element__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_has_element__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_has_element__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_has_element__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_has_element" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_next" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_element__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_element__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_element__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_element__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_element" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_key__L153s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_key__L153s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__get__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__get__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__get__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__get__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__witness__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__witness__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__witness__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__witness__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_witness__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_witness__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_witness__witness" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_witness__witness___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_witness" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__witness" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__w_get__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__w_get__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__w_get__witness" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__w_get__witness___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__w_get" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__get__L154s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__get__L154s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__get" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__length__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__length__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__length" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Ole__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Ole__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Ole__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Ole__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Ole__L155s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Ole__L155s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Ole" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Oeq__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Oeq__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Oeq__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Oeq__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Oeq__L156s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Oeq__L156s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Oeq__L157s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Oeq__L157s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Oeq" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__is_empty__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__is_empty__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__is_empty__L158s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__is_empty__L158s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__is_empty" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included__L159s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included__L159s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__same_keys__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__same_keys__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__same_keys__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__same_keys__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__same_keys" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__new_key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__new_key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__L160s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__L160s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__2__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__2__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__2__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__2__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__2__x" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__2__x___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__2__y" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__2__y___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__2__L161s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__2__L161s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__2" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__new_key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__new_key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__L162s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__L162s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__2__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__2__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__2__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__2__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__2__x" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__2__x___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__2__y" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__2__y___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__2__L163s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__2__L163s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__2" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__add__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__add__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__add__new_key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__add__new_key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__add__new_item" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__add__new_item___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__add" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__set__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__set__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__set__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__set__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__set__new_item" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__set__new_item___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__set" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted__small" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted__small___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted__big" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted__big___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted__cut" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted__cut___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted__count" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted__count___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted__L188s__i" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted__L188s__i___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted__L189s__i" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted__L189s__i___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__model__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__model__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__model" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__keys__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__keys__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__keys__L190s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__keys__L190s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__keys__L191s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__keys__L191s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__keys__L192s__T193s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__keys" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__positions__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__positions__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__positions__L194s__i" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__positions__L194s__i___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__positions__L194s__L195s__j" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__positions__L194s__L195s__j___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__positions" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__lift_abstraction_level__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__lift_abstraction_level__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__lift_abstraction_level__L196s__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__lift_abstraction_level__L196s__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__lift_abstraction_level__L196s__L197s__i" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__lift_abstraction_level__L196s__L197s__i___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__Oeq__left" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__Oeq__left___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__Oeq__right" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__Oeq__right___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__Oeq" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__is_empty__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__is_empty__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__is_empty" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__assign__source" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__assign__source___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__copy__source" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__copy__source___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__copy__capacity" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__copy__capacity___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__copy" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__key__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__key__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__key__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__key__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__has_element__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__has_element__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__has_element__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__has_element__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__has_element" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace_element__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace_element__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace_element__new_item" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace_element__new_item___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__new_item" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__new_item___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__contains__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__contains__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__contains__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__contains__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__contains" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__2__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__2__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__2__new_item" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__2__new_item___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__include__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__include__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__include__new_item" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__include__new_item___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element__2__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element__2__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element__2__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element__2__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element__2" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace__new_item" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace__new_item___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__exclude__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__exclude__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__first_key__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__first_key__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__first_key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__last_key__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__last_key__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__last_key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__first__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__first__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__first" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__first_element__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__first_element__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__first_element" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__last__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__last__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__last" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__last_element__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__last_element__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__last_element" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__next__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__next__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__next__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__next__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__next" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__next__2__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__next__2__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__previous__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__previous__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__previous__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__previous__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__previous" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__previous__2__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__previous__2__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__find__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__find__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__find__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__find__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__find" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__floor__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__floor__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__floor__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__floor__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__floor" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__ceiling__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__ceiling__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__ceiling__key" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__ceiling__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__ceiling" proved="true">
</theory>
<theory name="Use_ordered_maps__my_find__s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_find__s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_find__k" proved="true">
</theory>
<theory name="Use_ordered_maps__my_find__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_find" proved="true">
</theory>
<theory name="Use_ordered_maps__my_contains__s" proved="true">
</theory>
<theory name="Use_ordered_maps__my_contains__s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_contains__k" proved="true">
</theory>
<theory name="Use_ordered_maps__my_contains__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_contains" proved="true">
</theory>
<theory name="Use_ordered_maps__f__e" proved="true">
</theory>
<theory name="Use_ordered_maps__f__e___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__f" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__s" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L287s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L287s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L287s__L288s__l" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L287s__L288s__l___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L289s__l" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L289s__l___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L289s__L290s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L289s__L290s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__s" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L291s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L291s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L292s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L292s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L293s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L293s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L293s__L294s__l" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L293s__L294s__l___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L295s__l" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L295s__l___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L295s__L296s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L295s__L296s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__L297s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__L297s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint__s1" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint__s1___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint__s2" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint__s2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint__L298s__e" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint__L298s__e___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint" proved="true">
</theory>
<theory name="Use_ordered_maps__prop__e" proved="true">
</theory>
<theory name="Use_ordered_maps__prop__e___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__prop" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__s2" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__s2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__L299s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__L299s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__L300s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__L300s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__L301s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__L301s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__insert_count__L302s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__insert_count__L302s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__insert_count__L303s__T304s" proved="true">
</theory>
<theory name="Use_ordered_maps__insert_count__L303s__T304s__rep" proved="true">
</theory>
<theory name="Use_ordered_maps__q__e" proved="true">
</theory>
<theory name="Use_ordered_maps__q__e___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__q" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_model__s" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_model__s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_model__L305s__T306s" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_model__L307s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_model__L307s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_keys__s" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_keys__s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_keys__L308s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_keys__L308s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_keys__L309s__T310s" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_cursors__s" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_cursors__s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_cursors__L311s__T312s" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_cursors__L313s__cu" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_cursors__L313s__cu___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_keys__s" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_keys__s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_keys__L314s__cu" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_keys__L314s__cu___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_keys__L315s__T316s" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_cursors__s" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_cursors__s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_cursors__L317s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_cursors__L317s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_cursors__L318s__cu" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_cursors__L318s__cu___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_model__s" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_model__s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_model__L319s__cu" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_model__L319s__cu___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_model__L320s__k" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_model__L320s__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__mapDefault_Initial_Condition___object" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__mapDefault_Initial_Condition___object___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__mapDefault_Initial_Condition___object" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__mapDefault_Initial_Condition___object___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__mapDefault_Initial_Condition___object" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__mapDefault_Initial_Condition___object___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__sequenceDefault_Initial_Condition___object" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__sequenceDefault_Initial_Condition___object___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_find__L_1__L3b__T4b" proved="true">
</theory>
<theory name="Use_ordered_maps__my_find__L_1__L1b__T2b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L10b__T11b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L10b__L12b__k" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L10b__L12b__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L7b__T8b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L16b__k" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L16b__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L16b__L17b__T18b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L13b__L14b__T15b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L21b__T22b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L19b__T20b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L_3__L25b__T26b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L_3__L23b__T24b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L_3__L30b__k" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L_3__L30b__k___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L_3__L30b__L31b__T32b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L_3__L27b__L28b__T29b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L_4__L35b__T36b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L_4__L33b__T34b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L_4__L39b__T40b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L_4__L37b__T38b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__L_5__L43b__T44b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__L_5__L41b__T42b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__L_5__L47b__T48b" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__L_5__L45b__T46b" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint__L_6__L51b__T52b" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint__L_6__L49b__T50b" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__L_7__L56b__k" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__L_7__L56b__k___axiom" proved="true">
</theory>
<theory name="System__finalization_root__adjust__object" proved="true">
</theory>
<theory name="System__finalization_root__adjust__object___axiom" proved="true">
</theory>
<theory name="System__finalization_root__finalize__object" proved="true">
</theory>
<theory name="System__finalization_root__finalize__object___axiom" proved="true">
</theory>
<theory name="System__finalization_root__initialize__object" proved="true">
</theory>
<theory name="System__finalization_root__initialize__object___axiom" proved="true">
</theory>
<theory name="Ada__finalization__initialize__object" proved="true">
</theory>
<theory name="Ada__finalization__initialize__object___axiom" proved="true">
</theory>
<theory name="Ada__finalization__adjust__object" proved="true">
</theory>
<theory name="Ada__finalization__adjust__object___axiom" proved="true">
</theory>
<theory name="Ada__finalization__finalize__object" proved="true">
</theory>
<theory name="Ada__finalization__finalize__object___axiom" proved="true">
</theory>
<theory name="Ada__finalization__initialize__2__object" proved="true">
</theory>
<theory name="Ada__finalization__initialize__2__object___axiom" proved="true">
</theory>
<theory name="Ada__finalization__finalize__2__object" proved="true">
</theory>
<theory name="Ada__finalization__finalize__2__object___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__increment__item" proved="true">
</theory>
<theory name="System__atomic_counters__increment__item___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__decrement__item" proved="true">
</theory>
<theory name="System__atomic_counters__decrement__item___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__initialize__item" proved="true">
</theory>
<theory name="System__atomic_counters__initialize__item___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__increment__2__item" proved="true">
</theory>
<theory name="System__atomic_counters__increment__2__item___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__decrement__2__item" proved="true">
</theory>
<theory name="System__atomic_counters__decrement__2__item___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__decrement__3__item" proved="true">
</theory>
<theory name="System__atomic_counters__decrement__3__item___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__Oadd__left" proved="true">
</theory>
<theory name="System__atomic_counters__Oadd__left___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__Oadd__right" proved="true">
</theory>
<theory name="System__atomic_counters__Oadd__right___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__Osubtract__left" proved="true">
</theory>
<theory name="System__atomic_counters__Osubtract__left___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__Osubtract__right" proved="true">
</theory>
<theory name="System__atomic_counters__Osubtract__right___axiom" proved="true">
</theory>
<theory name="Ada__streams__read__stream" proved="true">
</theory>
<theory name="Ada__streams__read__stream___axiom" proved="true">
</theory>
<theory name="Ada__streams__read__item" proved="true">
</theory>
<theory name="Ada__streams__read__item___axiom" proved="true">
</theory>
<theory name="Ada__streams__read__last" proved="true">
</theory>
<theory name="Ada__streams__read__last___axiom" proved="true">
</theory>
<theory name="Ada__streams__write__stream" proved="true">
</theory>
<theory name="Ada__streams__write__stream___axiom" proved="true">
</theory>
<theory name="Ada__streams__read_sea__v" proved="true">
</theory>
<theory name="Ada__streams__read_sea__v___axiom" proved="true">
</theory>
<theory name="Ada__streams__stream_element_arraySR__v" proved="true">
</theory>
<theory name="Ada__streams__stream_element_arraySR__v___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__clear__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__clear__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__assign__target" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__assign__target___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace_element__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace_element__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__move__target" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__move__target___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__move__source" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__move__source___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__inserted" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__inserted___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__2__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__2__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__include__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__include__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__exclude__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__exclude__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete__2__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete__2__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete__2__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete__2__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete_first__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete_first__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete_last__container" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete_last__container___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__next__2__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__next__2__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__previous__2__position" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__previous__2__position___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__r" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__r___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__r" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__r___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__s" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__s" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__s1" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__s1___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__insert_count__m" proved="true">
</theory>
<theory name="Use_ordered_maps__insert_count__m___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_find__cu" proved="true">
</theory>
<theory name="Use_ordered_maps__my_find__cu___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__cu" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__cu___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__cu" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__cu___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__cu" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__cu___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__cu" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__cu___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint__cu" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint__cu___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__cu" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__cu___axiom" proved="true">
</theory>
<theory name="Standard__short_short_integer___axiom" proved="true">
</theory>
<theory name="Standard__short_integer___axiom" proved="true">
</theory>
<theory name="Standard__integer___axiom" proved="true">
</theory>
<theory name="Standard__long_integer___axiom" proved="true">
</theory>
<theory name="Standard__long_long_integer___axiom" proved="true">
</theory>
<theory name="Standard__natural___axiom" proved="true">
</theory>
<theory name="Standard__positive___axiom" proved="true">
</theory>
<theory name="Standard__short_float___axiom" proved="true">
</theory>
<theory name="Standard__float___axiom" proved="true">
</theory>
<theory name="Standard__long_float___axiom" proved="true">
</theory>
<theory name="Standard__character___axiom" proved="true">
</theory>
<theory name="Standard__wide_character___axiom" proved="true">
</theory>
<theory name="Standard__wide_wide_character___axiom" proved="true">
</theory>
<theory name="Standard__string___axiom" proved="true">
</theory>
<theory name="Standard__wide_string___axiom" proved="true">
</theory>
<theory name="Standard__wide_wide_string___axiom" proved="true">
</theory>
<theory name="Standard__duration___axiom" proved="true">
</theory>
<theory name="Standard__integer_8___axiom" proved="true">
</theory>
<theory name="Standard__integer_16___axiom" proved="true">
</theory>
<theory name="Standard__integer_32___axiom" proved="true">
</theory>
<theory name="Standard__integer_64___axiom" proved="true">
</theory>
<theory name="Standard__universal_integer___axiom" proved="true">
</theory>
<theory name="System__finalization_root__adjust" proved="true">
</theory>
<theory name="System__finalization_root__finalize" proved="true">
</theory>
<theory name="System__finalization_root__initialize" proved="true">
</theory>
<theory name="Ada__finalization__initialize" proved="true">
</theory>
<theory name="Ada__finalization__adjust" proved="true">
</theory>
<theory name="Ada__finalization__finalize" proved="true">
</theory>
<theory name="Ada__finalization__initialize__2" proved="true">
</theory>
<theory name="Ada__finalization__finalize__2" proved="true">
</theory>
<theory name="System__atomic_counters__increment" proved="true">
</theory>
<theory name="System__atomic_counters__initialize" proved="true">
</theory>
<theory name="System__atomic_counters__increment__2" proved="true">
</theory>
<theory name="System__atomic_counters__decrement__3" proved="true">
</theory>
<theory name="Ada__streams__read" proved="true">
</theory>
<theory name="Ada__streams__write" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__lift_abstraction_level" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__clear" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__assign" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace_element" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__move" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__2" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__include" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__exclude" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete__2" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete_first" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete_last" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__next__2" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__previous__2" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop" proved="true">
</theory>
<theory name="Use_ordered_maps__insert_count" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_model" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_keys" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_cursors" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_keys" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_cursors" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_model" proved="true">
</theory>
<theory name="Use_ordered_maps__my_find__L_1" proved="true">
</theory>
<theory name="Use_ordered_maps__my_find__L_1___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L_3" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L_3___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L_4" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L_4___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__L_5" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__L_5___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint__L_6" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint__L_6___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__L_7" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop__L_7___axiom" proved="true">
</theory>
<theory name="Ada__containers__hash_type___axiom" proved="true">
</theory>
<theory name="Ada__containers__Tcount_typeB___axiom" proved="true">
</theory>
<theory name="Ada__containers__count_type___axiom" proved="true">
</theory>
<theory name="System__name___axiom" proved="true">
</theory>
<theory name="System__address___axiom" proved="true">
</theory>
<theory name="System__bit_order___axiom" proved="true">
</theory>
<theory name="System__any_priority___axiom" proved="true">
</theory>
<theory name="System__priority___axiom" proved="true">
</theory>
<theory name="System__interrupt_priority___axiom" proved="true">
</theory>
<theory name="System__finalization_root__root_controlled___axiom" proved="true">
</theory>
<theory name="Ada__finalization__controlled___axiom" proved="true">
</theory>
<theory name="Ada__finalization__limited_controlled___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__atomic_unsigned___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__atomic_counter___axiom" proved="true">
</theory>
<theory name="Ada__containers__helpers__tamper_counts___axiom" proved="true">
</theory>
<theory name="Ada__containers__red_black_trees__color_type___axiom" proved="true">
</theory>
<theory name="Ada__streams__root_stream_type___axiom" proved="true">
</theory>
<theory name="Ada__streams__stream_element___axiom" proved="true">
</theory>
<theory name="Ada__streams__Tstream_element_offsetB___axiom" proved="true">
</theory>
<theory name="Ada__streams__stream_element_offset___axiom" proved="true">
</theory>
<theory name="Ada__streams__stream_element_count___axiom" proved="true">
</theory>
<theory name="Ada__streams__stream_element_array___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__key_type___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element_type___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__map___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__cursor___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__positive_count_type___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__key_type___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__element_type___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__map___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__private_key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__index_type___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__element_type___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__extended_index___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__sequence___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Oeq__L93s__T94s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Olt__L95s__T96s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Ole__L97s__T98s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__contains__L99s__T100s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__constant_range__L101s__T102s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__L103s__T104s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__2__L105s__T106s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_equal__L107s__T108s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__L109s__T110s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__L111s__T112s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_bigger_than_range__L184s__T185s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_smaller_than_range__L186s__T187s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__key_type___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__element_type___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__map___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__private_key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__keys__L192s__T193s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__insert_count__L303s__T304s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_model__L305s__T306s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_keys__L309s__T310s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_cursors__L311s__T312s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_keys__L315s__T316s___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_find__L_1__L3b__T4b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_find__L_1__L1b__T2b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L10b__T11b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L7b__T8b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L16b__L17b__T18b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L13b__L14b__T15b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L21b__T22b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f__L_2__L19b__T20b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L_3__L25b__T26b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L_3__L23b__T24b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L_3__L30b__L31b__T32b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2__L_3__L27b__L28b__T29b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L_4__L35b__T36b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L_4__L33b__T34b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L_4__L39b__T40b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3__L_4__L37b__T38b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__L_5__L43b__T44b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__L_5__L41b__T42b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__L_5__L47b__T48b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4__L_5__L45b__T46b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint__L_6__L51b__T52b___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint__L_6__L49b__T50b___axiom" proved="true">
</theory>
<theory name="System__system_name___axiom" proved="true">
</theory>
<theory name="System__default_bit_order___axiom" proved="true">
</theory>
<theory name="System__max_priority___axiom" proved="true">
</theory>
<theory name="System__max_interrupt_priority___axiom" proved="true">
</theory>
<theory name="System__default_priority___axiom" proved="true">
</theory>
<theory name="System__null_address___axiom" proved="true">
</theory>
<theory name="System__backend_divide_checks___axiom" proved="true">
</theory>
<theory name="System__backend_overflow_checks___axiom" proved="true">
</theory>
<theory name="System__command_line_args___axiom" proved="true">
</theory>
<theory name="System__configurable_run_time___axiom" proved="true">
</theory>
<theory name="System__denorm___axiom" proved="true">
</theory>
<theory name="System__duration_32_bits___axiom" proved="true">
</theory>
<theory name="System__exit_status_supported___axiom" proved="true">
</theory>
<theory name="System__fractional_fixed_ops___axiom" proved="true">
</theory>
<theory name="System__frontend_layout___axiom" proved="true">
</theory>
<theory name="System__machine_overflows___axiom" proved="true">
</theory>
<theory name="System__machine_rounds___axiom" proved="true">
</theory>
<theory name="System__preallocated_stacks___axiom" proved="true">
</theory>
<theory name="System__signed_zeros___axiom" proved="true">
</theory>
<theory name="System__stack_check_default___axiom" proved="true">
</theory>
<theory name="System__stack_check_probes___axiom" proved="true">
</theory>
<theory name="System__stack_check_limits___axiom" proved="true">
</theory>
<theory name="System__support_aggregates___axiom" proved="true">
</theory>
<theory name="System__support_atomic_primitives___axiom" proved="true">
</theory>
<theory name="System__support_composite_assign___axiom" proved="true">
</theory>
<theory name="System__support_composite_compare___axiom" proved="true">
</theory>
<theory name="System__support_long_shifts___axiom" proved="true">
</theory>
<theory name="System__always_compatible_rep___axiom" proved="true">
</theory>
<theory name="System__suppress_standard_library___axiom" proved="true">
</theory>
<theory name="System__use_ada_main_program_name___axiom" proved="true">
</theory>
<theory name="System__frontend_exceptions___axiom" proved="true">
</theory>
<theory name="System__zcx_by_default___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__no_element___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__enable_handling_of_equivalence___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__enable_handling_of_equivalence___axiom" proved="true">
</theory>
<theory name="System__Olt___axiom" proved="true">
</theory>
<theory name="System__Ole___axiom" proved="true">
</theory>
<theory name="System__Ogt___axiom" proved="true">
</theory>
<theory name="System__Oge___axiom" proved="true">
</theory>
<theory name="System__Oeq___axiom" proved="true">
</theory>
<theory name="System__finalization_root__adjust___axiom" proved="true">
</theory>
<theory name="System__finalization_root__finalize___axiom" proved="true">
</theory>
<theory name="System__finalization_root__initialize___axiom" proved="true">
</theory>
<theory name="Ada__finalization__initialize___axiom" proved="true">
</theory>
<theory name="Ada__finalization__adjust___axiom" proved="true">
</theory>
<theory name="Ada__finalization__finalize___axiom" proved="true">
</theory>
<theory name="Ada__finalization__initialize__2___axiom" proved="true">
</theory>
<theory name="Ada__finalization__finalize__2___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__increment___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__is_one___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__initialize___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__increment__2___axiom" proved="true">
</theory>
<theory name="System__atomic_counters__decrement__3___axiom" proved="true">
</theory>
<theory name="Ada__streams__read___axiom" proved="true">
</theory>
<theory name="Ada__streams__write___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__hash___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__Olt___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__equivalent_keys___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__length___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_first___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_has_element___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_next___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_element___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_witness___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__witness___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__w_get___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__get___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__length___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Ole___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Oeq___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__is_empty___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__same_keys___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__add___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__set___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__length___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__last___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__get___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__first___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Oeq___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Olt___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Ole___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__contains___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__constant_range___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_equal___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__set___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add__2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__remove___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_first___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_has_element___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_next___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_bigger_than_range___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_smaller_than_range___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_is_find___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__find___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_first___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_has_element___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_next___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_element___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_witness___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__witness___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__w_get___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__get___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__length___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Ole___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Oeq___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__is_empty___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__same_keys___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__add___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__set___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__model___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__keys___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__positions___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__lift_abstraction_level___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__Oeq___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__is_empty___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__clear___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__assign___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__copy___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__has_element___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace_element___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__move___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__contains___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__insert__2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__element__2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__include___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__replace___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__exclude___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete__2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__first_key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete_first___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__last_key___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__delete_last___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__first___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__first_element___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__last___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__last_element___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__next___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__next__2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__previous___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__previous__2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__find___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__floor___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_maps__ceiling___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_find___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__my_contains___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__f___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_2___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_3___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__apply_f_4___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__are_disjoint___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__prop___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__union_prop___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__insert_count___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__q___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_model___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_keys___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_keys_to_cursors___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_keys___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_model_to_cursors___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__from_cursors_to_model___axiom" proved="true">
</theory>
<theory name="Use_ordered_maps__package_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__hash__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__package_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__Olt__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__equivalent_keys__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__map__default_checks" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__length__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__package_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__package_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__map__default_checks" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__private_key__default_checks" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_first__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_has_element__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_next__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__iter_element__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_key__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__has_witness__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__witness__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__w_get__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__get__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__length__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Ole__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__Oeq__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__is_empty__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__same_keys__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__keys_included_except__2__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__elements_equal_except__2__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__add__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__m__set__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__package_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__sequence__default_checks" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__length__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__last__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__get__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__first__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Oeq__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Olt__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__Ole__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__contains__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__constant_range__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__equal_except__2__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_equal__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__range_shifted__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="4762"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="5003"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="5387"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="5998"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="5822"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__set__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__add__2__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="1206"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__remove__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_first__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_has_element__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k__iter_next__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_bigger_than_range__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_smaller_than_range__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__k_is_find__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__find__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__package_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__map__default_checks" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__private_key__default_checks" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_first__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_has_element__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_next__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__iter_element__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_key__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__has_witness__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__witness__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__w_get__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__get__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__length__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Ole__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__Oeq__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__is_empty__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__same_keys__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__keys_included_except__2__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__elements_equal_except__2__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__add__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p__set__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__p_positions_shifted__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__model__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__keys__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__positions__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__formal_model__lift_abstraction_level__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__Oeq__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__is_empty__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__clear__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__assign__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__copy__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__has_element__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__key__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__element__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__replace_element__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__move__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__contains__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__insert__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__insert__2__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__element__2__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__include__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__replace__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__exclude__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__delete__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__delete__2__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__first_key__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__delete_first__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__last_key__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__delete_last__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__first__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__first_element__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__last__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__last_element__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__next__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="16719"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__next__2__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="16723"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__previous__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="16411"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__previous__2__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="16415"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__find__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__floor__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="20342"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_maps__ceiling__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="20382"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_find__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="30006"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="27854"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="8780"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="34005"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="2344"/></proof>
  </goal>
  <goal name="WP_parameter def.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="2354"/></proof>
  </goal>
  <goal name="WP_parameter def.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="2432"/></proof>
  </goal>
  <goal name="WP_parameter def.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="29242"/></proof>
  </goal>
  <goal name="WP_parameter def.8" expl="check" proved="true">
  <proof prover="1"><result status="valid" steps="31410"/></proof>
  </goal>
  <goal name="WP_parameter def.9" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" steps="35364"/></proof>
  </goal>
  <goal name="WP_parameter def.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="8514"/></proof>
  </goal>
  <goal name="WP_parameter def.11" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="31499"/></proof>
  </goal>
  <goal name="WP_parameter def.12" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="33129"/></proof>
  </goal>
  <goal name="WP_parameter def.13" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="61286"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__my_contains__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="25957"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="28050"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__f__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="565"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__apply_f__subprogram_def">
 <goal name="WP_parameter def" expl="VC for def">
 <transf name="split_goal_wp_conj" >
  <goal name="WP_parameter def.0" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="41126"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="42235"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="42748"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="43792"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="precondition">
  <proof prover="0"><result status="unknown" steps="351"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.5" expl="precondition">
  <proof prover="0"><result status="unknown" steps="351"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.6" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3496"/></proof>
  </goal>
  <goal name="WP_parameter def.7" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3793"/></proof>
  </goal>
  <goal name="WP_parameter def.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="47912"/></proof>
  </goal>
  <goal name="WP_parameter def.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="47960"/></proof>
  </goal>
  <goal name="WP_parameter def.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="13207"/></proof>
  </goal>
  <goal name="WP_parameter def.11" expl="precondition">
  <proof prover="0"><result status="unknown" steps="468"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.12" expl="precondition">
  <proof prover="0"><result status="unknown" steps="3323"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="56524"/></proof>
  </goal>
  <goal name="WP_parameter def.14" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3304"/></proof>
  </goal>
  <goal name="WP_parameter def.15" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3601"/></proof>
  </goal>
  <goal name="WP_parameter def.16" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="46273"/></proof>
  </goal>
  <goal name="WP_parameter def.17" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="46321"/></proof>
  </goal>
  <goal name="WP_parameter def.18" expl="precondition">
  <proof prover="0"><result status="unknown" steps="416"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="13207"/></proof>
  </goal>
  <goal name="WP_parameter def.20" expl="precondition">
  <proof prover="0"><result status="unknown" steps="468"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.21" expl="precondition">
  <proof prover="0"><result status="unknown" steps="3173"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.22" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="56524"/></proof>
  </goal>
  <goal name="WP_parameter def.23" expl="precondition">
  <proof prover="0"><result status="unknown" steps="375"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.24" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="46944"/></proof>
  </goal>
  <goal name="WP_parameter def.25" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="47848"/></proof>
  </goal>
  <goal name="WP_parameter def.26" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="47698"/></proof>
  </goal>
  <goal name="WP_parameter def.27" expl="precondition">
  <proof prover="0"><result status="unknown" steps="335"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.28" expl="precondition">
  <proof prover="0"><result status="unknown" steps="985"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.29" expl="precondition">
  <proof prover="0"><result status="unknown" steps="2502"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.30" expl="precondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.31" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" steps="55682"/></proof>
  </goal>
  <goal name="WP_parameter def.32" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" steps="79898"/></proof>
  </goal>
  <goal name="WP_parameter def.33" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" steps="78982"/></proof>
  </goal>
  <goal name="WP_parameter def.34" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" steps="60679"/></proof>
  </goal>
  <goal name="WP_parameter def.35" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4056"/></proof>
  </goal>
  <goal name="WP_parameter def.36" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4354"/></proof>
  </goal>
  <goal name="WP_parameter def.37" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="54142"/></proof>
  </goal>
  <goal name="WP_parameter def.38" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="54190"/></proof>
  </goal>
  <goal name="WP_parameter def.39" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4428"/></proof>
  </goal>
  <goal name="WP_parameter def.40" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4706"/></proof>
  </goal>
  <goal name="WP_parameter def.41" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="57817"/></proof>
  </goal>
  <goal name="WP_parameter def.42" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="57865"/></proof>
  </goal>
  <goal name="WP_parameter def.43" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="62111"/></proof>
  </goal>
  <goal name="WP_parameter def.44" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="62818"/></proof>
  </goal>
  <goal name="WP_parameter def.45" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4542"/></proof>
  </goal>
  <goal name="WP_parameter def.46" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4820"/></proof>
  </goal>
  <goal name="WP_parameter def.47" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="59789"/></proof>
  </goal>
  <goal name="WP_parameter def.48" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="59837"/></proof>
  </goal>
  <goal name="WP_parameter def.49" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4894"/></proof>
  </goal>
  <goal name="WP_parameter def.50" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="5184"/></proof>
  </goal>
  <goal name="WP_parameter def.51" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="63666"/></proof>
  </goal>
  <goal name="WP_parameter def.52" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="63714"/></proof>
  </goal>
  <goal name="WP_parameter def.53" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="68205"/></proof>
  </goal>
  <goal name="WP_parameter def.54" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="68921"/></proof>
  </goal>
  <goal name="WP_parameter def.55" expl="postcondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.55.0" expl="postcondition">
   <proof prover="0"><result status="timeout"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.55.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" steps="5"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter def.56" expl="postcondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.56.0" expl="postcondition">
   <proof prover="0"><result status="timeout"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.56.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" steps="60"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter def.57" expl="postcondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.57.0" expl="postcondition">
   <proof prover="0"><result status="timeout"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.57.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" steps="60"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__apply_f_2__subprogram_def">
 <goal name="WP_parameter def" expl="VC for def">
 <transf name="split_goal_wp_conj" >
  <goal name="WP_parameter def.0" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="41126"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="43614"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="43838"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="42603"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="precondition">
  <proof prover="0"><result status="unknown" steps="351"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.5" expl="precondition">
  <proof prover="0"><result status="unknown" steps="351"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="11665"/></proof>
  </goal>
  <goal name="WP_parameter def.7" expl="precondition">
  <proof prover="0"><result status="unknown" steps="399"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="12805"/></proof>
  </goal>
  <goal name="WP_parameter def.9" expl="precondition">
  <proof prover="0"><result status="unknown" steps="2337"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.10" expl="precondition">
  <proof prover="0"><result status="unknown" steps="2259"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.11" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="13959"/></proof>
  </goal>
  <goal name="WP_parameter def.12" expl="precondition">
  <proof prover="0"><result status="unknown" steps="2385"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="53453"/></proof>
  </goal>
  <goal name="WP_parameter def.14" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3211"/></proof>
  </goal>
  <goal name="WP_parameter def.15" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3508"/></proof>
  </goal>
  <goal name="WP_parameter def.16" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="45044"/></proof>
  </goal>
  <goal name="WP_parameter def.17" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="45092"/></proof>
  </goal>
  <goal name="WP_parameter def.18" expl="precondition">
  <proof prover="0"><result status="unknown" steps="416"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="12840"/></proof>
  </goal>
  <goal name="WP_parameter def.20" expl="precondition">
  <proof prover="0"><result status="unknown" steps="468"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.21" expl="precondition">
  <proof prover="0"><result status="unknown" steps="335"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.22" expl="precondition">
  <proof prover="0"><result status="unknown" steps="1131"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.23" expl="precondition">
  <proof prover="0"><result status="unknown" steps="2862"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.24" expl="precondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.25" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" steps="66391"/></proof>
  </goal>
  <goal name="WP_parameter def.26" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" steps="78222"/></proof>
  </goal>
  <goal name="WP_parameter def.27" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" steps="72727"/></proof>
  </goal>
  <goal name="WP_parameter def.28" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" steps="93796"/></proof>
  </goal>
  <goal name="WP_parameter def.29" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3959"/></proof>
  </goal>
  <goal name="WP_parameter def.30" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4237"/></proof>
  </goal>
  <goal name="WP_parameter def.31" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="52503"/></proof>
  </goal>
  <goal name="WP_parameter def.32" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="52551"/></proof>
  </goal>
  <goal name="WP_parameter def.33" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="55954"/></proof>
  </goal>
  <goal name="WP_parameter def.34" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="53853"/></proof>
  </goal>
  <goal name="WP_parameter def.35" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4373"/></proof>
  </goal>
  <goal name="WP_parameter def.36" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4671"/></proof>
  </goal>
  <goal name="WP_parameter def.37" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="57825"/></proof>
  </goal>
  <goal name="WP_parameter def.38" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="57873"/></proof>
  </goal>
  <goal name="WP_parameter def.39" expl="postcondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.39.0" expl="postcondition">
   <proof prover="0"><result status="timeout"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.39.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" steps="5"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter def.40" expl="postcondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.40.0" expl="postcondition">
   <proof prover="0"><result status="timeout"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.40.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" steps="62"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter def.41" expl="postcondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.41.0" expl="postcondition">
   <proof prover="0"><result status="timeout"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.41.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" steps="62"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter def.42" expl="postcondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.42.0" expl="postcondition">
   <proof prover="0"><result status="timeout"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.42.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" steps="91"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__apply_f_3__subprogram_def">
 <goal name="WP_parameter def" expl="VC for def">
 <transf name="split_goal_wp_conj" >
  <goal name="WP_parameter def.0" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="40123"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="3086"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="42729"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="3020"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="precondition">
  <proof prover="0"><result status="unknown" steps="431"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="11756"/></proof>
  </goal>
  <goal name="WP_parameter def.6" expl="precondition">
  <proof prover="0"><result status="unknown" steps="680"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.7" expl="precondition">
  <proof prover="0"><result status="unknown" steps="3552"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="13231"/></proof>
  </goal>
  <goal name="WP_parameter def.9" expl="precondition">
  <proof prover="0"><result status="unknown" steps="3686"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.10" expl="precondition">
  <proof prover="0"><result status="unknown" steps="3610"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.11" expl="precondition">
  <proof prover="0"><result status="unknown" steps="813"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.12" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="47597"/></proof>
  </goal>
  <goal name="WP_parameter def.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="46654"/></proof>
  </goal>
  <goal name="WP_parameter def.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="46515"/></proof>
  </goal>
  <goal name="WP_parameter def.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="50960"/></proof>
  </goal>
  <goal name="WP_parameter def.16" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="11996"/></proof>
  </goal>
  <goal name="WP_parameter def.17" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="49932"/></proof>
  </goal>
  <goal name="WP_parameter def.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="49784"/></proof>
  </goal>
  <goal name="WP_parameter def.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="56290"/></proof>
  </goal>
  <goal name="WP_parameter def.20" expl="precondition">
  <proof prover="0"><result status="unknown" steps="446"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.21" expl="precondition">
  <proof prover="0"><result status="unknown" steps="2218"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.22" expl="precondition">
  <proof prover="0"><result status="unknown" steps="4296"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.23" expl="precondition">
  <proof prover="0"><result status="unknown" steps="15617"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.24" expl="loop invariant preservation">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.25" expl="loop invariant preservation">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.26" expl="loop invariant preservation">
  <proof prover="0"><result status="unknown" steps="33353"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.27" expl="loop invariant preservation">
  <proof prover="0"><result status="unknown" steps="27943"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.28" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3979"/></proof>
  </goal>
  <goal name="WP_parameter def.29" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4277"/></proof>
  </goal>
  <goal name="WP_parameter def.30" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="52996"/></proof>
  </goal>
  <goal name="WP_parameter def.31" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="53044"/></proof>
  </goal>
  <goal name="WP_parameter def.32" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4351"/></proof>
  </goal>
  <goal name="WP_parameter def.33" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="53720"/></proof>
  </goal>
  <goal name="WP_parameter def.34" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="53784"/></proof>
  </goal>
  <goal name="WP_parameter def.35" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="58384"/></proof>
  </goal>
  <goal name="WP_parameter def.36" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="58795"/></proof>
  </goal>
  <goal name="WP_parameter def.37" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4469"/></proof>
  </goal>
  <goal name="WP_parameter def.38" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="55836"/></proof>
  </goal>
  <goal name="WP_parameter def.39" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="55900"/></proof>
  </goal>
  <goal name="WP_parameter def.40" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4545"/></proof>
  </goal>
  <goal name="WP_parameter def.41" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4835"/></proof>
  </goal>
  <goal name="WP_parameter def.42" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="59729"/></proof>
  </goal>
  <goal name="WP_parameter def.43" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="59777"/></proof>
  </goal>
  <goal name="WP_parameter def.44" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="64750"/></proof>
  </goal>
  <goal name="WP_parameter def.45" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="65042"/></proof>
  </goal>
  <goal name="WP_parameter def.46" expl="postcondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.46.0" expl="postcondition">
   <proof prover="0"><result status="timeout"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.46.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" steps="5"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter def.47" expl="postcondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.47.0" expl="postcondition">
   <proof prover="0"><result status="unknown" steps="28723"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.47.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" steps="42"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter def.48" expl="postcondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.48.0" expl="postcondition">
   <proof prover="0"><result status="unknown" steps="27047"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.48.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" steps="42"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__apply_f_4__subprogram_def">
 <goal name="WP_parameter def" expl="VC for def">
 <transf name="split_goal_wp_conj" >
  <goal name="WP_parameter def.0" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="40123"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="3086"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="42729"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="3020"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="precondition">
  <proof prover="0"><result status="unknown" steps="431"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="11756"/></proof>
  </goal>
  <goal name="WP_parameter def.6" expl="precondition">
  <proof prover="0"><result status="unknown" steps="680"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.7" expl="precondition">
  <proof prover="0"><result status="unknown" steps="3552"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="13231"/></proof>
  </goal>
  <goal name="WP_parameter def.9" expl="precondition">
  <proof prover="0"><result status="unknown" steps="3686"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.10" expl="precondition">
  <proof prover="0"><result status="unknown" steps="3610"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.11" expl="precondition">
  <proof prover="0"><result status="unknown" steps="813"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.12" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="47597"/></proof>
  </goal>
  <goal name="WP_parameter def.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="46654"/></proof>
  </goal>
  <goal name="WP_parameter def.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="46515"/></proof>
  </goal>
  <goal name="WP_parameter def.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="50960"/></proof>
  </goal>
  <goal name="WP_parameter def.16" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="11996"/></proof>
  </goal>
  <goal name="WP_parameter def.17" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="49932"/></proof>
  </goal>
  <goal name="WP_parameter def.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="49784"/></proof>
  </goal>
  <goal name="WP_parameter def.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="56290"/></proof>
  </goal>
  <goal name="WP_parameter def.20" expl="precondition">
  <proof prover="0"><result status="unknown" steps="446"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.21" expl="precondition">
  <proof prover="0"><result status="unknown" steps="2218"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.22" expl="precondition">
  <proof prover="0"><result status="unknown" steps="4296"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.23" expl="precondition">
  <proof prover="0"><result status="unknown" steps="15617"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.24" expl="loop invariant preservation">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.25" expl="loop invariant preservation">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.26" expl="loop invariant preservation">
  <proof prover="0"><result status="unknown" steps="33353"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.27" expl="loop invariant preservation">
  <proof prover="0"><result status="unknown" steps="27943"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.28" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3979"/></proof>
  </goal>
  <goal name="WP_parameter def.29" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4277"/></proof>
  </goal>
  <goal name="WP_parameter def.30" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="52996"/></proof>
  </goal>
  <goal name="WP_parameter def.31" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="53044"/></proof>
  </goal>
  <goal name="WP_parameter def.32" expl="precondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.32.0" expl="precondition">
   <proof prover="0"><result status="timeout"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.32.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" steps="14"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter def.33" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="57345"/></proof>
  </goal>
  <goal name="WP_parameter def.34" expl="postcondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.34.0" expl="postcondition">
   <proof prover="0"><result status="timeout"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.34.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" steps="5"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter def.35" expl="postcondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.35.0" expl="postcondition">
   <proof prover="0"><result status="timeout"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.35.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" steps="5"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="WP_parameter def.36" expl="postcondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.36.0" expl="postcondition">
   <proof prover="0"><result status="unknown" steps="25297"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.36.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" steps="55"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__are_disjoint__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="29940"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="27557"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="8694"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="33703"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="2325"/></proof>
  </goal>
  <goal name="WP_parameter def.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="2402"/></proof>
  </goal>
  <goal name="WP_parameter def.6" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" steps="36384"/></proof>
  </goal>
  <goal name="WP_parameter def.7" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="2703"/></proof>
  </goal>
  <goal name="WP_parameter def.8" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="2985"/></proof>
  </goal>
  <goal name="WP_parameter def.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="32786"/></proof>
  </goal>
  <goal name="WP_parameter def.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="32834"/></proof>
  </goal>
  <goal name="WP_parameter def.11" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="158362"/></proof>
  </goal>
  <goal name="WP_parameter def.12" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="56338"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__prop__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__union_prop__subprogram_def">
 <goal name="WP_parameter def" expl="VC for def">
 <transf name="split_goal_wp_conj" >
  <goal name="WP_parameter def.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="37746"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="2914"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3194"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="42169"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="42217"/></proof>
  </goal>
  <goal name="WP_parameter def.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="44556"/></proof>
  </goal>
  <goal name="WP_parameter def.6" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3316"/></proof>
  </goal>
  <goal name="WP_parameter def.7" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3608"/></proof>
  </goal>
  <goal name="WP_parameter def.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="46778"/></proof>
  </goal>
  <goal name="WP_parameter def.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="46826"/></proof>
  </goal>
  <goal name="WP_parameter def.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="50101"/></proof>
  </goal>
  <goal name="WP_parameter def.11" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="41458"/></proof>
  </goal>
  <goal name="WP_parameter def.12" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" steps="42570"/></proof>
  </goal>
  <goal name="WP_parameter def.13" expl="precondition">
  <proof prover="0"><result status="unknown" steps="348"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.14" expl="precondition">
  <proof prover="0"><result status="unknown" steps="385"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.15" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3174"/></proof>
  </goal>
  <goal name="WP_parameter def.16" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3471"/></proof>
  </goal>
  <goal name="WP_parameter def.17" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="44393"/></proof>
  </goal>
  <goal name="WP_parameter def.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="44441"/></proof>
  </goal>
  <goal name="WP_parameter def.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="47068"/></proof>
  </goal>
  <goal name="WP_parameter def.20" expl="precondition">
  <proof prover="0"><result status="unknown" steps="326"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.21" expl="precondition">
  <proof prover="0"><result status="unknown" steps="510"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.22" expl="precondition">
  <proof prover="0"><result status="unknown" steps="2648"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.23" expl="precondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.24" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" steps="57035"/></proof>
  </goal>
  <goal name="WP_parameter def.25" expl="loop invariant preservation">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  </goal>
  <goal name="WP_parameter def.26" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3892"/></proof>
  </goal>
  <goal name="WP_parameter def.27" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="4190"/></proof>
  </goal>
  <goal name="WP_parameter def.28" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="51786"/></proof>
  </goal>
  <goal name="WP_parameter def.29" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="51834"/></proof>
  </goal>
  <goal name="WP_parameter def.30" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="54736"/></proof>
  </goal>
  <goal name="WP_parameter def.31" expl="postcondition">
  <proof prover="0"><result status="timeout"/></proof>
  <proof prover="1" timelimit="60"><result status="timeout"/></proof>
  <transf name="split_disj" >
   <goal name="WP_parameter def.31.0" expl="postcondition">
   <proof prover="0"><result status="timeout"/></proof>
   <proof prover="1" timelimit="60"><result status="timeout"/></proof>
   </goal>
   <goal name="WP_parameter def.31.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" steps="56"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__insert_count__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="32845"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="31107"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="36268"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="33718"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="44793"/></proof>
  </goal>
  <goal name="WP_parameter def.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="36221"/></proof>
  </goal>
  <goal name="WP_parameter def.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="76602"/></proof>
  </goal>
  <goal name="WP_parameter def.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="38729"/></proof>
  </goal>
  <goal name="WP_parameter def.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="134382"/></proof>
  </goal>
  <goal name="WP_parameter def.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="43614"/></proof>
  </goal>
  <goal name="WP_parameter def.10" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3567"/></proof>
  </goal>
  <goal name="WP_parameter def.11" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="3865"/></proof>
  </goal>
  <goal name="WP_parameter def.12" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="47397"/></proof>
  </goal>
  <goal name="WP_parameter def.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="47445"/></proof>
  </goal>
  <goal name="WP_parameter def.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="13176"/></proof>
  </goal>
  <goal name="WP_parameter def.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="58204"/></proof>
  </goal>
  <goal name="WP_parameter def.16" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="57682"/></proof>
  </goal>
  <goal name="WP_parameter def.17" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="43402"/></proof>
  </goal>
  <goal name="WP_parameter def.18" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="68503"/></proof>
  </goal>
  <goal name="WP_parameter def.19" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="68649"/></proof>
  </goal>
  <goal name="WP_parameter def.20" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="60993"/></proof>
  </goal>
  <goal name="WP_parameter def.21" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="167072"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__q__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__from_keys_to_model__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="6000"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="22517"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="24247"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="1582"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="1864"/></proof>
  </goal>
  <goal name="WP_parameter def.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="22838"/></proof>
  </goal>
  <goal name="WP_parameter def.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="22886"/></proof>
  </goal>
  <goal name="WP_parameter def.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="24654"/></proof>
  </goal>
  <goal name="WP_parameter def.8" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="20477"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__from_model_to_keys__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="1562"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="19853"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="6112"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="22877"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="24611"/></proof>
  </goal>
  <goal name="WP_parameter def.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="20699"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__from_keys_to_cursors__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="7616"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="28056"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="29887"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="2146"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="6752"/></proof>
  </goal>
  <goal name="WP_parameter def.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="26704"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__from_cursors_to_keys__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="2122"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="6618"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="7966"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="29153"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="31060"/></proof>
  </goal>
  <goal name="WP_parameter def.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="27993"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__from_model_to_cursors__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="2126"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="25392"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="2152"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="6730"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="26922"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Use_ordered_maps__from_cursors_to_model__subprogram_def" proved="true">
 <goal name="WP_parameter def" expl="VC for def" proved="true">
 <transf name="split_goal_wp_conj" proved="true" >
  <goal name="WP_parameter def.0" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="2122"/></proof>
  </goal>
  <goal name="WP_parameter def.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="6618"/></proof>
  </goal>
  <goal name="WP_parameter def.2" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="2228"/></proof>
  </goal>
  <goal name="WP_parameter def.3" expl="VC for def" proved="true">
  <proof prover="1"><result status="valid" steps="2510"/></proof>
  </goal>
  <goal name="WP_parameter def.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="29071"/></proof>
  </goal>
  <goal name="WP_parameter def.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="29119"/></proof>
  </goal>
  <goal name="WP_parameter def.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" steps="31028"/></proof>
  </goal>
  <goal name="WP_parameter def.7" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" steps="27564"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
