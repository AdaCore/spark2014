array_comparison_nat.adb:23:31: high: assertion might fail (e.g. when X = (1 => 1, 2 => 2, 3 => 2, 4 => 3))
array_comparison_nat.adb:31:31: high: assertion might fail (e.g. when X = (4 => 3, others => 2))
array_comparison_nat.adb:49:31: high: assertion might fail (e.g. when X(1) = 1 and X(2) = 2 and X(3) = 2 and X(4) = 2 and X(5) = 2)
array_comparison_nat.adb:63:31: high: assertion might fail (e.g. when X(1) = 1 and X(19) = 3 and X(20) = 4 and X(21) = 5 and X(22) = 5)
array_comparison_nat2.adb:25:24: info: index check proved (CVC5: 2 VC)
array_comparison_nat2.adb:26:24: info: index check proved (CVC5: 2 VC)
array_comparison_nat2.adb:28:31: medium: assertion might fail
array_comparison_nat2.adb:38:31: medium: assertion might fail
array_comparison_nat2.adb:49:25: info: index check proved (CVC5: 2 VC)
array_comparison_nat2.adb:50:25: info: index check proved (CVC5: 2 VC)
array_comparison_nat2.adb:51:25: info: index check proved (CVC5: 2 VC)
array_comparison_nat2.adb:52:25: info: index check proved (CVC5: 2 VC)
array_comparison_nat2.adb:53:25: info: index check proved (CVC5: 2 VC)
array_comparison_nat2.adb:54:25: info: index check proved (CVC5: 2 VC)
array_comparison_nat2.adb:55:25: info: index check proved (CVC5: 2 VC)
array_comparison_nat2.adb:56:25: info: index check proved (CVC5: 2 VC)
array_comparison_nat2.adb:57:25: info: index check proved (CVC5: 2 VC)
array_comparison_nat2.adb:58:25: info: index check proved (CVC5: 2 VC)
array_comparison_nat2.adb:60:31: medium: assertion might fail
array_comparison_nat2.adb:67:29: info: index check proved (CVC5: 2 VC)
array_comparison_nat2.adb:68:29: info: index check proved (CVC5: 2 VC)
array_comparison_nat2.adb:71:31: medium: assertion might fail
array_comparison_str.adb:30:31: high: assertion might fail (e.g. when X = "abacadaea")
array_comparison_str.adb:38:31: high: assertion might fail (e.g. when X = "XbXcXdXeX")
array_comparison_str.adb:48:31: high: assertion might fail (e.g. when X = "XbXcXdXeX")
array_comparison_str.adb:60:31: high: assertion might fail (e.g. when X = (1 => 'b', 19 => 'c', others => 'a'))
array_comparison_str.adb:68:31: high: assertion might fail (e.g. when X = "baaaaaaaaaaaaaaaaac" and X'First = 1)
array_comparison_str.adb:76:31: high: assertion might fail (e.g. when X = (1 => 'b', 19 => 'c', others => 'a'))
array_comparison_str.adb:89:31: high: assertion might fail (e.g. when X(1) = 'b' and X(19) = 'c' and X(20) = 'd' and X(21) = 'e' and X(22) = 'f')
array_comparison_str.adb:103:31: high: assertion might fail (e.g. when X = "baaaaaaaaaaaaaaaaacdeff" and X'First = 1)
array_comparison_str.adb:117:31: high: assertion might fail (e.g. when X(1) = 'b' and X(19) = 'c' and X(20) = 'd' and X(21) = 'e' and X(22) = 'f')
array_comparison_str.adb:137:31: high: assertion might fail (e.g. when X(1) = 'L' and X(2) = 'o' and X(3) = 'r' and X(4) = 'e' and X(5) = 'm')
array_comparison_str.adb:153:31: high: assertion might fail (e.g. when X = "L$rem ipsum dolor sit $met, consectetur $dipiscing elit, sed do eiusmod tempor incididunt ut l$bore et dolore m$gn$ $liqu$. Ut enim $d minim veni$m, quis nostrud exercit$tion ull$mco l$boris nisi ut $liquip ex e$ commodo consequ$t. Duis $ute irure dolor in reprehenderit in volupt$te velit esse cillum dolore eu fugi$t null$ p$ri$tur. Excepteur sint occ$ec$t cupid$t$t non proident, sunt in culp$ qui offici$ deserunt mollit $nim id est l$borum.")
array_comparison_str.adb:167:31: high: assertion might fail (e.g. when X = "baaaaaaaaaaaaaaaaacdeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeff")
array_comparison_str.adb:181:31: high: assertion might fail (e.g. when X(1) = 'b' and X(19) = 'c' and X(20) = 'd' and X(21) = 'e' and X(22) = 'e')
array_comparison_str.adb:193:31: high: assertion might fail (e.g. when X(1) = 'b' and X(6) = 'SOH' and X(19) = 'c' and X(20) = 'd' and X(21) = 'e')
