main.adb:7:04: info: initialization of "T" proved
main.adb:8:04: info: initialization of "S" proved
main.adb:19:56: info: overflow check proved (CVC4: 2 VC)
main.adb:19:66: info: range check proved (CVC4: 2 VC)
main.adb:20:35: info: precondition proved (CVC4: 4 VC)
main.adb:22:47: info: overflow check proved (CVC4: 2 VC)
main.adb:23:36: info: precondition proved (CVC4: 4 VC)
main.adb:24:14: info: postcondition proved (CVC4: 1 VC)
main.adb:24:14: info: precondition proved (CVC4: 1 VC)
main.adb:32:12: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
main.adb:32:12: info: precondition proved (CVC4: 1 VC; Trivial: 1 VC)
main.adb:35:22: medium: assertion might fail (e.g. when K = 2 and T = (1 => -3, others => 'ETX'))
main.adb:36:22: medium: assertion might fail (e.g. when K = 2 and T = (2 => -3, others => 'ETX'))
main.adb:36:45: info: precondition proved (CVC4: 8 VC)
main.adb:38:10: info: loop invariant initialization proved (CVC4: 1 VC)
main.adb:39:12: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove not (Ada.Strings.Search.Match (T, "91", Identity, J))
main.adb:39:35: info: precondition proved (CVC4: 8 VC)
main.adb:42:21: medium: assertion might fail, cannot prove not (Ada.Strings.Search.Match (T, "91", Identity, K)) (e.g. when K = 1 and T = (others => 'NUL'))
main.adb:42:44: info: precondition proved (CVC4: 4 VC)
main.adb:43:04: medium: precondition might fail, cannot prove Pattern (K) = Ada.Strings.Maps.Value (Mapping, Source (From + (K - Pattern'first))) (e.g. when K = 0 and T = (others => -2))
main.adb:44:19: info: precondition proved (CVC4: 1 VC)
main.adb:44:19: medium: assertion might fail (e.g. when T = (others => 'NUL'))
main.adb:45:19: info: precondition proved (CVC4: 1 VC)
main.adb:45:19: medium: assertion might fail (e.g. when T = (others => 'NUL'))
main.adb:47:09: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
main.adb:47:09: info: precondition proved (CVC4: 3 VC; Trivial: 1 VC)
main.adb:48:19: info: range check proved (CVC4: 4 VC)
main.adb:48:19: medium: assertion might fail (e.g. when T = (others => 'NUL'))
main.adb:49:09: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
main.adb:49:09: info: precondition proved (CVC4: 3 VC; Trivial: 1 VC)
main.adb:50:19: info: range check proved (CVC4: 4 VC)
main.adb:50:19: medium: assertion might fail (e.g. when S = (others => 'NUL'))
main.adb:51:19: info: range check proved (CVC4: 4 VC)
main.adb:51:19: medium: assertion might fail (e.g. when T = (others => 'NUL'))
main.adb:52:19: info: range check proved (CVC4: 4 VC)
main.adb:52:19: medium: assertion might fail (e.g. when S = (others => 'NUL') and T = (others => 'NUL'))
main.adb:52:33: info: range check proved (CVC4: 4 VC)
main.adb:53:19: info: range check proved (CVC4: 4 VC)
main.adb:53:19: medium: assertion might fail (e.g. when S = (others => 'NUL'))
main.adb:54:19: info: range check proved (CVC4: 4 VC)
main.adb:54:19: medium: assertion might fail (e.g. when T = (others => 'NUL'))
main.adb:55:19: info: range check proved (CVC4: 4 VC)
main.adb:55:19: medium: assertion might fail (e.g. when S = (others => 'NUL') and T = (others => 'NUL'))
main.adb:55:35: info: range check proved (CVC4: 4 VC)
main.adb:56:19: medium: assertion might fail (e.g. when S = (others => 'NUL') and T = (others => 'NUL'))
main.adb:56:23: info: precondition proved (CVC4: 3 VC)
main.adb:57:19: medium: assertion might fail (e.g. when S = (others => 'NUL') and T = (others => 'NUL'))
main.adb:57:23: info: precondition proved (CVC4: 3 VC; Trivial: 1 VC)
