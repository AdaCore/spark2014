bad_gen_access.adb:9:14: error: instance of Unchecked_Deallocation with a general access type is not allowed in SPARK
bad_gen_access.adb:9:14: error: violation of aspect SPARK_Mode at line 3
bad_gen_access.adb:15:19: error: move as part of a conversion to an access-to-constant type is not yet supported
bad_gen_access.adb:24:12: error: conversion from an anonymous access type to a named access type is not allowed in SPARK
bad_gen_access.adb:24:12: error: violation of aspect SPARK_Mode at line 3
ext.ads:10:20: medium: memory leak might occur [possible explanation: allocator for a general access-to-variable type leaks memory]
ext.ads:11:20: medium: memory leak might occur [possible explanation: allocator for an access-to-constant type leaks memory]
ext.ads:16:37: medium: memory leak might occur [possible explanation: allocator for a general access-to-variable type leaks memory]
ext.ads:18:19: info: assertion proved (CVC4: 1 VC)
ext.ads:18:40: medium: memory leak might occur [possible explanation: allocator for a general access-to-variable type leaks memory]
ext.ads:25:22: medium: memory leak might occur [possible explanation: allocator for a general access-to-variable type leaks memory]
ext.ads:36:28: medium: memory leak might occur [possible explanation: allocator for an access-to-constant type leaks memory]
ext.ads:37:28: medium: memory leak might occur [possible explanation: allocator for a general access-to-variable type leaks memory]
ext.ads:42:19: info: assertion proved (CVC4: 1 VC)
ext.ads:42:39: medium: memory leak might occur [possible explanation: allocator for an access-to-constant type leaks memory]
ext.ads:43:39: medium: memory leak might occur [possible explanation: allocator for a general access-to-variable type leaks memory]
ext.ads:44:39: medium: memory leak might occur [possible explanation: allocator inside an assertion leaks memory]
ext.ads:55:29: medium: memory leak might occur [possible explanation: allocator for an access-to-constant type leaks memory]
ext.ads:56:29: medium: memory leak might occur [possible explanation: allocator for a general access-to-variable type leaks memory]
ext.ads:57:29: medium: memory leak might occur [possible explanation: allocator for an access-to-constant type leaks memory]
ext.ads:58:32: medium: memory leak might occur [possible explanation: allocator for an access-to-constant type leaks memory]
ext.ads:59:32: medium: memory leak might occur [possible explanation: allocator for a general access-to-variable type leaks memory]
ext.ads:67:19: info: assertion proved (CVC4: 1 VC)
ext.ads:67:39: medium: memory leak might occur [possible explanation: allocator for an access-to-constant type leaks memory]
ext.ads:68:39: medium: memory leak might occur [possible explanation: allocator for a general access-to-variable type leaks memory]
ext.ads:69:39: medium: memory leak might occur [possible explanation: allocator for an access-to-constant type leaks memory]
ext.ads:70:42: medium: memory leak might occur [possible explanation: allocator for an access-to-constant type leaks memory]
ext.ads:71:42: medium: memory leak might occur [possible explanation: allocator for a general access-to-variable type leaks memory]
ext.ads:72:42: medium: memory leak might occur [possible explanation: allocator inside an assertion leaks memory]
gen_access.adb:9:04: medium: memory leak might occur at end of scope
gen_access.adb:12:21: medium: memory leak might occur [possible explanation: allocator for a general access-to-variable type leaks memory]
gen_access.adb:16:19: info: assertion proved (CVC4: 1 VC)
gen_access.adb:24:04: info: absence of memory leak at end of scope proved (CVC4: 1 VC)
gen_access.adb:25:04: medium: memory leak might occur at end of scope
gen_access.adb:26:04: info: absence of memory leak at end of scope proved (CVC4: 1 VC)
gen_access.adb:37:19: info: assertion proved (CVC4: 1 VC)
gen_access.adb:37:22: medium: memory leak might occur [possible explanation: call to allocating function inside an assertion leaks memory] [possible fix: you should consider adding a postcondition to function Mk_Arr_1 or turning it into an expression function in its unit spec]
gen_access.adb:49:19: info: assertion proved (CVC4: 1 VC)
gen_access.adb:59:19: info: assertion proved (CVC4: 1 VC)
gen_access.adb:59:22: medium: memory leak might occur [possible explanation: call to allocating function inside an assertion leaks memory] [possible fix: you should consider adding a postcondition to function Mk_List or turning it into an expression function in its unit spec]
gen_access.adb:60:04: info: absence of memory leak at end of scope proved (CVC4: 1 VC)
gen_access.adb:61:04: medium: memory leak might occur at end of scope
gen_access.adb:62:04: info: absence of memory leak at end of scope proved (CVC4: 1 VC)
gen_access.adb:63:04: medium: memory leak might occur at end of scope
gen_access.adb:65:04: info: absence of memory leak at end of scope proved (CVC4: 1 VC)
gen_access.adb:67:79: info: dynamic accessibility check proved (Trivial)
gen_access.adb:71:18: medium: "All_Null" is recursive, terminating annotation could be incorrect
gen_access.adb:71:62: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:75:14: info: postcondition proved (CVC4: 2 VC; Trivial: 1 VC)
gen_access.adb:81:33: info: loop invariant initialization proved (CVC4: 1 VC)
gen_access.adb:81:33: info: loop invariant preservation proved (CVC4: 1 VC)
gen_access.adb:83:13: info: loop invariant initialization proved (CVC4: 2 VC; Trivial: 2 VC)
gen_access.adb:83:13: info: loop invariant preservation proved (CVC4: 2 VC; Trivial: 2 VC)
gen_access.adb:83:37: info: pointer dereference check proved (CVC4: 2 VC)
gen_access.adb:83:73: info: pointer dereference check proved (CVC4: 2 VC)
gen_access.adb:84:11: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:84:14: medium: memory leak might occur
gen_access.adb:85:16: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:92:14: info: postcondition proved (CVC4: 2 VC)
gen_access.adb:96:10: info: precondition proved (CVC4: 2 VC; Trivial: 1 VC)
gen_access.adb:96:10: warning: statement has no effect
gen_access.adb:96:22: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:96:22: warning: "L.N" is set by "Delete" but not used after the call
gen_access.adb:97:14: info: absence of memory leak proved (CVC4: 1 VC)
gen_access.adb:111:19: info: assertion proved (CVC4: 1 VC)
gen_access.adb:111:22: medium: memory leak might occur [possible explanation: call to allocating function inside an assertion leaks memory] [possible fix: you should consider adding a postcondition to function Mk_List2 or turning it into an expression function in its unit spec]
gen_access.adb:112:04: info: absence of memory leak at end of scope proved (CVC4: 1 VC)
gen_access.adb:113:04: medium: memory leak might occur at end of scope
gen_access.adb:124:19: info: assertion proved (CVC4: 1 VC)
gen_access.adb:124:22: medium: memory leak might occur [possible explanation: call to allocating function inside an assertion leaks memory] [possible fix: you should consider adding a postcondition to function Mk_My_Acc or turning it into an expression function in its unit spec]
gen_access.adb:125:04: info: absence of memory leak at end of scope proved (CVC4: 1 VC)
gen_access.adb:126:04: medium: memory leak might occur at end of scope
gen_access.adb:129:07: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:129:16: medium: memory leak might occur
gen_access.adb:132:33: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:132:57: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:132:59: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:133:20: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:133:22: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:133:24: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:133:48: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:133:50: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:133:52: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:133:54: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:134:20: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:134:22: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:134:24: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:134:26: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:134:28: info: pointer dereference check proved (CVC4: 1 VC)
gen_access.adb:137:04: info: precondition proved (CVC4: 2 VC; Trivial: 1 VC)
gnatprove: error during flow analysis and proof
