arrays.adb:51:18: info: postcondition proved (CVC4: 2 VC)
arrays.adb:60:11: info: flow dependencies proved
arrays.adb:62:22: medium: postcondition might fail, cannot prove Contains_B'Result = S (C) (e.g. when C = 'NUL' and S = ('NUL' => False, 'a' => True, others => False))
arrays.adb:71:19: info: postcondition proved (CVC4: 2 VC)
arrays.adb:80:19: medium: postcondition might fail, cannot prove Is_Id_2'Result = (M (C) = C) (e.g. when C = 'NUL' and M = ('NUL' => 'a', others => 'a'))
arrays.adb:88:11: info: flow dependencies proved
arrays.adb:94:22: info: assertion proved (CVC4: 1 VC)
arrays.adb:99:11: info: flow dependencies proved
arrays.adb:104:22: medium: assertion might fail, cannot prove C = Character'val (e.g. when C = 'SOH') [possible fix: precondition of subprogram at line 97 should mention C]
arrays.adb:108:11: info: flow dependencies proved
arrays.adb:112:22: medium: assertion might fail, cannot prove M ('a') = 'a' (e.g. when M = ('a' => 'A', others => 'A')) [possible fix: subprogram at line 107 should mention M in a precondition]
arrays.adb:116:11: info: flow dependencies proved
arrays.adb:120:22: medium: assertion might fail, cannot prove M (Elem_0) = Elem_0 (e.g. when M = (Elem_0 => Elem_2, others => Elem_2)) [possible fix: subprogram at line 115 should mention M in a precondition]
arrays.adb:124:11: info: flow dependencies proved
arrays.adb:128:22: medium: assertion might fail, cannot prove MM ('a') (Elem_0) = Elem_1 [possible fix: subprogram at line 123 should mention MM in a precondition]
arrays.adb:131:22: info: initialization of "M" proved
arrays.adb:132:11: info: flow dependencies proved
arrays.adb:136:22: info: assertion proved (CVC4: 1 VC)
arrays.adb:140:11: info: flow dependencies proved
arrays.adb:144:22: medium: assertion might fail, cannot prove R.Exists (e.g. when R = (A => (3 => 5, others => 5), Exists => False)) [possible fix: subprogram at line 139 should mention R in a precondition]
arrays.adb:146:22: info: assertion proved (CVC4: 1 VC)
arrays.adb:148:22: medium: assertion might fail, cannot prove R.A(1) = 5 (e.g. when R = (A => (1 => 0, 3 => 5, others => 5), Exists => True)) [possible fix: subprogram at line 139 should mention R in a precondition]
arrays.adb:152:11: info: flow dependencies proved
arrays.adb:153:31: info: range check proved (CVC4: 2 VC)
arrays.adb:154:33: info: index check proved (CVC4: 2 VC)
arrays.adb:156:22: info: postcondition proved (CVC4: 1 VC)
arrays.adb:156:31: info: range check proved (CVC4: 2 VC)
arrays.adb:157:33: info: index check proved (CVC4: 2 VC)
arrays.adb:160:22: info: range check proved (CVC4: 1 VC)
arrays.adb:161:16: info: index check proved (CVC4: 2 VC)
arrays.adb:165:12: info: flow dependencies proved
arrays.adb:170:22: info: assertion proved (CVC4: 1 VC)
arrays.adb:170:31: info: index check proved (CVC4: 2 VC)
arrays.adb:175:11: info: flow dependencies proved
arrays.adb:178:22: medium: assertion might fail [possible fix: subprogram at line 174 should mention A in a precondition]
arrays.adb:183:19: info: postcondition proved (CVC4: 2 VC)
arrays.adb:191:33: info: loop invariant initialization proved (CVC4: 2 VC)
arrays.adb:191:33: info: loop invariant preservation proved (CVC4: 2 VC)
arrays.adb:191:41: info: range check proved (CVC4: 4 VC)
arrays.adb:192:57: medium: "R" might not be initialized
arrays.adb:194:14: medium: "R" might not be initialized
arrays.adb:199:22: medium: postcondition might fail, cannot prove Single_Char_Set_Broken'Result (I) = (I > C) (e.g. when C = 'SOH' and I = 'SOH')
arrays.adb:206:33: info: loop invariant initialization proved (CVC4: 2 VC)
arrays.adb:206:33: info: loop invariant preservation proved (CVC4: 2 VC)
arrays.adb:206:41: info: range check proved (CVC4: 4 VC)
arrays.adb:207:57: medium: "R" might not be initialized
arrays.adb:209:14: medium: "R" might not be initialized
arrays.adb:213:11: info: flow dependencies proved
arrays.adb:215:07: info: initialization of "A" proved
arrays.adb:218:22: medium: assertion might fail, cannot prove A ('A')
arrays.adb:222:11: info: flow dependencies proved
arrays.adb:224:07: info: initialization of "A" proved
arrays.adb:227:22: info: assertion proved (CVC4: 1 VC)
arrays.adb:231:11: info: flow dependencies proved
arrays.adb:233:07: info: initialization of "A" proved
arrays.adb:236:22: medium: assertion might fail, cannot prove A ('A')
arrays.adb:240:11: info: flow dependencies proved
arrays.adb:242:07: info: initialization of "A" proved
arrays.adb:245:22: info: assertion proved (CVC4: 1 VC)
arrays.adb:249:11: info: flow dependencies proved
arrays.adb:251:07: info: initialization of "A" proved
arrays.adb:254:22: medium: assertion might fail, cannot prove A = Random_Array (5) [possible fix: you should consider adding a postcondition to function Random_Array or turning it into an expression function in its unit spec]
counterexample expected for check at arrays.adb:62
  trace at arrays.adb:57 --> S = ('NUL' => False, 'a' => True, others => False)
  trace at arrays.adb:58 --> C = 'NUL'
  trace at arrays.adb:62 --> C = 'NUL' and S = ('NUL' => False, 'a' => True, others => False)
  trace at arrays.adb:65 --> Contains_B'Result = True and S = ('NUL' => False, 'a' => True, others => False)
counterexample expected for check at arrays.adb:80
  trace at arrays.adb:77 --> M = ('NUL' => 'a', others => 'a')
  trace at arrays.adb:78 --> C = 'NUL'
  trace at arrays.adb:80 --> C = 'NUL' and M = ('NUL' => 'a', others => 'a')
  trace at arrays.adb:83 --> C = 'NUL' and Is_Id_2'Result = True
counterexample expected for check at arrays.adb:104
  trace at arrays.adb:97 --> M = ('SOH' => 'SOH', others => 'SOH')
  trace at arrays.adb:98 --> C = 'SOH'
  trace at arrays.adb:103 --> C = 'SOH'
  trace at arrays.adb:104 --> C = 'SOH'
counterexample expected for check at arrays.adb:112
  trace at arrays.adb:107 --> M = (others => 'A')
  trace at arrays.adb:111 --> M = ('a' => 'A', others => 'A')
  trace at arrays.adb:112 --> M = ('a' => 'A', others => 'A')
counterexample expected for check at arrays.adb:120
  trace at arrays.adb:115 --> M = (others => Elem_2)
  trace at arrays.adb:119 --> M = (Elem_0 => Elem_2, others => Elem_2)
  trace at arrays.adb:120 --> M = (Elem_0 => Elem_2, others => Elem_2)
counterexample expected for check at arrays.adb:144
  trace at arrays.adb:139 --> R = (A => (3 => 5, others => 5), Exists => False)
  trace at arrays.adb:143 --> R = (A => (3 => 5, others => 5), Exists => False)
  trace at arrays.adb:144 --> R = (A => (3 => 5, others => 5), Exists => False)
counterexample expected for check at arrays.adb:148
  trace at arrays.adb:139 --> R = (A => (1 => 0, 3 => 5, others => 5), Exists => True)
  trace at arrays.adb:143 --> R = (A => (1 => 0, 3 => 5, others => 5), Exists => True)
  trace at arrays.adb:146 --> R = (A => (1 => 0, 3 => 5, others => 5), Exists => True)
  trace at arrays.adb:148 --> R = (A => (1 => 0, 3 => 5, others => 5), Exists => True)
counterexample expected for check at arrays.adb:199
  trace at arrays.adb:197 --> C = 'SOH'
  trace at arrays.adb:199 --> C = 'SOH' and I = 'SOH'
  trace at arrays.adb:203 --> R = (others => False) and X = 'NUL'
  trace at arrays.adb:204 --> C = 'SOH' and R = ('NUL' => False, others => False)
  trace at arrays.adb:206 --> C = 'SOH'
[PREVIOUS]  trace at arrays.adb:206 --> R = ('SOH' => True, others => False) and X = 'LC_Y_Diaeresis'
  trace at arrays.adb:209 --> R = ('SOH' => True, others => False) and Single_Char_Set_Broken'Result = ('SOH' => True, others => False)
