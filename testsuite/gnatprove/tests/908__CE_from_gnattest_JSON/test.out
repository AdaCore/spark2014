Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
simple.adb:7:16: high: range check might fail, cannot prove upper bound for X + Y (e.g. when X = 9 and Y = 6) [reason for check: returned value must fit in the result type of the function] [possible fix: add precondition (X <= T'Last - Y) to subprogram at simple.ads:15]
Summary logged in obj/gnatprove/gnatprove.out
Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
simple.adb:12:16: high: range check might fail, cannot prove upper bound for X * Y (e.g. when X = 8 and Y = 10) [reason for check: returned value must fit in the result type of the function] [possible fix: add precondition (X * Y <= T'Last) to subprogram at simple.ads:18]
Summary logged in obj/gnatprove/gnatprove.out
Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
simple.adb:18:22: medium: assertion might fail [possible fix: subprogram at simple.ads:21 should mention Alice and Bob in a precondition]
simple.adb:19:24: high: overflow check might fail, cannot prove upper bound for Alice.Age + Bob.Age (e.g. when Alice = (Age => 79, Height => 1310359911, Name => "VP") and Bob = (Age => 110, Height => 102129283, Name => "xY")) [reason for check: result of addition must fit in a 8-bits machine integer] [possible fix: add precondition (Alice.Age <= 127 - Bob.Age) to subprogram at simple.ads:21]
simple.adb:19:24: high: range check might fail, cannot prove upper bound for Alice.Age + Bob.Age (e.g. when Alice = (Age => 79, Height => 1310359911, Name => "VP") and Bob = (Age => 110, Height => 102129283, Name => "xY")) [reason for check: returned value must fit in the result type of the function] [possible fix: add precondition (Alice.Age <= Lifetime'Last - Bob.Age) to subprogram at simple.ads:21]
Summary logged in obj/gnatprove/gnatprove.out
Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
simple.adb:24:18: high: divide by zero might fail (e.g. when N = 3.1415000E+0) [possible fix: add precondition ((N - 3.1415) /= 0) to subprogram at simple.ads:23]
simple.adb:24:18: medium: float overflow check might fail [reason for check: result of floating-point division must be bounded] [possible fix: subprogram at simple.ads:23 should mention N in a precondition]
Summary logged in obj/gnatprove/gnatprove.out
Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
simple.adb:30:26: info: unrolling loop [info-unrolling-inlining]
simple.adb:31:23: high: range check might fail, cannot prove upper bound for Toto + A (Elt) (e.g. when A(0) = 5 and A(1) = 4 and A(2) = 5 and A(3) = 10 and A(4) = 10 and Elt = 2 and Toto = 9) [reason for check: result of addition must fit in the target type of the assignment] [possible fix: subprogram at simple.ads:29 should mention A in a precondition]
Summary logged in obj/gnatprove/gnatprove.out
Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
simple.adb:40:16: high: divide by zero might fail (e.g. when Z = 0)
Summary logged in obj/gnatprove/gnatprove.out
Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
simple.adb:46:31: info: cannot unroll loop (too many loop iterations) [info-unrolling-inlining]
simple.adb:47:33: medium: overflow check might fail, cannot prove upper bound for Total_Age + Integer (T.People (N).Age) [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: loop at line 46 should mention Total_Age in a loop invariant]
simple.adb:49:22: high: assertion might fail (e.g. when Total_Age = 1321) [possible fix: loop at line 46 should mention Total_Age in a loop invariant]
simple.ads:41:14: warning: subprogram "Check_Town" has no effect
Summary logged in obj/gnatprove/gnatprove.out
Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
simple.adb:54:22: high: assertion might fail (e.g. when A = Chicken) [possible fix: subprogram at simple.ads:45 should mention A in a precondition]
simple.ads:45:14: warning: subprogram "Mammals" has no effect
Summary logged in obj/gnatprove/gnatprove.out
Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
simple.adb:59:22: high: assertion might fail (e.g. when Name = "Michel" and Name'First = 5195837) [possible fix: subprogram at simple.ads:47 should mention Name in a precondition]
simple.ads:47:14: warning: subprogram "Not_Michel" has no effect
Summary logged in obj/gnatprove/gnatprove.out
Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
simple.adb:65:24: info: unrolling loop [info-unrolling-inlining]
simple.adb:66:25: medium: assertion might fail [possible fix: subprogram at simple.ads:51 should mention F in a precondition]
simple.ads:51:14: warning: subprogram "Check_Family" has no effect
Summary logged in obj/gnatprove/gnatprove.out
Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
simple.adb:73:24: info: unrolling loop [info-unrolling-inlining]
simple.adb:74:21: high: overflow check might fail, cannot prove upper bound for Res + L (I) (e.g. when I = 1 and L(0) = 1146316904 and L(1) = 1118256465 and L(2) = -136933 and L(3) = -530084345 and L(4) = -13081 and Res = 1146316904) [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: subprogram at simple.ads:55 should mention L in a precondition]
Summary logged in obj/gnatprove/gnatprove.out
Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
simple.adb:81:22: medium: assertion might fail, cannot prove S.Kind = Triangle [possible fix: subprogram at simple.ads:75 should mention S in a precondition]
simple.ads:75:14: warning: subprogram "Test_Shape" has no effect
Summary logged in obj/gnatprove/gnatprove.out
Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
simple.adb:87:29: info: cannot unroll loop (too many loop iterations) [info-unrolling-inlining]
simple.adb:88:25: high: assertion might fail (e.g. when N = 2 and R.Size = ? and R.Data(1) = -89084396 and R.Data(2) = 42 and R.Data(3) = 973711627 and R.Data(4) = 99) [possible fix: subprogram at simple.ads:83 should mention R in a precondition]
simple.ads:83:14: warning: subprogram "Check_Record" has no effect
Summary logged in obj/gnatprove/gnatprove.out
Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
simple.adb:94:22: high: assertion might fail (e.g. when D = -181) [possible fix: subprogram at simple.ads:85 should mention D in a precondition]
simple.ads:85:14: warning: subprogram "Several_Args" has no effect
Summary logged in obj/gnatprove/gnatprove.out
Running gnatprove
Running gnatprove
Running gnatprove
Running gnatprove
Running gnatprove
Running gnatprove
Running gnatprove
Running gnatprove
Running gnatprove
Running gnatprove
Running gnatprove
Running gnatprove
Running gnatprove
Running gnatprove
