<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.docbook.org/xml/4.5/docbookx.dtd">
  
<chapter id="Requirements">
  <title>Thumper Requirements</title>

  <para>This chapter contains the requirements of the Thumper system. In this context "system"
    means both the client and the server programs. We begin by enumerating the high level
    security properties required by the system as a whole. We then describe the requirements of
    the client and server programs separately.</para>

  <para>Since Thumper is a security sensitive program (particularly the server). Thus, it is
    useful to explicitly state the desired security goals of the system. These goals are listed
    as follows:</para>

  <itemizedlist>
    <listitem>
      <para><emphasis>Client Correctness</emphasis>. Pertaining to time stamp tokens received
        from a time stamp server: The client should never claim to have received a valid time
        stamp response when it did not. It is acceptable, although undesirable, for the client
        to incorrectly reject a valid response as invalid.</para>

      <para>Pertaining to validating time stamps for a document received from another user: The
        client should never claim to validate a time stamp for a document if the time stamp is,
        in fact, invalid. In addition, the client should always validate a time stamp for a
        document if the time stamp is, in fact, valid. </para>
    </listitem>
    <listitem>
      <para><emphasis>Server Correctness</emphasis>. The server should never produce a valid
        time stamp in response to an invalid request, instead it should produce an appropriate
        error response. In addition, The server should always produce a valid time stamp in
        response to a valid request.</para>
    </listitem>
    <listitem>
      <para><emphasis>Server Integrity</emphasis>. The server should always function according
        to specification regardless of the inputs it receives from clients. No input, no matter
        how maliciously formed should cause the server to crash or produce inappropriate
        outputs.</para>
    </listitem>
    <listitem>
      <para><emphasis>Network Safety</emphasis>. The client and server should be able to resist
        all attacks possible by a Dolev-Yao attacker except for (1) denial-of-services attacks
        arising from removing (or delaying arbitrarily) messages sent over the network, and (2)
        denial-of-service attacks arising from flooding the server with requests.</para>
    </listitem>
    <listitem>
      <para><emphasis>Lack of Information Leakage</emphasis>. The server never transmits any
        information pertaining to the private key except for the signatures generated by
        it.</para>
    </listitem>
    <listitem>
      <para><emphasis>Lack of Information Corruption</emphasis>. The server never writes to the
        private key either in memory or as stored on disk.</para>
    </listitem>
  </itemizedlist>

  <para>The system also makes one important security related assumption.</para>

  <itemizedlist>
    <listitem>
      <para><emphasis>Server System Security</emphasis>. The server assumes that all files
        stored on the local file system are private to the server process (this includes the
        server's private key(s)). The server assumes the time returned by the local operating
        system is correct.</para>
    </listitem>
  </itemizedlist>

  <para>Notice that the client makes no (significant) security assumptions. As required by
    RFC-3161 the client verifies the form and content of any time stamp returned by the server.
    Furthermore the protocol does not require the client to reveal the contents of the file
    being time stamped nor provide any identifying information.</para>

  <section>
    <title>Functional Requirements</title>

    <para>The client and server must implement the protocol detailed in RFC-3161 and its update
      RFC-5816. The public key of the server must be made available to the client, by a means
      not specified here, in the form of an X.509 v3 certificate as described in RFC-5280</para>

    <para>RFC-3161 defines a number of optional transport methods for time stamp messages. This
      version of Thumper is required to support a UDP based transport modelled after the "direct
      TCP transport" mechanism described in section 3.3 of RFC-3161. In particular only packets
      of type "tsaMsg" shall be accepted from the client and only responses of type
      "finalMsgRep" or "errorMsgRep" shall be generated by the server. No support for polling as
      defined in RFC-3161 is required. Additional transport mechanisms may be implemented as a
      future enhancement.</para>

    <para>The Thumper client must support two modes of operation. In the first mode the client
      must allow the user to obtain a time stamp for a document stored as a file in the file
      system. The resulting time stamp should be stored in a file as well using an unspecified
      format (which could be, but need not be, the raw bytes of the server's time stamp
      response). In the second mode the client must allow the user to verify a (document, time
      stamp) pair where both the document and the time stamp are stored as files in the file
      system.</para>

    <para>Creating and verifying time stamps of remote content, for example specified with a
      URL, is a possible future enhancement.</para>

    <para>In order to provide audit information, as hinted at in Section 4 of RFC-3161, the
      Thumper server shall store information about all time stamps generated in a PostgreSQL
      database server. This information shall include at least the following fields from each
      time stamp: the hash, the time, and the serial number. The IP address of the client shall
      not be stored.</para>

  </section>

  <section>
    <title>Non-Functional Requirements</title>

    <para>Although it is desirable for the server to work with any client conforming to
      RFC-3161, at this time it is only required for the Thumper server to work with the Thumper
      client. Thus the only optional features the Thumper server is required to support are
      those that are actually used by the Thumper client, despite the fact that a fully
      conforming server should support more optional features. As an example of this policy, the
      Thumper server need not implement an ability to provide its certificate if the Thumper
      client will never ask for one.</para>

    <para>All code dynamically contained in the <package>SPARK_Boundary</package> of both the
      client and the server must be subject to SPARK's analysis. That code should prove free of
      runtime errors to the greatest extent possible with current SPARK technology. Here
      "dynamically contained" means any code reachable by a subprogram inside the SPARK boundary
      except for subprograms in explicitly documented boundary variable packages. These boundary
      variables include packages accessing: the file system, the network, the logger, the
      database, and the cryptographic services of OpenSSL. All ASN.1 encoding and decoding,
      however, shall be done as verified SPARK.</para>

    <para>The server should return time stamps as quickly "as possible." However this
      specification imposes no specific performance requirements. It is acknowledged that some
      applications of this protocol may require that time stamps be generated at high speed
      and/or for a large number of clients approximately simultaneously. Support for concurrent
      clients is not required but also is not forbidden by these requirements.</para>
  </section>

</chapter>
