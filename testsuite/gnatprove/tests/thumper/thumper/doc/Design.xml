<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.docbook.org/xml/4.5/docbookx.dtd">
  
<chapter id="Design">
  <title>Thumper Design Documentation</title>

  <para>This chapter contains the design documentation for Thumper. This chapter is only of
    interest to Thumper contributors (or potential contributors). If you are a user of Thumper
    you can ignore this entire chapter.</para>

  <section id="Design.Server">
    <title>Server</title>

    <para>This section details the design of the Thumper server.</para>

    <section id="Design.Server.Architecture">
      <title>Architecture</title>

      <para>The Thumper server is an iterative UDP server. The use of UDP is reasonable because
        the protocol is a simple request/response protocol where all messages involved are small
        enough to fit into a single UDP datagram. Implementing a UDP service does not preclude
        the addition of a TCP service at a later time. Thus implementing only a UDP service now
        shouldn't produce any upward compatibility problems later.</para>

      <para>Higher performance could probably be obtained by a concurrent server. Computing
        digital signatures on time stamp tokens involves non-trivial computational effort. A
        multi-core server could be doing these computations for multiple clients simultaneously.
        However, since the requirements leave performance details unspecified we chose to
        implement a simpler iterative design. The iterative design is more amenable to SPARK
        analysis and might be more secure due to the elimination of potential concurrency
        related errors.</para>

      <para>In the current design the server does not write a log file (thus protecting client
        anonymity) and all configuration information is hard code into the program. The latter
        decision means that changes to the server configuration will require rebuilding (and
        re-proving) the server program. However, it also means that attackers can't modify the
        behavior of the server by rewriting some server configuration file.</para>

      <para>RFC-3161 requires that each time stamp generated by the server contain a unique
        serial number and that its uniqueness must be preserved across server restarts. To
        implement this, the server generates 64 bit serial numbers using a pseudo-random number
        generator (PRNG) seeded with the server's boot time. The period of the PRNG is
          2<superscript>64</superscript>, making it very unlikely that the same serial number
        will ever be generated twice. We note that the PRNG need not be secure; the security of
        the time stamps is not related to the serial numbers.</para>

      <para>The following summary of server inputs and outputs can be made. This list is
        complete; there are no other inputs or outputs.</para>

      <itemizedlist>
        <listitem>
          <para>On start-up the server reads its private key. If this file is unavailable or
            appear to be corrupt, the server aborts with an appropriate message.</para>
        </listitem>
        <listitem>
          <para>The server reads UDP datagrams from port 318 and writes UDP datagrams to port
            318.</para>
        </listitem>
        <listitem>
          <para>The server communicates with an external database server where information about
            each time stamp created is stored for auditing purposes.</para>
        </listitem>
      </itemizedlist>

      <para>In order to satisfy the <emphasis>Lack of Information Corruption</emphasis>
        requirement it must be shown that the server never writes to the private key and that no
        information in the incoming datagrams is used to derive the value of the time stamp
        serial number.</para>

      <para>The server architecture consists of a main loop that reads a datagram from the
        network, validates it, and either sends an error response or a time stamp response as
        appropriate. If a time stamp response was sent the server updates the time stamp serial
        number.</para>

      <!-- TODO: Create a figure that shows the architecture. -->
    </section>

  </section>


  <section id="Design.Client">
    <title>Client</title>

    <para>This section details the design of the Thumper client.</para>
  </section>

</chapter>
