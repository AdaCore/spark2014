test.adb:11:16: medium: postcondition might fail
{"ide_request": "Command_req", "node_ID":89, "command" : "introduce_premises" }

{"ide_request": "Get_first_unproven_node", "node_ID":89}

{"ide_request": "Command_req", "node_ID":89, "command" : "z3" }

{"ide_request": "Get_task", "node_ID":89, "do_intros": false, "loc": false, "full_context": false}

{"ide_request": "Get_task", "node_ID":92, "do_intros": false, "loc": false, "full_context": false}

{"ide_request": "Exit_req"}

Initialized
New_node 89 88
Node_change 89
New_node 90 89
Node_change 90
Message
New_node 91 89
Node_change 91
New_node 92 91
Node_change 92
New_node 93 89
Node_change 93
Node_change 93
Task
--------------------------- Local Context ---------------------------

------------------------------- Goal --------------------------------

goal WP_parameter def :
  forall test__parity__result:int, result:int, test__parity__result1:int,
   test__parity__result2:int, test__parity__result3:int,
   test__parity__result4:int, test__parity__result5:int.
   forall result1:int.
    dynamic_property first last A //
    A > 0 //
    (((test__parity__result1 = test__parity__result2 //
       test__parity__result3 = test__parity__result1) //
      result = test__parity__result // test__parity__result1 = A) //
     mk int__ref test__parity__result4 = mk int__ref test__parity__result2 //
     test__parity__result5 = test__parity__result3) //
    result1 = test__parity__result4 ->
    (exists x:int. (0 <= x // x <= 255) // (A = (x + x) // A = ((x + x) + 2)))


Node_change 93
Node_change 93
Node_change 93
Node_change 93
Task
--------------------------- Local Context ---------------------------

------------------------------- Goal --------------------------------

constant Parity5 : int

constant result1 : int

constant Parity4 : int

constant Parity3 : int

constant Parity2 : int

constant Parity1 : int

constant Parity : int

constant result : int

axiom H : dynamic_property first last A

axiom H1 : A > 0

axiom H2 : Parity4 = Parity3

axiom H3 : Parity2 = Parity4

axiom H4 : result1 = Parity5

axiom H5 : Parity4 = A

axiom H6 : mk int__ref Parity1 = mk int__ref Parity3

axiom H7 : Parity = Parity2

axiom H8 : result = Parity1

goal WP_parameter def :
  exists x:int. (0 <= x // x <= 255) // (A = (x + x) // A = ((x + x) + 2))


DONE
