arrays.adb:6:15: info: initialization of "S" proved
arrays.adb:6:17: medium: overflow check might fail (e.g. when J = 1 and S = 2147483647 and X = (others => 1) and X'First = 1 and X'Last = 1)
arrays.adb:8:14: info: initialization of "S" proved
arrays.adb:15:19: info: division check proved (CVC4: 1 VC)
arrays.adb:16:18: info: initialization of "C" proved
arrays.adb:16:20: medium: overflow check might fail (e.g. when C = 2147483647)
arrays.adb:19:14: info: initialization of "C" proved
arrays.adb:23:09: info: range check proved (CVC4: 1 VC)
arrays.adb:23:17: info: overflow check proved (CVC4: 1 VC)
arrays.adb:23:17: info: range check proved (CVC4: 1 VC)
arrays.ads:5:14: medium: postcondition might fail, cannot prove Sum'Result >= X'length (e.g. when Sum'Result = 1 and X = (others => 1) and X'First = 1 and X'Last = 2)
arrays.ads:5:29: info: range check proved (CVC4: 1 VC)
arrays.ads:6:06: medium: contract cases might not be complete (e.g. when X = (others => 1) and X'First = 1 and X'Last = 1)
arrays.ads:6:06: medium: contract cases might not be disjoint (e.g. when X = (others => 0) and X'First = 1 and X'Last = 0)
arrays.ads:6:38: info: contract case proved (CVC4: 2 VC)
arrays.ads:7:52: info: index check proved (CVC4: 2 VC)
arrays.ads:7:60: info: contract case proved (CVC4: 2 VC)
arrays.ads:20:14: medium: postcondition might fail, cannot prove Count_Even'Result <= X'length (e.g. when Count_Even'Result = 2 and X = (others => 2) and X'First = 1 and X'Last = 1)
arrays.ads:20:36: info: range check proved (CVC4: 1 VC)
arrays.ads:21:06: medium: contract cases might not be complete (e.g. when J = 0 and X = (others => 0) and X'First = 1 and X'Last = 1)
arrays.ads:21:38: info: contract case proved (CVC4: 2 VC)
