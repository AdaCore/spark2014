uninitialized.adb:6:07: use of uninitialized variable "B" [uninitialized]


gnatprove: error during translation to intermediate language, aborting.

digraph G {
   graph [splines=True];
    1 [label="start",shape="plaintext"];
    2 [label="end",shape="plaintext"];
    3 [label="a'initial\n(global)",shape="plaintext",fontcolor="red"];
    4 [label="a'final\n(global)",shape="plaintext",fontcolor="blue"];
    5 [label="b'initial",shape="plaintext",fontcolor="red"];
    6 [label="b'final",shape="plaintext"];
    8 [label="a := 100;"];
    9 [label="pragma assert (a > b);<<<pragma check (assert, a > b);>>>"];

    1 ->  8 [arrowType="normal"];
    2 ->  4 [arrowType="normal"];
    2 ->  6 [arrowType="normal"];
    3 ->  1 [arrowType="normal"];
    5 ->  1 [arrowType="normal"];
    8 ->  9 [arrowType="normal"];
    9 ->  2 [arrowType="normal"];
}

digraph G {
   graph [splines=True];
    1 [label="start",shape="plaintext"];
    3 [label="a'initial\n(global)",shape="plaintext",fontcolor="red"];
    4 [label="a'final\n(global)",shape="plaintext",fontcolor="blue"];
    5 [label="b'initial",shape="plaintext",fontcolor="red"];
    6 [label="b'final",shape="plaintext"];
    8 [label="a := 100;"];
    9 [label="pragma assert (a > b);<<<pragma check (assert, a > b);>>>"];

    1 ->  8 [arrowType="normal"];
    1 ->  9 [arrowType="normal"];
    5 ->  6 [arrowType="normal",color="red"];
    5 ->  9 [arrowType="normal",color="red"];
    8 ->  4 [arrowType="normal",color="red"];
    8 ->  9 [arrowType="normal",color="red"];
}

digraph G {
   graph [splines=True];
    1 [label="start",shape="plaintext"];
    2 [label="end",shape="plaintext"];
    3 [label="state'initial\n(global)",shape="plaintext"];
    4 [label="state'final\n(global)",shape="plaintext",fontcolor="blue"];
    5 [label="speed'initial\n(global)",shape="plaintext"];
    6 [label="speed'final\n(global)",shape="plaintext",fontcolor="blue"];
    8 [label="pragma loop_invariant (speed_is_valid);<<<pragma check (loop_invariant, speed_is_valid);>>>"];
    9 [label="if speed > 0\nLoops:&nbsp;L_1",shape="diamond"];
    10 [label="call state_update\nLoops:&nbsp;L_1",shape="box"];
    11 [label="i'in&nbsp;:=&nbsp;brake",shape="plaintext"];
    12 [label="global&nbsp;state'in",shape="plaintext"];
    13 [label="global&nbsp;speed'in",shape="plaintext"];
    14 [label="global&nbsp;state'out",shape="plaintext"];
    15 [label="global&nbsp;speed'out",shape="plaintext"];
    16 [label="call state_update\nLoops:&nbsp;L_1",shape="box"];
    17 [label="i'in&nbsp;:=&nbsp;accelerate",shape="plaintext"];
    18 [label="global&nbsp;state'in",shape="plaintext"];
    19 [label="global&nbsp;speed'in",shape="plaintext"];
    20 [label="global&nbsp;state'out",shape="plaintext"];
    21 [label="global&nbsp;speed'out",shape="plaintext"];
    22 [label="while state /= still",shape="diamond"];

    1 ->  22 [arrowType="normal"];
    2 ->  4 [arrowType="normal"];
    2 ->  6 [arrowType="normal"];
    3 ->  1 [arrowType="normal"];
    5 ->  1 [arrowType="normal"];
    8 ->  9 [arrowType="normal"];
    9 ->  10 [arrowType="normal"];
    9 ->  16 [arrowType="normal"];
    10 ->  11 [arrowType="normal"];
    11 ->  12 [arrowType="normal"];
    12 ->  13 [arrowType="normal"];
    13 ->  14 [arrowType="normal"];
    14 ->  15 [arrowType="normal"];
    15 ->  22 [arrowType="normal"];
    16 ->  17 [arrowType="normal"];
    17 ->  18 [arrowType="normal"];
    18 ->  19 [arrowType="normal"];
    19 ->  20 [arrowType="normal"];
    20 ->  21 [arrowType="normal"];
    21 ->  22 [arrowType="normal"];
    22 ->  2 [arrowType="normal"];
    22 ->  8 [arrowType="normal"];
}

digraph G {
   graph [splines=True];
    1 [label="start",shape="plaintext"];
    3 [label="state'initial\n(global)",shape="plaintext"];
    4 [label="state'final\n(global)",shape="plaintext",fontcolor="blue"];
    5 [label="speed'initial\n(global)",shape="plaintext"];
    6 [label="speed'final\n(global)",shape="plaintext",fontcolor="blue"];
    8 [label="pragma loop_invariant (speed_is_valid);<<<pragma check (loop_invariant, speed_is_valid);>>>"];
    9 [label="if speed > 0\nLoops:&nbsp;L_1",shape="diamond"];
    10 [label="call state_update\nLoops:&nbsp;L_1",shape="box"];
    11 [label="i'in&nbsp;:=&nbsp;brake",shape="plaintext"];
    12 [label="global&nbsp;state'in",shape="plaintext"];
    13 [label="global&nbsp;speed'in",shape="plaintext"];
    14 [label="global&nbsp;state'out",shape="plaintext"];
    15 [label="global&nbsp;speed'out",shape="plaintext"];
    16 [label="call state_update\nLoops:&nbsp;L_1",shape="box"];
    17 [label="i'in&nbsp;:=&nbsp;accelerate",shape="plaintext"];
    18 [label="global&nbsp;state'in",shape="plaintext"];
    19 [label="global&nbsp;speed'in",shape="plaintext"];
    20 [label="global&nbsp;state'out",shape="plaintext"];
    21 [label="global&nbsp;speed'out",shape="plaintext"];
    22 [label="while state /= still",shape="diamond"];

    1 ->  22 [arrowType="normal"];
    3 ->  4 [arrowType="normal",color="red"];
    3 ->  8 [arrowType="normal",color="red"];
    3 ->  12 [arrowType="normal",color="red"];
    3 ->  18 [arrowType="normal",color="red"];
    3 ->  22 [arrowType="normal",color="red"];
    5 ->  6 [arrowType="normal",color="red"];
    5 ->  8 [arrowType="normal",color="red"];
    5 ->  9 [arrowType="normal",color="red"];
    5 ->  13 [arrowType="normal",color="red"];
    5 ->  19 [arrowType="normal",color="red"];
    9 ->  10 [arrowType="normal"];
    9 ->  16 [arrowType="normal"];
    10 ->  11 [arrowType="normal"];
    10 ->  12 [arrowType="normal"];
    10 ->  13 [arrowType="normal"];
    10 ->  14 [arrowType="normal"];
    10 ->  15 [arrowType="normal"];
    11 ->  14 [arrowType="normal",color="cornflowerblue"];
    11 ->  15 [arrowType="normal",color="cornflowerblue"];
    12 ->  14 [arrowType="normal",color="cornflowerblue"];
    12 ->  15 [arrowType="normal",color="cornflowerblue"];
    13 ->  14 [arrowType="normal",color="cornflowerblue"];
    13 ->  15 [arrowType="normal",color="cornflowerblue"];
    14 ->  4 [arrowType="normal",color="red"];
    14 ->  8 [arrowType="normal",color="red"];
    14 ->  12 [arrowType="normal",color="red"];
    14 ->  18 [arrowType="normal",color="red"];
    14 ->  22 [arrowType="normal",color="red"];
    15 ->  6 [arrowType="normal",color="red"];
    15 ->  8 [arrowType="normal",color="red"];
    15 ->  9 [arrowType="normal",color="red"];
    15 ->  13 [arrowType="normal",color="red"];
    15 ->  19 [arrowType="normal",color="red"];
    16 ->  17 [arrowType="normal"];
    16 ->  18 [arrowType="normal"];
    16 ->  19 [arrowType="normal"];
    16 ->  20 [arrowType="normal"];
    16 ->  21 [arrowType="normal"];
    17 ->  20 [arrowType="normal",color="cornflowerblue"];
    17 ->  21 [arrowType="normal",color="cornflowerblue"];
    18 ->  20 [arrowType="normal",color="cornflowerblue"];
    18 ->  21 [arrowType="normal",color="cornflowerblue"];
    19 ->  20 [arrowType="normal",color="cornflowerblue"];
    19 ->  21 [arrowType="normal",color="cornflowerblue"];
    20 ->  4 [arrowType="normal",color="red"];
    20 ->  8 [arrowType="normal",color="red"];
    20 ->  12 [arrowType="normal",color="red"];
    20 ->  18 [arrowType="normal",color="red"];
    20 ->  22 [arrowType="normal",color="red"];
    21 ->  6 [arrowType="normal",color="red"];
    21 ->  8 [arrowType="normal",color="red"];
    21 ->  9 [arrowType="normal",color="red"];
    21 ->  13 [arrowType="normal",color="red"];
    21 ->  19 [arrowType="normal",color="red"];
    22 ->  8 [arrowType="normal"];
    22 ->  9 [arrowType="normal"];
    22 ->  22 [arrowType="normal"];
}

digraph G {
   graph [splines=True];
    1 [label="start",shape="plaintext"];
    2 [label="end",shape="plaintext"];
    3 [label="state'initial\n(global)",shape="plaintext"];
    4 [label="state'final\n(global)",shape="plaintext",fontcolor="red"];
    5 [label="speed'initial\n(global)",shape="plaintext"];
    6 [label="speed'final\n(global)",shape="plaintext",fontcolor="red"];
    7 [label="speed_is_valid'initial",shape="plaintext",fontcolor="red"];
    8 [label="speed_is_valid'final",shape="plaintext",fontcolor="blue"];
    10 [label="return (case state is when still => speed = 0, when forward => speed >0, when backward => speed < 0)<<<(case state is when still => speed =0, when forward => speed > 0, when backward => speed < 0)>>>;"];

    1 ->  10 [arrowType="normal"];
    2 ->  4 [arrowType="normal"];
    2 ->  6 [arrowType="normal"];
    2 ->  8 [arrowType="normal"];
    3 ->  1 [arrowType="normal"];
    5 ->  1 [arrowType="normal"];
    7 ->  1 [arrowType="normal"];
    10 ->  2 [arrowType="normal"];
}

digraph G {
   graph [splines=True];
    1 [label="start",shape="plaintext"];
    3 [label="state'initial\n(global)",shape="plaintext"];
    4 [label="state'final\n(global)",shape="plaintext",fontcolor="red"];
    5 [label="speed'initial\n(global)",shape="plaintext"];
    6 [label="speed'final\n(global)",shape="plaintext",fontcolor="red"];
    7 [label="speed_is_valid'initial",shape="plaintext",fontcolor="red"];
    8 [label="speed_is_valid'final",shape="plaintext",fontcolor="blue"];
    10 [label="return (case state is when still => speed = 0, when forward => speed >0, when backward => speed < 0)<<<(case state is when still => speed =0, when forward => speed > 0, when backward => speed < 0)>>>;"];

    1 ->  10 [arrowType="normal"];
    3 ->  4 [arrowType="normal",color="red"];
    3 ->  10 [arrowType="normal",color="red"];
    5 ->  6 [arrowType="normal",color="red"];
    5 ->  10 [arrowType="normal",color="red"];
    10 ->  8 [arrowType="normal",color="red"];
}

digraph G {
   graph [splines=True];
    1 [label="start",shape="plaintext"];
    2 [label="end",shape="plaintext"];
    3 [label="i'initial",shape="plaintext"];
    4 [label="i'final",shape="plaintext",fontcolor="red"];
    5 [label="state'initial\n(global)",shape="plaintext"];
    6 [label="state'final\n(global)",shape="plaintext",fontcolor="blue"];
    7 [label="speed'initial\n(global)",shape="plaintext"];
    8 [label="speed'final\n(global)",shape="plaintext",fontcolor="blue"];
    10 [label="if i = accelerate",shape="diamond"];
    11 [label="if speed < speed_type'last<<<100>>>",shape="diamond"];
    12 [label="speed := {speed + 1};"];
    13 [label="elsif i = brake",shape="diamond"];
    14 [label="if speed > speed_type'first<<<-100>>>",shape="diamond"];
    15 [label="speed := {speed - 1};"];
    16 [label="if speed = 0",shape="diamond"];
    17 [label="state := still;"];
    18 [label="elsif speed = 1 and then i = accelerate",shape="diamond"];
    19 [label="state := forward;"];
    20 [label="elsif speed = -1<<<-1>>> and then i = accelerate",shape="diamond"];
    21 [label="state := backward;"];

    1 ->  10 [arrowType="normal"];
    2 ->  4 [arrowType="normal"];
    2 ->  6 [arrowType="normal"];
    2 ->  8 [arrowType="normal"];
    3 ->  1 [arrowType="normal"];
    5 ->  1 [arrowType="normal"];
    7 ->  1 [arrowType="normal"];
    10 ->  11 [arrowType="normal"];
    10 ->  13 [arrowType="normal"];
    11 ->  12 [arrowType="normal"];
    11 ->  16 [arrowType="normal"];
    12 ->  16 [arrowType="normal"];
    13 ->  14 [arrowType="normal"];
    13 ->  16 [arrowType="normal"];
    14 ->  15 [arrowType="normal"];
    14 ->  16 [arrowType="normal"];
    15 ->  16 [arrowType="normal"];
    16 ->  17 [arrowType="normal"];
    16 ->  18 [arrowType="normal"];
    17 ->  2 [arrowType="normal"];
    18 ->  19 [arrowType="normal"];
    18 ->  20 [arrowType="normal"];
    19 ->  2 [arrowType="normal"];
    20 ->  2 [arrowType="normal"];
    20 ->  21 [arrowType="normal"];
    21 ->  2 [arrowType="normal"];
}

digraph G {
   graph [splines=True];
    1 [label="start",shape="plaintext"];
    3 [label="i'initial",shape="plaintext"];
    4 [label="i'final",shape="plaintext",fontcolor="red"];
    5 [label="state'initial\n(global)",shape="plaintext"];
    6 [label="state'final\n(global)",shape="plaintext",fontcolor="blue"];
    7 [label="speed'initial\n(global)",shape="plaintext"];
    8 [label="speed'final\n(global)",shape="plaintext",fontcolor="blue"];
    10 [label="if i = accelerate",shape="diamond"];
    11 [label="if speed < speed_type'last<<<100>>>",shape="diamond"];
    12 [label="speed := {speed + 1};"];
    13 [label="elsif i = brake",shape="diamond"];
    14 [label="if speed > speed_type'first<<<-100>>>",shape="diamond"];
    15 [label="speed := {speed - 1};"];
    16 [label="if speed = 0",shape="diamond"];
    17 [label="state := still;"];
    18 [label="elsif speed = 1 and then i = accelerate",shape="diamond"];
    19 [label="state := forward;"];
    20 [label="elsif speed = -1<<<-1>>> and then i = accelerate",shape="diamond"];
    21 [label="state := backward;"];

    1 ->  10 [arrowType="normal"];
    1 ->  16 [arrowType="normal"];
    3 ->  4 [arrowType="normal",color="red"];
    3 ->  10 [arrowType="normal",color="red"];
    3 ->  13 [arrowType="normal",color="red"];
    3 ->  18 [arrowType="normal",color="red"];
    3 ->  20 [arrowType="normal",color="red"];
    5 ->  6 [arrowType="normal",color="red"];
    7 ->  8 [arrowType="normal",color="red"];
    7 ->  11 [arrowType="normal",color="red"];
    7 ->  12 [arrowType="normal",color="red"];
    7 ->  14 [arrowType="normal",color="red"];
    7 ->  15 [arrowType="normal",color="red"];
    7 ->  16 [arrowType="normal",color="red"];
    7 ->  18 [arrowType="normal",color="red"];
    7 ->  20 [arrowType="normal",color="red"];
    10 ->  11 [arrowType="normal"];
    10 ->  13 [arrowType="normal"];
    11 ->  12 [arrowType="normal"];
    12 ->  8 [arrowType="normal",color="red"];
    12 ->  12 [arrowType="normal",color="red"];
    12 ->  16 [arrowType="normal",color="red"];
    12 ->  18 [arrowType="normal",color="red"];
    12 ->  20 [arrowType="normal",color="red"];
    13 ->  14 [arrowType="normal"];
    14 ->  15 [arrowType="normal"];
    15 ->  8 [arrowType="normal",color="red"];
    15 ->  15 [arrowType="normal",color="red"];
    15 ->  16 [arrowType="normal",color="red"];
    15 ->  18 [arrowType="normal",color="red"];
    15 ->  20 [arrowType="normal",color="red"];
    16 ->  17 [arrowType="normal"];
    16 ->  18 [arrowType="normal"];
    17 ->  6 [arrowType="normal",color="red"];
    18 ->  19 [arrowType="normal"];
    18 ->  20 [arrowType="normal"];
    19 ->  6 [arrowType="normal",color="red"];
    20 ->  21 [arrowType="normal"];
    21 ->  6 [arrowType="normal",color="red"];
}

