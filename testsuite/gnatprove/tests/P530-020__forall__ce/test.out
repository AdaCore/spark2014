counterex_forall.adb:11:41: info: range check proved (CVC4: 4 VC)
counterex_forall.adb:12:43: medium: "R" might not be initialized
counterex_forall.adb:12:43: medium: loop invariant might fail in first iteration, cannot prove R (I) = (I = C + 1)
counterex_forall.adb:12:43: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove R (I) = (I = C + 1)
counterex_forall.adb:12:58: medium: overflow check might fail, cannot prove upper bound for C + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
counterex_forall.adb:14:14: medium: "R" might not be initialized
counterex_forall.adb:19:25: info: cannot unroll loop (too many loop iterations)
counterex_forall.adb:21:22: high: "R" is not initialized
counterex_forall.adb:21:28: high: overflow check might fail, cannot prove upper bound for R (X) + Y (e.g. when R = (others => Integer'Last) and X = 1 and Y = 1) [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: loop invariant at line 22 should mention R]
counterex_forall.adb:22:36: info: loop invariant preservation proved (CVC4: 1 VC)
counterex_forall.adb:24:41: medium: loop invariant might fail in first iteration, cannot prove I + J < X + Y + 1
counterex_forall.adb:24:43: info: overflow check proved (CVC4: 4 VC)
counterex_forall.ads:12:22: medium: postcondition might fail, cannot prove Single_Char_Set_Broken'Result (I) = (I > C)
