flight_manager.adb:9:17: info: add a contract to analyze it separately from calling contexts
flight_manager.adb:9:17: info: local subprogram "Adjust_Speed" only analyzed in the context of calls
flight_manager.adb:16:19: medium: "Result.X_Speed" might not be initialized, in call inlined at flight_manager.adb:42
flight_manager.adb:16:19: medium: "Result.Y_Speed" might not be initialized, in call inlined at flight_manager.adb:43
flight_manager.adb:16:21: medium: overflow check might fail, cannot prove lower bound for F * Distance_To_Target, in call inlined at flight_manager.adb:42 (e.g. when Result = (X_Speed => 100, Y_Speed => -100)) [reason for check: result of multiplication must fit in a 32-bits machine integer]
flight_manager.adb:16:21: medium: overflow check might fail, cannot prove lower bound for F * Distance_To_Target, in call inlined at flight_manager.adb:43 (e.g. when Result = (X_Speed => -100, Y_Speed => 100)) [reason for check: result of multiplication must fit in a 32-bits machine integer]
flight_manager.adb:16:43: info: division check proved (CVC5: 1 VC), in call inlined at flight_manager.adb:42
flight_manager.adb:16:43: info: division check proved (CVC5: 1 VC), in call inlined at flight_manager.adb:43
flight_manager.adb:23:20: high: overflow check might fail, cannot prove upper bound for -I (e.g. when I = Integer'First) [reason for check: result of negation must fit in a 32-bits machine integer] [possible fix: add precondition (-I in Integer) to subprogram at line 20]
flight_manager.adb:42:56: medium: overflow check might fail, cannot prove lower bound for Position_X - Target_X (e.g. when Position_X = Integer'First and Target_X = 1) [reason for check: result of subtraction must fit in a 32-bits machine integer] [possible fix: add precondition (if Target_X >= 0 then Position_X >= Integer'First + Target_X else Position_X <= Integer'Last + Target_X) to subprogram at flight_manager.ads:7]
flight_manager.adb:43:56: medium: overflow check might fail, cannot prove lower bound for Position_Y - Target_Y (e.g. when Position_Y = Integer'First and Target_Y = 1) [reason for check: result of subtraction must fit in a 32-bits machine integer] [possible fix: add precondition (if Target_Y >= 0 then Position_Y >= Integer'First + Target_Y else Position_Y <= Integer'Last + Target_Y) to subprogram at flight_manager.ads:7]
flight_manager.adb:45:14: medium: "Result.X_Speed" might not be initialized
flight_manager.adb:45:14: medium: "Result.Y_Speed" might not be initialized
flight_manager.ads:11:14: medium: postcondition might fail, cannot prove ((Position_X + Set_Engine_Speed'Result.X_Speed) - Target_X) < (Position_X + Set_Engine_Speed'Result.X_Speed) (e.g. when Position_X = 1 and Set_Engine_Speed'Result = (X_Speed => -100, Y_Speed => -100) and Target_X = 0)
flight_manager.ads:11:27: info: overflow check proved (CVC5: 2 VC)
flight_manager.ads:11:62: medium: overflow check might fail, cannot prove lower bound for (Position_X + Set_Engine_Speed'Result.X_Speed) - Target_X [reason for check: result of subtraction must fit in a 32-bits machine integer]
flight_manager.ads:12:18: info: overflow check proved (CodePeer)
flight_manager.ads:13:23: info: overflow check proved (CVC5: 2 VC)
flight_manager.ads:13:58: medium: overflow check might fail, cannot prove lower bound for (Position_Y + Set_Engine_Speed'Result.Y_Speed) - Target_Y [reason for check: result of subtraction must fit in a 32-bits machine integer]
flight_manager.ads:14:18: info: overflow check proved (CodePeer)
