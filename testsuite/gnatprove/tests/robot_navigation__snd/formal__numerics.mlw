module Floating_Point_With_Custom_Range
  use import "_gnatprove_standard".Main
  use        "_gnatprove_standard".Floating
  use import real.RealInfix
  use export "ada__model_th".Floating_Point_Theory

  type t

  (* This module will be cloned and round_real_tmp possibly replaced.
     We keep round_real to denote the resulting rounding function. *)

  (*
  function round_real_tmp real : real
  function round_real (x : real) : real = round_real_tmp (x)
  *)
  function round_real (x : real) : real = x

  function attr__ATTRIBUTE_FIRST  : real

  function attr__ATTRIBUTE_LAST  : real

  (* The first and last value of the floating-point type are exactly
     represented. So round_real is the identity on such values. *)

  axiom representable_first :
    round_real attr__ATTRIBUTE_FIRST = attr__ATTRIBUTE_FIRST

  axiom representable_last :
    round_real attr__ATTRIBUTE_LAST = attr__ATTRIBUTE_LAST

  predicate in_range  (x : real)

  function to_real t : real

  function of_real real : t

  val of_real (x : real) : t
    requires { true }
    ensures  { to_real (result) = x }

  val range_check_ (n : real)  :real
    requires { in_range n }
    ensures { result = n }

  predicate eq  (x : t) (y : t) = (to_real x = to_real y)

  axiom range_axiom :
    forall x  : t.  in_range (to_real x)

(* FIXME: something is broken with Alt-Ergo;
          looks like a problem with inline triggers.

*)
  axiom coerce_axiom :
    forall x  : real [to_real (of_real x) | in_range x, of_real x].
      in_range x -> to_real (of_real x) = x

  axiom inversion_axiom :
    forall x : t [to_real x].
      of_real ( to_real(x) ) = x

  function attr__ATTRIBUTE_IMAGE real : __image

  predicate attr__ATTRIBUTE_VALUE__pre_check (x : __image)

  function attr__ATTRIBUTE_VALUE __image : real

  val attr__ATTRIBUTE_VALUE_ (x : __image) : real
    requires { attr__ATTRIBUTE_VALUE__pre_check x }
    ensures { true }

 function dummy :t
end

(* Module for axiomatizing type "positive_float" defined at formal-numerics.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Formal__numerics__positive_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type positive_float 
 
 function attr__ATTRIBUTE_FIRST  : real
 
 function attr__ATTRIBUTE_LAST : real
 
 function attr__ATTRIBUTE_MODULUS 
   :real

 predicate in_range  (x : real) =
   ( x >. 0.0 || false )
 
 clone export Floating_Point_With_Custom_Range with
 type t = positive_float, 
 function attr__ATTRIBUTE_FIRST = attr__ATTRIBUTE_FIRST, 
 function attr__ATTRIBUTE_LAST = attr__ATTRIBUTE_LAST,
 predicate in_range = in_range
end

module Formal__numerics__nonnegative_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type nonnegative_float 
 
 function attr__ATTRIBUTE_FIRST  : real
 
 function attr__ATTRIBUTE_LAST : real
 
 function attr__ATTRIBUTE_MODULUS 
   :real

 predicate in_range  (x : real) =
   ( x >=. 0.0 || false)
 
 clone export Floating_Point_With_Custom_Range with
 type t = nonnegative_float,
 function attr__ATTRIBUTE_FIRST = attr__ATTRIBUTE_FIRST, 
 function attr__ATTRIBUTE_LAST = attr__ATTRIBUTE_LAST,
 predicate in_range = in_range
end

module Formal__numerics__negative_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type negative_float 
 
 function attr__ATTRIBUTE_FIRST  : real
 
 function attr__ATTRIBUTE_LAST : real
 
 function attr__ATTRIBUTE_MODULUS 
   :real

 predicate in_range  (x : real) =
   ( x <. 0.0 || false)

 clone export Floating_Point_With_Custom_Range with
 type t = negative_float, 
 function attr__ATTRIBUTE_FIRST = attr__ATTRIBUTE_FIRST, 
 function attr__ATTRIBUTE_LAST = attr__ATTRIBUTE_LAST,
 predicate in_range = in_range
end

module Formal__numerics__unbounded_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type unbounded_float
 
 function attr__ATTRIBUTE_FIRST  : real
 
 function attr__ATTRIBUTE_LAST : real
 
 function attr__ATTRIBUTE_MODULUS 
   :real

 predicate in_range  (x : real) =
   ( true || true )

 clone export Floating_Point_With_Custom_Range with
 type t = unbounded_float,
 function attr__ATTRIBUTE_FIRST = attr__ATTRIBUTE_FIRST, 
 function attr__ATTRIBUTE_LAST = attr__ATTRIBUTE_LAST,
 predicate in_range = in_range
end

module Formal__numerics__nonzero_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type nonzero_float
 
 function attr__ATTRIBUTE_FIRST  : real
 
 function attr__ATTRIBUTE_LAST : real
 
 function attr__ATTRIBUTE_MODULUS 
   :real

 predicate in_range  (x : real) =
   ( x <> 0.0 || false )

 clone export Floating_Point_With_Custom_Range with
 type t = nonzero_float,
 function attr__ATTRIBUTE_FIRST = attr__ATTRIBUTE_FIRST, 
 function attr__ATTRIBUTE_LAST = attr__ATTRIBUTE_LAST,
 predicate in_range = in_range
end

module Formal__numerics__pi
 use import "_gnatprove_standard".Main
 (* FIXME: universal_real would be more appropriate,
          but it seems eqivalent to float.

 use        "_standard__types_in_spec".Standard__universal_real
 use        Standard__universal_real
 *)
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use        "trigSimpl".Trigonometry

 function pi (__void_param : unit) : Standard__float.float

 val pi (__void_param : unit) : Standard__float.float
  ensures { result = Standard__float.of_real (Trigonometry.pi) }

end

module Formal__numerics__pi__expr_fun_closure
  (* FIXME: probably this should not be empty *)
end

module Formal__numerics__e
 use import "_gnatprove_standard".Main
 (* FIXME: universal_real would be more appropriate,
          but it seems eqivalent to float.

 use        "_standard__types_in_spec".Standard__universal_real
 use        Standard__universal_real
 *)
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use        "real".ExpLog

 function e (__void_param : unit) : Standard__float.float

 val e (__void_param : unit) : Standard__float.float
  ensures { result = Standard__float.of_real (ExpLog.e) }

end

module Formal__numerics__e__expr_fun_closure
  (* FIXME: probably this should not be empty *)
end

