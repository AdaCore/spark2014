module Formal__numerics__elementary_functions__sqrt
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating

 use import "real".RealInfix
 use        "real".Square

 function sqrt (x : real) : Standard__float.float

 val sqrt (x : real) : Standard__float.float
  requires { x >=. 0.0 }
  ensures  { result = Standard__float.of_real (Square.sqrt x) }

end

module Formal__numerics__elementary_functions__log
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "real".ExpLog

 function log (x : real) : Standard__float.float

 val log (x : real) : Standard__float.float
  requires { x >. 0.0 }
  ensures  { result = Standard__float.of_real (ExpLog.log x) }

end

module Formal__numerics__elementary_functions__log__2
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "real".ExpLog

 function log__2 (x : real) (base : real) : Standard__float.float

 val log__2 (x : real) (base : real) : Standard__float.float
  requires { x >. 0.0 /\ ( base >. 0.0 && base <> 1.0) }
  ensures  { result = Standard__float.of_real ((ExpLog.log x) /. (ExpLog.log base)) }

end

module Formal__numerics__elementary_functions__exp
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "real".ExpLog

 function exp (x : real) : Standard__float.float

 val exp (x : real) : Standard__float.float
  requires { true }
  ensures  { result = Standard__float.of_real (ExpLog.exp x) }

end

module Formal__numerics__elementary_functions__Oexpon
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "real".PowerReal

 function oexpon (left : real) (right : real) : Standard__float.float

 val oexpon (left : real) (right : real) : Standard__float.float
  requires { ( left = 0.0 && right >. 0.0 ) \/ ( left >. 0.0 && right <> 0.0 ) }
  ensures  { result = Standard__float.of_real (PowerReal.pow left right) }

end

module Formal__numerics__elementary_functions__sin
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "trigSimpl".Trigonometry

 function sin (x : real) : Standard__float.float

 val sin (x : real) : Standard__float.float
  requires { true }
  ensures  { result = Standard__float.of_real (Trigonometry.sin x) }

end

(* TODO: sin__2 *)

module Formal__numerics__elementary_functions__cos
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "trigSimpl".Trigonometry

 function cos (x : real) : Standard__float.float

 val cos (x : real) : Standard__float.float
  requires { true }
  ensures  { result = Standard__float.of_real (Trigonometry.cos x) }

end

(* TODO: cos__2 *)

module Formal__numerics__elementary_functions__tan
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "trigSimpl".Trigonometry

 function tan (x : real) : Standard__float.float

 val tan (x : real) : Standard__float.float
  requires { true }
  ensures  { result = Standard__float.of_real (Trigonometry.tan x) }

end

(* TODO: tan__2 *)

module Formal__numerics__elementary_functions__cot
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "trigSimpl".Trigonometry

 function cot (x : real) : Standard__float.float

 val cot (x : real) : Standard__float.float
  requires { x <> 0.0 }
  ensures  { result = Standard__float.of_real (1.0 /. (Trigonometry.tan x)) }

end

(* TODO: cot__2 *)

module Formal__numerics__elementary_functions__arcsin
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "trigSimpl".Trigonometry
 use        "real".Abs

 function arcsin (x : real) : Standard__float.float

 val arcsin (x : real) : Standard__float.float
  requires { Abs.abs x <=. 1.0 }
  ensures  { true } (* TODO *)

end

(* TODO: arcsin__2 *)

module Formal__numerics__elementary_functions__arccos
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "trigSimpl".Trigonometry
 use        "real".Abs

 function arccos (x : real) : Standard__float.float

 val arccos (x : real) : Standard__float.float
  requires { Abs.abs x <=. 1.0 }
  ensures  { true } (* TODO *)

end

(* TODO: arccos__2 *)

module Formal__numerics__elementary_functions__arctan
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "trigSimpl".Trigonometry
 use        "real".Abs

 (* http://en.wikipedia.org/wiki/Atan2#Definition_and_computation *)
 function arctan (y : real) (x : real) : Standard__float.float

 val arctan (y : real) (x : real) : Standard__float.float
  requires { y <> 0.0 \/ x <> 0.0 }
  ensures  {
      if x >.  0.0 then result = Standard__float.of_real (Trigonometry.atan (y/.x)) else
      if y >=. 0.0 /\ x <. 0.0 then result = Standard__float.of_real (Trigonometry.atan (y/.x) +. Trigonometry.pi) else
      if y <.  0.0 /\ x <. 0.0 then result = Standard__float.of_real (Trigonometry.atan (y/.x) -. Trigonometry.pi) else
      if y >.  0.0 /\ x =  0.0 then result = Standard__float.of_real (Trigonometry.pi /. 2.0) else
      if y <.  0.0 /\ x =  0.0 then result = Standard__float.of_real (-. Trigonometry.pi /. 2.0) else
      true
  }

end

(* TODO: arctan__2 *)

module Formal__numerics__elementary_functions__arccot
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "trigSimpl".Trigonometry
 use        "real".Abs

 function arccot (y : real) (x : real) : Standard__float.float

 val arccot (y : real) (x : real) : Standard__float.float
  requires { y <> 0.0  \/ x <> 0.0 }
  ensures  { true } (* FIXME *)

end

(* TODO: arccot__2 *)

module Formal__numerics__elementary_functions__sinh
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "real".Hyperbolic

 function sinh (x : real) : Standard__float.float

 val sinh (x : real) : Standard__float.float
  requires { true }
  ensures  { result = Standard__float.of_real (Hyperbolic.sinh x) }

end

module Formal__numerics__elementary_functions__cosh
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "real".Hyperbolic

 function cosh (x : real) : Standard__float.float

 val cosh (x : real) : Standard__float.float
  requires { true }
  ensures  { result = Standard__float.of_real (Hyperbolic.cosh x) }

end

module Formal__numerics__elementary_functions__tanh
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "real".Hyperbolic

 function tanh (x : real) : Standard__float.float

 val tanh (x : real) : Standard__float.float
  requires { true }
  ensures  { result = Standard__float.of_real (Hyperbolic.tanh x) }

end

(* TODO: coth *)

module Formal__numerics__elementary_functions__arcsinh
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "real".Hyperbolic

 function arcsinh (x : real) : Standard__float.float

 val arcsinh (x : real) : Standard__float.float
  requires { true }
  ensures  { result = Standard__float.of_real (Hyperbolic.asinh x) }

end

module Formal__numerics__elementary_functions__arccosh
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "real".Hyperbolic

 function arccosh (x : real) : Standard__float.float

 val arccosh (x : real) : Standard__float.float
  requires { x >=. 1.0 }
  ensures  { result = Standard__float.of_real (Hyperbolic.acosh x) }

end

module Formal__numerics__elementary_functions__arctanh
 use import "_gnatprove_standard".Main
 use import Standard__float
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        "real".Hyperbolic

 function atanh (x : real) : Standard__float.float

 val atanh (x : real) : Standard__float.float
  requires { true }
  ensures  { result = Standard__float.of_real (Hyperbolic.atanh x) }

end

(* TODO: arccoth *)
