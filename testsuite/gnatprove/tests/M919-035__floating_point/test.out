dynamic_float.adb:6:18: info: range check proved (CVC4: 2 VC)
dynamic_float.adb:6:40: info: range check proved (Trivial)
dynamic_float.adb:7:19: info: range check proved (CVC4: 1 VC)
dynamic_float.adb:9:25: info: assertion proved (CVC4: 1 VC)
dynamic_float.adb:9:35: info: range check proved (CVC4: 2 VC)
dynamic_float.adb:10:25: info: assertion proved (CVC4: 1 VC)
zero_and_min.adb:7:14: info: add a contract to analyze it separately from calling contexts
zero_and_min.adb:7:14: info: local subprogram "Crash" only analyzed in the context of calls
zero_and_min.adb:7:14: warning: subprogram "Crash" has no effect
zero_and_min.adb:9:16: info: types in unchecked conversion have the same size (Trivial)
zero_and_min.adb:9:16: info: types in unchecked conversion have the same size (Trivial), in call inlined at zero_and_min.adb:26
zero_and_min.adb:9:55: info: type is suitable as source for unchecked conversion (Trivial)
zero_and_min.adb:9:55: info: type is suitable as source for unchecked conversion (Trivial), in call inlined at zero_and_min.adb:26
zero_and_min.adb:9:62: info: type is suitable for unchecked conversion (Trivial)
zero_and_min.adb:9:62: info: type is suitable for unchecked conversion (Trivial), in call inlined at zero_and_min.adb:26
zero_and_min.adb:14:25: medium: assertion might fail, in call inlined at zero_and_min.adb:26
zero_and_min.adb:19:13: info: types in unchecked conversion have the same size (Trivial)
zero_and_min.adb:19:54: info: type is suitable as source for unchecked conversion (Trivial)
zero_and_min.adb:19:62: high: type is unsuitable as a target for unchecked conversion [possible explanation: floating-point types have invalid bit patterns for SPARK]
zero_and_unchecked.adb:7:14: info: add a contract to analyze it separately from calling contexts
zero_and_unchecked.adb:7:14: info: local subprogram "Crash" only analyzed in the context of calls
zero_and_unchecked.adb:7:14: warning: subprogram "Crash" has no effect
zero_and_unchecked.adb:9:16: info: types in unchecked conversion have the same size (Trivial)
zero_and_unchecked.adb:9:16: info: types in unchecked conversion have the same size (Trivial), in call inlined at zero_and_unchecked.adb:27
zero_and_unchecked.adb:9:55: info: type is suitable as source for unchecked conversion (Trivial)
zero_and_unchecked.adb:9:55: info: type is suitable as source for unchecked conversion (Trivial), in call inlined at zero_and_unchecked.adb:27
zero_and_unchecked.adb:9:62: info: type is suitable for unchecked conversion (Trivial)
zero_and_unchecked.adb:9:62: info: type is suitable for unchecked conversion (Trivial), in call inlined at zero_and_unchecked.adb:27
zero_and_unchecked.adb:14:22: medium: divide by zero might fail, in call inlined at zero_and_unchecked.adb:27
zero_and_unchecked.adb:20:13: info: types in unchecked conversion have the same size (Trivial)
zero_and_unchecked.adb:20:54: info: type is suitable as source for unchecked conversion (Trivial)
zero_and_unchecked.adb:20:62: high: type is unsuitable as a target for unchecked conversion [possible explanation: floating-point types have invalid bit patterns for SPARK]
