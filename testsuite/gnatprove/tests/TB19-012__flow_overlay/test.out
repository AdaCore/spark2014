assign.adb:1:32: info: initialization of "Y" proved
assign.adb:2:08: info: flow dependencies proved
assign.adb:4:04: high: address in address clause might not be an integral multiple of alignment of object [possible explanation: Y must be aliased for its alignment to be known] [possible fix: overlaying object should have an Alignment representation clause]
assign.adb:4:04: info: object is suitable for aliasing via address clause (Trivial)
assign.adb:4:04: info: type is suitable as source for unchecked conversion (Trivial)
assign.adb:4:32: info: object is suitable for aliasing via address clause (Trivial)
assign.adb:4:32: info: type is suitable as source for unchecked conversion (Trivial)
assign.adb:4:32: info: types of aliased objects have the same size (Trivial)
call.adb:1:30: info: initialization of "Y" proved
call.adb:2:08: info: flow dependencies proved
call.adb:4:04: high: address in address clause might not be an integral multiple of alignment of object [possible explanation: Y must be aliased for its alignment to be known] [possible fix: overlaying object should have an Alignment representation clause]
call.adb:4:04: info: object is suitable for aliasing via address clause (Trivial)
call.adb:4:04: info: type is suitable as source for unchecked conversion (Trivial)
call.adb:4:32: info: object is suitable for aliasing via address clause (Trivial)
call.adb:4:32: info: type is suitable as source for unchecked conversion (Trivial)
call.adb:4:32: info: types of aliased objects have the same size (Trivial)
call.adb:5:36: info: initialization of "To" proved
call.adb:12:04: info: precondition proved (Trivial: 1 VC)
main.adb:5:19: medium: assertion might fail [possible fix: subprogram at line 3 should mention A and B in a precondition]
p.ads:3:04: info: address in address clause is compatible with object alignment (Trivial)
p.ads:3:04: info: object is suitable for aliasing via address clause (Trivial)
p.ads:3:04: info: type is suitable as source for unchecked conversion (Trivial)
p.ads:3:32: info: object is suitable for aliasing via address clause (Trivial)
p.ads:3:32: info: type is suitable as source for unchecked conversion (Trivial)
p.ads:3:32: info: types of aliased objects have the same size (Trivial)
p.ads:4:13: info: implicit aspect Always_Terminates on "Zero" has been proved, subprogram will terminate
p.ads:4:49: info: data dependencies proved
