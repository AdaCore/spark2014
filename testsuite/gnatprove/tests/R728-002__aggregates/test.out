pragmarc-b_strings.adb:16:20: medium: range check might fail (e.g. when Source = (Max_Length => 0, Len => 1, Value => ?) and Source.Value'First = 1 and Source.Value'Last = 0) [reason for check: slice bounds must fit in the underlying array] [possible fix: subprogram at pragmarc-b_strings.ads:25 should mention Source in a precondition]
pragmarc-b_strings.adb:20:42: info: range check proved (CVC4: 2 VC)
pragmarc-b_strings.adb:22:61: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
pragmarc-b_strings.adb:36:12: info: range check proved (CVC4: 4 VC)
pragmarc-b_strings.adb:36:33: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
pragmarc-b_strings.adb:36:40: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
pragmarc-b_strings.adb:36:40: medium: range check might fail (e.g. when From = (Max_Length => 0, Len => 1, Value => ?) and From.Value'First = 1 and From.Value'Last = 0) [reason for check: slice bounds must fit in the underlying array]
pragmarc-b_strings.adb:44:10: medium: exception might be raised
pragmarc-b_strings.adb:50:19: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
pragmarc-b_strings.adb:50:26: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
pragmarc-b_strings.adb:50:26: medium: range check might fail (e.g. when From = (Max_Length => 0, Len => 2, Value => ?) and From.Value'First = 1 and From.Value'Last = 0 and To = (Max_Length => ?, Len => 1, Value => (1 => 'NUL')) and To.Value'First = 1 and To.Value'Last = 1) [reason for check: slice bounds must fit in the underlying array]
pragmarc-b_strings.adb:50:43: info: overflow check proved (CVC4: 2 VC)
pragmarc-b_strings.adb:50:52: medium: overflow check might fail, cannot prove upper bound for From.Len - To.Len + 1 (e.g. when From = (Max_Length => 0, Len => Natural'Last, Value => ?) and From.Value'First = 1 and From.Value'Last = 0 and To = (Len => 0, others => ?) and To.Value'First = 1 and To.Value'Last = 0) [reason for check: result of addition must fit in a 32-bits machine integer]
pragmarc-b_strings.adb:57:16: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
pragmarc-b_strings.adb:57:23: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
pragmarc-b_strings.adb:57:23: medium: range check might fail (e.g. when From = (Max_Length => 0, Len => 2, Value => ?) and From.Value'First = 1 and From.Value'Last = 0) [reason for check: slice bounds must fit in the underlying array]
pragmarc-b_strings.adb:63:14: info: range check proved (CVC4: 2 VC)
pragmarc-b_strings.adb:64:24: info: range check proved (CVC4: 2 VC)
pragmarc-b_strings.adb:65:12: info: range check proved (CVC4: 4 VC)
pragmarc-b_strings.adb:65:33: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
pragmarc-b_strings.adb:65:36: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
pragmarc-b_strings.adb:73:10: info: raise statement or expression proved unreachable (CVC4: 1 VC)
pragmarc-b_strings.adb:79:19: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
pragmarc-b_strings.adb:79:22: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
pragmarc-b_strings.adb:79:22: info: range check proved (CVC4: 4 VC)
pragmarc-b_strings.adb:79:38: info: overflow check proved (CVC4: 2 VC)
pragmarc-b_strings.adb:79:47: medium: overflow check might fail, cannot prove upper bound for From'Last - To.Len + 1 (e.g. when From = (Positive'Last => 'NUL') and From'First = Integer'Last and From'Last = Integer'Last and To = (Len => 0, others => ?) and To.Value'First = 1 and To.Value'Last = 0) [reason for check: result of addition must fit in a 32-bits machine integer]
pragmarc-b_strings.adb:86:16: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
pragmarc-b_strings.adb:86:19: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
pragmarc-b_strings.adb:86:19: info: range check proved (CVC4: 4 VC)
pragmarc-b_strings.adb:86:50: info: overflow check proved (CVC4: 2 VC)
pragmarc-b_strings.adb:86:59: info: overflow check proved (CVC4: 2 VC)
pragmarc-b_strings.adb:92:48: info: range check proved (CVC4: 2 VC; colibri: 2 VC)
pragmarc-b_strings.adb:92:78: medium: range check might fail (e.g. when Right = (Max_Length => 0, Len => 1, Value => ?) and Right.Value'First = 1 and Right.Value'Last = 0) [reason for check: slice bounds must fit in the underlying array] [possible fix: subprogram at pragmarc-b_strings.ads:49 should mention Right in a precondition]
pragmarc-b_strings.adb:98:18: medium: range check might fail (e.g. when Left = (Max_Length => 0, Len => 1, Value => ?) and Left.Value'First = 1 and Left.Value'Last = 0) [reason for check: slice bounds must fit in the underlying array] [possible fix: subprogram at pragmarc-b_strings.ads:50 should mention Left in a precondition]
pragmarc-b_strings.adb:98:48: medium: range check might fail (e.g. when Right = (Max_Length => 0, Len => 1, Value => ?) and Right.Value'First = 1 and Right.Value'Last = 0) [reason for check: slice bounds must fit in the underlying array] [possible fix: subprogram at pragmarc-b_strings.ads:50 should mention Right in a precondition]
pragmarc-b_strings.adb:110:18: medium: range check might fail (e.g. when Left = (Max_Length => 0, Len => 1, Value => ?) and Left.Value'First = 1 and Left.Value'Last = 0) [reason for check: slice bounds must fit in the underlying array] [possible fix: subprogram at pragmarc-b_strings.ads:52 should mention Left in a precondition]
pragmarc-b_strings.adb:110:48: medium: range check might fail (e.g. when Right = (Max_Length => 0, Len => 1, Value => ?) and Right.Value'First = 1 and Right.Value'Last = 0) [reason for check: slice bounds must fit in the underlying array] [possible fix: subprogram at pragmarc-b_strings.ads:52 should mention Right in a precondition]
pragmarc-b_strings.ads:26:40: info: function contract not available for proof ("+" might not return)
pragmarc-b_strings.ads:26:40: medium: postcondition might fail, cannot prove +"+"'Result = Source (e.g. when "+"'Result'First = 1 and "+"'Result'Last = 0 and Source = (Max_Length => 0, Len => 0, Value => ?) and Source.Value'First = 1 and Source.Value'Last = 0)
pragmarc-b_strings.ads:29:45: info: range check proved (CVC4: 2 VC)
pragmarc-b_strings.ads:29:57: info: function contract not available for proof ("+" might not return)
pragmarc-b_strings.ads:29:57: medium: postcondition might fail, cannot prove +"+"'Result = Source (e.g. when "+"'Result = (Max_Length => 0, Len => 0, Value => ?) and "+"'Result.Value'First = 1 and "+"'Result.Value'Last = 0 and Source'First = 1 and Source'Last = 0)
pragmarc-b_strings.ads:39:21: medium: postcondition might fail (e.g. when From = (Max_Length => 0, Len => 1, Value => ?) and From.Value'First = 1 and From.Value'Last = 0 and To = (Len => 0, others => ?) and To.Value'First = 1 and To.Value'Last = 0) [possible fix: you should consider adding a postcondition to operator "=" or turning it into an expression function]
pragmarc-b_strings.ads:45:76: info: range check proved (CVC4: 2 VC)
pragmarc-b_strings.ads:46:21: medium: postcondition might fail (e.g. when From'First = 1 and From'Last = 0 and To = (Len => 0, others => ?) and To.Value'First = 1 and To.Value'Last = 0) [possible fix: you should consider adding a postcondition to operator "=" or turning it into an expression function]
pragmarc-b_strings.ads:46:26: info: function contract not available for proof ("+" might not return)
pragmarc-b_strings.ads:57:07: info: range check proved (CVC4: 2 VC)
pragmarc-b_strings.ads:57:43: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
pragmarc-b_strings.ads:57:43: info: range check proved (CVC4: 2 VC)
pragmarc-b_strings.ads:57:46: info: range check proved (CVC4: 2 VC)
