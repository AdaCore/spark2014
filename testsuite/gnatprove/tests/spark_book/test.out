a-tienio.ads:32:42: info: precondition proved (CVC5: 1 VC), in instantiation at enum_example.adb:13
a-tienio.ads:48:42: info: precondition proved (CVC5: 1 VC), in instantiation at enum_example.adb:13
a-tienio.ads:50:08: info: precondition proved (CVC5: 2 VC), in instantiation at enum_example.adb:13
a-tienio.ads:51:12: info: precondition proved (CVC5: 2 VC), in instantiation at enum_example.adb:13
a-tiflio.ads:48:04: warning: initialization of "Default_Fore" has no effect, in instantiation at good_types.adb:10
a-tiflio.ads:48:04: warning: initialization of "Default_Fore" has no effect, in instantiation at good_types.adb:11
a-tiflio.ads:49:04: warning: initialization of "Default_Aft" has no effect, in instantiation at good_types.adb:10
a-tiflio.ads:49:04: warning: initialization of "Default_Aft" has no effect, in instantiation at good_types.adb:11
a-tiflio.ads:50:04: warning: initialization of "Default_Exp" has no effect, in instantiation at good_types.adb:10
a-tiflio.ads:50:04: warning: initialization of "Default_Exp" has no effect, in instantiation at good_types.adb:11
a-tiflio.ads:57:42: info: precondition proved (CVC5: 1 VC), in instantiation at good_types.adb:10
a-tiflio.ads:57:42: info: precondition proved (CVC5: 1 VC), in instantiation at good_types.adb:11
a-tiflio.ads:78:42: info: precondition proved (CVC5: 1 VC), in instantiation at good_types.adb:10
a-tiflio.ads:78:42: info: precondition proved (CVC5: 1 VC), in instantiation at good_types.adb:11
a-tiflio.ads:80:08: info: precondition proved (CVC5: 2 VC), in instantiation at good_types.adb:10
a-tiflio.ads:80:08: info: precondition proved (CVC5: 2 VC), in instantiation at good_types.adb:11
a-tiflio.ads:81:12: info: precondition proved (CVC5: 2 VC), in instantiation at good_types.adb:10
a-tiflio.ads:81:12: info: precondition proved (CVC5: 2 VC), in instantiation at good_types.adb:11
aggregates.adb:9:13: info: add a contract to analyze it separately from calling contexts
aggregates.adb:9:13: info: local subprogram "Sqrt" only analyzed in the context of calls
aggregates.adb:10:07: info: initialization of "Approx" proved
aggregates.adb:10:07: info: initialization of "Approx" proved, in call inlined at aggregates.adb:29
aggregates.adb:11:46: info: float overflow check proved (Trivial), in call inlined at aggregates.adb:29
aggregates.adb:13:19: info: division check proved (CVC5: 1 VC), in call inlined at aggregates.adb:29
aggregates.adb:13:19: info: float overflow check proved (Trivial), in call inlined at aggregates.adb:29
aggregates.adb:14:20: medium: float overflow check might fail, in call inlined at aggregates.adb:29 [reason for check: result of floating-point subtraction must be bounded]
aggregates.adb:14:29: medium: float overflow check might fail, in call inlined at aggregates.adb:29 [reason for check: result of floating-point exponentiation must be bounded]
aggregates.adb:15:24: info: float overflow check proved (Trivial), in call inlined at aggregates.adb:29
aggregates.adb:15:34: medium: float overflow check might fail, in call inlined at aggregates.adb:29 [reason for check: result of floating-point addition must be bounded]
aggregates.adb:15:38: medium: divide by zero might fail, in call inlined at aggregates.adb:29
aggregates.adb:15:38: medium: float overflow check might fail, in call inlined at aggregates.adb:29 [reason for check: result of floating-point division must be bounded]
aggregates.adb:29:26: medium: float overflow check might fail [reason for check: result of floating-point addition must be bounded]
aggregates.adb:29:28: info: analyzing call to "Sqrt" in context
average.adb:8:04: info: initialization of "A" proved
average.adb:9:04: info: initialization of "B" proved
average.adb:10:04: info: initialization of "M" proved
average.adb:17:18: info: range check proved (Trivial)
average.adb:17:18: medium: overflow check might fail, cannot prove lower bound for A + B [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: postcondition of call at line 14 should mention Item (for argument B)]
average.adb:17:23: info: division check proved (CVC5: 1 VC)
average.adb:17:23: info: float overflow check proved (Trivial)
average_with_use.adb:4:11: warning: file name does not match unit name, should be "average.adb" [enabled by default]
average_with_use.adb:8:04: info: initialization of "A" proved
average_with_use.adb:9:04: info: initialization of "B" proved
average_with_use.adb:10:04: info: initialization of "M" proved
average_with_use.adb:17:18: info: range check proved (Trivial)
average_with_use.adb:17:18: medium: overflow check might fail, cannot prove lower bound for A + B [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: postcondition of call at line 14 should mention Item (for argument B)]
average_with_use.adb:17:23: info: division check proved (CVC5: 1 VC)
average_with_use.adb:17:23: info: float overflow check proved (Trivial)
bad_types.adb:5:04: info: initialization of "Room_Length" proved
bad_types.adb:6:04: info: initialization of "Wall_Thickness" proved
bad_types.adb:7:04: info: initialization of "Total" proved
bad_types.adb:11:25: medium: float overflow check might fail [reason for check: result of floating-point addition must be bounded] [possible fix: postcondition of call at line 10 should mention Item (for argument Wall_Thickness)]
bad_types.adb:11:31: medium: float overflow check might fail [reason for check: result of floating-point multiplication must be bounded] [possible fix: postcondition of call at line 10 should mention Item (for argument Wall_Thickness)]
bingo_basket.adb:8:14: info: add a contract to analyze it separately from calling contexts
bingo_basket.adb:8:14: info: local subprogram "Swap" only analyzed in the context of calls
bingo_basket.adb:10:07: info: initialization of "Temp" proved
bingo_basket.adb:10:07: info: initialization of "Temp" proved, in call inlined at bingo_basket.adb:27
bingo_basket.adb:18:07: info: initialization of "Random_Index" proved
bingo_basket.adb:21:37: info: cannot unroll loop (too many loop iterations)
bingo_basket.adb:25:36: info: cannot unroll loop (too many loop iterations)
bingo_basket.adb:27:10: info: analyzing call to "Swap" in context
bingo_basket.adb:36:32: info: index check proved (CVC5: 2 VC)
bingo_basket.adb:37:30: info: range check proved (CVC5: 2 VC)
bingo_basket.ads:8:18: info: postcondition proved (CVC5: 1 VC)
bingo_basket.ads:10:20: info: initialization of "Letter" proved
bingo_basket.ads:11:20: info: initialization of "Number" proved
bounded_queue.adb:20:32: medium: array index check might fail, in instantiation at bounded_queue_example.adb:7 [reason for check: value must be a valid index into the array] [possible fix: add precondition (Queue.Front in 1 .. Max_Size) to subprogram at bounded_queue.ads:15]
bounded_queue.adb:25:32: medium: array index check might fail, in instantiation at bounded_queue_example.adb:7 [reason for check: value must be a valid index into the array] [possible fix: add precondition (Queue.Rear in 1 .. Max_Size) to subprogram at bounded_queue.ads:19]
bounded_queue.adb:38:32: info: division check proved (CVC5: 1 VC), in instantiation at bounded_queue_example.adb:7
bounded_queue.adb:38:51: info: overflow check proved (CVC5: 2 VC), in instantiation at bounded_queue_example.adb:7
bounded_queue.adb:39:25: info: index check proved (CVC5: 2 VC), in instantiation at bounded_queue_example.adb:7
bounded_queue.adb:40:34: medium: overflow check might fail, cannot prove upper bound for Queue.Count + 1, in instantiation at bounded_queue_example.adb:7 [reason for check: result of addition must fit in a 32-bits machine integer]
bounded_queue.adb:47:33: medium: array index check might fail, in instantiation at bounded_queue_example.adb:7 [reason for check: value must be a valid index into the array]
bounded_queue.adb:48:34: info: division check proved (CVC5: 1 VC), in instantiation at bounded_queue_example.adb:7
bounded_queue.adb:48:53: info: overflow check proved (CVC5: 2 VC), in instantiation at bounded_queue_example.adb:7
bounded_queue.adb:49:34: medium: range check might fail, cannot prove lower bound for Queue.Count - 1, in instantiation at bounded_queue_example.adb:7 [reason for check: result of subtraction must fit in the target type of the assignment]
bounded_queue.ads:25:18: medium: postcondition might fail, cannot prove Empty (Queue), in instantiation at bounded_queue_example.adb:7 [possible fix: you should consider adding a postcondition to function Empty or turning it into an expression function]
bounded_queue.ads:31:18: medium: postcondition might fail, cannot prove not Empty (Queue), in instantiation at bounded_queue_example.adb:7 [possible fix: you should consider adding a postcondition to function Empty or turning it into an expression function]
bounded_queue.ads:32:50: medium: overflow check might fail, cannot prove upper bound for Size (Queue'Old) + 1, in instantiation at bounded_queue_example.adb:7 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
bounded_queue.ads:33:18: info: precondition proved (CVC5: 1 VC), in instantiation at bounded_queue_example.adb:7
bounded_queue.ads:36:23: info: initialization of "Item" proved, in instantiation at bounded_queue_example.adb:7
bounded_queue.ads:39:17: medium: postcondition might fail, cannot prove Item = First_Element (Queue'old), in instantiation at bounded_queue_example.adb:7 [possible fix: you should consider adding a postcondition to function First_Element or turning it into an expression function]
bounded_queue.ads:39:24: info: precondition proved (CVC5: 1 VC), in instantiation at bounded_queue_example.adb:7
bounded_queue.ads:45:04: medium: type "Queue_Type" is not fully initialized, in instantiation at bounded_queue_example.adb:7
bounded_queue.ads:50:10: info: range check proved (CVC5: 2 VC), in instantiation at bounded_queue_example.adb:7
bounded_queue_example.adb:10:04: info: initialization of "My_Queue" proved
bounded_queue_example.adb:10:50: info: range check proved (CVC5: 2 VC)
bounded_queue_example.adb:11:04: info: initialization of "Value" proved
bounded_queue_example.adb:15:43: info: unrolling loop
bounded_queue_example.adb:16:07: medium: precondition might fail
bounded_queue_example.adb:18:38: info: unrolling loop
bounded_queue_example.adb:19:07: medium: precondition might fail
bounded_queue_example.adb:24:42: low: range check might fail, cannot prove lower bound for "Size of cleared queue is " & Integer'image [reason for check: input value must fit in parameter type] [possible fix: you should consider adding a postcondition to function Size or turning it into an expression function]
bounded_queue_example_v1.adb:6:56: info: range check proved (CVC5: 2 VC)
bounded_queue_example_v1.adb:7:04: info: initialization of "Value" proved
bounded_queue_example_v1.adb:10:11: high: "My_Queue.Count" is not initialized
bounded_queue_example_v1.adb:10:11: high: "My_Queue.Front" is not initialized
bounded_queue_example_v1.adb:10:11: high: "My_Queue.Items" is not initialized
bounded_queue_example_v1.adb:10:11: high: "My_Queue.Rear" is not initialized
bounded_queue_example_v1.adb:11:40: info: cannot unroll loop (too many loop iterations)
bounded_queue_example_v1.adb:12:07: medium: precondition might fail [possible fix: loop at line 11 should mention My_Queue in a loop invariant]
bounded_queue_example_v1.adb:14:38: info: unrolling loop
bounded_queue_example_v1.adb:15:07: medium: precondition might fail [possible fix: loop at line 11 should mention My_Queue in a loop invariant]
bounded_queue_example_v1.adb:20:42: low: range check might fail, cannot prove upper bound for "Size of cleared queue is " & Integer'image [reason for check: input value must fit in parameter type]
bounded_queue_example_v2.adb:6:04: info: initialization of "My_Queue" proved
bounded_queue_example_v2.adb:6:56: info: range check proved (CVC5: 2 VC)
bounded_queue_example_v2.adb:7:04: info: initialization of "Value" proved
bounded_queue_example_v2.adb:11:40: info: cannot unroll loop (too many loop iterations)
bounded_queue_example_v2.adb:12:07: medium: precondition might fail [possible fix: loop at line 11 should mention My_Queue in a loop invariant]
bounded_queue_example_v2.adb:14:38: info: unrolling loop
bounded_queue_example_v2.adb:15:07: medium: precondition might fail [possible fix: loop at line 11 should mention My_Queue in a loop invariant]
bounded_queue_example_v2.adb:20:42: low: range check might fail, cannot prove upper bound for "Size of cleared queue is " & Integer'image [reason for check: input value must fit in parameter type]
bounded_queue_v1.adb:20:32: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: add precondition (Queue.Front in 1 .. Max_Size) to subprogram at bounded_queue_v1.ads:21]
bounded_queue_v1.adb:25:32: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: add precondition (Queue.Rear in 1 .. Max_Size) to subprogram at bounded_queue_v1.ads:25]
bounded_queue_v1.adb:38:32: info: division check proved (CVC5: 1 VC)
bounded_queue_v1.adb:38:51: info: overflow check proved (CVC5: 2 VC)
bounded_queue_v1.adb:39:25: info: index check proved (CVC5: 2 VC)
bounded_queue_v1.adb:40:34: medium: overflow check might fail, cannot prove upper bound for Queue.Count + 1 [reason for check: result of addition must fit in a 32-bits machine integer]
bounded_queue_v1.adb:47:33: medium: array index check might fail [reason for check: value must be a valid index into the array]
bounded_queue_v1.adb:48:34: info: division check proved (CVC5: 1 VC)
bounded_queue_v1.adb:48:53: info: overflow check proved (CVC5: 2 VC)
bounded_queue_v1.adb:49:34: medium: range check might fail, cannot prove lower bound for Queue.Count - 1 [reason for check: result of subtraction must fit in the target type of the assignment]
bounded_queue_v1.ads:12:09: info: range check proved (CVC5: 2 VC)
bounded_queue_v1.ads:31:18: medium: postcondition might fail, cannot prove Empty (Queue) [possible fix: you should consider adding a postcondition to function Empty or turning it into an expression function]
bounded_queue_v1.ads:37:18: medium: postcondition might fail, cannot prove not Empty (Queue) [possible fix: you should consider adding a postcondition to function Empty or turning it into an expression function]
bounded_queue_v1.ads:38:50: medium: overflow check might fail, cannot prove upper bound for Size (Queue'Old) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
bounded_queue_v1.ads:39:18: info: precondition proved (CVC5: 1 VC)
bounded_queue_v1.ads:42:23: info: initialization of "Item" proved
bounded_queue_v1.ads:45:18: medium: postcondition might fail, cannot prove Item = First_Element (Queue'old) [possible fix: you should consider adding a postcondition to function First_Element or turning it into an expression function]
bounded_queue_v1.ads:45:25: info: precondition proved (CVC5: 1 VC)
bounded_queue_v2.adb:20:32: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: add precondition (Queue.Front in 1 .. Max_Size) to subprogram at bounded_queue_v2.ads:15]
bounded_queue_v2.adb:25:32: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: add precondition (Queue.Rear in 1 .. Max_Size) to subprogram at bounded_queue_v2.ads:19]
bounded_queue_v2.adb:38:32: info: division check proved (CVC5: 1 VC)
bounded_queue_v2.adb:38:51: info: overflow check proved (CVC5: 2 VC)
bounded_queue_v2.adb:39:25: info: index check proved (CVC5: 2 VC)
bounded_queue_v2.adb:40:34: medium: overflow check might fail, cannot prove upper bound for Queue.Count + 1 [reason for check: result of addition must fit in a 32-bits machine integer]
bounded_queue_v2.adb:47:33: medium: array index check might fail [reason for check: value must be a valid index into the array]
bounded_queue_v2.adb:48:34: info: division check proved (CVC5: 1 VC)
bounded_queue_v2.adb:48:53: info: overflow check proved (CVC5: 2 VC)
bounded_queue_v2.adb:49:34: medium: range check might fail, cannot prove lower bound for Queue.Count - 1 [reason for check: result of subtraction must fit in the target type of the assignment]
bounded_queue_v2.ads:25:18: medium: postcondition might fail, cannot prove Empty (Queue) [possible fix: you should consider adding a postcondition to function Empty or turning it into an expression function]
bounded_queue_v2.ads:31:18: medium: postcondition might fail, cannot prove not Empty (Queue) [possible fix: you should consider adding a postcondition to function Empty or turning it into an expression function]
bounded_queue_v2.ads:32:50: medium: overflow check might fail, cannot prove upper bound for Size (Queue'Old) + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
bounded_queue_v2.ads:33:18: info: precondition proved (CVC5: 1 VC)
bounded_queue_v2.ads:36:23: info: initialization of "Item" proved
bounded_queue_v2.ads:39:17: medium: postcondition might fail, cannot prove Item = First_Element (Queue'old) [possible fix: you should consider adding a postcondition to function First_Element or turning it into an expression function]
bounded_queue_v2.ads:39:24: info: precondition proved (CVC5: 1 VC)
bounded_queue_v2.ads:45:04: medium: type "Queue_Type" is not fully initialized
bounded_queue_v2.ads:50:10: info: range check proved (CVC5: 2 VC)
buffers.adb:14:07: info: initialization of "Workspace" proved
buffers.adb:15:07: info: initialization of "New_Index" proved
buffers.adb:18:34: info: cannot unroll loop (too many loop iterations)
buffers.adb:19:56: info: division check proved (CVC5: 1 VC)
buffers.adb:27:07: info: initialization of "Temp" proved
buffers.adb:29:63: info: cannot unroll loop (too many loop iterations)
buffers.adb:42:33: info: loop invariant initialization proved (CVC5: 1 VC)
buffers.adb:42:33: info: loop invariant preservation proved (CVC5: 1 VC)
buffers.adb:45:28: info: range check proved (CVC5: 2 VC)
buffers.adb:59:33: info: loop invariant initialization proved (CVC5: 1 VC)
buffers.adb:59:33: info: loop invariant preservation proved (CVC5: 1 VC)
buffers.adb:62:28: info: range check proved (CVC5: 2 VC)
buffers.adb:74:07: info: initialization of "Workspace" proved
buffers.adb:75:07: info: initialization of "Offset" proved
buffers.adb:82:32: info: loop invariant initialization proved (CVC5: 1 VC)
buffers.adb:82:32: info: loop invariant preservation proved (CVC5: 1 VC)
buffers.adb:85:39: info: index check proved (CVC5: 2 VC)
buffers.adb:86:30: info: range check proved (CVC5: 2 VC)
buffers.adb:93:11: info: range check proved (CVC5: 2 VC)
buffers.adb:93:77: info: cannot unroll loop (too many loop iterations)
buffers.adb:94:36: info: index check proved (CVC5: 2 VC)
buffers.adb:105:16: info: range check proved (CVC5: 2 VC)
buffers.adb:106:38: info: range check proved (CVC5: 2 VC)
buffers.adb:108:11: info: range check proved (CVC5: 2 VC)
buffers.adb:110:13: info: loop invariant initialization proved (CVC5: 2 VC)
buffers.adb:110:13: info: loop invariant preservation proved (CVC5: 2 VC)
buffers.adb:110:41: info: range check proved (CVC5: 4 VC)
buffers.adb:113:49: info: index check proved (CVC5: 2 VC)
buffers.adb:113:49: info: overflow check proved (CVC5: 2 VC)
buffers.adb:123:07: info: initialization of "Characters_To_Copy" proved
buffers.adb:126:16: info: range check proved (CVC5: 2 VC)
buffers.adb:127:38: info: range check proved (CVC5: 2 VC)
buffers.adb:132:11: info: range check proved (CVC5: 2 VC)
buffers.adb:132:64: info: cannot unroll loop (too many loop iterations)
buffers.adb:133:23: info: index check proved (CVC5: 2 VC)
buffers.adb:133:23: info: overflow check proved (CVC5: 2 VC)
buffers.adb:133:57: info: index check proved (CVC5: 2 VC)
buffers.adb:133:57: info: overflow check proved (CVC5: 2 VC)
buffers.adb:143:07: info: initialization of "Characters_To_Copy" proved
buffers.adb:146:19: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
buffers.adb:150:42: info: range check proved (CVC5: 2 VC)
buffers.adb:151:43: info: range check proved (CVC5: 2 VC)
buffers.adb:153:11: info: range check proved (CVC5: 2 VC)
buffers.adb:153:64: info: cannot unroll loop (too many loop iterations)
buffers.adb:154:40: info: index check proved (CVC5: 2 VC)
buffers.adb:154:40: info: overflow check proved (CVC5: 2 VC)
buffers.adb:154:67: info: index check proved (CVC5: 2 VC)
buffers.adb:154:67: info: overflow check proved (CVC5: 2 VC)
buffers.ads:11:20: info: initialization of "Buffer" proved
buffers.ads:14:08: info: flow dependencies proved
buffers.ads:20:08: info: flow dependencies proved
buffers.ads:25:08: info: flow dependencies proved
buffers.ads:35:07: info: initialization of "Count" proved
buffers.ads:36:09: info: flow dependencies proved
buffers.ads:45:23: info: initialization of "Valid" proved
buffers.ads:47:09: info: flow dependencies proved
buffers.ads:53:24: info: initialization of "Buffer" proved
buffers.ads:55:08: info: flow dependencies proved
buffers.ads:67:08: info: flow dependencies proved
buffers.ads:75:25: info: initialization of "Destination" proved
buffers.ads:79:08: info: flow dependencies proved
calculate.adb:3:21: info: initialization of "A" proved
calculate.adb:6:05: info: data dependencies proved
calculate.adb:7:05: info: flow dependencies proved
calculate.adb:7:26: info: justified that incorrect dependency "A => C"
calculate.adb:12:11: medium: overflow check might fail, cannot prove upper bound for C + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: subprogram at line 3 should mention C in a precondition]
circle_demo.adb:10:04: info: initialization of "My_Circle" proved
circle_demo.adb:14:14: info: precondition proved (CVC5: 1 VC)
console_io.ads:15:03: info: flow dependencies proved
contains.adb:7:04: info: initialization of "Result_Index" proved
contains.adb:9:37: info: precondition proved (CVC5: 3 VC; Trivial: 1 VC)
contains.adb:11:57: medium: range check might fail, cannot prove lower bound for S'First [reason for check: input value must fit in parameter type]
contains2.adb:9:04: info: initialization of "Result_Index" proved
contains2.adb:11:37: info: precondition proved (CVC5: 3 VC; Trivial: 1 VC)
contains2.adb:13:57: info: range check proved (CVC5: 2 VC)
contains3.adb:7:21: info: postcondition proved (CVC5: 2 VC)
contains3.adb:7:69: info: index check proved (CVC5: 2 VC)
contains3.adb:10:04: info: initialization of "Result_Index" proved
contains3.adb:14:19: info: assertion proved (CVC5: 2 VC; Trivial: 1 VC)
contains3.adb:15:37: info: precondition proved (CVC5: 3 VC; Trivial: 1 VC)
contains3.adb:17:57: info: range check proved (CVC5: 2 VC)
contains3.adb:22:37: info: index check proved (CVC5: 2 VC)
contains3.adb:24:46: info: index check proved (CVC5: 2 VC)
control_structures.adb:13:04: info: initialization of "A" proved
control_structures.adb:13:07: info: initialization of "B" proved
control_structures.adb:13:10: info: initialization of "C" proved
control_structures.adb:14:04: info: initialization of "D" proved
control_structures.adb:14:07: info: initialization of "E" proved
control_structures.adb:14:10: info: initialization of "F" proved
control_structures.adb:15:04: info: initialization of "Ch" proved
control_structures.adb:16:04: info: initialization of "Temperature" proved
control_structures.adb:17:04: info: initialization of "Valve_Setting" proved
control_structures.adb:18:04: info: initialization of "Value" proved
control_structures.adb:19:04: info: initialization of "Sum" proved
control_structures.adb:21:04: info: initialization of "Approx" proved
control_structures.adb:21:12: info: initialization of "X" proved
control_structures.adb:23:04: warning: initialization of "Letter" has no effect
control_structures.adb:25:14: info: add a contract to analyze it separately from calling contexts
control_structures.adb:25:14: info: local subprogram "Calculate_Valve" only analyzed in the context of calls
control_structures.adb:26:31: info: initialization of "New_Setting" proved
control_structures.adb:28:24: medium: overflow check might fail, cannot prove lower bound for 2 * Current_Temp, in call inlined at control_structures.adb:186 [reason for check: result of multiplication must fit in a 32-bits machine integer]
control_structures.adb:33:08: medium: overflow check might fail, cannot prove upper bound for abs Second [reason for check: result of absolute value must fit in a 32-bits machine integer] [possible fix: add precondition (abs Second in Integer) to subprogram at line 31]
control_structures.adb:33:23: medium: overflow check might fail, cannot prove upper bound for 2 * abs First [reason for check: result of multiplication must fit in a 32-bits machine integer] [possible fix: add precondition (2 * abs First in Integer) to subprogram at line 31]
control_structures.adb:33:25: medium: overflow check might fail, cannot prove upper bound for abs First [reason for check: result of absolute value must fit in a 32-bits machine integer] [possible fix: add precondition (abs First in Integer) to subprogram at line 31]
control_structures.adb:37:06: warning: unused assignment
control_structures.adb:38:06: warning: unused assignment
control_structures.adb:39:06: warning: unused assignment
control_structures.adb:40:06: warning: unused assignment
control_structures.adb:41:06: warning: unused assignment
control_structures.adb:42:07: warning: unused assignment
control_structures.adb:43:06: warning: unused assignment
control_structures.adb:46:04: warning: statement has no effect
control_structures.adb:47:09: warning: unused assignment
control_structures.adb:47:12: info: overflow check proved (CVC5: 2 VC)
control_structures.adb:48:09: warning: unused assignment
control_structures.adb:51:04: warning: statement has no effect
control_structures.adb:52:09: warning: unused assignment
control_structures.adb:55:04: warning: statement has no effect
control_structures.adb:56:09: warning: unused assignment
control_structures.adb:57:09: warning: unused assignment
control_structures.adb:59:09: warning: unused assignment
control_structures.adb:60:09: warning: unused assignment
control_structures.adb:64:04: warning: statement has no effect
control_structures.adb:65:09: warning: unused assignment
control_structures.adb:66:04: warning: statement has no effect
control_structures.adb:67:09: warning: unused assignment
control_structures.adb:69:09: warning: unused assignment
control_structures.adb:73:04: warning: statement has no effect
control_structures.adb:74:09: warning: unused assignment
control_structures.adb:75:04: warning: statement has no effect
control_structures.adb:76:09: warning: unused assignment
control_structures.adb:77:04: warning: statement has no effect
control_structures.adb:78:09: warning: unused assignment
control_structures.adb:81:12: warning: unused assignment
control_structures.adb:82:04: warning: statement has no effect
control_structures.adb:84:12: warning: unused assignment
control_structures.adb:86:12: warning: unused assignment
control_structures.adb:88:12: warning: unused assignment
control_structures.adb:90:12: warning: unused assignment
control_structures.adb:92:12: warning: unused assignment
control_structures.adb:93:18: warning: unused assignment
control_structures.adb:97:04: warning: statement has no effect
control_structures.adb:98:09: warning: unused assignment
control_structures.adb:98:14: info: overflow check proved (CVC5: 2 VC)
control_structures.adb:100:09: warning: unused assignment
control_structures.adb:100:14: info: division check proved (CVC5: 1 VC)
control_structures.adb:103:06: warning: unused assignment
control_structures.adb:103:26: info: overflow check proved (CVC5: 2 VC)
control_structures.adb:103:37: info: division check proved (CVC5: 1 VC)
control_structures.adb:105:04: warning: statement has no effect
control_structures.adb:106:09: warning: unused assignment
control_structures.adb:106:14: info: overflow check proved (CVC5: 2 VC)
control_structures.adb:107:04: warning: statement has no effect
control_structures.adb:108:09: warning: unused assignment
control_structures.adb:108:14: info: overflow check proved (CVC5: 2 VC)
control_structures.adb:110:09: warning: unused assignment
control_structures.adb:110:14: info: division check proved (CVC5: 1 VC)
control_structures.adb:113:06: warning: unused assignment
control_structures.adb:113:26: info: overflow check proved (CVC5: 2 VC)
control_structures.adb:113:49: info: overflow check proved (CVC5: 2 VC)
control_structures.adb:113:60: info: division check proved (CVC5: 1 VC)
control_structures.adb:115:04: warning: statement has no effect
control_structures.adb:116:09: warning: unused assignment
control_structures.adb:116:12: info: precondition proved (CVC5: 1 VC)
control_structures.adb:118:09: warning: unused assignment
control_structures.adb:118:12: info: precondition proved (CVC5: 1 VC)
control_structures.adb:118:23: info: float overflow check proved (CVC5: 1 VC)
control_structures.adb:121:06: warning: unused assignment
control_structures.adb:121:09: info: precondition proved (CVC5: 1 VC)
control_structures.adb:121:44: info: float overflow check proved (CVC5: 1 VC)
control_structures.adb:125:04: warning: statement has no effect
control_structures.adb:125:13: medium: overflow check might fail, cannot prove lower bound for C - D [reason for check: result of subtraction must fit in a 32-bits machine integer]
control_structures.adb:129:04: warning: statement has no effect
control_structures.adb:129:13: info: overflow check proved (CVC5: 2 VC)
control_structures.adb:133:04: warning: statement has no effect
control_structures.adb:139:10: warning: unused assignment
control_structures.adb:152:08: warning: unused assignment
control_structures.adb:156:11: warning: unused assignment
control_structures.adb:156:18: medium: overflow check might fail, cannot prove upper bound for Sum + Value [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: postcondition of call at line 154 should mention Item (for argument Value)]
control_structures.adb:160:11: warning: unused assignment
control_structures.adb:160:16: info: division check proved (CVC5: 1 VC)
control_structures.adb:160:16: info: float overflow check proved (Trivial)
control_structures.adb:161:17: medium: float overflow check might fail [reason for check: result of floating-point subtraction must be bounded]
control_structures.adb:161:26: medium: float overflow check might fail [reason for check: result of floating-point exponentiation must be bounded]
control_structures.adb:161:44: warning: statement has no effect
control_structures.adb:162:14: warning: unused assignment
control_structures.adb:162:21: info: float overflow check proved (Trivial)
control_structures.adb:162:31: medium: float overflow check might fail [reason for check: result of floating-point addition must be bounded]
control_structures.adb:162:35: medium: divide by zero might fail
control_structures.adb:162:35: medium: float overflow check might fail [reason for check: result of floating-point division must be bounded]
control_structures.adb:165:38: info: unrolling loop
control_structures.adb:169:46: info: unrolling loop
control_structures.adb:176:08: info: range check proved (CVC5: 2 VC)
control_structures.adb:176:38: info: cannot unroll loop (too many loop iterations)
control_structures.adb:180:08: info: range check proved (CVC5: 2 VC)
control_structures.adb:180:46: info: cannot unroll loop (too many loop iterations)
control_structures.adb:186:07: info: analyzing call to "Calculate_Valve" in context
datebook.adb:40:40: info: initialization of "Event_Array" constituent of "State" proved
datebook.adb:63:07: info: initialization of "Found" proved
datebook.adb:72:40: info: cannot unroll loop (too many loop iterations)
datebook.adb:86:69: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
datebook.adb:86:69: low: range check might fail, cannot prove upper bound for Description & (1 .. Maximum_Description_Length - Description'Length => ' ') [reason for check: result of concatenation must fit in the target type of the assignment] [possible fix: subprogram at datebook.ads:33 should mention Description in a precondition]
datebook.adb:87:18: info: range check proved (CVC5: 2 VC)
datebook.adb:87:21: info: range check proved (CVC5: 2 VC)
datebook.adb:87:64: info: range check proved (CVC5: 2 VC)
datebook.adb:88:68: info: range check proved (CVC5: 2 VC)
datebook.adb:104:37: info: cannot unroll loop (too many loop iterations)
datebook.adb:123:37: info: cannot unroll loop (too many loop iterations)
datebook.adb:153:07: info: initialization of "Index" proved
datebook.adb:156:19: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
datebook.adb:162:27: info: range check proved (CVC5: 2 VC)
datebook.adb:165:20: info: range check proved (CVC5: 2 VC)
datebook.adb:169:22: info: loop invariant initialization proved (CVC5: 3 VC)
datebook.adb:169:22: info: loop invariant preservation proved (CVC5: 3 VC)
datebook.adb:169:73: info: range check proved (CVC5: 4 VC)
datebook.adb:171:43: info: range check proved (CVC5: 4 VC)
datebook.adb:173:49: info: index check proved (CVC5: 2 VC)
datebook.adb:173:49: info: overflow check proved (CVC5: 2 VC)
datebook.adb:183:25: info: range check proved (CVC5: 2 VC)
datebook.adb:208:37: info: cannot unroll loop (too many loop iterations)
datebook.adb:210:12: info: no contextual analysis of "Is_After" (in potentially unevaluated context)
datebook.adb:228:32: info: loop invariant initialization proved (CVC5: 1 VC)
datebook.adb:228:32: info: loop invariant preservation proved (CVC5: 1 VC)
datebook.adb:231:28: info: range check proved (CVC5: 2 VC)
datebook.ads:27:06: info: data dependencies proved
datebook.ads:28:06: info: flow dependencies proved
datebook.ads:36:07: info: initialization of "Status" proved
datebook.ads:38:06: info: data dependencies proved
datebook.ads:39:06: info: flow dependencies proved
datebook.ads:44:06: info: data dependencies proved
datebook.ads:45:06: info: flow dependencies proved
datebook.ads:49:38: info: initialization of "Date" proved
datebook.ads:49:65: info: initialization of "Status" proved
datebook.ads:51:06: info: data dependencies proved
datebook.ads:52:06: info: flow dependencies proved
datebook.ads:60:07: info: initialization of "Description" proved
datebook.ads:61:07: info: initialization of "Status" proved
datebook.ads:63:06: info: data dependencies proved
datebook.ads:64:06: info: flow dependencies proved
datebook.ads:70:07: info: initialization of "Next_Date" proved
datebook.ads:71:07: info: initialization of "Status" proved
datebook.ads:73:06: info: data dependencies proved
datebook.ads:74:06: info: flow dependencies proved
datebook.ads:79:06: info: data dependencies proved
datebooks.adb:31:07: info: initialization of "Find_Result" proved
datebooks.adb:41:35: info: loop invariant initialization proved (CVC5: 1 VC)
datebooks.adb:41:35: info: loop invariant preservation proved (CVC5: 1 VC)
datebooks.adb:55:17: info: range check proved (CVC5: 2 VC)
datebooks.adb:56:38: info: loop invariant initialization proved (CVC5: 4 VC)
datebooks.adb:56:38: info: loop invariant preservation proved (CVC5: 4 VC)
datebooks.adb:58:40: info: overflow check proved (CVC5: 4 VC)
datebooks.adb:60:65: info: index check proved (CVC5: 2 VC)
datebooks.adb:60:65: info: overflow check proved (CVC5: 2 VC)
datebooks.adb:60:70: info: overflow check proved (CVC5: 2 VC)
datebooks.adb:62:74: info: range check proved (CVC5: 2 VC)
datebooks.adb:73:33: info: cannot unroll loop (too many loop iterations)
datebooks.adb:86:33: info: cannot unroll loop (too many loop iterations)
datebooks.adb:106:07: info: initialization of "I" proved
datebooks.adb:109:19: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
datebooks.adb:115:27: info: range check proved (CVC5: 2 VC)
datebooks.adb:118:20: info: range check proved (CVC5: 2 VC)
datebooks.adb:120:22: info: loop invariant initialization proved (CVC5: 3 VC)
datebooks.adb:120:22: info: loop invariant preservation proved (CVC5: 3 VC)
datebooks.adb:120:61: info: range check proved (CVC5: 4 VC)
datebooks.adb:122:41: info: range check proved (CVC5: 4 VC)
datebooks.adb:124:49: info: index check proved (CVC5: 2 VC)
datebooks.adb:124:49: info: overflow check proved (CVC5: 2 VC)
datebooks.adb:133:17: info: range check proved (CVC5: 2 VC)
datebooks.adb:151:33: info: cannot unroll loop (too many loop iterations)
datebooks.adb:152:38: info: no contextual analysis of "Is_After" (in potentially unevaluated context)
datebooks.adb:165:32: info: loop invariant initialization proved (CVC5: 1 VC)
datebooks.adb:165:32: info: loop invariant preservation proved (CVC5: 1 VC)
datebooks.adb:168:28: info: range check proved (CVC5: 2 VC)
datebooks.ads:25:25: info: initialization of "Book" proved
datebooks.ads:27:06: info: flow dependencies proved
datebooks.ads:32:99: info: initialization of "Status" proved
datebooks.ads:34:06: info: flow dependencies proved
datebooks.ads:39:06: info: flow dependencies proved
datebooks.ads:43:58: info: initialization of "Date" proved
datebooks.ads:43:85: info: initialization of "Status" proved
datebooks.ads:45:06: info: flow dependencies proved
datebooks.ads:50:70: info: initialization of "Description" proved
datebooks.ads:50:96: info: initialization of "Status" proved
datebooks.ads:52:06: info: flow dependencies proved
datebooks.ads:57:61: info: initialization of "Next_Date" proved
datebooks.ads:57:93: info: initialization of "Status" proved
datebooks.ads:59:06: info: flow dependencies proved
dates.adb:14:13: info: add a contract to analyze it separately from calling contexts
dates.adb:14:13: info: local subprogram "Is_Leap_Year" only analyzed in the context of calls
dates.adb:17:15: info: division check proved (CVC5: 1 VC), in call inlined at dates.adb:49
dates.adb:28:08: info: postcondition proved (CVC5: 12 VC; Trivial: 12 VC)
dates.adb:47:07: info: initialization of "Length" proved
dates.adb:49:10: info: analyzing call to "Is_Leap_Year" in context
dates.adb:59:13: info: add a contract to analyze it separately from calling contexts
dates.adb:59:13: info: local subprogram "Is_Valid_Date" only analyzed in the context of calls
dates.adb:72:06: info: flow dependencies proved
dates.adb:77:47: info: range check proved (CVC5: 2 VC)
dates.adb:81:54: info: range check proved (CVC5: 2 VC)
dates.adb:85:53: info: range check proved (CVC5: 2 VC)
dates.adb:94:06: info: flow dependencies proved
dates.adb:99:47: info: range check proved (CVC5: 2 VC)
dates.adb:102:54: info: range check proved (CVC5: 2 VC)
dates.adb:105:53: info: range check proved (CVC5: 2 VC)
dates.adb:142:10: info: analyzing call to "Is_Valid_Date" in context
dates.adb:219:07: info: initialization of "Steps" proved
dates.adb:224:14: info: range check proved (CVC5: 2 VC)
dates.adb:230:35: info: loop invariant initialization proved (CVC5: 1 VC)
dates.adb:230:35: info: loop invariant preservation proved (CVC5: 1 VC)
dates.adb:232:13: info: precondition proved (CVC5: 1 VC)
dates.adb:236:14: info: range check proved (CVC5: 2 VC)
dates.adb:242:35: info: loop invariant initialization proved (CVC5: 1 VC)
dates.adb:242:35: info: loop invariant preservation proved (CVC5: 1 VC)
dates.adb:244:13: info: precondition proved (CVC5: 1 VC)
dates.ads:32:07: info: initialization of "New_Date" proved
dates.ads:33:07: info: initialization of "Valid" proved
dates.ads:35:06: info: flow dependencies proved
dates.ads:62:76: info: initialization of "Valid" proved
dates.ads:64:06: info: flow dependencies proved
dates.ads:78:14: info: postcondition proved (CVC5: 2 VC; Trivial: 1 VC)
density_altitude-humidity_unit.ads:9:20: info: initialization of "Value" proved
density_altitude-humidity_unit.ads:10:11: info: data dependencies proved
density_altitude-humidity_unit.ads:11:11: info: flow dependencies proved
density_altitude-pressure_unit.ads:9:20: info: initialization of "Value" proved
density_altitude-pressure_unit.ads:10:11: info: data dependencies proved
density_altitude-pressure_unit.ads:11:11: info: flow dependencies proved
density_altitude-temperature_unit.ads:9:20: info: initialization of "Value" proved
density_altitude-temperature_unit.ads:10:11: info: data dependencies proved
density_altitude-temperature_unit.ads:11:11: info: flow dependencies proved
display_manager.ads:10:08: info: data dependencies proved
display_manager.ads:10:44: info: initialization of "Value" proved
double_list.adb:17:04: info: initialization of "Memory" constituent of "Internal_List" proved, in instantiation at list_handler.adb:8
double_list.adb:18:04: info: initialization of "Count" constituent of "Internal_List" proved, in instantiation at list_handler.adb:8
double_list.adb:19:04: info: initialization of "Free_List" constituent of "Internal_List" proved, in instantiation at list_handler.adb:8
double_list.adb:20:04: info: initialization of "Free" constituent of "Internal_List" proved, in instantiation at list_handler.adb:8
double_list.adb:24:41: info: initialization of "Memory" constituent of "Internal_List" proved, in instantiation at list_handler.adb:8
double_list.adb:24:49: info: initialization of "Count" constituent of "Internal_List" proved, in instantiation at list_handler.adb:8
double_list.adb:24:56: info: initialization of "Free_List" constituent of "Internal_List" proved, in instantiation at list_handler.adb:8
double_list.adb:24:67: info: initialization of "Free" constituent of "Internal_List" proved, in instantiation at list_handler.adb:8
double_list.adb:50:07: info: initialization of "New_Pointer" proved, in instantiation at list_handler.adb:8
double_list.adb:67:25: info: range check proved (CVC5: 2 VC), in instantiation at list_handler.adb:8
double_list.ads:7:26: info: initialization of "Integer_List.Internal_List" constituent of "List_Handler.List" proved, in instantiation at list_handler.adb:8
double_list.ads:8:05: info: flow dependencies proved, in instantiation at list_handler.adb:8
double_list.ads:9:05: info: initial condition proved (CVC5: 1 VC), in instantiation at list_handler.adb:8
double_list.ads:17:08: info: data dependencies proved, in instantiation at list_handler.adb:8
double_list.ads:18:08: info: flow dependencies proved, in instantiation at list_handler.adb:8
double_list.ads:19:19: info: postcondition proved (CVC5: 1 VC), in instantiation at list_handler.adb:8
double_list.ads:23:29: info: initialization of "Status" proved, in instantiation at list_handler.adb:8
double_list.ads:25:08: info: data dependencies proved, in instantiation at list_handler.adb:8
double_list.ads:26:08: info: flow dependencies proved, in instantiation at list_handler.adb:8
double_list.ads:31:08: info: data dependencies proved, in instantiation at list_handler.adb:8
double_list.ads:35:08: info: data dependencies proved, in instantiation at list_handler.adb:8
elaboration_demo.adb:2:29: warning: unused initial value of "Size"
elaboration_demo.adb:3:29: high: "Count" is not initialized in "Elaboration_Demo" [reason for check: OUT parameter should be initialized on return] [possible fix: initialize "Count" on all paths or make "Count" an IN OUT parameter]
elaboration_demo.adb:3:29: warning: unused variable "Count"
elaboration_demo.adb:4:04: info: range check proved (CVC5: 2 VC)
elaboration_demo.adb:4:04: warning: initialization of "Line" has no effect
elaboration_demo.adb:4:34: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
elaboration_demo.adb:5:04: warning: initialization of "Guess" has no effect
elaboration_demo.adb:5:26: medium: float overflow check might fail [reason for check: result of floating-point addition must be bounded]
elaboration_demo.adb:5:61: info: precondition proved (CVC5: 1 VC)
elaboration_demo.adb:5:74: info: division check proved (CVC5: 1 VC)
elaboration_demo.adb:5:74: info: float overflow check proved (Trivial)
enum_example.adb:15:04: info: no contextual analysis of "Next_Day" (multiple returns)
enum_example.adb:20:32: info: range check proved (CVC5: 1 VC)
enum_example.adb:24:04: info: initialization of "Today" proved
enum_example.adb:25:04: info: initialization of "Tomorrow" proved
enum_example.adb:26:04: info: initialization of "Count" proved
enum_example.adb:43:47: info: unrolling loop
enum_example.adb:49:37: info: unrolling loop
enum_example.adb:55:49: info: unrolling loop
enum_example.adb:56:22: info: overflow check proved (CVC5: 12 VC)
example.adb:9:14: info: add a contract to analyze it separately from calling contexts
example.adb:9:14: info: local subprogram "Bounded_Increment" only analyzed in the context of calls
example.adb:12:07: info: initialization of "Changed" proved
example.adb:16:27: info: overflow check proved (CVC5: 2 VC), in call inlined at example.adb:29
example.adb:23:04: info: initialization of "Value" proved
example.adb:24:04: info: initialization of "Modified" proved
example.adb:29:04: info: analyzing call to "Bounded_Increment" in context
external_test.adb:11:08: warning: make sure that all overlapping objects have Async_Writers set to True
external_test.adb:11:08: warning: writing to "Value" is assumed to have no effects on other non-volatile objects
external_test.adb:16:12: warning: unused assignment
external_test.ads:6:20: info: initialization of "Item" proved
generic_examples.adb:8:64: info: data dependencies proved
generic_examples.adb:12:33: info: cannot unroll loop (too many loop iterations)
generic_examples.adb:14:30: medium: overflow check might fail, cannot prove upper bound for Result + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: loop at line 12 should mention Result in a loop invariant]
generic_examples.adb:35:30: medium: overflow check might fail, cannot prove upper bound for Result + 1, in instantiation at generic_examples.adb:41 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: loop at line 33 should mention Result in a loop invariant]
generic_examples.adb:35:30: medium: overflow check might fail, cannot prove upper bound for Result + 1, in instantiation at generic_examples.adb:48 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: loop at line 33 should mention Result in a loop invariant]
generic_examples.adb:41:04: info: cannot unroll loop (too many loop iterations)
generic_examples.adb:41:04: info: in instantiation at line 33
generic_examples.adb:48:04: info: cannot unroll loop (too many loop iterations)
generic_examples.adb:48:04: info: in instantiation at line 33
generic_examples.adb:61:21: info: initialization of "Result" proved, in instantiation at generic_examples.adb:79
generic_examples.adb:72:30: medium: overflow check might fail, cannot prove upper bound for Result + 1, in instantiation at generic_examples.adb:79 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: loop at line 70 should mention Result in a loop invariant]
generic_examples.adb:79:04: info: cannot unroll loop (too many loop iterations)
generic_examples.adb:79:04: info: in instantiation at line 70
generic_examples.adb:86:04: info: initialization of "The_Count" proved
generic_searchers.adb:9:07: info: initialization of "Mid_Index" proved, in instantiation at prime_search.adb:15
generic_searchers.adb:9:07: info: initialization of "Mid_Index" proved, in instantiation at search_demo.adb:12
generic_searchers.adb:21:48: info: division check proved (CVC5: 2 VC), in instantiation at prime_search.adb:15
generic_searchers.adb:21:48: info: division check proved (CVC5: 2 VC), in instantiation at search_demo.adb:12
generic_searchers.adb:30:33: info: loop invariant initialization proved (CVC5: 1 VC), in instantiation at prime_search.adb:15
generic_searchers.adb:30:33: info: loop invariant initialization proved (CVC5: 1 VC), in instantiation at search_demo.adb:12
generic_searchers.adb:30:33: info: loop invariant preservation proved (CVC5: 1 VC), in instantiation at prime_search.adb:15
generic_searchers.adb:30:33: info: loop invariant preservation proved (CVC5: 1 VC), in instantiation at search_demo.adb:12
generic_searchers.adb:31:33: info: loop invariant initialization proved (CVC5: 2 VC), in instantiation at prime_search.adb:15
generic_searchers.adb:31:33: info: loop invariant initialization proved (CVC5: 2 VC), in instantiation at search_demo.adb:12
generic_searchers.adb:31:33: info: loop invariant preservation proved (CVC5: 2 VC), in instantiation at prime_search.adb:15
generic_searchers.adb:31:33: info: loop invariant preservation proved (CVC5: 2 VC), in instantiation at search_demo.adb:12
generic_searchers.adb:32:33: info: loop invariant initialization proved (CVC5: 1 VC), in instantiation at prime_search.adb:15
generic_searchers.adb:32:33: info: loop invariant initialization proved (CVC5: 1 VC), in instantiation at search_demo.adb:12
generic_searchers.adb:32:33: info: loop invariant preservation proved (CVC5: 1 VC), in instantiation at prime_search.adb:15
generic_searchers.adb:32:33: info: loop invariant preservation proved (CVC5: 1 VC), in instantiation at search_demo.adb:12
generic_searchers.adb:33:33: info: loop invariant initialization proved (CVC5: 1 VC), in instantiation at prime_search.adb:15
generic_searchers.adb:33:33: info: loop invariant initialization proved (CVC5: 1 VC), in instantiation at search_demo.adb:12
generic_searchers.adb:33:33: info: loop invariant preservation proved (CVC5: 1 VC), in instantiation at prime_search.adb:15
generic_searchers.adb:33:33: info: loop invariant preservation proved (CVC5: 1 VC), in instantiation at search_demo.adb:12
generic_searchers.adb:34:31: info: loop variant proved (CVC5: 1 VC), in instantiation at prime_search.adb:15
generic_searchers.adb:34:31: info: loop variant proved (CVC5: 1 VC), in instantiation at search_demo.adb:12
generic_searchers.adb:37:47: info: index check proved (CVC5: 2 VC), in instantiation at prime_search.adb:15
generic_searchers.adb:37:47: info: index check proved (CVC5: 2 VC), in instantiation at search_demo.adb:12
generic_searchers.adb:40:36: info: range check proved (CVC5: 2 VC), in instantiation at prime_search.adb:15
generic_searchers.adb:40:36: info: range check proved (CVC5: 2 VC), in instantiation at search_demo.adb:12
generic_searchers.ads:11:29: info: initialization of "Found" proved, in instantiation at prime_search.adb:15
generic_searchers.ads:11:29: info: initialization of "Found" proved, in instantiation at search_demo.adb:12
generic_searchers.ads:12:29: info: initialization of "Result" proved, in instantiation at prime_search.adb:15
generic_searchers.ads:12:29: info: initialization of "Result" proved, in instantiation at search_demo.adb:12
generic_searchers.ads:15:74: info: index check proved (CVC5: 2 VC), in instantiation at prime_search.adb:15
generic_searchers.ads:15:74: info: index check proved (CVC5: 2 VC), in instantiation at search_demo.adb:12
generic_searchers.ads:19:49: medium: postcondition might fail, cannot prove Items (J) /= Search_Item, in instantiation at prime_search.adb:15
generic_searchers.ads:19:49: medium: postcondition might fail, cannot prove Items (J) /= Search_Item, in instantiation at search_demo.adb:12
good_types.adb:13:13: info: add a contract to analyze it separately from calling contexts
good_types.adb:13:13: info: local subprogram "To_Feet" only analyzed in the context of calls
good_types.adb:15:26: info: division check proved (CVC5: 1 VC), in call inlined at good_types.adb:24
good_types.adb:15:26: info: float overflow check proved (Trivial), in call inlined at good_types.adb:24
good_types.adb:15:26: info: range check proved (Trivial), in call inlined at good_types.adb:24
good_types.adb:18:04: info: initialization of "Room_Length" proved
good_types.adb:19:04: info: initialization of "Wall_Thickness" proved
good_types.adb:20:04: info: initialization of "Total" proved
good_types.adb:24:25: info: float overflow check proved (Trivial)
good_types.adb:24:25: medium: range check might fail [reason for check: result of addition must fit in the target type of the assignment] [possible fix: postcondition of call at line 22 should mention Item (for argument Room_Length)]
good_types.adb:24:31: info: float overflow check proved (Trivial)
good_types.adb:24:33: info: analyzing call to "To_Feet" in context
hierarchical_state_demo-a_pack.adb:12:31: info: overflow check proved (CVC5: 2 VC)
hierarchical_state_demo-a_pack.adb:13:30: info: overflow check proved (CVC5: 2 VC)
hierarchical_state_demo-a_pack.adb:15:25: info: overflow check proved (CVC5: 2 VC)
hierarchical_state_demo-a_pack.ads:4:09: info: flow dependencies proved
hierarchical_state_demo-a_pack.ads:7:12: info: data dependencies proved
hierarchical_state_demo-a_pack.ads:8:12: info: flow dependencies proved
hierarchical_state_demo.adb:16:22: info: division check proved (CVC5: 1 VC)
hierarchical_state_demo.adb:18:25: info: overflow check proved (CVC5: 2 VC)
hierarchical_state_demo.adb:18:25: info: range check proved (CVC5: 2 VC)
hierarchical_state_demo.adb:18:34: info: overflow check proved (CVC5: 2 VC)
hierarchical_state_demo.adb:18:43: info: division check proved (CVC5: 1 VC)
hierarchical_state_demo.adb:20:25: info: overflow check proved (CVC5: 2 VC)
hierarchical_state_demo.adb:20:25: info: range check proved (CVC5: 2 VC)
hierarchical_state_demo.adb:20:34: info: overflow check proved (CVC5: 2 VC)
hierarchical_state_demo.adb:20:43: info: division check proved (CVC5: 1 VC)
hierarchical_state_demo.ads:4:09: info: flow dependencies proved
hierarchical_state_demo.ads:7:28: info: initialization of "Success" proved
hierarchical_state_demo.ads:8:12: info: data dependencies proved
hierarchical_state_demo.ads:9:12: info: flow dependencies proved
hierarchical_state_demo_nested.adb:8:30: info: initialization of "A_Pack.State" constituent of "Hierarchical_State_Demo_Nested.Top_State" proved
hierarchical_state_demo_nested.adb:9:12: info: flow dependencies proved
hierarchical_state_demo_nested.adb:12:15: info: data dependencies proved
hierarchical_state_demo_nested.adb:13:15: info: flow dependencies proved
hierarchical_state_demo_nested.adb:27:34: info: overflow check proved (CVC5: 2 VC)
hierarchical_state_demo_nested.adb:28:33: info: overflow check proved (CVC5: 2 VC)
hierarchical_state_demo_nested.adb:30:28: info: overflow check proved (CVC5: 2 VC)
hierarchical_state_demo_nested.adb:45:22: info: division check proved (CVC5: 1 VC)
hierarchical_state_demo_nested.adb:47:25: info: overflow check proved (CVC5: 2 VC)
hierarchical_state_demo_nested.adb:47:25: info: range check proved (CVC5: 2 VC)
hierarchical_state_demo_nested.adb:47:34: info: overflow check proved (CVC5: 2 VC)
hierarchical_state_demo_nested.adb:47:43: info: division check proved (CVC5: 1 VC)
hierarchical_state_demo_nested.adb:49:25: info: overflow check proved (CVC5: 2 VC)
hierarchical_state_demo_nested.adb:49:25: info: range check proved (CVC5: 2 VC)
hierarchical_state_demo_nested.adb:49:34: info: overflow check proved (CVC5: 2 VC)
hierarchical_state_demo_nested.adb:49:43: info: division check proved (CVC5: 1 VC)
hierarchical_state_demo_nested.ads:4:09: info: flow dependencies proved
hierarchical_state_demo_nested.ads:7:28: info: initialization of "Success" proved
hierarchical_state_demo_nested.ads:8:09: info: data dependencies proved
hierarchical_state_demo_nested.ads:9:09: info: flow dependencies proved
indexed_datebook_v2.ads:6:05: info: flow dependencies proved
initializer_demo.adb:6:07: warning: initialization of "Sum" has no effect
initializer_demo.adb:9:28: info: unrolling loop
initializer_demo.adb:10:21: medium: overflow check might fail, cannot prove lower bound for Sum + A (Index) [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: subprogram at initializer_demo.ads:8 should mention A in a precondition]
initializer_demo.adb:17:07: info: initialization of "Sum" proved
initializer_demo.adb:22:28: info: unrolling loop
initializer_demo.adb:23:21: medium: overflow check might fail, cannot prove upper bound for Sum + Accumulator (A (Index)) [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: subprogram at initializer_demo.ads:14 should mention A in a precondition]
initializer_demo.adb:30:07: info: initialization of "Offset" proved
initializer_demo.adb:35:19: info: overflow check proved (CVC5: 2 VC)
initializer_demo.adb:35:35: medium: overflow check might fail, cannot prove upper bound for P.Y + Offset.Y [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: subprogram at initializer_demo.ads:22 should mention P in a precondition]
initializer_demo.ads:12:28: info: in default value at initializer_demo.adb:17
initializer_demo.ads:12:28: info: range check proved (CVC5: 2 VC)
interval.ads:6:13: medium: invariant check might fail
interval.ads:9:09: info: invariant check proved on default value (CVC5: 1 VC)
interval_tree.ads:5:05: info: flow dependencies proved
interval_tree.ads:18:19: info: implicit function contract not available for proof ("Size" might not return)
interval_tree.ads:18:26: info: implicit function contract not available for proof ("Size" might not return)
interval_tree.ads:28:18: info: implicit function contract not available for proof ("Size" might not return)
interval_tree_wrapper.ads:6:07: info: flow dependencies proved
interval_tree_wrapper.ads:20:20: info: implicit function contract not available for proof ("Size" might not return)
interval_tree_wrapper.ads:20:57: info: implicit function contract not available for proof ("Size" might not return)
interval_tree_wrapper.ads:20:71: info: implicit function contract not available for proof ("Size" might not return)
interval_tree_wrapper.ads:30:18: info: implicit function contract not available for proof ("Size" might not return)
led_display.adb:14:10: warning: make sure that all overlapping objects have Async_Writers set to True
led_display.adb:14:10: warning: writing to "Value" is assumed to have no effects on other non-volatile objects
led_display.adb:24:41: info: initialization of "Value" constituent of "LED_State" proved
led_display.ads:11:09: info: data dependencies proved
lights.adb:5:07: info: initialization of "Result" proved
list_handler.adb:8:04: info: cannot unroll loop (too many loop iterations)
list_handler.adb:8:04: info: in instantiation at double_list.adb:35
list_handler.adb:19:07: info: initialization of "Status" proved
list_handler.adb:26:29: info: overflow check proved (CVC5: 2 VC)
list_handler.ads:5:07: info: flow dependencies proved
list_handler.ads:9:10: info: data dependencies proved
list_handler.ads:10:10: info: flow dependencies proved
messages.ads:17:28: medium: range check might fail
network-helpers.ads:5:23: info: initialization of "MSB" proved
network-helpers.ads:6:23: info: initialization of "LSB" proved
network-helpers.ads:8:08: info: data dependencies proved
network-helpers.ads:9:08: info: flow dependencies proved
network-helpers0.adb:16:27: info: range check proved (CVC5: 2 VC)
network-helpers0.adb:17:21: info: range check proved (CVC5: 2 VC)
network-helpers0.ads:5:23: info: initialization of "MSB" proved
network-helpers0.ads:6:23: info: initialization of "LSB" proved
no_overflow.adb:7:14: info: overflow check proved (CVC5: 2 VC)
no_overflow.adb:7:14: info: range check proved (CVC5: 2 VC)
no_overflow.adb:7:19: info: overflow check proved (CVC5: 2 VC)
no_overflow.adb:7:24: info: division check proved (CVC5: 1 VC)
no_overflow.ads:5:19: info: initialization of "C" proved
numeric_display.ads:13:08: warning: make sure that all overlapping objects have Async_Writers set to True
numeric_display.ads:13:08: warning: writing to "Value" is assumed to have no effects on other non-volatile objects
operator_overload.adb:10:13: info: add a contract to analyze it separately from calling contexts
operator_overload.adb:10:13: info: local subprogram "<=" only analyzed in the context of calls
operator_overload.adb:13:07: info: initialization of "Left_Squared" proved
operator_overload.adb:13:07: info: initialization of "Left_Squared" proved, in call inlined at operator_overload.adb:30
operator_overload.adb:13:07: info: initialization of "Left_Squared" proved, in call inlined at operator_overload.adb:37
operator_overload.adb:14:07: info: initialization of "Right_Squared" proved
operator_overload.adb:14:07: info: initialization of "Right_Squared" proved, in call inlined at operator_overload.adb:30
operator_overload.adb:14:07: info: initialization of "Right_Squared" proved, in call inlined at operator_overload.adb:37
operator_overload.adb:16:38: info: float overflow check proved (altergo: 1 VC), in call inlined at operator_overload.adb:37
operator_overload.adb:16:38: medium: float overflow check might fail, in call inlined at operator_overload.adb:30 [reason for check: result of floating-point exponentiation must be bounded]
operator_overload.adb:16:43: info: float overflow check proved (altergo: 1 VC), in call inlined at operator_overload.adb:37
operator_overload.adb:16:43: medium: float overflow check might fail, in call inlined at operator_overload.adb:30 [reason for check: result of floating-point addition must be bounded]
operator_overload.adb:16:59: info: float overflow check proved (altergo: 1 VC), in call inlined at operator_overload.adb:37
operator_overload.adb:16:59: medium: float overflow check might fail, in call inlined at operator_overload.adb:30 [reason for check: result of floating-point exponentiation must be bounded]
operator_overload.adb:17:38: info: float overflow check proved (altergo: 1 VC), in call inlined at operator_overload.adb:37
operator_overload.adb:17:38: medium: float overflow check might fail, in call inlined at operator_overload.adb:30 [reason for check: result of floating-point exponentiation must be bounded]
operator_overload.adb:17:43: info: float overflow check proved (altergo: 1 VC), in call inlined at operator_overload.adb:37
operator_overload.adb:17:43: medium: float overflow check might fail, in call inlined at operator_overload.adb:30 [reason for check: result of floating-point addition must be bounded]
operator_overload.adb:17:59: info: float overflow check proved (altergo: 1 VC), in call inlined at operator_overload.adb:37
operator_overload.adb:17:59: medium: float overflow check might fail, in call inlined at operator_overload.adb:30 [reason for check: result of floating-point exponentiation must be bounded]
operator_overload.adb:21:04: info: initialization of "P1" proved
operator_overload.adb:22:04: info: initialization of "P2" proved
operator_overload.adb:30:10: info: analyzing call to "<=" in context
operator_overload.adb:37:07: info: analyzing call to "<=" in context
overflow.adb:7:15: medium: overflow check might fail, cannot prove upper bound for A + B [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: add precondition (A <= Integer'Last - B) to subprogram at overflow.ads:3]
overflow.adb:7:20: info: division check proved (CVC5: 1 VC)
overflow.ads:5:19: info: initialization of "C" proved
palindrome.adb:6:13: info: add a contract to analyze it separately from calling contexts
palindrome.adb:6:13: info: local subprogram "Is_Palindrome" only analyzed in the context of calls
palindrome.adb:7:07: info: initialization of "Left_Index" proved
palindrome.adb:7:07: info: initialization of "Left_Index" proved, in call inlined at palindrome.adb:34
palindrome.adb:8:07: info: initialization of "Right_Index" proved
palindrome.adb:8:07: info: initialization of "Right_Index" proved, in call inlined at palindrome.adb:34
palindrome.adb:11:22: info: range check proved (CVC5: 4 VC), in call inlined at palindrome.adb:34
palindrome.adb:11:26: info: range check proved (CVC5: 2 VC), in call inlined at palindrome.adb:34
palindrome.adb:14:20: info: range check proved (CVC5: 4 VC), in call inlined at palindrome.adb:34
palindrome.adb:14:26: medium: array index check might fail, in call inlined at palindrome.adb:34 [reason for check: value must be a valid index into the array]
palindrome.adb:14:42: info: range check proved (CVC5: 4 VC), in call inlined at palindrome.adb:34
palindrome.adb:14:48: medium: array index check might fail, in call inlined at palindrome.adb:34 [reason for check: value must be a valid index into the array]
palindrome.adb:15:36: info: overflow check proved (CVC5: 2 VC), in call inlined at palindrome.adb:34
palindrome.adb:16:37: info: range check proved (CVC5: 2 VC), in call inlined at palindrome.adb:34
palindrome.adb:24:04: info: initialization of "Line" proved
palindrome.adb:25:04: info: initialization of "Count" proved
palindrome.adb:34:07: info: analyzing call to "Is_Palindrome" in context
palindrome.adb:34:07: info: range check proved (CVC5: 4 VC)
parent-public1.adb:7:07: info: initialization of "Temp" proved
parent.adb:6:22: medium: overflow check might fail, cannot prove upper bound for Value ** 2 [reason for check: result of exponentiation must fit in a 32-bits machine integer] [possible fix: subprogram at parent.ads:3 should mention Value in a precondition]
populate_tree.adb:7:05: info: data dependencies proved
populate_tree.adb:8:05: info: flow dependencies proved
populate_tree.adb:10:24: info: cannot unroll loop (too many loop iterations)
prime_search.adb:3:50: info: initialization of "Prime_Index" proved
prime_search.adb:12:04: info: initialization of "Found" proved
prime_search.adb:13:04: info: initialization of "Position" proved
prime_search.adb:20:18: info: assertion proved (CVC5: 1 VC)
prime_search.adb:21:77: info: index check proved (CVC5: 2 VC)
prime_search.adb:22:04: info: precondition proved (CVC5: 1 VC)
raster_graphics.adb:12:11: info: data dependencies proved
raster_graphics.adb:13:32: info: initialization of "Status" proved
raster_graphics.adb:15:39: medium: range check might fail, cannot prove lower bound for abs (A.X - B.X) [reason for check: default component value must fit in the type]
raster_graphics.adb:16:39: medium: range check might fail, cannot prove lower bound for abs (A.Y - B.Y) [reason for check: default component value must fit in the type]
raster_graphics.adb:31:41: medium: overflow check might fail, cannot prove upper bound for Line_Count + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: subprogram at raster_graphics.ads:18 should mention Line_Count in a precondition]
raster_graphics.ads:20:08: info: data dependencies proved
raster_graphics.ads:21:29: info: initialization of "Status" proved
region_checks.ads:8:08: info: complete contract cases proved (CVC5: 1 VC)
region_checks.ads:8:08: info: disjoint contract cases proved (CVC5: 1 VC)
region_checks.ads:9:17: info: contract case proved (CVC5: 1 VC; Trivial: 1 VC)
region_checks.ads:10:17: info: contract case proved (CVC5: 1 VC; Trivial: 1 VC)
region_checks.ads:11:17: info: contract case proved (CVC5: 1 VC; Trivial: 1 VC)
region_checks.ads:15:08: info: disjoint contract cases proved (CVC5: 1 VC)
region_checks.ads:16:58: info: contract case proved (CVC5: 1 VC; Trivial: 1 VC)
region_checks.ads:18:58: info: contract case proved (CVC5: 1 VC; Trivial: 1 VC)
region_checks.ads:20:58: info: contract case proved (CVC5: 1 VC; Trivial: 1 VC)
region_checks.ads:22:58: info: contract case proved (CVC5: 1 VC; Trivial: 1 VC)
region_checks.ads:24:18: info: contract case proved (CVC5: 1 VC; Trivial: 1 VC)
scrabble.adb:7:15: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:7:26: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:7:37: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:7:48: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:8:15: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:8:26: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:8:37: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:8:48: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:9:15: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:9:26: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:9:37: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:9:48: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:10:15: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:10:26: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:10:37: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:10:48: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:11:14: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:11:26: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:11:37: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:11:48: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:12:15: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:12:26: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:12:37: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:12:48: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:13:15: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:13:25: info: predicate check proved (CVC5: 1 VC)
scrabble.adb:19:33: info: loop invariant initialization proved (CVC5: 1 VC)
scrabble.adb:19:33: info: loop invariant preservation proved (CVC5: 1 VC)
scrabble.adb:19:50: info: overflow check proved (CVC5: 4 VC)
scrabble.adb:19:65: info: overflow check proved (CVC5: 4 VC)
scrabble.adb:20:37: info: overflow check proved (CVC5: 2 VC)
scrabble.adb:20:37: info: range check proved (CVC5: 2 VC)
search_demo.adb:18:04: info: initialization of "Found" proved
search_demo.adb:19:04: info: initialization of "Result_Index" proved
search_demo.adb:21:04: info: precondition proved (CVC5: 1 VC)
search_demo.adb:25:63: info: range check proved (CVC5: 2 VC)
searchers.adb:11:07: info: initialization of "Mid_Index" proved
searchers.adb:23:48: info: division check proved (CVC5: 2 VC)
searchers.adb:32:32: info: loop invariant initialization proved (CVC5: 1 VC)
searchers.adb:32:32: info: loop invariant preservation proved (CVC5: 1 VC)
searchers.adb:33:32: info: loop invariant initialization proved (CVC5: 1 VC)
searchers.adb:33:32: info: loop invariant preservation proved (CVC5: 1 VC)
searchers.ads:9:29: info: initialization of "Found" proved
searchers.ads:10:29: info: initialization of "Result" proved
searchers.ads:14:71: info: index check proved (CVC5: 2 VC)
searchers2.adb:11:07: info: initialization of "Mid_Index" proved
searchers2.adb:23:48: info: division check proved (CVC5: 2 VC)
searchers2.adb:33:13: info: loop invariant initialization proved (CVC5: 2 VC)
searchers2.adb:33:13: info: loop invariant preservation proved (CVC5: 2 VC)
searchers2.ads:9:29: info: initialization of "Found" proved
searchers2.ads:10:29: info: initialization of "Result" proved
searchers2.ads:14:68: info: index check proved (CVC5: 2 VC)
searchers2.ads:17:54: medium: postcondition might fail, cannot prove Search_Item /= Items(J)
searchers3.adb:9:07: info: initialization of "Mid_Index" proved
searchers3.adb:21:48: info: division check proved (CVC5: 2 VC)
searchers3.adb:30:33: info: loop invariant initialization proved (CVC5: 1 VC)
searchers3.adb:30:33: info: loop invariant preservation proved (CVC5: 1 VC)
searchers3.adb:31:33: info: loop invariant initialization proved (CVC5: 2 VC)
searchers3.adb:31:33: info: loop invariant preservation proved (CVC5: 2 VC)
searchers3.adb:32:33: info: loop invariant initialization proved (CVC5: 1 VC)
searchers3.adb:32:33: info: loop invariant preservation proved (CVC5: 1 VC)
searchers3.adb:33:33: info: loop invariant initialization proved (CVC5: 1 VC)
searchers3.adb:33:33: info: loop invariant preservation proved (CVC5: 1 VC)
searchers3.adb:34:31: info: loop variant proved (CVC5: 1 VC)
searchers3.adb:37:46: info: index check proved (CVC5: 2 VC)
searchers3.adb:40:36: info: range check proved (CVC5: 2 VC)
searchers3.ads:9:29: info: initialization of "Found" proved
searchers3.ads:10:29: info: initialization of "Result" proved
searchers3.ads:14:71: info: index check proved (CVC5: 2 VC)
searchers3.ads:17:56: medium: postcondition might fail, cannot prove Search_Item /= Items(J)
searches.adb:9:23: info: range check proved (CVC5: 2 VC)
searches.adb:11:26: info: index check proved (CVC5: 4 VC)
searches.adb:12:31: info: overflow check proved (CVC5: 4 VC)
searches.adb:14:13: info: loop invariant initialization proved (CVC5: 3 VC)
searches.adb:14:13: info: loop invariant preservation proved (CVC5: 3 VC)
searches.adb:15:63: info: index check proved (CVC5: 4 VC)
searches.adb:24:23: info: range check proved (CVC5: 2 VC)
searches.adb:26:55: info: index check proved (CVC5: 4 VC)
searches.adb:27:31: info: overflow check proved (CVC5: 4 VC)
searches.adb:29:13: info: loop invariant initialization proved (CVC5: 3 VC)
searches.adb:29:13: info: loop invariant preservation proved (CVC5: 3 VC)
searches.adb:29:49: info: overflow check proved (CVC5: 4 VC)
searches.adb:30:63: info: index check proved (CVC5: 4 VC)
searches.adb:34:26: info: range check proved (CVC5: 2 VC)
searches.ads:9:26: info: initialization of "Position" proved
searches.ads:11:10: info: flow dependencies proved
searches.ads:12:60: info: index check proved (CVC5: 2 VC)
searches.ads:13:21: info: postcondition proved (CVC5: 4 VC)
searches.ads:14:28: info: index check proved (CVC5: 2 VC)
searches.ads:16:32: info: index check proved (CVC5: 2 VC)
searches.ads:20:26: info: initialization of "Found" proved
searches.ads:21:26: info: initialization of "Position" proved
searches.ads:23:10: info: flow dependencies proved
searches.ads:28:38: info: index check proved (CVC5: 2 VC)
searches.ads:28:49: info: index check proved (CVC5: 2 VC)
searches.ads:29:21: info: postcondition proved (CVC5: 3 VC)
searches.ads:30:45: info: index check proved (CVC5: 2 VC)
searches.ads:33:57: info: index check proved (CVC5: 2 VC)
serial_numbers.adb:8:34: medium: overflow check might fail, cannot prove upper bound for Next_Number + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: subprogram at serial_numbers.ads:3 should mention Next_Number in a precondition]
serial_numbers.ads:3:24: info: initialization of "Number" proved
serial_numbers2.adb:8:34: medium: overflow check might fail, cannot prove upper bound for Next_Number + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: subprogram at serial_numbers2.ads:3 should mention Next_Number in a precondition]
serial_numbers2.ads:3:24: info: initialization of "Number" proved
serial_port.ads:6:07: info: flow dependencies proved
shapes.adb:9:07: info: initialization of "Delta_X" proved
shapes.adb:10:07: info: initialization of "Delta_Y" proved
shapes2.adb:9:07: info: initialization of "Delta_X" proved
shapes2.adb:10:07: info: initialization of "Delta_Y" proved
shapes3.adb:7:08: info: refined post proved (CVC5: 8 VC)
shapes3.adb:19:36: info: range check proved (CVC5: 2 VC)
shapes3.adb:22:17: info: range check proved (CVC5: 2 VC)
shapes3.adb:25:36: info: range check proved (CVC5: 2 VC)
shapes3.adb:28:17: info: range check proved (CVC5: 2 VC)
shapes3.adb:38:07: info: initialization of "Delta_X" proved
shapes3.adb:39:07: info: initialization of "Delta_Y" proved
shapes3.ads:11:18: info: postcondition proved (CVC5: 1 VC)
shapes4.adb:10:72: info: range check proved (CVC5: 2 VC)
shapes4.adb:11:53: info: range check proved (CVC5: 2 VC)
shapes4.adb:12:72: info: range check proved (CVC5: 2 VC)
shapes4.adb:13:53: info: range check proved (CVC5: 2 VC)
shapes4.adb:22:07: info: initialization of "Delta_X" proved
shapes4.adb:23:07: info: initialization of "Delta_Y" proved
shapes4.ads:8:13: info: invariant check proved (CVC5: 1 VC)
shapes4.ads:16:09: info: invariant check proved on default value (CVC5: 1 VC)
shapes5.adb:8:08: info: refined post proved (CVC5: 8 VC)
shapes5.adb:20:36: info: range check proved (CVC5: 2 VC)
shapes5.adb:23:17: info: range check proved (CVC5: 2 VC)
shapes5.adb:26:36: info: range check proved (CVC5: 2 VC)
shapes5.adb:29:17: info: range check proved (CVC5: 2 VC)
shapes5.adb:39:07: info: initialization of "Delta_X" proved
shapes5.adb:40:07: info: initialization of "Delta_Y" proved
shapes5.ads:4:08: info: flow dependencies proved
shapes5.ads:14:18: medium: postcondition might fail
shapes5.ads:25:11: info: data dependencies proved
silly.adb:3:21: info: initialization of "Result" proved
silly.adb:6:21: medium: overflow check might fail, cannot prove upper bound for X + Y [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
silly.adb:6:26: info: division check proved (CVC5: 1 VC)
silly.adb:12:22: info: division check proved (CVC5: 1 VC)
simple_math.adb:6:07: info: initialization of "Q" proved
simple_math.adb:7:07: info: initialization of "R" proved
simple_math.adb:12:19: medium: divide by zero might fail [possible fix: loop at line 11 should mention Q in a loop invariant]
simple_math.adb:14:25: info: division check proved (CVC5: 1 VC)
simple_math.adb:17:14: info: range check proved (CVC5: 2 VC)
sorted_arrays2.ads:13:21: info: function contract not available for proof ("Is_Sorted" might not return)
sorted_arrays2.ads:18:18: info: function contract not available for proof ("Is_Sorted" might not return)
sorters.adb:18:11: info: flow dependencies proved
sorters.adb:22:19: info: postcondition proved (CVC5: 4 VC; Trivial: 1 VC)
sorters.adb:23:28: info: index check proved (CVC5: 2 VC)
sorters.adb:23:45: info: index check proved (CVC5: 2 VC)
sorters.adb:24:28: info: index check proved (CVC5: 2 VC)
sorters.adb:24:45: info: index check proved (CVC5: 2 VC)
sorters.adb:26:58: info: index check proved (CVC5: 2 VC)
sorters.adb:26:75: info: index check proved (CVC5: 2 VC)
sorters.adb:30:07: info: initialization of "Temp" proved
sorters.adb:32:29: info: index check proved (CVC5: 2 VC)
sorters.adb:33:15: info: index check proved (CVC5: 2 VC)
sorters.adb:33:29: info: index check proved (CVC5: 2 VC)
sorters.adb:34:15: info: index check proved (CVC5: 2 VC)
sorters.adb:42:19: info: postcondition proved (CVC5: 3 VC)
sorters.adb:44:45: info: index check proved (CVC5: 2 VC)
sorters.adb:44:67: info: index check proved (CVC5: 2 VC)
sorters.adb:46:07: info: initialization of "Min" proved
sorters.adb:48:22: info: range check proved (CVC5: 2 VC)
sorters.adb:51:13: info: loop invariant initialization proved (CVC5: 3 VC)
sorters.adb:51:13: info: loop invariant preservation proved (CVC5: 3 VC)
sorters.adb:52:50: info: overflow check proved (CVC5: 4 VC)
sorters.adb:53:25: info: index check proved (CVC5: 4 VC)
sorters.adb:53:43: info: index check proved (CVC5: 4 VC)
sorters.adb:55:42: info: index check proved (CVC5: 2 VC)
sorters.adb:56:20: info: range check proved (CVC5: 2 VC)
sorters.adb:64:07: info: initialization of "Values_Last" proved
sorters.adb:64:07: info: range check proved (CVC5: 2 VC)
sorters.adb:66:07: info: initialization of "Smallest" proved
sorters.adb:69:50: info: overflow check proved (CVC5: 2 VC)
sorters.adb:70:22: info: length check proved (CVC5: 6 VC; Trivial: 2 VC)
sorters.adb:70:25: info: length check proved (CVC5: 6 VC; Trivial: 2 VC)
sorters.adb:71:22: info: precondition proved (CVC5: 2 VC)
sorters.adb:71:40: info: range check proved (CVC5: 8 VC)
sorters.adb:74:13: info: precondition proved (CVC5: 10 VC)
sorters.adb:75:29: info: range check proved (CVC5: 4 VC)
sorters.adb:81:33: info: loop invariant initialization proved (CVC5: 1 VC)
sorters.adb:81:33: info: loop invariant preservation proved (CVC5: 1 VC)
sorters.adb:83:13: info: loop invariant initialization proved (CVC5: 1 VC)
sorters.adb:84:18: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Values (Current) <= Values (J)
sorters.adb:84:26: info: index check proved (CVC5: 4 VC)
sorters.adb:84:46: info: index check proved (CVC5: 4 VC)
sorters.adb:86:13: info: loop invariant initialization proved (CVC5: 1 VC)
sorters.adb:87:16: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Values (J) <= Values (J + 1)
sorters.adb:87:24: info: index check proved (CVC5: 4 VC)
sorters.adb:87:40: info: index check proved (CVC5: 4 VC)
sorters.adb:87:40: info: overflow check proved (CVC5: 4 VC)
sorters.ads:16:11: info: flow dependencies proved
sorters.ads:19:22: info: postcondition proved (CVC5: 2 VC)
sorters.ads:19:64: info: overflow check proved (CVC5: 2 VC)
sorters.ads:20:33: info: index check proved (CVC5: 2 VC)
sorters.ads:20:49: info: index check proved (CVC5: 2 VC)
sorters.ads:20:49: info: overflow check proved (CVC5: 2 VC)
sqrt.adb:2:04: info: initialization of "Approx" proved
sqrt.adb:4:16: info: division check proved (CVC5: 1 VC)
sqrt.adb:4:16: info: float overflow check proved (Trivial)
sqrt.adb:5:17: medium: float overflow check might fail [reason for check: result of floating-point subtraction must be bounded] [possible fix: subprogram at line 1 should mention X in a precondition]
sqrt.adb:5:26: medium: float overflow check might fail [reason for check: result of floating-point exponentiation must be bounded]
sqrt.adb:6:21: info: float overflow check proved (Trivial)
sqrt.adb:6:31: medium: float overflow check might fail [reason for check: result of floating-point addition must be bounded]
sqrt.adb:6:35: medium: divide by zero might fail
sqrt.adb:6:35: medium: float overflow check might fail [reason for check: result of floating-point division must be bounded]
stacks-more.adb:4:32: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: add precondition (Stack.Top in 1 .. Max_Size) to subprogram at stacks-more.ads:2]
stacks.adb:14:30: medium: overflow check might fail, cannot prove upper bound for Stack.Top + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: subprogram at stacks.ads:8 should mention Stack in a precondition]
stacks.adb:15:25: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: subprogram at stacks.ads:8 should mention Stack in a precondition]
stacks.adb:21:33: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: subprogram at stacks.ads:10 should mention Stack in a precondition]
stacks.adb:22:30: info: range check proved (CVC5: 2 VC)
stacks.ads:6:21: medium: "Stack.Items" is not set in "Clear" [reason for check: OUT parameter should be fully initialized on return] [possible fix: initialize "Stack.Items" on all paths, make "Stack" an IN OUT parameter or annotate it with aspect Relaxed_Initialization]
stacks.ads:10:19: info: initialization of "Item" proved
stacks.ads:14:04: medium: type "Stack_Type" is not fully initialized
stacks.ads:17:10: info: range check proved (CVC5: 2 VC)
string_examples.adb:3:03: info: initialization of "Count" proved
string_examples.adb:8:01: info: initialization of "Name" proved
string_examples.adb:9:01: info: initialization of "Address" proved
string_examples.adb:13:09: warning: unused assignment
string_examples.adb:15:06: warning: unused assignment
string_examples.adb:15:09: medium: length check might fail [reason for check: array must be of the appropriate length]
string_examples.adb:16:09: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
string_examples.adb:17:12: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
string_examples.adb:19:06: warning: unused assignment
string_examples.adb:20:09: info: range check proved (CVC5: 4 VC)
string_examples.adb:21:09: warning: unused assignment
string_examples.adb:21:17: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
string_examples.adb:21:17: info: range check proved (CVC5: 2 VC)
string_examples.adb:22:19: warning: unused assignment
string_examples.adb:25:01: info: range check proved (CVC5: 4 VC)
string_examples.adb:25:07: info: index check proved (CVC5: 2 VC)
string_examples.adb:25:12: info: index check proved (CVC5: 2 VC)
string_examples.adb:25:19: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
string_examples.adb:25:22: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
string_examples.adb:26:06: info: range check proved (CVC5: 4 VC)
strings.adb:11:07: info: initialization of "Current" proved
strings.adb:19:37: warning: loop condition is stable
strings.adb:20:21: info: index check proved (CVC5: 2 VC)
strings.adb:33:07: info: initialization of "Equals_Found" proved
strings.adb:34:07: info: initialization of "Equals_Position" proved
strings.adb:39:34: info: range check proved (CVC5: 2 VC)
strings.adb:44:23: medium: range check might fail [reason for check: slice bounds must fit in the underlying array] [possible fix: call at line 37 should mention Position (for argument Equals_Position) in a postcondition]
strings.adb:45:32: medium: precondition might fail [possible fix: call at line 37 should mention Position (for argument Equals_Position) in a postcondition]
strings.adb:45:40: medium: range check might fail [reason for check: slice bounds must fit in the underlying array] [possible fix: call at line 37 should mention Position (for argument Equals_Position) in a postcondition]
strings.adb:45:62: medium: overflow check might fail, cannot prove upper bound for Equals_Position + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: call at line 37 should mention Position (for argument Equals_Position) in a postcondition]
strings.ads:8:22: info: initialization of "Found" proved
strings.ads:9:22: info: initialization of "Position" proved
strings.ads:11:10: info: data dependencies proved
strings.ads:12:10: info: flow dependencies proved
strings.ads:19:09: info: data dependencies proved
strings.ads:20:09: info: flow dependencies proved
students.adb:6:07: info: initialization of "Tuition" proved
students.adb:7:07: info: initialization of "Fees" proved
students.adb:15:29: info: overflow check proved (CVC5: 2 VC)
students.adb:15:29: info: range check proved (CVC5: 2 VC)
students.adb:15:38: info: division check proved (CVC5: 1 VC)
students.adb:15:38: info: overflow check proved (CVC5: 2 VC)
students.adb:32:23: info: overflow check proved (CVC5: 2 VC)
students.adb:32:23: info: range check proved (CVC5: 2 VC)
students.adb:35:45: info: overflow check proved (CVC5: 2 VC)
students.adb:35:45: info: range check proved (CVC5: 2 VC)
students.adb:36:45: info: overflow check proved (CVC5: 2 VC)
students.adb:36:45: info: range check proved (CVC5: 2 VC)
students.adb:37:45: info: overflow check proved (CVC5: 2 VC)
students.adb:37:45: info: range check proved (CVC5: 2 VC)
students.adb:43:45: info: overflow check proved (CVC5: 2 VC)
students.adb:43:45: info: range check proved (CVC5: 2 VC)
students.adb:44:45: info: overflow check proved (CVC5: 2 VC)
students.adb:44:45: info: range check proved (CVC5: 2 VC)
students.adb:45:45: info: overflow check proved (CVC5: 2 VC)
students.adb:45:45: info: range check proved (CVC5: 2 VC)
students.adb:51:27: info: overflow check proved (CVC5: 2 VC)
students.adb:51:27: info: range check proved (CVC5: 2 VC)
students.adb:55:30: info: overflow check proved (CVC5: 2 VC)
students.adb:55:30: info: range check proved (CVC5: 2 VC)
students.adb:59:24: info: overflow check proved (CVC5: 2 VC)
students.adb:59:32: medium: overflow check might fail, cannot prove upper bound for (Tuition + Fees) - Grants [reason for check: result of fixed-point subtraction must fit in the underlying 32-bits machine integer]
students.adb:59:42: medium: overflow check might fail, cannot prove lower bound for ((Tuition + Fees) - Grants) + Insurance [reason for check: result of fixed-point addition must fit in the underlying 32-bits machine integer]
students.adb:59:42: medium: range check might fail, cannot prove lower bound for ((Tuition + Fees) - Grants) + Insurance [reason for check: returned value must fit in the result type of the function]
students2.adb:23:07: info: initialization of "Tuition" proved
students2.adb:24:07: info: initialization of "Fees" proved
students2.adb:32:29: info: overflow check proved (CVC5: 2 VC)
students2.adb:32:29: info: range check proved (CVC5: 2 VC)
students2.adb:32:38: info: division check proved (CVC5: 1 VC)
students2.adb:32:38: info: overflow check proved (CVC5: 2 VC)
students2.adb:49:23: info: overflow check proved (CVC5: 2 VC)
students2.adb:49:23: info: range check proved (CVC5: 2 VC)
students2.adb:52:44: info: overflow check proved (CVC5: 2 VC)
students2.adb:52:44: info: range check proved (CVC5: 2 VC)
students2.adb:53:44: info: overflow check proved (CVC5: 2 VC)
students2.adb:53:44: info: range check proved (CVC5: 2 VC)
students2.adb:54:44: info: overflow check proved (CVC5: 2 VC)
students2.adb:54:44: info: range check proved (CVC5: 2 VC)
students2.adb:60:44: info: overflow check proved (CVC5: 2 VC)
students2.adb:60:44: info: range check proved (CVC5: 2 VC)
students2.adb:61:44: info: overflow check proved (CVC5: 2 VC)
students2.adb:61:44: info: range check proved (CVC5: 2 VC)
students2.adb:62:44: info: overflow check proved (CVC5: 2 VC)
students2.adb:62:44: info: range check proved (CVC5: 2 VC)
students2.adb:68:27: info: overflow check proved (CVC5: 2 VC)
students2.adb:68:27: info: range check proved (CVC5: 2 VC)
students2.adb:72:30: info: overflow check proved (CVC5: 2 VC)
students2.adb:72:30: info: range check proved (CVC5: 2 VC)
students2.adb:76:21: info: assertion proved (CVC5: 2 VC)
students2.adb:77:21: info: assertion proved (CVC5: 2 VC)
students2.adb:78:21: info: assertion proved (CVC5: 2 VC)
students2.adb:79:21: info: assertion proved (CVC5: 2 VC)
students2.adb:81:24: info: overflow check proved (CVC5: 2 VC)
students2.adb:81:32: info: overflow check proved (CVC5: 2 VC)
students2.adb:81:42: info: overflow check proved (CVC5: 2 VC)
students2.adb:81:42: info: range check proved (CVC5: 2 VC)
students3.adb:6:07: info: initialization of "Tuition" proved
students3.adb:7:07: info: initialization of "Fees" proved
students3.adb:15:29: info: overflow check proved (CVC5: 2 VC)
students3.adb:15:29: info: range check proved (CVC5: 2 VC)
students3.adb:15:39: info: division check proved (CVC5: 1 VC)
students3.adb:15:39: info: overflow check proved (CVC5: 2 VC)
students3.adb:18:30: info: assertion proved (CVC5: 2 VC)
students3.adb:25:30: info: assertion proved (CVC5: 4 VC)
students3.adb:37:23: info: overflow check proved (CVC5: 2 VC)
students3.adb:37:23: info: range check proved (CVC5: 2 VC)
students3.adb:40:44: info: overflow check proved (CVC5: 2 VC)
students3.adb:40:44: info: range check proved (CVC5: 2 VC)
students3.adb:41:44: info: overflow check proved (CVC5: 2 VC)
students3.adb:41:44: info: range check proved (CVC5: 2 VC)
students3.adb:42:44: info: overflow check proved (CVC5: 2 VC)
students3.adb:42:44: info: range check proved (CVC5: 2 VC)
students3.adb:48:44: info: overflow check proved (CVC5: 2 VC)
students3.adb:48:44: info: range check proved (CVC5: 2 VC)
students3.adb:49:44: info: overflow check proved (CVC5: 2 VC)
students3.adb:49:44: info: range check proved (CVC5: 2 VC)
students3.adb:50:44: info: overflow check proved (CVC5: 2 VC)
students3.adb:50:44: info: range check proved (CVC5: 2 VC)
students3.adb:54:30: info: assertion proved (CVC5: 6 VC)
students3.adb:60:27: info: overflow check proved (CVC5: 2 VC)
students3.adb:60:27: info: range check proved (CVC5: 2 VC)
students3.adb:64:30: info: overflow check proved (CVC5: 2 VC)
students3.adb:64:30: info: range check proved (CVC5: 2 VC)
students3.adb:68:30: info: assertion proved (CVC5: 8 VC)
students3.adb:73:24: info: overflow check proved (CVC5: 2 VC)
students3.adb:73:32: info: overflow check proved (CVC5: 2 VC)
students3.adb:73:42: info: overflow check proved (CVC5: 2 VC)
students3.adb:73:42: info: range check proved (CVC5: 2 VC)
temperature_buffer14.adb:34:25: info: range check proved (CVC5: 2 VC)
temperature_buffer14.adb:53:22: info: range check proved (CVC5: 2 VC)
temperature_buffer14.adb:59:38: info: initialization of "Buffer" constituent of "Contents" proved
temperature_buffer14.adb:59:46: info: initialization of "Count" constituent of "Contents" proved
temperature_buffer14.adb:59:53: info: initialization of "Next_In" constituent of "Contents" proved
temperature_buffer14.adb:59:62: info: initialization of "Next_Out" constituent of "Contents" proved
temperature_buffer14.ads:16:08: info: data dependencies proved
temperature_buffer14.ads:17:08: info: flow dependencies proved
temperature_buffer14.ads:22:08: info: data dependencies proved
temperature_buffer14.ads:23:08: info: flow dependencies proved
temperature_buffer14.ads:27:11: info: data dependencies proved
temperature_buffer14.ads:30:19: info: initialization of "Item" proved
temperature_buffer14.ads:32:08: info: data dependencies proved
temperature_buffer14.ads:33:08: info: flow dependencies proved
terminal.adb:10:07: info: initialization of "Value" proved
terminal.adb:11:07: info: initialization of "Port_Status" proved
terminal.adb:13:14: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
terminal.adb:17:33: info: loop invariant initialization proved (CVC5: 1 VC)
terminal.adb:17:33: info: loop invariant preservation proved (CVC5: 1 VC)
terminal.adb:17:48: info: range check proved (CVC5: 4 VC)
terminal.adb:20:27: info: range check proved (CVC5: 2 VC)
terminal.adb:37:31: info: index check proved (CVC5: 2 VC)
terminal.adb:37:31: info: overflow check proved (CVC5: 2 VC)
terminal.adb:38:25: info: overflow check proved (CVC5: 2 VC)
terminal.ads:7:24: info: initialization of "Buffer" proved
terminal.ads:8:24: info: initialization of "Count" proved
terminal.ads:9:24: info: initialization of "Status" proved
terminal.ads:11:10: info: data dependencies proved
terminal.ads:13:10: info: flow dependencies proved
ticktock.adb:14:34: medium: overflow check might fail, cannot prove upper bound for Clock_Value + 1 [reason for check: result of addition must fit in a 64-bits machine integer] [possible fix: subprogram at ticktock.ads:7 should mention Clock_Value in a precondition]
ticktock.ads:5:05: info: flow dependencies proved
ticktock.ads:9:08: info: data dependencies proved
ticktock.ads:10:08: info: flow dependencies proved
transitive.adb:17:19: info: postcondition proved (CVC5: 1 VC)
transitive.adb:21:37: info: division check proved (CVC5: 1 VC)
transitive.adb:22:14: info: division check proved (CVC5: 1 VC)
transitive.adb:26:07: info: initialization of "X_Last" proved
transitive.adb:32:33: info: loop invariant initialization proved (CVC5: 1 VC)
transitive.adb:32:33: info: loop invariant preservation proved (CVC5: 1 VC)
transitive.ads:11:19: info: postcondition proved (CVC5: 1 VC)
unused_parameter.adb:7:15: medium: overflow check might fail, cannot prove upper bound for A + A [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: add precondition (A <= Integer'Last - A) to subprogram at unused_parameter.ads:3]
unused_parameter.adb:7:20: info: division check proved (CVC5: 1 VC)
unused_parameter.ads:4:19: warning: unused variable "B"
unused_parameter.ads:5:19: info: initialization of "C" proved
utility.adb:13:13: info: loop invariant initialization proved (CVC5: 1 VC)
utility.adb:13:13: info: loop invariant preservation proved (CVC5: 1 VC)
utility.adb:13:67: info: index check proved (CVC5: 4 VC)
utility.adb:15:07: info: raise statement or expression proved unreachable (CVC5: 1 VC)
utility.ads:12:16: info: postcondition proved (CVC5: 1 VC)
various.adb:7:27: info: unrolling loop
various.adb:12:07: info: raise statement or expression proved unreachable (CVC5: 1 VC)
various.adb:20:21: info: assertion proved (CVC5: 2 VC)
various.adb:20:23: medium: overflow check might fail, cannot prove upper bound for X+Y [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
various.adb:20:26: info: division check proved (CVC5: 1 VC)
various.adb:21:13: info: division check proved (CVC5: 1 VC)
very_longs-divide.adb:15:12: info: range check proved (CVC5: 2 VC)
very_longs-divide.adb:19:12: info: range check proved (CVC5: 2 VC)
very_longs-divide.adb:26:04: info: initialization of "N" proved
very_longs-divide.adb:27:04: info: initialization of "M" proved
very_longs-divide.adb:28:04: info: initialization of "Shift_Distance" proved
very_longs-divide.adb:29:04: info: initialization of "U" proved
very_longs-divide.adb:29:48: medium: range check might fail, cannot prove upper bound for Dividend.Length + 1 [possible fix: add precondition (Dividend.Length <= Digit_Index_Type'Last - 1) to subprogram at very_longs.ads:65]
very_longs-divide.adb:30:04: info: initialization of "V" proved
very_longs-divide.adb:30:39: info: range check proved (CVC5: 2 VC)
very_longs-divide.adb:31:04: info: initialization of "Q_Hat" proved
very_longs-divide.adb:32:04: info: initialization of "Current_Borrow" proved
very_longs-divide.adb:42:27: info: unrolling loop
very_longs-divide.adb:52:30: info: initialization of "Result" proved
very_longs-divide.adb:54:08: info: flow dependencies proved
very_longs-divide.adb:58:07: info: initialization of "New_Overflow" proved
very_longs-divide.adb:59:07: info: initialization of "Overflow_Mask" proved
very_longs-divide.adb:61:26: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs-divide.adb:61:29: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs-divide.adb:63:41: info: cannot unroll loop (too many loop iterations)
very_longs-divide.adb:64:57: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:65:29: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:65:65: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:66:29: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:66:54: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:69:44: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:75:11: info: flow dependencies proved
very_longs-divide.adb:78:07: info: initialization of "New_Overflow" proved
very_longs-divide.adb:79:07: info: initialization of "Overflow_Mask" proved
very_longs-divide.adb:82:41: info: cannot unroll loop (too many loop iterations)
very_longs-divide.adb:83:57: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:84:29: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:84:65: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:85:29: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:85:54: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:93:11: info: flow dependencies proved
very_longs-divide.adb:96:07: info: initialization of "New_Overflow" proved
very_longs-divide.adb:97:07: info: initialization of "Overflow_Mask" proved
very_longs-divide.adb:100:49: info: cannot unroll loop (too many loop iterations)
very_longs-divide.adb:101:45: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:102:29: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:102:66: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:103:29: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:104:31: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:111:08: info: data dependencies proved
very_longs-divide.adb:111:49: info: initialization of "Q_Hat" proved
very_longs-divide.adb:112:08: info: flow dependencies proved
very_longs-divide.adb:113:28: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:115:07: info: initialization of "Temporary_Digit" proved
very_longs-divide.adb:116:07: info: initialization of "R_Hat" proved
very_longs-divide.adb:119:44: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:119:44: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:119:81: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:119:85: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:120:32: medium: divide by zero might fail [possible fix: precondition of subprogram at line 109 should mention V]
very_longs-divide.adb:120:61: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:123:32: medium: divide by zero might fail [possible fix: precondition of subprogram at line 109 should mention V]
very_longs-divide.adb:123:63: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:127:47: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:128:56: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:128:61: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:131:54: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:136:50: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:137:59: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:137:64: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:147:08: info: data dependencies proved
very_longs-divide.adb:147:53: info: initialization of "Current_Borrow" proved
very_longs-divide.adb:148:08: info: flow dependencies proved
very_longs-divide.adb:150:07: info: initialization of "Carry" proved
very_longs-divide.adb:151:07: info: initialization of "Product" proved
very_longs-divide.adb:152:07: info: initialization of "Temporary_Digit" proved
very_longs-divide.adb:153:07: info: initialization of "Future_Borrow" proved
very_longs-divide.adb:157:11: info: range check proved (CVC5: 2 VC)
very_longs-divide.adb:157:58: info: cannot unroll loop (dynamic loop bounds)
very_longs-divide.adb:158:56: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:162:43: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:162:59: medium: array index check might fail [reason for check: result of subtraction must be a valid index into the array] [possible fix: subprogram at line 145 should mention J in a precondition]
very_longs-divide.adb:169:26: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:169:42: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:170:49: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:170:65: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:170:108: info: range check proved (CVC5: 2 VC)
very_longs-divide.adb:175:39: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:175:39: medium: array index check might fail [reason for check: result of addition must be a valid index into the array] [possible fix: subprogram at line 145 should mention J and N in a precondition]
very_longs-divide.adb:180:23: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:180:23: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:181:46: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:181:46: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:181:79: info: range check proved (CVC5: 2 VC)
very_longs-divide.adb:187:08: info: data dependencies proved
very_longs-divide.adb:188:08: info: flow dependencies proved
very_longs-divide.adb:191:07: info: initialization of "Carry" proved
very_longs-divide.adb:192:07: info: initialization of "Sum" proved
very_longs-divide.adb:194:28: medium: array index check might fail [reason for check: value must be a valid index into the array] [possible fix: add precondition (J in 1 .. Length) to subprogram at line 185]
very_longs-divide.adb:194:40: medium: range check might fail [reason for check: value must be convertible to the target type of the conversion] [possible fix: subprogram at line 185 should mention Q_Hat in a precondition]
very_longs-divide.adb:198:31: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:198:58: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:200:14: info: range check proved (CVC5: 2 VC)
very_longs-divide.adb:200:61: info: cannot unroll loop (dynamic loop bounds)
very_longs-divide.adb:201:49: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:201:65: medium: array index check might fail [reason for check: result of subtraction must be a valid index into the array] [possible fix: subprogram at line 185 should mention J in a precondition]
very_longs-divide.adb:202:47: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:203:29: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:203:45: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:206:26: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:206:26: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:206:50: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:206:50: medium: array index check might fail [reason for check: result of addition must be a valid index into the array] [possible fix: subprogram at line 185 should mention J and N in a precondition]
very_longs-divide.adb:211:26: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs-divide.adb:211:29: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs-divide.adb:212:26: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs-divide.adb:212:29: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs-divide.adb:215:09: info: range check proved (CVC5: 2 VC)
very_longs-divide.adb:216:25: medium: range check might fail, cannot prove upper bound for Dividend.Length - N [reason for check: result of subtraction must fit in the target type of the assignment]
very_longs-divide.adb:219:22: info: precondition proved (CVC5: 1 VC)
very_longs-divide.adb:219:61: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:220:04: info: precondition proved (CVC5: 1 VC)
very_longs-divide.adb:221:09: info: discriminant check proved (CVC5: 1 VC)
very_longs-divide.adb:225:08: info: range check proved (CVC5: 2 VC)
very_longs-divide.adb:225:51: info: overflow check proved (CVC5: 2 VC)
very_longs-divide.adb:225:55: info: cannot unroll loop (too many loop iterations)
very_longs-divide.adb:227:07: info: precondition proved (CVC5: 2 VC)
very_longs-divide.adb:227:10: info: range check proved (CVC5: 2 VC)
very_longs-divide.adb:230:10: info: range check proved (CVC5: 2 VC)
very_longs-divide.adb:233:10: info: range check proved (CVC5: 2 VC)
very_longs-divide.adb:239:08: info: range check proved (CVC5: 2 VC)
very_longs-divide.adb:239:55: info: cannot unroll loop (dynamic loop bounds)
very_longs-divide.adb:240:29: info: index check proved (CVC5: 2 VC)
very_longs-divide.adb:240:61: info: index check proved (CVC5: 2 VC)
very_longs.adb:36:54: info: initialization of "Digit" proved
very_longs.adb:36:73: info: initialization of "Valid" proved
very_longs.adb:37:11: info: flow dependencies proved
very_longs.adb:53:28: info: initialization of "Result" proved
very_longs.adb:53:52: info: initialization of "Carry" proved
very_longs.adb:55:08: info: flow dependencies proved
very_longs.adb:58:07: info: initialization of "L_Digit" proved
very_longs.adb:59:07: info: initialization of "R_Digit" proved
very_longs.adb:60:07: info: initialization of "Sum" proved
very_longs.adb:62:26: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:62:29: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:64:36: info: cannot unroll loop (too many loop iterations)
very_longs.adb:65:48: info: index check proved (CVC5: 2 VC)
very_longs.adb:66:48: info: index check proved (CVC5: 2 VC)
very_longs.adb:69:29: info: index check proved (CVC5: 2 VC)
very_longs.adb:76:28: info: initialization of "Result" proved
very_longs.adb:76:52: info: initialization of "Borrow" proved
very_longs.adb:78:08: info: flow dependencies proved
very_longs.adb:81:07: info: initialization of "L_Digit" proved
very_longs.adb:82:07: info: initialization of "R_Digit" proved
very_longs.adb:83:07: info: initialization of "Difference" proved
very_longs.adb:85:26: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:85:29: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:87:36: info: cannot unroll loop (too many loop iterations)
very_longs.adb:88:51: info: index check proved (CVC5: 2 VC)
very_longs.adb:89:51: info: index check proved (CVC5: 2 VC)
very_longs.adb:96:29: info: index check proved (CVC5: 2 VC)
very_longs.adb:112:07: info: initialization of "Result" proved
very_longs.adb:112:26: info: range check proved (CVC5: 2 VC)
very_longs.adb:113:07: info: initialization of "Temp" proved
very_longs.adb:115:21: info: assertion proved (CVC5: 1 VC)
very_longs.adb:116:26: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:116:29: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:118:45: info: cannot unroll loop (too many loop iterations)
very_longs.adb:119:29: info: index check proved (CVC5: 2 VC)
very_longs.adb:119:50: info: division check proved (CVC5: 1 VC)
very_longs.adb:119:50: info: range check proved (CVC5: 1 VC)
very_longs.adb:120:23: info: division check proved (CVC5: 1 VC)
very_longs.adb:129:07: info: initialization of "Index" proved
very_longs.adb:130:07: info: initialization of "String_Index" proved
very_longs.adb:131:07: info: initialization of "H_Digit" proved
very_longs.adb:132:07: info: initialization of "L_Digit" proved
very_longs.adb:133:07: info: initialization of "H_Okay" proved
very_longs.adb:134:07: info: initialization of "L_Okay" proved
very_longs.adb:136:26: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:136:29: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:139:34: info: range check proved (CVC5: 2 VC)
very_longs.adb:140:29: info: range check proved (CVC5: 2 VC)
very_longs.adb:144:13: info: loop invariant initialization proved (CVC5: 1 VC)
very_longs.adb:144:13: info: loop invariant preservation proved (CVC5: 1 VC)
very_longs.adb:144:26: info: overflow check proved (CVC5: 4 VC)
very_longs.adb:144:41: info: overflow check proved (CVC5: 4 VC)
very_longs.adb:144:45: info: division check proved (CVC5: 2 VC)
very_longs.adb:145:32: info: loop invariant initialization proved (CVC5: 2 VC)
very_longs.adb:145:32: info: loop invariant preservation proved (CVC5: 2 VC)
very_longs.adb:146:32: info: loop invariant initialization proved (CVC5: 2 VC)
very_longs.adb:146:32: info: loop invariant preservation proved (CVC5: 2 VC)
very_longs.adb:148:31: info: index check proved (CVC5: 2 VC)
very_longs.adb:149:44: info: index check proved (CVC5: 2 VC)
very_longs.adb:149:44: info: overflow check proved (CVC5: 2 VC)
very_longs.adb:154:24: info: assertion proved (CVC5: 2 VC)
very_longs.adb:155:29: info: index check proved (CVC5: 2 VC)
very_longs.adb:157:25: info: range check proved (CVC5: 2 VC)
very_longs.adb:158:39: info: overflow check proved (CVC5: 2 VC)
very_longs.adb:170:44: info: cannot unroll loop (too many loop iterations)
very_longs.adb:171:27: info: index check proved (CVC5: 2 VC)
very_longs.adb:171:46: info: index check proved (CVC5: 2 VC)
very_longs.adb:175:27: info: index check proved (CVC5: 2 VC)
very_longs.adb:175:46: info: index check proved (CVC5: 2 VC)
very_longs.adb:187:17: info: precondition proved (CVC5: 1 VC)
very_longs.adb:193:21: info: precondition proved (CVC5: 1 VC)
very_longs.adb:199:21: info: precondition proved (CVC5: 1 VC)
very_longs.adb:206:07: info: refined post proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:208:46: info: index check proved (CVC5: 2 VC)
very_longs.adb:210:33: info: index check proved (CVC5: 2 VC)
very_longs.adb:216:33: info: index check proved (CVC5: 4 VC)
very_longs.adb:217:28: info: range check proved (CVC5: 4 VC)
very_longs.adb:221:13: info: loop invariant initialization proved (CVC5: 4 VC; Trivial: 2 VC)
very_longs.adb:222:37: info: index check proved (CVC5: 4 VC)
very_longs.adb:226:19: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Number.Long_Digits (J) = 0 [possible fix: subprogram at very_longs.ads:40 should mention Number in a precondition]
very_longs.adb:226:39: info: index check proved (CVC5: 4 VC)
very_longs.adb:238:07: info: initialization of "Result" proved
very_longs.adb:238:28: info: range check proved (CVC5: 2 VC)
very_longs.adb:239:07: info: initialization of "L_Digit" proved
very_longs.adb:240:07: info: initialization of "R_Digit" proved
very_longs.adb:241:07: info: initialization of "Sum" proved
very_longs.adb:242:07: info: initialization of "Carry" proved
very_longs.adb:244:26: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:244:29: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:246:36: info: cannot unroll loop (too many loop iterations)
very_longs.adb:247:48: info: index check proved (CVC5: 2 VC)
very_longs.adb:248:48: info: index check proved (CVC5: 2 VC)
very_longs.adb:251:29: info: index check proved (CVC5: 2 VC)
very_longs.adb:258:07: info: initialization of "Result" proved
very_longs.adb:258:31: info: range check proved (CVC5: 2 VC)
very_longs.adb:259:07: info: initialization of "L_Digit" proved
very_longs.adb:260:07: info: initialization of "R_Digit" proved
very_longs.adb:261:07: info: initialization of "Difference" proved
very_longs.adb:262:07: info: initialization of "Borrow" proved
very_longs.adb:264:26: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:264:29: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:266:36: info: cannot unroll loop (too many loop iterations)
very_longs.adb:267:51: info: index check proved (CVC5: 2 VC)
very_longs.adb:268:51: info: index check proved (CVC5: 2 VC)
very_longs.adb:275:29: info: index check proved (CVC5: 2 VC)
very_longs.adb:286:07: info: initialization of "Result" proved
very_longs.adb:286:27: info: range check proved (CVC5: 2 VC)
very_longs.adb:287:07: info: initialization of "L_Digit" proved
very_longs.adb:288:07: info: initialization of "R_Digit" proved
very_longs.adb:289:07: info: initialization of "T_Digit" proved
very_longs.adb:290:07: info: initialization of "Temp" proved
very_longs.adb:291:07: info: initialization of "Carry" proved
very_longs.adb:294:26: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:294:29: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:297:36: info: cannot unroll loop (too many loop iterations)
very_longs.adb:299:39: info: cannot unroll loop (too many loop iterations)
very_longs.adb:300:51: info: index check proved (CVC5: 2 VC)
very_longs.adb:301:51: info: index check proved (CVC5: 2 VC)
very_longs.adb:302:18: info: overflow check proved (CVC5: 2 VC)
very_longs.adb:303:61: info: overflow check proved (CVC5: 2 VC)
very_longs.adb:303:65: info: index check proved (CVC5: 2 VC)
very_longs.adb:305:37: info: overflow check proved (CVC5: 2 VC)
very_longs.adb:305:41: info: index check proved (CVC5: 2 VC)
very_longs.adb:315:07: info: initialization of "Result" proved
very_longs.adb:315:36: medium: range check might fail, cannot prove upper bound for L.Length + R.Length [possible fix: add precondition (L.Length <= Digit_Index_Type'Last - R.Length) to subprogram at very_longs.ads:61]
very_longs.adb:316:07: info: initialization of "L_Digit" proved
very_longs.adb:317:07: info: initialization of "R_Digit" proved
very_longs.adb:318:07: info: initialization of "T_Digit" proved
very_longs.adb:319:07: info: initialization of "Temp" proved
very_longs.adb:320:07: info: initialization of "Carry" proved
very_longs.adb:323:26: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:323:29: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
very_longs.adb:326:36: info: cannot unroll loop (too many loop iterations)
very_longs.adb:328:39: info: cannot unroll loop (too many loop iterations)
very_longs.adb:329:52: info: index check proved (CVC5: 2 VC)
very_longs.adb:330:52: info: index check proved (CVC5: 2 VC)
very_longs.adb:331:59: info: overflow check proved (CVC5: 2 VC)
very_longs.adb:331:63: info: index check proved (CVC5: 2 VC)
very_longs.adb:333:34: info: overflow check proved (CVC5: 2 VC)
very_longs.adb:333:38: info: index check proved (CVC5: 2 VC)
very_longs.adb:336:38: info: index check proved (CVC5: 2 VC)
very_longs.adb:336:38: info: overflow check proved (CVC5: 2 VC)
very_longs.ads:14:20: info: postcondition proved (CVC5: 1 VC)
very_longs.ads:17:36: info: initialization of "Result" proved
very_longs.ads:18:36: info: initialization of "Valid" proved
very_longs.ads:20:10: info: flow dependencies proved
very_longs.ads:21:23: info: range check proved (CVC5: 2 VC)
very_longs.ads:46:18: info: postcondition proved (CVC5: 1 VC)
very_longs.ads:52:18: info: postcondition proved (CVC5: 1 VC)
very_longs.ads:58:18: info: postcondition proved (CVC5: 1 VC)
very_longs.ads:62:19: info: postcondition proved (CVC5: 1 VC)
very_longs.ads:67:22: info: initialization of "Quotient" proved
very_longs.ads:68:22: info: initialization of "Remainder" proved
very_longs.ads:70:10: info: flow dependencies proved
very_longs.ads:86:10: info: range check proved (CVC5: 2 VC)
very_longs.ads:90:68: info: index check proved (CVC5: 2 VC)
workspaces.adb:5:07: info: range check proved (CVC5: 2 VC)
workspaces.adb:5:48: info: length check proved (CVC5: 3 VC; Trivial: 1 VC)
workspaces.adb:7:26: info: division check proved (CVC5: 1 VC)
workspaces.adb:7:30: info: cannot unroll loop (too many loop iterations)
workspaces.adb:8:21: info: index check proved (CVC5: 2 VC)
workspaces.adb:9:27: medium: overflow check might fail, cannot prove upper bound for Size + 1 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: add precondition (Size <= Integer'Last - 1) to subprogram at workspaces.ads:4]
workspaces.adb:9:32: info: index check proved (CVC5: 2 VC)
