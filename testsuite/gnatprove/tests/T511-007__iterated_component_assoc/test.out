test_aggr.adb:9:14: info: postcondition proved (CVC4: 1 VC)
test_aggr.adb:9:40: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
test_aggr.adb:9:46: info: index check proved (CVC4: 2 VC)
test_aggr.adb:9:49: info: overflow check proved (CVC4: 2 VC)
test_aggr.adb:12:09: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
test_aggr.adb:12:24: info: range check proved (CVC4: 2 VC)
test_aggr.adb:12:36: info: index check proved (CVC4: 2 VC)
test_aggr.adb:12:39: info: overflow check proved (CVC4: 2 VC)
test_aggr.adb:17:14: info: postcondition proved (Z3: 1 VC)
test_aggr.adb:17:18: info: range check proved (CVC4: 2 VC)
test_aggr.adb:17:36: info: range check proved (CVC4: 2 VC)
test_aggr.adb:17:50: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
test_aggr.adb:17:56: info: index check proved (CVC4: 2 VC)
test_aggr.adb:17:59: info: overflow check proved (CVC4: 2 VC)
test_aggr.adb:21:13: info: index check proved (CVC4: 4 VC)
test_aggr.adb:21:21: info: overflow check proved (CVC4: 4 VC)
test_aggr.adb:22:33: info: loop invariant initialization proved (CVC4: 1 VC)
test_aggr.adb:22:33: info: loop invariant preservation proved (Z3: 1 VC)
test_aggr.adb:22:33: info: range check proved (CVC4: 8 VC)
test_aggr.adb:22:52: info: range check proved (CVC4: 4 VC)
test_aggr.adb:22:70: info: range check proved (CVC4: 4 VC)
test_aggr.adb:22:92: info: index check proved (CVC4: 4 VC)
test_aggr.adb:22:95: info: overflow check proved (CVC4: 4 VC)
test_aggr.adb:28:14: info: postcondition proved (CVC4: 1 VC)
test_aggr.adb:28:43: info: index check proved (CVC4: 2 VC)
test_aggr.adb:28:55: info: index check proved (CVC4: 2 VC)
test_aggr.adb:35:62: info: index check proved (CVC4: 2 VC)
test_aggr.adb:44:14: info: postcondition proved (CVC4: 1 VC)
test_aggr.adb:44:14: info: range check proved (CVC4: 4 VC)
test_aggr.adb:44:33: info: range check proved (CVC4: 2 VC)
test_aggr.adb:44:46: info: range check proved (CVC4: 2 VC)
test_aggr.adb:44:60: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
test_aggr.adb:44:66: info: index check proved (CVC4: 2 VC)
test_aggr.adb:47:74: info: overflow check proved (CVC4: 2 VC)
test_aggr.adb:51:41: medium: overflow check might fail, cannot prove upper bound for I + Rand (I) [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: you should consider adding a postcondition to function Rand or turning it into an expression function in its unit spec]
test_aggr.adb:52:18: medium: range check might fail
test_aggr.adb:52:30: info: range check proved (CVC4: 2 VC)
test_aggr.adb:52:42: medium: overflow check might fail, cannot prove upper bound for Rand (0) + 15 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: you should consider adding a postcondition to function Rand or turning it into an expression function in its unit spec]
test_aggr.adb:53:33: medium: range check might fail
test_aggr.adb:53:36: info: range check proved (CVC4: 2 VC)
test_aggr.adb:53:49: medium: overflow check might fail, cannot prove upper bound for Rand (-2) + 12 [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: you should consider adding a postcondition to function Rand or turning it into an expression function in its unit spec]
test_aggr.adb:55:04: info: precondition proved (CVC4: 3 VC)
