contract_cases_legal.adb:5:17: info: overflow check proved (CVC4: 2 VC)
contract_cases_legal.adb:12:17: info: overflow check proved (CVC4: 2 VC)
contract_cases_legal.adb:19:17: info: overflow check proved (CVC4: 2 VC)
contract_cases_legal.adb:26:17: info: overflow check proved (CVC4: 2 VC)
contract_cases_legal.ads:15:19: high: postcondition might fail (e.g. when Threshold = -1 and X = 0 and X'Old = 0)
contract_cases_legal.ads:15:42: high: overflow check might fail, cannot prove upper bound for X'Old + 1 (e.g. when X = Integer'Last) [reason for check: result of addition must fit in a 32-bits machine integer] [possible fix: use pragma Overflow_Mode or switch -gnato13 or unit Ada.Numerics.Big_Numerics.Big_Integers]
contract_cases_legal.ads:18:11: info: complete contract cases proved (CVC4: 1 VC)
contract_cases_legal.ads:18:11: info: disjoint contract cases proved (CVC4: 1 VC)
contract_cases_legal.ads:18:45: info: contract case proved (CVC4: 1 VC; Trivial: 1 VC)
contract_cases_legal.ads:18:58: info: overflow check proved (CVC4: 2 VC)
contract_cases_legal.ads:19:45: info: contract case proved (CVC4: 1 VC; Trivial: 1 VC)
contract_cases_legal.ads:23:29: info: postcondition proved (CVC4: 1 VC)
contract_cases_legal.ads:24:11: info: complete contract cases proved (CVC4: 1 VC)
contract_cases_legal.ads:24:11: info: disjoint contract cases proved (CVC4: 1 VC)
contract_cases_legal.ads:24:45: info: contract case proved (CVC4: 1 VC; Trivial: 1 VC)
contract_cases_legal.ads:24:58: info: overflow check proved (CVC4: 2 VC)
contract_cases_legal.ads:25:45: info: contract case proved (CVC4: 1 VC; Trivial: 1 VC)
contract_cases_legal.ads:30:19: info: postcondition proved (CVC4: 2 VC; Trivial: 1 VC)
contract_cases_legal.ads:30:60: info: overflow check proved (CVC4: 2 VC)
