--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI.Port_Kinds;
with PolyORB_HI_Generated.Marshallers;
with PolyORB_HI_Generated.Transport;
with PolyORB_HI.Thread_Interrogators;
pragma Elaborate_All (PolyORB_HI.Thread_Interrogators);
with PolyORB_HI_Generated.Subprograms;

package body PolyORB_HI_Generated.Activity
  with Refined_State =>
  (Elaborated_Variables =>
     (Producer_Consumer_Producer_Interrogators.Elaborated_Variables,
      Producer_Consumer_Result_Consumer_Interrogators.Elaborated_Variables),
   UQ_S => (Producer_Consumer_Producer_Interrogators.UQ_S,
            Producer_Consumer_Result_Consumer_Interrogators.UQ_S))

is

  --  BEGIN: Data types used by all instances of component P.Impl

  type Software_P_Impl_Integer_Array is
   array (Software_P_Impl_Port_Type)
     of Standard.Integer;

  type Software_P_Impl_Port_Kind_Array is
   array (Software_P_Impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Pr_A_1_Max_Port_Image_Size is
   Integer range 1 .. PolyORB_HI_Generated.Deployment.Max_Port_Image_Size;

  subtype UT_Activity_Pr_A_Software_P_Impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Pr_A_1_Max_Port_Image_Size);

  type Software_P_Impl_Port_Image_Array is
   array (Software_P_Impl_Port_Type)
     of UT_Activity_Pr_A_Software_P_Impl_Port_Image_Array_Component;

  type Software_P_Impl_Address_Array is
   array (Software_P_Impl_Port_Type)
     of System.Address;

  type Software_P_Impl_Overflow_Protocol_Array is
   array (Software_P_Impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component P.Impl

  Producer_Consumer_Producer_Port_Kinds : constant Software_P_Impl_Port_Kind_Array :=
   (Data_Source =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  Producer_Consumer_Producer_Port_Images : constant Software_P_Impl_Port_Image_Array :=
   (Data_Source =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.pr_A_Producer_Data_Source_K));

  Producer_Consumer_Producer_FIFO_Sizes : constant Software_P_Impl_Integer_Array :=
   (Data_Source =>
     -1);

  Producer_Consumer_Producer_Offsets : constant Software_P_Impl_Integer_Array :=
   (Data_Source =>
     0);

  Producer_Consumer_Producer_Overflow_Protocols : constant Software_P_Impl_Overflow_Protocol_Array :=
   (Data_Source =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  Producer_Consumer_Producer_Urgencies : constant Software_P_Impl_Integer_Array :=
   (Data_Source =>
     0);

  Producer_Consumer_Producer_Total_FIFO_Size : constant Standard.Integer :=
   0;

  type UT_Activity_Pr_A_Producer_Data_Source_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  Producer_Data_Source_Destinations : constant UT_Activity_Pr_A_Producer_Data_Source_Destinations_Array :=
   UT_Activity_Pr_A_Producer_Data_Source_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.pr_B_Consumer_Data_Sink_K);

  Producer_Consumer_Producer_N_Destinations : constant Software_P_Impl_Integer_Array :=
   (Data_Source =>
     1);

  Producer_Destinations : constant Software_P_Impl_Address_Array :=
   (Data_Source =>
     Producer_Data_Source_Destinations'Address);

  package Producer_Consumer_Producer_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => Software_P_Impl_Port_Type,
      Integer_Array => Software_P_Impl_Integer_Array,
      Port_Kind_Array => Software_P_Impl_Port_Kind_Array,
      Port_Image_Array => Software_P_Impl_Port_Image_Array,
      Address_Array => Software_P_Impl_Address_Array,
      Overflow_Protocol_Array => Software_P_Impl_Overflow_Protocol_Array,
      Thread_Interface_Type => Software_P_Impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.pr_A_Producer_K,
      Thread_Port_Kinds => Producer_Consumer_Producer_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => Producer_Consumer_Producer_Port_Images,
      Thread_Fifo_Sizes => Producer_Consumer_Producer_FIFO_Sizes,
      Thread_Fifo_Offsets => Producer_Consumer_Producer_Offsets,
      Thread_Overflow_Protocols => Producer_Consumer_Producer_Overflow_Protocols,
      Urgencies => Producer_Consumer_Producer_Urgencies,
      Global_Data_Queue_Size => Producer_Consumer_Producer_Total_FIFO_Size,
      N_Destinations => Producer_Consumer_Producer_N_Destinations,
      Destinations => Producer_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => Producer_Consumer_Producer_Task.Next_Deadline);

  --  Periodic task : Producer


  --  BEGIN: Data types used by all instances of component Q.Impl

  type Software_Q_Impl_Integer_Array is
   array (Software_Q_Impl_Port_Type)
     of Standard.Integer;

  type Software_Q_Impl_Port_Kind_Array is
   array (Software_Q_Impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Pr_A_Software_Q_Impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Pr_A_1_Max_Port_Image_Size);

  type Software_Q_Impl_Port_Image_Array is
   array (Software_Q_Impl_Port_Type)
     of UT_Activity_Pr_A_Software_Q_Impl_Port_Image_Array_Component;

  type Software_Q_Impl_Address_Array is
   array (Software_Q_Impl_Port_Type)
     of System.Address;

  type Software_Q_Impl_Overflow_Protocol_Array is
   array (Software_Q_Impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component Q.Impl

  Producer_Consumer_Result_Consumer_Port_Kinds : constant Software_Q_Impl_Port_Kind_Array :=
   (Data_Sink =>
     PolyORB_HI.Port_Kinds.In_Data_Port);

  Producer_Consumer_Result_Consumer_Port_Images : constant Software_Q_Impl_Port_Image_Array :=
   (Data_Sink =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.pr_A_Result_Consumer_Data_Sink_K));

  Producer_Consumer_Result_Consumer_FIFO_Sizes : constant Software_Q_Impl_Integer_Array :=
   (Data_Sink =>
     1);

  Producer_Consumer_Result_Consumer_Offsets : constant Software_Q_Impl_Integer_Array :=
   (Data_Sink =>
     1);

  Producer_Consumer_Result_Consumer_Overflow_Protocols : constant Software_Q_Impl_Overflow_Protocol_Array :=
   (Data_Sink =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  Producer_Consumer_Result_Consumer_Urgencies : constant Software_Q_Impl_Integer_Array :=
   (Data_Sink =>
     0);

  Producer_Consumer_Result_Consumer_Total_FIFO_Size : constant Standard.Integer :=
   1;

  Producer_Consumer_Result_Consumer_N_Destinations : constant Software_Q_Impl_Integer_Array :=
   (Data_Sink =>
     0);

  Result_Consumer_Destinations : constant Software_Q_Impl_Address_Array :=
   (Data_Sink =>
     System.null_Address);

  package Producer_Consumer_Result_Consumer_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => Software_Q_Impl_Port_Type,
      Integer_Array => Software_Q_Impl_Integer_Array,
      Port_Kind_Array => Software_Q_Impl_Port_Kind_Array,
      Port_Image_Array => Software_Q_Impl_Port_Image_Array,
      Address_Array => Software_Q_Impl_Address_Array,
      Overflow_Protocol_Array => Software_Q_Impl_Overflow_Protocol_Array,
      Thread_Interface_Type => Software_Q_Impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.pr_A_Result_Consumer_K,
      Thread_Port_Kinds => Producer_Consumer_Result_Consumer_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => Producer_Consumer_Result_Consumer_Port_Images,
      Thread_Fifo_Sizes => Producer_Consumer_Result_Consumer_FIFO_Sizes,
      Thread_Fifo_Offsets => Producer_Consumer_Result_Consumer_Offsets,
      Thread_Overflow_Protocols => Producer_Consumer_Result_Consumer_Overflow_Protocols,
      Urgencies => Producer_Consumer_Result_Consumer_Urgencies,
      Global_Data_Queue_Size => Producer_Consumer_Result_Consumer_Total_FIFO_Size,
      N_Destinations => Producer_Consumer_Result_Consumer_N_Destinations,
      Destinations => Result_Consumer_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => Producer_Consumer_Result_Consumer_Task.Next_Deadline);

  --  Periodic task : Result_Consumer
  ------------------------------------
  -- Producer_Consumer_Producer_Job --
  ------------------------------------

  procedure Producer_Consumer_Producer_Job (Result : out PolyORB_HI.Errors.Error_Kind) is
    Data_Source_V : PolyORB_HI_Generated.Types.Alpha_Type;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.Software_Produce_Spg
     (Data_Source => Data_Source_V);
    --  Set the call sequence OUT port values
    Producer_Consumer_Producer_Interrogators.Put_Value
     (Software_P_Impl_Interface'
       (Port => Data_Source,
        Data_Source_DATA => Data_Source_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     Producer_Consumer_Producer_Interrogators.Send_Output
       (Data_Source);
    --  Return error code
    Result := Error_Ü;
  end Producer_Consumer_Producer_Job;

  -------------------------------------------
  -- Producer_Consumer_Result_Consumer_Job --
  -------------------------------------------

  procedure Producer_Consumer_Result_Consumer_Job (Result : out PolyORB_HI.Errors.Error_Kind) is
    Data_Sink_V : PolyORB_HI_Generated.Types.Alpha_Type;
    Error_Ü : constant PolyORB_HI.Errors.Error_Kind :=
     PolyORB_HI.Errors.Error_None;
    use type PolyORB_HI.Errors.Error_Kind;
    GC : Integer;
    Result_U : Software_Q_Impl_Interface;

  begin
     Producer_Consumer_Result_Consumer_Interrogators.Get_Count
       (Data_Sink, GC);
    --  Get the IN port values
     if (GC
      /= -1)
    then
       Producer_Consumer_Result_Consumer_Interrogators.Get_Value
         (Data_Sink, Result_U);
       Data_Sink_V := Result_U.Data_Sink_DATA;
    else
      Data_Sink_V :=
       PolyORB_HI_Generated.Types.Alpha_Type_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.Software_Consume_Spg
     (Data_Sink => Data_Sink_V);
    --  Return error code
    Result := Error_Ü;
  end Producer_Consumer_Result_Consumer_Job;

  -----------------
  -- Send_Output --
  -----------------

  procedure Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : Software_P_Impl_Port_Type;
    Result : out PolyORB_HI.Errors.Error_Kind)
  is
    pragma Unreferenced
      (Entity);
  begin
     Result := Producer_Consumer_Producer_Interrogators.Send_Output
       (Port);
  end Send_Output;

  ---------------
  -- Put_Value --
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : Software_P_Impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    Producer_Consumer_Producer_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input --
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : Software_P_Impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    Producer_Consumer_Producer_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value --
  ---------------

  procedure Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : Software_P_Impl_Port_Type;
    Result : out Software_P_Impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);

  begin
     Producer_Consumer_Producer_Interrogators.Get_Value
       (Port, Result);
  end Get_Value;

  ----------------
  -- Get_Sender --
  ----------------

  procedure Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : Software_P_Impl_Port_Type;
    Result : out PolyORB_HI_Generated.Deployment.Entity_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
     Producer_Consumer_Producer_Interrogators.Get_Sender
       (Port, Result);
  end Get_Sender;

  ---------------
  -- Get_Count --
  ---------------

  procedure Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : Software_P_Impl_Port_Type;
    Result : out Standard.Integer)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);

  begin
     Producer_Consumer_Producer_Interrogators.Get_Count
       (Port, Result);
  end Get_Count;

  --------------------
  -- Get_Time_Stamp --
  --------------------

  procedure Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : Software_P_Impl_Port_Type;
    Result : out Ada.Real_Time.Time)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
     Result := Producer_Consumer_Producer_Interrogators.Get_Time_Stamp
       (Port);
  end Get_Time_Stamp;

  ----------------
  -- Next_Value --
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : Software_P_Impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    Producer_Consumer_Producer_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message --
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : Software_P_Impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    Producer_Consumer_Producer_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events --
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out Software_P_Impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    Producer_Consumer_Producer_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output --
  -----------------

  procedure Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : Software_Q_Impl_Port_Type;
    Result : out PolyORB_HI.Errors.Error_Kind)
  is
     pragma Unreferenced
       (Entity);
  begin
     Result := Producer_Consumer_Result_Consumer_Interrogators.Send_Output
       (Port);
  end Send_Output;

  ---------------
  -- Put_Value --
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : Software_Q_Impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    Producer_Consumer_Result_Consumer_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input --
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : Software_Q_Impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    Producer_Consumer_Result_Consumer_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value --
  ---------------

  procedure Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : Software_Q_Impl_Port_Type;
    Result : out Software_Q_Impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);

  begin
     Producer_Consumer_Result_Consumer_Interrogators.Get_Value
       (Port, Result);
  end Get_Value;

  ----------------
  -- Get_Sender --
  ----------------

  procedure Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : Software_Q_Impl_Port_Type;
    Result : out PolyORB_HI_Generated.Deployment.Entity_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);

  begin
     Producer_Consumer_Result_Consumer_Interrogators.Get_Sender
       (Port, Result);
  end Get_Sender;

  ---------------
  -- Get_Count --
  ---------------

  procedure Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : Software_Q_Impl_Port_Type;
    Result : out Standard.Integer)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
     Producer_Consumer_Result_Consumer_Interrogators.Get_Count
       (Port, Result);
  end Get_Count;

  --------------------
  -- Get_Time_Stamp --
  --------------------

  procedure Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : Software_Q_Impl_Port_Type;
    Result : out Ada.Real_Time.Time)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    Result := Producer_Consumer_Result_Consumer_Interrogators.Get_Time_Stamp
      (Port);
  end Get_Time_Stamp;

  ----------------
  -- Next_Value --
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : Software_Q_Impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    Producer_Consumer_Result_Consumer_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message --
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : Software_Q_Impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    Producer_Consumer_Result_Consumer_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events --
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out Software_Q_Impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    Producer_Consumer_Result_Consumer_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

end PolyORB_HI_Generated.Activity;
