ghc_sort.adb:3:07: info: range check proved (CVC4: 2 VC)
ghc_sort.adb:3:31: info: range check proved (CVC4: 1 VC)
ghc_sort.adb:3:39: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:3:47: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:5:26: info: range check proved (CVC4: 1 VC)
ghc_sort.adb:6:33: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:6:33: info: range check proved (CVC4: 1 VC)
ghc_sort.adb:7:07: info: initialization of "Inc" proved
ghc_sort.adb:11:33: info: loop invariant initialization proved (CVC4: 2 VC)
ghc_sort.adb:11:33: info: loop invariant preservation proved (CVC4: 2 VC)
ghc_sort.adb:12:33: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:12:33: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:13:33: info: loop invariant initialization proved (CVC4: 2 VC)
ghc_sort.adb:13:33: info: loop invariant preservation proved (CVC4: 2 VC)
ghc_sort.adb:14:33: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:14:33: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:14:38: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:15:33: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:15:33: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:15:42: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:17:13: info: loop invariant initialization proved (CVC4: 2 VC)
ghc_sort.adb:17:13: info: loop invariant preservation proved (CVC4: 2 VC)
ghc_sort.adb:17:43: info: index check proved (CVC4: 8 VC)
ghc_sort.adb:19:13: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:19:13: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:19:49: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:19:49: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:19:61: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:21:13: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:22:15: medium: loop invariant might fail after first iteration, cannot prove ((for all L in Cut (K) + 1 .. Cut (K + 1) - 1 => S (L - 1) < S (L)) and then S (Cut (K + 1)) <= S (Cut (K + 1) - 1)) or else ((for all L in Cut (K) + 1 .. Cut (K + 1) - 1 => S (L - 1) >= S (L)) and then S (Cut (K + 1)) > S (Cut (K + 1) - 1)) (e.g. when Cut = (1 => 1, 2 => 4, 3 => 6, others => 1) and K = 1 and S = (1 => 0, 2 => 0, 3 => 1, 4 => 0, 5 => 1, 6 => 0, others => 1) and S'First = 1 and S'Last = 7)
ghc_sort.adb:22:35: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:22:38: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:22:52: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:22:52: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:22:69: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:22:69: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:22:79: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:23:28: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:23:35: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:23:35: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:23:54: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:23:54: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:23:59: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:25:35: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:25:38: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:25:52: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:25:52: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:25:69: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:25:69: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:25:80: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:26:28: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:26:35: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:26:35: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:26:53: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:26:53: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:26:58: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:28:20: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:28:28: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:29:44: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:29:54: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:30:36: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:30:36: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:32:16: info: loop invariant initialization proved (altergo: 2 VC)
ghc_sort.adb:32:16: info: loop invariant preservation proved (Z3: 2 VC)
ghc_sort.adb:32:56: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:32:56: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:32:66: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:33:20: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:35:21: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:36:15: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:38:17: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:42:21: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:43:15: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:43:24: info: range check proved (CVC4: 1 VC)
ghc_sort.adb:43:32: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:46:14: info: range check proved (CVC4: 4 VC)
ghc_sort.adb:52:14: info: initialization of "R" proved
ghc_sort.adb:52:14: info: range check proved (CVC4: 2 VC)
ghc_sort.adb:52:36: info: range check proved (CVC4: 1 VC)
ghc_sort.adb:52:44: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:52:48: info: range check proved (CVC4: 1 VC)
ghc_sort.adb:53:12: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:53:15: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:53:15: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:55:36: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:55:36: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:55:43: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:56:36: info: loop invariant initialization proved (CVC4: 1 VC; Trivial: 1 VC)
ghc_sort.adb:56:36: info: loop invariant preservation proved (Trivial: 1 VC; Z3: 1 VC)
ghc_sort.adb:56:55: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:56:67: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:57:36: info: loop invariant initialization proved (CVC4: 1 VC; Trivial: 1 VC)
ghc_sort.adb:57:36: info: loop invariant preservation proved (CVC4: 1 VC; Trivial: 1 VC)
ghc_sort.adb:57:55: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:57:67: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:59:16: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:59:16: info: loop invariant preservation proved (Z3: 1 VC)
ghc_sort.adb:59:48: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:59:59: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:60:20: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:60:30: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:61:16: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:61:19: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:61:29: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:62:25: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:64:16: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:64:19: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:64:29: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:65:25: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:67:20: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:71:36: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:71:36: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:71:43: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:73:16: info: loop invariant initialization proved (Z3: 1 VC)
ghc_sort.adb:73:16: info: loop invariant preservation proved (Z3: 1 VC)
ghc_sort.adb:73:48: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:73:59: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:74:36: info: loop invariant initialization proved (Trivial: 1 VC; Z3: 1 VC)
ghc_sort.adb:74:36: info: loop invariant preservation proved (CVC4: 1 VC; Trivial: 1 VC)
ghc_sort.adb:74:55: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:74:67: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:75:13: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:75:16: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:75:26: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:76:20: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:77:22: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:80:36: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:80:36: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:80:43: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:82:16: info: loop invariant initialization proved (Z3: 1 VC)
ghc_sort.adb:82:16: info: loop invariant preservation proved (Z3: 1 VC)
ghc_sort.adb:82:48: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:82:59: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:83:36: info: loop invariant initialization proved (Trivial: 1 VC; Z3: 1 VC)
ghc_sort.adb:83:36: info: loop invariant preservation proved (CVC4: 1 VC; Trivial: 1 VC)
ghc_sort.adb:83:55: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:83:67: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:84:13: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:84:16: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:84:26: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:85:20: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:86:22: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:92:07: info: initialization of "R" proved
ghc_sort.adb:92:07: info: range check proved (CVC4: 2 VC)
ghc_sort.adb:95:09: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:95:12: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:95:12: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:97:33: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:97:33: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:97:38: info: range check proved (CVC4: 2 VC)
ghc_sort.adb:97:46: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:99:13: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:99:13: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:99:28: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:99:48: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:99:57: info: range check proved (CVC4: 2 VC)
ghc_sort.adb:99:65: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:99:69: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:99:69: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:100:17: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:101:10: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:101:22: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:111:07: info: range check proved (CVC4: 2 VC)
ghc_sort.adb:117:13: medium: subprogram "All_Sorted" might not terminate, terminating annotation could be incorrect
ghc_sort.adb:119:32: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:119:39: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:119:49: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:119:58: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:119:66: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:120:29: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:126:13: medium: subprogram "Sum_Length_Aux" might not terminate, terminating annotation could be incorrect
ghc_sort.adb:128:14: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:128:33: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:128:35: info: implicit function contract not available for proof ("Sum_Length_Aux" is recursive)
ghc_sort.adb:128:52: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:129:13: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:129:16: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:129:18: info: implicit function contract not available for proof ("Sum_Length_Aux" is recursive)
ghc_sort.adb:129:35: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:134:07: info: implicit function contract not available for proof ("Sum_Length_Aux" is recursive)
ghc_sort.adb:141:14: info: postcondition proved (CVC4: 2 VC)
ghc_sort.adb:146:28: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:149:12: info: discriminant check proved (Trivial: 1 VC)
ghc_sort.adb:150:14: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:150:17: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:150:20: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:150:25: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:150:29: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:150:29: info: precondition proved (CVC4: 3 VC)
ghc_sort.adb:150:29: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:150:37: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:150:46: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:150:51: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:150:61: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:150:66: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:151:10: info: precondition proved (CVC4: 2 VC)
ghc_sort.adb:151:25: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:159:28: info: precondition proved (CVC4: 1 VC)
ghc_sort.adb:160:07: info: initialization of "L" proved
ghc_sort.adb:166:31: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:167:33: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:167:33: info: loop invariant preservation proved (Z3: 1 VC)
ghc_sort.adb:168:33: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:168:33: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:168:56: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:170:31: info: range check proved (CVC4: 4 VC)
ghc_sort.adb:170:40: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:170:54: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:170:54: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:172:43: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:172:53: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:173:19: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:173:22: info: precondition proved (CVC4: 1 VC)
ghc_sort.adb:175:15: info: discriminant check proved (Trivial: 1 VC)
ghc_sort.adb:175:46: info: range check proved (CVC4: 1 VC)
ghc_sort.adb:175:55: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:175:55: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:181:33: info: pointer dereference check proved (CVC4: 2 VC)
ghc_sort.adb:182:33: info: loop invariant initialization proved (Z3: 1 VC)
ghc_sort.adb:182:33: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:183:33: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:183:33: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:183:51: info: range check proved (CVC4: 2 VC)
ghc_sort.adb:184:10: info: precondition proved (CVC4: 2 VC)
ghc_sort.adb:186:40: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.ads:8:69: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:8:77: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:12:54: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:12:62: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:16:27: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:17:37: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:17:47: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:17:55: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:22:43: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:22:64: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:22:64: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:22:83: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:27:43: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:28:11: medium: postcondition might fail, cannot prove ((for all L in Cut'Result (K) + 1 .. Cut'Result (K + 1) - 1 => S (L - 1) < S (L)) and then (Cut'Result (K + 1) = S'Length + 1 or else S (Cut'Result (K + 1)) <= S (Cut'Result (K + 1) - 1))) or else ((for all L in Cut'Result (K) + 1 .. Cut'Result (K + 1) - 1 =...)) (e.g. when Cut'Result = (1 => -1, 2 => 2, others => 1) and Cut'Result'First = 1 and Cut'Result'Last = 2 and K = 1 and S = (1 => 1, others => 1) and S'First = 1 and S'Last = 1)
ghc_sort.ads:28:38: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:28:41: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:28:62: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:28:62: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:28:79: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:28:79: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:28:89: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:29:36: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:29:36: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:29:44: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:29:52: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:30:36: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:30:47: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:30:47: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:30:73: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:30:73: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:30:78: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:32:38: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:32:41: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:32:62: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:32:62: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:32:79: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:32:79: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:32:90: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:33:36: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:33:36: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:33:44: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:33:52: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:34:36: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:34:47: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:34:47: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:34:72: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:34:72: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:34:77: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:37:16: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:37:39: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:37:43: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:38:51: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:38:63: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:39:51: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:39:63: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:40:14: info: postcondition proved (CVC4: 1 VC; Z3: 1 VC)
ghc_sort.ads:41:71: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:41:93: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:47:15: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:48:14: info: postcondition proved (CVC4: 2 VC)
ghc_sort.ads:49:58: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:49:67: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:49:75: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:49:79: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:49:79: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:53:15: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:54:14: info: postcondition proved (CVC4: 1 VC; Z3: 1 VC)
ghc_sort.ads:55:69: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:55:90: info: index check proved (CVC4: 2 VC)
