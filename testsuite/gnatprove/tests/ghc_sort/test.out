ghc_sort.adb:3:07: info: range check proved (CVC4: 2 VC)
ghc_sort.adb:3:31: info: range check proved (CVC4: 1 VC)
ghc_sort.adb:3:39: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:3:47: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:5:26: info: range check proved (CVC4: 1 VC)
ghc_sort.adb:6:33: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:6:33: info: range check proved (CVC4: 1 VC)
ghc_sort.adb:7:07: info: initialization of "Inc" proved
ghc_sort.adb:11:33: info: loop invariant initialization proved (CVC4: 2 VC)
ghc_sort.adb:11:33: info: loop invariant preservation proved (CVC4: 2 VC)
ghc_sort.adb:12:33: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:12:33: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:13:33: info: loop invariant initialization proved (CVC4: 2 VC)
ghc_sort.adb:13:33: info: loop invariant preservation proved (CVC4: 2 VC)
ghc_sort.adb:14:33: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:14:33: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:14:38: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:15:33: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:15:33: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:15:42: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:17:13: info: loop invariant initialization proved (CVC4: 2 VC)
ghc_sort.adb:17:13: info: loop invariant preservation proved (CVC4: 2 VC)
ghc_sort.adb:17:43: info: index check proved (CVC4: 8 VC)
ghc_sort.adb:19:13: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:19:13: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:19:49: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:19:49: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:19:61: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:21:13: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:22:15: medium: loop invariant might fail after first iteration, cannot prove ((for all L in Cut (K) + 1 .. Cut (K + 1) - 1 => S (L - 1) < S (L)) and then S (Cut (K + 1)) <= S (Cut (K + 1) - 1)) or else ((for all L in Cut (K) + 1 .. Cut (K + 1) - 1 => S (L - 1) >= S (L)) and then S (Cut (K + 1)) > S (Cut (K + 1) - 1)) (e.g. when Cut = (1 => 1, 2 => 4, 3 => 6, others => 1) and K = 1 and S = (1 => 0, 2 => 0, 3 => 1, 4 => 0, 5 => 1, 6 => 0, others => 1) and S'First = 1 and S'Last = 7)
ghc_sort.adb:22:35: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:22:38: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:22:52: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:22:52: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:22:69: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:22:69: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:22:79: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:23:28: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:23:35: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:23:35: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:23:54: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:23:54: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:23:59: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:25:35: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:25:38: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:25:52: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:25:52: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:25:69: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:25:69: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:25:80: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:26:28: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:26:35: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:26:35: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:26:53: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:26:53: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:26:58: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:28:20: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:28:28: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:29:44: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:29:54: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:30:36: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:30:36: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:32:16: info: loop invariant initialization proved (altergo: 2 VC)
ghc_sort.adb:32:16: info: loop invariant preservation proved (Z3: 1 VC; altergo: 1 VC)
ghc_sort.adb:32:56: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:32:56: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:32:66: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:33:20: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:35:21: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:36:15: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:38:17: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:41:13: info: assertion proved (CVC4: 1 VC; Trivial: 1 VC)
ghc_sort.adb:42:40: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:42:45: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:42:57: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:42:74: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:42:74: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:42:84: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:43:28: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:43:33: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:43:50: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:43:55: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:45:39: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:45:44: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:45:56: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:45:73: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:45:73: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:45:84: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:46:28: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:46:33: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:46:49: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:46:54: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:50:21: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:51:15: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:51:24: info: range check proved (CVC4: 1 VC)
ghc_sort.adb:51:32: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:54:14: info: range check proved (CVC4: 4 VC)
ghc_sort.adb:60:14: info: initialization of "R" proved
ghc_sort.adb:60:14: info: range check proved (CVC4: 2 VC)
ghc_sort.adb:60:36: info: range check proved (CVC4: 1 VC)
ghc_sort.adb:60:44: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:60:48: info: range check proved (CVC4: 1 VC)
ghc_sort.adb:61:12: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:61:15: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:61:15: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:63:36: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:63:36: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:63:43: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:64:36: info: loop invariant initialization proved (CVC4: 1 VC; Trivial: 1 VC)
ghc_sort.adb:64:36: info: loop invariant preservation proved (Trivial: 1 VC; Z3: 1 VC)
ghc_sort.adb:64:55: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:64:67: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:65:36: info: loop invariant initialization proved (CVC4: 1 VC; Trivial: 1 VC)
ghc_sort.adb:65:36: info: loop invariant preservation proved (CVC4: 1 VC; Trivial: 1 VC)
ghc_sort.adb:65:55: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:65:67: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:67:16: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:67:16: info: loop invariant preservation proved (Z3: 1 VC)
ghc_sort.adb:67:48: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:67:59: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:68:20: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:68:30: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:69:16: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:69:19: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:69:29: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:70:25: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:72:16: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:72:19: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:72:29: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:73:25: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:75:20: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:79:36: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:79:36: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:79:43: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:81:16: info: loop invariant initialization proved (Z3: 1 VC)
ghc_sort.adb:81:16: info: loop invariant preservation proved (Z3: 1 VC)
ghc_sort.adb:81:48: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:81:59: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:82:36: info: loop invariant initialization proved (Trivial: 1 VC; Z3: 1 VC)
ghc_sort.adb:82:36: info: loop invariant preservation proved (CVC4: 1 VC; Trivial: 1 VC)
ghc_sort.adb:82:55: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:82:67: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:83:13: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:83:16: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:83:26: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:84:20: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:85:22: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:88:36: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:88:36: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:88:43: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:90:16: info: loop invariant initialization proved (Z3: 1 VC)
ghc_sort.adb:90:16: info: loop invariant preservation proved (Z3: 1 VC)
ghc_sort.adb:90:48: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:90:59: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:91:36: info: loop invariant initialization proved (Trivial: 1 VC; Z3: 1 VC)
ghc_sort.adb:91:36: info: loop invariant preservation proved (CVC4: 1 VC; Trivial: 1 VC)
ghc_sort.adb:91:55: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:91:67: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:92:13: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:92:16: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:92:26: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:93:20: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:94:22: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:100:07: info: initialization of "R" proved
ghc_sort.adb:100:07: info: range check proved (CVC4: 2 VC)
ghc_sort.adb:103:09: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:103:12: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:103:12: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:105:33: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:105:33: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:105:38: info: range check proved (CVC4: 2 VC)
ghc_sort.adb:105:46: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:107:13: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:107:13: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:107:28: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:107:48: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:107:57: info: range check proved (CVC4: 2 VC)
ghc_sort.adb:107:65: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:107:69: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:107:69: info: overflow check proved (CVC4: 2 VC)
ghc_sort.adb:108:17: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:109:10: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:109:22: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:119:07: info: range check proved (CVC4: 2 VC)
ghc_sort.adb:125:13: medium: subprogram "All_Sorted" might not terminate, terminating annotation could be incorrect
ghc_sort.adb:125:25: warning: "L" is not modified, could be of access constant type
ghc_sort.adb:127:32: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:127:39: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:127:49: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:127:58: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:127:66: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:128:29: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:134:13: info: implicit function contract might not be available on recursive calls
ghc_sort.adb:134:13: medium: subprogram "Sum_Length_Aux" might not terminate, terminating annotation could be incorrect
ghc_sort.adb:134:29: warning: "L" is not modified, could be of access constant type
ghc_sort.adb:136:14: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:136:33: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:136:52: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:137:13: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:137:16: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:137:35: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:141:25: warning: "L" is not modified, could be of access constant type
ghc_sort.adb:149:14: info: postcondition proved (CVC4: 2 VC)
ghc_sort.adb:154:28: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:157:12: info: discriminant check proved (Trivial: 1 VC)
ghc_sort.adb:158:14: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:158:17: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:158:20: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:158:25: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:158:29: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:158:29: info: precondition proved (CVC4: 3 VC)
ghc_sort.adb:158:29: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:158:37: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:158:46: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:158:51: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:158:61: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:158:66: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:159:10: info: precondition proved (CVC4: 2 VC)
ghc_sort.adb:159:25: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.adb:167:28: info: precondition proved (CVC4: 1 VC)
ghc_sort.adb:168:07: info: initialization of "L" proved
ghc_sort.adb:174:31: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:175:33: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:175:33: info: loop invariant preservation proved (Z3: 1 VC)
ghc_sort.adb:176:33: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:176:33: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:176:56: info: index check proved (CVC4: 4 VC)
ghc_sort.adb:178:31: info: range check proved (CVC4: 4 VC)
ghc_sort.adb:178:40: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:178:54: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:178:54: info: overflow check proved (CVC4: 1 VC)
ghc_sort.adb:180:43: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:180:53: info: index check proved (CVC4: 2 VC)
ghc_sort.adb:181:19: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:181:22: info: precondition proved (CVC4: 1 VC)
ghc_sort.adb:183:15: info: discriminant check proved (Trivial: 1 VC)
ghc_sort.adb:183:46: info: range check proved (CVC4: 1 VC)
ghc_sort.adb:183:55: info: length check proved (CVC4: 3 VC; Trivial: 1 VC)
ghc_sort.adb:183:55: info: predicate check proved (CVC4: 1 VC)
ghc_sort.adb:189:33: info: pointer dereference check proved (CVC4: 2 VC)
ghc_sort.adb:190:33: info: loop invariant initialization proved (Z3: 1 VC)
ghc_sort.adb:190:33: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:191:33: info: loop invariant initialization proved (CVC4: 1 VC)
ghc_sort.adb:191:33: info: loop invariant preservation proved (CVC4: 1 VC)
ghc_sort.adb:191:51: info: range check proved (CVC4: 2 VC)
ghc_sort.adb:192:10: info: precondition proved (CVC4: 2 VC)
ghc_sort.adb:194:40: info: pointer dereference check proved (CVC4: 1 VC)
ghc_sort.ads:8:14: info: postcondition proved (CVC4: 8 VC; Z3: 1 VC)
ghc_sort.ads:8:69: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:8:77: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:12:54: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:12:62: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:16:27: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:17:37: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:17:47: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:17:55: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:22:43: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:22:64: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:22:64: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:22:83: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:27:43: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:28:38: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:28:41: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:28:62: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:28:62: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:28:79: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:28:79: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:28:89: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:29:36: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:29:36: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:29:44: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:29:52: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:30:36: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:30:47: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:30:47: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:30:73: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:30:73: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:30:78: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:32:38: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:32:41: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:32:62: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:32:62: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:32:79: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:32:79: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:32:90: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:33:36: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:33:36: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:33:44: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:33:52: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:34:36: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:34:47: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:34:47: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:34:72: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:34:72: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:34:77: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:37:16: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:37:39: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:37:43: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:38:51: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:38:63: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:39:51: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:39:63: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:40:14: info: postcondition proved (CVC4: 1 VC; Z3: 1 VC)
ghc_sort.ads:41:71: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:41:93: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:47:15: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:48:14: info: postcondition proved (CVC4: 2 VC)
ghc_sort.ads:49:58: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:49:67: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:49:75: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:49:79: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:49:79: info: overflow check proved (CVC4: 1 VC)
ghc_sort.ads:53:15: info: range check proved (CVC4: 1 VC)
ghc_sort.ads:55:54: medium: postcondition might fail, cannot prove Sort'Result (L - 1) <= Sort'Result (L) (e.g. when L = 2 and Sort'Result = (1 => 0, 2 => -1, others => 1) and Sort'Result'First = 1 and Sort'Result'Last = 2)
ghc_sort.ads:55:69: info: index check proved (CVC4: 2 VC)
ghc_sort.ads:55:90: info: index check proved (CVC4: 2 VC)
