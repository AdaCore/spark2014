predicates.ads:17:31: info: division check proved
predicates.ads:20:32: info: division check proved
predicates.ads:23:58: info: division check proved
predicates.ads:23:71: info: division check proved

predicates.ads:32:19: high: overflow check might fail, cannot prove upper bound for abs (X)
   32 |         Get_GCD (abs (X), abs (Y))
      |                  ^~~~~~~
  e.g. when X = Integer'First
  reason for check: result of absolute value must fit in a 32-bits machine integer
  possible fix: add precondition (abs (X) in Integer) to subprogram at line 30
   30 |   function Get_GCD (X, Y : Integer) return Natural is
      |            ^ here

predicates.ads:32:28: high: overflow check might fail, cannot prove upper bound for abs (Y)
   32 |         Get_GCD (abs (X), abs (Y))
      |                           ^~~~~~~
  e.g. when Y = Integer'First
  reason for check: result of absolute value must fit in a 32-bits machine integer
  possible fix: add precondition (abs (Y) in Integer) to subprogram at line 30
   30 |   function Get_GCD (X, Y : Integer) return Natural is
      |            ^ here
predicates.ads:34:17: info: range check proved
predicates.ads:36:24: info: overflow check proved
predicates.ads:38:24: info: overflow check proved

predicates.ads:44:50: high: cannot call potentially nonreturning subprogram "Get_GCD" for type "Bundle_Values" in its own predicate (SPARK RM 3.2.4(4))
   44 |     with Dynamic_Predicate => Bundle_Values.GCD = Get_GCD (Bundle_Values.X, Bundle_Values.Y);
      |                               ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
predicates.ads:50:07: info: range check proved
predicates.ads:58:89: info: index check proved
