bounded_stacks.adb:30:11: info: predicate check proved (CVC4: 1 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.adb:39:11: info: predicate check proved (CVC4: 1 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.adb:39:28: info: overflow check proved (CVC4: 2 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.adb:40:11: info: predicate check proved (CVC4: 1 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.adb:40:24: info: index check proved (CVC4: 2 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.adb:49:32: info: index check proved (CVC4: 2 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.adb:50:11: info: predicate check proved (CVC4: 1 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.adb:50:28: info: range check proved (CVC4: 2 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.adb:58:24: info: index check proved (CVC4: 2 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.adb:70:29: info: index check proved (CVC4: 2 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.adb:70:49: info: index check proved (CVC4: 2 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.ads:6:09: info: default initial condition proved (CVC4: 1 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.ads:6:09: info: predicate check proved on default value (CVC4: 1 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.ads:18:20: info: postcondition proved (CVC4: 2 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.ads:20:06: info: data dependencies proved, in instantiation at integer_stacks.ads:4
bounded_stacks.ads:21:06: info: flow dependencies proved, in instantiation at integer_stacks.ads:4
bounded_stacks.ads:30:20: info: postcondition proved (CVC4: 2 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.ads:31:54: medium: overflow check might fail, cannot prove upper bound for Extent (This'Old) + 1, in instantiation at integer_stacks.ads:4 (e.g. when This = (Capacity => ?, Values => (others => Integer'Last), Top => Natural'Last) and This.Values'First = 1 and This.Values'Last = Integer'Last) [reason for check: result of addition must fit in a 32-bits machine integer]
bounded_stacks.ads:32:06: info: data dependencies proved, in instantiation at integer_stacks.ads:4
bounded_stacks.ads:33:06: info: flow dependencies proved, in instantiation at integer_stacks.ads:4
bounded_stacks.ads:35:41: info: initialization of "Item" proved, in instantiation at integer_stacks.ads:4
bounded_stacks.ads:37:20: info: postcondition proved (CVC4: 2 VC), in instantiation at integer_stacks.ads:4
bounded_stacks.ads:39:06: info: data dependencies proved, in instantiation at integer_stacks.ads:4
bounded_stacks.ads:40:06: info: flow dependencies proved, in instantiation at integer_stacks.ads:4
bounded_stacks.ads:44:06: info: data dependencies proved, in instantiation at integer_stacks.ads:4
bounded_stacks.ads:45:06: info: flow dependencies proved, in instantiation at integer_stacks.ads:4
bounded_stacks.ads:52:07: info: range check proved (CVC4: 2 VC), in instantiation at integer_stacks.ads:4
integer_stacks.ads:4:01: info: cannot unroll loop (too many loop iterations)
integer_stacks.ads:4:01: info: in instantiation at bounded_stacks.adb:69
