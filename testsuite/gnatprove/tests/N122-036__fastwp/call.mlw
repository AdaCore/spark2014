module Call
   use import int.Int
   use import ref.Ref

   val g : ref int

   val f (x : ref int) : unit
      requires { !g > !x }
      reads { g }
      writes { x }
      ensures { !g = !x }


   val incr (x : ref int) : unit
      requires { true }
      writes { x }
      ensures { !x = old !x + 1 }

(* Valid *)
let test0 (x : ref int)
   requires { true }
   ensures { !x = old !x + 1 }
   =
   incr x

(* Unknown *)
let testx (x : ref int)
   requires { true }
   ensures { !x = old !x }
   =
   incr x

(* Unknown *)
   let test3 (x : ref int)
   requires { true }
   ensures { !x = old !x + 1 }
   =
      incr x;
      incr x


(* Valid *)
   let test2 (x : ref int)
   requires { true }
   ensures { !x = old !x + 2 }
   =
      incr x;
      incr x

(* Valid *)
   let test1 (x : ref int)
   requires { !g > !x }
   ensures { !g = !x }
   =
      f x;
      g := !x + 1;
      f x

end
