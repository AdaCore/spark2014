module Raise
  use import int.Int
  use import ref.Ref

  exception Test

(* Valid *)
  let test1 (x : ref int) : int
    requires {true }
    ensures { false }
    raises { Test -> true }
    =
    raise Test

(* Unknown *)
  let test2 (x : ref int) : int
    requires {true }
    ensures { false }
    raises { Test -> false }
    =
    raise Test

(* Valid *)
  let test3 (x : ref int)
    requires {true }
    ensures { !x = old !x + 1 }
    raises { | Test -> !x = 0 /\ !x = old !x }
    =
    if !x = 0 then
      raise Test
      else
        x := !x + 1

(* Unknown *)
  let test4 (x : ref int)
    requires {true }
    ensures { !x = old !x }
    raises { Test -> true }
    =
    if !x = 0 then
      raise Test
      else
        x := !x + 1

end
