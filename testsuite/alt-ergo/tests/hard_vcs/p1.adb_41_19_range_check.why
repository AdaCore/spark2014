(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_character

type us_private

type us_type_of_heap

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

type range_type

type us_string

logic mk___string : us_character map, int, range_type -> us_string

logic elts1 : us_string -> us_character map

axiom elts_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (elts1(mk___string(u, u1, u2)) = u))

logic offset1 : us_string -> int

axiom offset_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (offset1(mk___string(u, u1, u2)) = u1))

logic rt : us_string -> range_type

axiom rt_def :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (rt(mk___string(u, u1, u2)) = u2))

axiom us_string_inversion :
  (forall u:us_string. (u = mk___string(elts1(u), offset1(u), rt(u))))

logic abs : int -> int

axiom abs_def :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type tS7bP1

logic attr__ATTRIBUTE_FIRST2 : int

logic attr__ATTRIBUTE_LAST2 : int

logic attr__ATTRIBUTE_MODULUS4 : int

logic attr__ATTRIBUTE_IMAGE4 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_string -> prop

logic attr__ATTRIBUTE_VALUE4 : us_string -> int

predicate in_range4(x: int) = ((attr__ATTRIBUTE_FIRST2 <= x) and
  (x <= attr__ATTRIBUTE_LAST2))

logic to_int5 : tS7bP1 -> int

logic of_int5 : int -> tS7bP1

predicate eq4(x: tS7bP1, y: tS7bP1) = (to_int5(x) = to_int5(y))

axiom range_axiom5 : (forall x:tS7bP1. in_range4(to_int5(x)))

axiom coerce_axiom4 :
  (forall x:int [to_int5(of_int5(x))| in_range4(x), of_int5(x)].
  (in_range4(x) -> (to_int5(of_int5(x)) = x)))

axiom unicity_axiom4 :
  (forall x:tS7bP1. forall y:tS7bP1 [to_int5(x), to_int5(y)].
  ((to_int5(x) = to_int5(y)) -> (x = y)))

logic dummy5 : tS7bP1

type t9s

logic attr__ATTRIBUTE_FIRST3 : int

logic attr__ATTRIBUTE_LAST3 : int

logic attr__ATTRIBUTE_MODULUS5 : int

logic attr__ATTRIBUTE_IMAGE5 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_string -> prop

logic attr__ATTRIBUTE_VALUE5 : us_string -> int

predicate in_range5(x: int) = ((attr__ATTRIBUTE_FIRST3 <= x) and
  (x <= attr__ATTRIBUTE_LAST3))

logic to_int6 : t9s -> int

logic of_int6 : int -> t9s

predicate eq5(x: t9s, y: t9s) = (to_int6(x) = to_int6(y))

axiom range_axiom6 : (forall x:t9s. in_range5(to_int6(x)))

axiom coerce_axiom5 :
  (forall x:int [to_int6(of_int6(x))| in_range5(x), of_int6(x)].
  (in_range5(x) -> (to_int6(of_int6(x)) = x)))

axiom unicity_axiom5 :
  (forall x:t9s. forall y:t9s [to_int6(x), to_int6(y)].
  ((to_int6(x) = to_int6(y)) -> (x = y)))

logic dummy6 : t9s

type integer

logic attr__ATTRIBUTE_MODULUS2 : int

logic attr__ATTRIBUTE_IMAGE2 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_string -> prop

logic attr__ATTRIBUTE_VALUE2 : us_string -> int

predicate in_range2(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int3 : integer -> int

logic of_int3 : int -> integer

predicate eq2(x: integer, y: integer) = (to_int3(x) = to_int3(y))

axiom range_axiom2 : (forall x:integer. in_range2(to_int3(x)))

axiom coerce_axiom2 :
  (forall x:int [to_int3(of_int3(x))| in_range2(x), of_int3(x)].
  (in_range2(x) -> (to_int3(of_int3(x)) = x)))

axiom unicity_axiom2 :
  (forall x:integer. forall y:integer [to_int3(x), to_int3(y)].
  ((to_int3(x) = to_int3(y)) -> (x = y)))

logic dummy2 : integer

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool. (((b = true) -> (to_int(b) = 1)) and ((not (b = true)) ->
  (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i1:int. (((i1 = 0) -> (of_int(i1) = false)) and ((not (i1 = 0)) ->
  (of_int(i1) = true))))

logic get : 'a map, int -> 'a

logic set : 'a map, int, 'a -> 'a map

axiom Select_eq :
  (forall m:'a map.
  (forall i1:int. forall j1:int.
  (forall a:'a [get(set(m, i1, a), j1)]. ((i1 = j1) -> (get(set(m, i1, a),
  j1) = a)))))

axiom Select_neq :
  (forall m:'a map.
  (forall i1:int. forall j1:int.
  (forall a:'a [get(set(m, i1, a), j1)| set(m, i1, a), get(m, j1)].
  ((not (i1 = j1)) -> (get(set(m, i1, a), j1) = get(m, j1))))))

logic attr__ATTRIBUTE_LENGTH : 'a t -> int

axiom attr__ATTRIBUTE_LENGTH_def1 :
  (forall x:'a t. (((first(x) <= last(x)) ->
  (attr__ATTRIBUTE_LENGTH(x) = ((last(x) - first(x)) + 1))) and
  ((not (first(x) <= last(x))) -> (attr__ATTRIBUTE_LENGTH(x) = 0))))

logic bool_eq1 : 'a t, 'a t -> bool

axiom T__ada_array___equal_def :
  (forall a:'a map. forall a1:int. forall a2:int. forall a3:int.
  (forall b:'a map. forall b1:int. forall b2:int. forall b3:int
  [bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i1:int [get(elts(mk_t(a, a1, a2, a3)), ((i1 + offset(mk_t(a, a1,
  a2, a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i1) and (i1 <= a3)) ->
  (get(a, ((i1 + a1) - a2)) = get(b, ((((b2 - a2) + i1) + b1) - b2)))))) ->
  (bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true)) and
  ((bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i1:int [get(elts(mk_t(a, a1, a2, a3)), ((i1 + offset(mk_t(a, a1,
  a2, a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i1) and (i1 <= a3)) ->
  (get(a, ((i1 + a1) - a2)) = get(b, ((((b2 - a2) + i1) + b1) - b2))))))))))

type range_type1

logic first1 : range_type1 -> integer

logic last1 : range_type1 -> integer

logic mk : int, int -> range_type1

axiom range_axiom3 :
  (forall a:range_type1. ((to_int3(first1(a)) <= to_int3(last1(a))) ->
  (((0 <= to_int3(first1(a))) and (to_int3(first1(a)) <= 1000000)) and
  ((0 <= to_int3(last1(a))) and (to_int3(last1(a)) <= 1000000)))))

type arr

logic mk_arr : bool map, int, range_type1 -> arr

logic elts2 : arr -> bool map

axiom elts_def3 :
  (forall u:bool map. forall u1:int. forall u2:range_type1. (elts2(mk_arr(u,
  u1, u2)) = u))

logic offset2 : arr -> int

axiom offset_def3 :
  (forall u:bool map. forall u1:int. forall u2:range_type1.
  (offset2(mk_arr(u, u1, u2)) = u1))

logic rt1 : arr -> range_type1

axiom rt_def2 :
  (forall u:bool map. forall u1:int. forall u2:range_type1. (rt1(mk_arr(u,
  u1, u2)) = u2))

axiom arr_inversion1 :
  (forall u:arr. (u = mk_arr(elts2(u), offset2(u), rt1(u))))

function to_array(a: arr) : bool t = mk_t(elts2(a), offset2(a),
  to_int3(first1(rt1(a))), to_int3(last1(rt1(a))))

function of_array(a: bool t) : arr = mk_arr(elts(a), offset(a), mk(first(a),
  last(a)))

logic dummy3 : arr

type t3

type t5s

logic attr__ATTRIBUTE_FIRST4 : int

logic attr__ATTRIBUTE_LAST4 : int

logic attr__ATTRIBUTE_MODULUS6 : int

logic attr__ATTRIBUTE_IMAGE6 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_string -> prop

logic attr__ATTRIBUTE_VALUE6 : us_string -> int

predicate in_range6(x: int) = ((attr__ATTRIBUTE_FIRST4 <= x) and
  (x <= attr__ATTRIBUTE_LAST4))

logic to_int7 : t5s -> int

logic of_int7 : int -> t5s

predicate eq6(x: t5s, y: t5s) = (to_int7(x) = to_int7(y))

axiom range_axiom7 : (forall x:t5s. in_range6(to_int7(x)))

axiom coerce_axiom6 :
  (forall x:int [to_int7(of_int7(x))| in_range6(x), of_int7(x)].
  (in_range6(x) -> (to_int7(of_int7(x)) = x)))

axiom unicity_axiom6 :
  (forall x:t5s. forall y:t5s [to_int7(x), to_int7(y)].
  ((to_int7(x) = to_int7(y)) -> (x = y)))

logic dummy7 : t5s

type t10b

logic attr__ATTRIBUTE_FIRST5 : int

logic attr__ATTRIBUTE_LAST5 : int

logic attr__ATTRIBUTE_MODULUS7 : int

logic attr__ATTRIBUTE_IMAGE7 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_string -> prop

logic attr__ATTRIBUTE_VALUE7 : us_string -> int

predicate in_range7(x: int) = ((attr__ATTRIBUTE_FIRST5 <= x) and
  (x <= attr__ATTRIBUTE_LAST5))

logic to_int8 : t10b -> int

logic of_int8 : int -> t10b

predicate eq7(x: t10b, y: t10b) = (to_int8(x) = to_int8(y))

axiom range_axiom8 : (forall x:t10b. in_range7(to_int8(x)))

axiom coerce_axiom7 :
  (forall x:int [to_int8(of_int8(x))| in_range7(x), of_int8(x)].
  (in_range7(x) -> (to_int8(of_int8(x)) = x)))

axiom unicity_axiom7 :
  (forall x:t10b. forall y:t10b [to_int8(x), to_int8(y)].
  ((to_int8(x) = to_int8(y)) -> (x = y)))

logic dummy8 : t10b

type t18b

logic attr__ATTRIBUTE_FIRST : int

logic attr__ATTRIBUTE_LAST : int

logic attr__ATTRIBUTE_MODULUS : int

logic attr__ATTRIBUTE_IMAGE : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check : us_string -> prop

logic attr__ATTRIBUTE_VALUE : us_string -> int

predicate in_range(x: int) = ((attr__ATTRIBUTE_FIRST <= x) and
  (x <= attr__ATTRIBUTE_LAST))

logic to_int1 : t18b -> int

logic of_int1 : int -> t18b

predicate eq(x: t18b, y: t18b) = (to_int1(x) = to_int1(y))

axiom range_axiom : (forall x:t18b. in_range(to_int1(x)))

axiom coerce_axiom :
  (forall x:int [to_int1(of_int1(x))| in_range(x), of_int1(x)].
  (in_range(x) -> (to_int1(of_int1(x)) = x)))

axiom unicity_axiom :
  (forall x:t18b. forall y:t18b [to_int1(x), to_int1(y)].
  ((to_int1(x) = to_int1(y)) -> (x = y)))

logic dummy : t18b

type index

logic attr__ATTRIBUTE_MODULUS3 : int

logic attr__ATTRIBUTE_IMAGE3 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_string -> prop

logic attr__ATTRIBUTE_VALUE3 : us_string -> int

predicate in_range3(x: int) = ((0 <= x) and (x <= 1000000))

logic to_int4 : index -> int

logic of_int4 : int -> index

predicate eq3(x: index, y: index) = (to_int4(x) = to_int4(y))

axiom range_axiom4 : (forall x:index. in_range3(to_int4(x)))

axiom coerce_axiom3 :
  (forall x:int [to_int4(of_int4(x))| in_range3(x), of_int4(x)].
  (in_range3(x) -> (to_int4(of_int4(x)) = x)))

axiom unicity_axiom3 :
  (forall x:index. forall y:index [to_int4(x), to_int4(y)].
  ((to_int4(x) = to_int4(y)) -> (x = y)))

logic dummy4 : index

type t4

type t7s

logic attr__ATTRIBUTE_FIRST6 : int

logic attr__ATTRIBUTE_LAST6 : int

logic attr__ATTRIBUTE_MODULUS8 : int

logic attr__ATTRIBUTE_IMAGE8 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_string -> prop

logic attr__ATTRIBUTE_VALUE8 : us_string -> int

predicate in_range8(x: int) = ((attr__ATTRIBUTE_FIRST6 <= x) and
  (x <= attr__ATTRIBUTE_LAST6))

logic to_int9 : t7s -> int

logic of_int9 : int -> t7s

predicate eq8(x: t7s, y: t7s) = (to_int9(x) = to_int9(y))

axiom range_axiom9 : (forall x:t7s. in_range8(to_int9(x)))

axiom coerce_axiom8 :
  (forall x:int [to_int9(of_int9(x))| in_range8(x), of_int9(x)].
  (in_range8(x) -> (to_int9(of_int9(x)) = x)))

axiom unicity_axiom8 :
  (forall x:t7s. forall y:t7s [to_int9(x), to_int9(y)].
  ((to_int9(x) = to_int9(y)) -> (x = y)))

logic dummy9 : t7s

type t12b

logic attr__ATTRIBUTE_FIRST7 : int

logic attr__ATTRIBUTE_LAST7 : int

logic attr__ATTRIBUTE_MODULUS9 : int

logic attr__ATTRIBUTE_IMAGE9 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_string -> prop

logic attr__ATTRIBUTE_VALUE9 : us_string -> int

predicate in_range9(x: int) = ((attr__ATTRIBUTE_FIRST7 <= x) and
  (x <= attr__ATTRIBUTE_LAST7))

logic to_int10 : t12b -> int

logic of_int10 : int -> t12b

predicate eq9(x: t12b, y: t12b) = (to_int10(x) = to_int10(y))

axiom range_axiom10 : (forall x:t12b. in_range9(to_int10(x)))

axiom coerce_axiom9 :
  (forall x:int [to_int10(of_int10(x))| in_range9(x), of_int10(x)].
  (in_range9(x) -> (to_int10(of_int10(x)) = x)))

axiom unicity_axiom9 :
  (forall x:t12b. forall y:t12b [to_int10(x), to_int10(y)].
  ((to_int10(x) = to_int10(y)) -> (x = y)))

logic dummy10 : t12b

type t5

goal WP_parameter_def1 :
  (forall a:bool map. forall a1:int. forall a2:range_type1. forall i1:index.
  forall j1:index. forall ustemp_standard__p1_0:int. forall j2:index.
  forall i2:index. forall a3:bool map. forall a4:int. forall a5:range_type1.
  forall ustemp_standard__p1_01:int. forall p1__swap__a:bool map.
  forall p1__swap__a1:int. forall p1__swap__a2:range_type1.
  forall p1__swap__a3:bool map. forall p1__swap__a4:int.
  forall p1__swap__a5:range_type1. forall a6:bool map. forall a7:int.
  forall a8:range_type1. forall i3:index. (((first(to_array(mk_arr(a, a1,
  a2))) = attr__ATTRIBUTE_FIRST2) and (last(to_array(mk_arr(a, a1,
  a2))) = attr__ATTRIBUTE_LAST2)) -> ((not (last(to_array(mk_arr(a, a1,
  a2))) <  first(to_array(mk_arr(a, a1, a2))))) ->
  ((i1 = of_int4(first(to_array(mk_arr(a, a1, a2))))) ->
  ((j1 = of_int4(last(to_array(mk_arr(a, a1, a2))))) ->
  ((to_int4(i1) <= to_int4(j1)) -> ((ustemp_standard__p1_0 = 0) ->
  ((((((first(to_array(mk_arr(a3, a4, a5))) <= to_int4(i2)) and
  (to_int4(i2) <= last(to_array(mk_arr(a3, a4, a5))))) and
  ((first(to_array(mk_arr(a3, a4, a5))) <= to_int4(j2)) and
  (to_int4(j2) <= last(to_array(mk_arr(a3, a4, a5)))))) and
  (forall p1__two_way_sort__L_1__L13b__k:int. (((first(to_array(mk_arr(a3,
  a4, a5))) <= p1__two_way_sort__L_1__L13b__k) and
  (p1__two_way_sort__L_1__L13b__k <= (to_int4(i2) - 1))) ->
  (not (get(elts(to_array(mk_arr(a3, a4, a5))),
  ((p1__two_way_sort__L_1__L13b__k + offset(to_array(mk_arr(a3, a4,
  a5)))) - first(to_array(mk_arr(a3, a4, a5))))) = true))))) and
  (forall p1__two_way_sort__L_1__L15b__k:int.
  ((((to_int4(j2) + 1) <= p1__two_way_sort__L_1__L15b__k) and
  (p1__two_way_sort__L_1__L15b__k <= last(to_array(mk_arr(a3, a4, a5))))) ->
  (get(elts(to_array(mk_arr(a3, a4, a5))),
  ((p1__two_way_sort__L_1__L15b__k + offset(to_array(mk_arr(a3, a4,
  a5)))) - first(to_array(mk_arr(a3, a4, a5))))) = true)))) ->
  ((to_int4(i2) <= to_int4(j2)) ->
  ((ustemp_standard__p1_01 = (to_int4(j2) - to_int4(i2))) ->
  ((get(elts(to_array(mk_arr(a3, a4, a5))),
  ((to_int4(i2) + offset(to_array(mk_arr(a3, a4,
  a5)))) - first(to_array(mk_arr(a3, a4, a5))))) = true) ->
  ((not (get(elts(to_array(mk_arr(a3, a4, a5))),
  ((to_int4(j2) + offset(to_array(mk_arr(a3, a4,
  a5)))) - first(to_array(mk_arr(a3, a4, a5))))) = true)) ->
  (((mk_arr(p1__swap__a, p1__swap__a1, p1__swap__a2) = mk_arr(a3, a4,
  a5)) and (((get(elts(to_array(mk_arr(p1__swap__a3, p1__swap__a4,
  p1__swap__a5))), ((to_int4(i2) + offset(to_array(mk_arr(p1__swap__a3,
  p1__swap__a4, p1__swap__a5)))) - first(to_array(mk_arr(p1__swap__a3,
  p1__swap__a4, p1__swap__a5))))) = get(elts(to_array(mk_arr(p1__swap__a,
  p1__swap__a1, p1__swap__a2))),
  ((to_int4(j2) + offset(to_array(mk_arr(p1__swap__a, p1__swap__a1,
  p1__swap__a2)))) - first(to_array(mk_arr(p1__swap__a, p1__swap__a1,
  p1__swap__a2)))))) and ((get(elts(to_array(mk_arr(p1__swap__a3,
  p1__swap__a4, p1__swap__a5))),
  ((to_int4(j2) + offset(to_array(mk_arr(p1__swap__a3, p1__swap__a4,
  p1__swap__a5)))) - first(to_array(mk_arr(p1__swap__a3, p1__swap__a4,
  p1__swap__a5))))) = get(elts(to_array(mk_arr(p1__swap__a, p1__swap__a1,
  p1__swap__a2))), ((to_int4(i2) + offset(to_array(mk_arr(p1__swap__a,
  p1__swap__a1, p1__swap__a2)))) - first(to_array(mk_arr(p1__swap__a,
  p1__swap__a1, p1__swap__a2)))))) and
  (forall p1__swap__L17b__k:int. (((first(to_array(mk_arr(p1__swap__a3,
  p1__swap__a4, p1__swap__a5))) <= p1__swap__L17b__k) and
  (p1__swap__L17b__k <= last(to_array(mk_arr(p1__swap__a3, p1__swap__a4,
  p1__swap__a5))))) -> (((not (p1__swap__L17b__k = to_int4(i2))) and
  (not (p1__swap__L17b__k = to_int4(j2)))) ->
  (get(elts(to_array(mk_arr(p1__swap__a3, p1__swap__a4, p1__swap__a5))),
  ((p1__swap__L17b__k + offset(to_array(mk_arr(p1__swap__a3, p1__swap__a4,
  p1__swap__a5)))) - first(to_array(mk_arr(p1__swap__a3, p1__swap__a4,
  p1__swap__a5))))) = get(elts(to_array(mk_arr(p1__swap__a, p1__swap__a1,
  p1__swap__a2))), ((p1__swap__L17b__k + offset(to_array(mk_arr(p1__swap__a,
  p1__swap__a1, p1__swap__a2)))) - first(to_array(mk_arr(p1__swap__a,
  p1__swap__a1, p1__swap__a2))))))))))) and (mk_arr(a6, a7,
  a8) = mk_arr(p1__swap__a3, p1__swap__a4, p1__swap__a5)))) ->
  ((i3 = of_int4((to_int4(i2) + 1))) ->
  in_range3((to_int4(j2) - 1))))))))))))))))

