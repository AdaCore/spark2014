(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_character

type us_private

type us_type_of_heap

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

type range_type

type us_string

logic mk___string : us_character map, int, range_type -> us_string

logic elts1 : us_string -> us_character map

axiom elts_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (elts1(mk___string(u, u1, u2)) = u))

logic offset1 : us_string -> int

axiom offset_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (offset1(mk___string(u, u1, u2)) = u1))

logic rt : us_string -> range_type

axiom rt_def :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (rt(mk___string(u, u1, u2)) = u2))

axiom us_string_inversion :
  (forall u:us_string. (u = mk___string(elts1(u), offset1(u), rt(u))))

logic abs : int -> int

axiom abs_def :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type character

logic attr__ATTRIBUTE_MODULUS4 : int

logic attr__ATTRIBUTE_IMAGE4 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_string -> prop

logic attr__ATTRIBUTE_VALUE4 : us_string -> int

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

logic to_int4 : us_character -> int

logic of_int4 : int -> us_character

predicate eq4(x: us_character, y: us_character) = (to_int4(x) = to_int4(y))

axiom range_axiom4 : (forall x:us_character. in_range4(to_int4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_int4(of_int4(x))| in_range4(x), of_int4(x)].
  (in_range4(x) -> (to_int4(of_int4(x)) = x)))

axiom unicity_axiom4 :
  (forall x:us_character. forall y:us_character [to_int4(x), to_int4(y)].
  ((to_int4(x) = to_int4(y)) -> (x = y)))

logic dummy4 : us_character

logic get : 'a map, int -> 'a

logic set : 'a map, int, 'a -> 'a map

axiom Select_eq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)]. ((i = j) -> (get(set(m, i, a),
  j) = a)))))

axiom Select_neq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)| set(m, i, a), get(m, j)].
  ((not (i = j)) -> (get(set(m, i, a), j) = get(m, j))))))

logic attr__ATTRIBUTE_LENGTH : 'a t -> int

axiom attr__ATTRIBUTE_LENGTH_def3 :
  (forall x:'a t. (((first(x) <= last(x)) ->
  (attr__ATTRIBUTE_LENGTH(x) = ((last(x) - first(x)) + 1))) and
  ((not (first(x) <= last(x))) -> (attr__ATTRIBUTE_LENGTH(x) = 0))))

logic bool_eq1 : 'a t, 'a t -> bool

axiom T__ada_array___equal_def :
  (forall a:'a map. forall a1:int. forall a2:int. forall a3:int.
  (forall b:'a map. forall b1:int. forall b2:int. forall b3:int
  [bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2)))))) ->
  (bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true)) and
  ((bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2))))))))))

type t22b

logic mk_t22b : us_character map, int -> t22b

logic elts2 : t22b -> us_character map

axiom elts_def2 :
  (forall u:us_character map. forall u1:int. (elts2(mk_t22b(u, u1)) = u))

logic offset2 : t22b -> int

axiom offset_def2 :
  (forall u:us_character map. forall u1:int. (offset2(mk_t22b(u, u1)) = u1))

axiom t22b_inversion : (forall u:t22b. (u = mk_t22b(elts2(u), offset2(u))))

logic attr__ATTRIBUTE_LAST5 : int

function to_array1(a: t22b) : us_character t = mk_t(elts2(a), offset2(a), 1,
  attr__ATTRIBUTE_LAST5)

function of_array1(a: us_character t) : t22b = mk_t22b(elts(a), offset(a))

logic dummy9 : t22b

logic standard__dir__32__45 : t22b

type positive

logic attr__ATTRIBUTE_MODULUS : int

logic attr__ATTRIBUTE_IMAGE : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check : us_string -> prop

logic attr__ATTRIBUTE_VALUE : us_string -> int

predicate in_range(x: int) = ((1 <= x) and (x <= 2147483647))

logic to_int : positive -> int

logic of_int : int -> positive

predicate eq(x: positive, y: positive) = (to_int(x) = to_int(y))

axiom range_axiom : (forall x:positive. in_range(to_int(x)))

axiom coerce_axiom :
  (forall x:int [to_int(of_int(x))| in_range(x), of_int(x)]. (in_range(x) ->
  (to_int(of_int(x)) = x)))

axiom unicity_axiom :
  (forall x:positive. forall y:positive [to_int(x), to_int(y)].
  ((to_int(x) = to_int(y)) -> (x = y)))

logic dummy : positive

type t19b

logic mk_t19b : us_character map, int -> t19b

logic elts3 : t19b -> us_character map

axiom elts_def3 :
  (forall u:us_character map. forall u1:int. (elts3(mk_t19b(u, u1)) = u))

logic offset3 : t19b -> int

axiom offset_def3 :
  (forall u:us_character map. forall u1:int. (offset3(mk_t19b(u, u1)) = u1))

axiom t19b_inversion : (forall u:t19b. (u = mk_t19b(elts3(u), offset3(u))))

logic attr__ATTRIBUTE_LAST6 : int

function to_array2(a: t19b) : us_character t = mk_t(elts3(a), offset3(a), 1,
  attr__ATTRIBUTE_LAST6)

function of_array2(a: us_character t) : t19b = mk_t19b(elts(a), offset(a))

logic dummy10 : t19b

logic standard__dir__31__40 : t19b

type tS15bP1

logic attr__ATTRIBUTE_FIRST5 : int

logic attr__ATTRIBUTE_LAST7 : int

logic attr__ATTRIBUTE_MODULUS8 : int

logic attr__ATTRIBUTE_IMAGE8 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_string -> prop

logic attr__ATTRIBUTE_VALUE8 : us_string -> int

predicate in_range8(x: int) = ((attr__ATTRIBUTE_FIRST5 <= x) and
  (x <= attr__ATTRIBUTE_LAST7))

logic to_int9 : tS15bP1 -> int

logic of_int9 : int -> tS15bP1

predicate eq8(x: tS15bP1, y: tS15bP1) = (to_int9(x) = to_int9(y))

axiom range_axiom9 : (forall x:tS15bP1. in_range8(to_int9(x)))

axiom coerce_axiom8 :
  (forall x:int [to_int9(of_int9(x))| in_range8(x), of_int9(x)].
  (in_range8(x) -> (to_int9(of_int9(x)) = x)))

axiom unicity_axiom8 :
  (forall x:tS15bP1. forall y:tS15bP1 [to_int9(x), to_int9(y)].
  ((to_int9(x) = to_int9(y)) -> (x = y)))

logic dummy11 : tS15bP1

type integer

logic attr__ATTRIBUTE_MODULUS3 : int

logic attr__ATTRIBUTE_IMAGE3 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_string -> prop

logic attr__ATTRIBUTE_VALUE3 : us_string -> int

predicate in_range3(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int3 : integer -> int

logic of_int3 : int -> integer

predicate eq3(x: integer, y: integer) = (to_int3(x) = to_int3(y))

axiom range_axiom3 : (forall x:integer. in_range3(to_int3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_int3(of_int3(x))| in_range3(x), of_int3(x)].
  (in_range3(x) -> (to_int3(of_int3(x)) = x)))

axiom unicity_axiom3 :
  (forall x:integer. forall y:integer [to_int3(x), to_int3(y)].
  ((to_int3(x) = to_int3(y)) -> (x = y)))

logic dummy3 : integer

logic first1 : range_type -> integer

logic last1 : range_type -> integer

logic mk : int, int -> range_type

axiom range_axiom5 :
  (forall a:range_type. ((to_int3(first1(a)) <= to_int3(last1(a))) ->
  (((1 <= to_int3(first1(a))) and (to_int3(first1(a)) <= 2147483647)) and
  ((1 <= to_int3(last1(a))) and (to_int3(last1(a)) <= 2147483647)))))

type string

function to_array(a: us_string) : us_character t = mk_t(elts1(a), offset1(a),
  to_int3(first1(rt(a))), to_int3(last1(rt(a))))

function of_array(a: us_character t) : us_string = mk___string(elts(a),
  offset(a), mk(first(a), last(a)))

logic dummy5 : us_string

logic name3 : us_string

logic test : us_string, us_string -> us_string

logic r26b : integer

axiom def_axiom : (r26b = of_int3(last(to_array(test(name3,
  mk___string(elts2(standard__dir__32__45), offset2(standard__dir__32__45),
  mk(1, attr__ATTRIBUTE_LAST5)))))))

type tvalueS

logic mk_tvalueS : us_character map, int -> tvalueS

logic elts4 : tvalueS -> us_character map

axiom elts_def4 :
  (forall u:us_character map. forall u1:int. (elts4(mk_tvalueS(u, u1)) = u))

logic offset4 : tvalueS -> int

axiom offset_def4 :
  (forall u:us_character map. forall u1:int. (offset4(mk_tvalueS(u,
  u1)) = u1))

axiom tvalueS_inversion :
  (forall u:tvalueS. (u = mk_tvalueS(elts4(u), offset4(u))))

logic attr__ATTRIBUTE_FIRST6 : int

logic attr__ATTRIBUTE_LAST8 : int

function to_array3(a: tvalueS) : us_character t = mk_t(elts4(a), offset4(a),
  attr__ATTRIBUTE_FIRST6, attr__ATTRIBUTE_LAST8)

function of_array3(a: us_character t) : tvalueS = mk_tvalueS(elts(a),
  offset(a))

logic dummy12 : tvalueS

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int8 : bool -> int

axiom to_int_def :
  (forall b:bool. (((b = true) -> (to_int8(b) = 1)) and ((not (b = true)) ->
  (to_int8(b) = 0))))

logic of_int8 : int -> bool

axiom of_int_def :
  (forall i:int. (((i = 0) -> (of_int8(i) = false)) and ((not (i = 0)) ->
  (of_int8(i) = true))))

type tTtest_valueSP1

logic attr__ATTRIBUTE_FIRST7 : int

logic attr__ATTRIBUTE_LAST9 : int

logic attr__ATTRIBUTE_MODULUS9 : int

logic attr__ATTRIBUTE_IMAGE9 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_string -> prop

logic attr__ATTRIBUTE_VALUE9 : us_string -> int

predicate in_range9(x: int) = ((attr__ATTRIBUTE_FIRST7 <= x) and
  (x <= attr__ATTRIBUTE_LAST9))

logic to_int10 : tTtest_valueSP1 -> int

logic of_int10 : int -> tTtest_valueSP1

predicate eq9(x: tTtest_valueSP1, y: tTtest_valueSP1) =
  (to_int10(x) = to_int10(y))

axiom range_axiom10 : (forall x:tTtest_valueSP1. in_range9(to_int10(x)))

axiom coerce_axiom9 :
  (forall x:int [to_int10(of_int10(x))| in_range9(x), of_int10(x)].
  (in_range9(x) -> (to_int10(of_int10(x)) = x)))

axiom unicity_axiom9 :
  (forall x:tTtest_valueSP1. forall y:tTtest_valueSP1 [to_int10(x),
  to_int10(y)]. ((to_int10(x) = to_int10(y)) -> (x = y)))

logic dummy13 : tTtest_valueSP1

logic normalize_pathname : us_string, us_string, bool -> us_string

logic value : tvalueS

axiom def_axiom1 :
  (value = mk_tvalueS(elts(to_array(normalize_pathname(name3,
  mk___string(elts3(standard__dir__31__40), offset3(standard__dir__31__40),
  mk(1, attr__ATTRIBUTE_LAST6)), of_int8(1)))),
  offset(to_array(normalize_pathname(name3,
  mk___string(elts3(standard__dir__31__40), offset3(standard__dir__31__40),
  mk(1, attr__ATTRIBUTE_LAST6)), of_int8(1))))))

type tresultP1

logic attr__ATTRIBUTE_LAST10 : int

logic attr__ATTRIBUTE_MODULUS10 : int

logic attr__ATTRIBUTE_IMAGE10 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_string -> prop

logic attr__ATTRIBUTE_VALUE10 : us_string -> int

predicate in_range10(x: int) = ((1 <= x) and (x <= attr__ATTRIBUTE_LAST10))

logic to_int11 : tresultP1 -> int

logic of_int11 : int -> tresultP1

predicate eq10(x: tresultP1, y: tresultP1) = (to_int11(x) = to_int11(y))

axiom range_axiom11 : (forall x:tresultP1. in_range10(to_int11(x)))

axiom coerce_axiom10 :
  (forall x:int [to_int11(of_int11(x))| in_range10(x), of_int11(x)].
  (in_range10(x) -> (to_int11(of_int11(x)) = x)))

axiom unicity_axiom10 :
  (forall x:tresultP1. forall y:tresultP1 [to_int11(x), to_int11(y)].
  ((to_int11(x) = to_int11(y)) -> (x = y)))

logic dummy14 : tresultP1

logic r20b : integer

axiom def_axiom2 : (r20b = of_int3(first(to_array(normalize_pathname(name3,
  mk___string(elts3(standard__dir__31__40), offset3(standard__dir__31__40),
  mk(1, attr__ATTRIBUTE_LAST6)), of_int8(1))))))

logic is_valid : us_string -> bool

axiom def_axiom3 :
  (forall dir__is_valid__name:us_character map.
  forall dir__is_valid__name1:int. forall dir__is_valid__name2:range_type
  [is_valid(mk___string(dir__is_valid__name, dir__is_valid__name1,
  dir__is_valid__name2))]. (is_valid(mk___string(dir__is_valid__name,
  dir__is_valid__name1, dir__is_valid__name2)) = true))

type ttest_valueS

logic mk_ttest_valueS : us_character map, int -> ttest_valueS

logic elts5 : ttest_valueS -> us_character map

axiom elts_def5 :
  (forall u:us_character map. forall u1:int. (elts5(mk_ttest_valueS(u,
  u1)) = u))

logic offset5 : ttest_valueS -> int

axiom offset_def5 :
  (forall u:us_character map. forall u1:int. (offset5(mk_ttest_valueS(u,
  u1)) = u1))

axiom ttest_valueS_inversion :
  (forall u:ttest_valueS. (u = mk_ttest_valueS(elts5(u), offset5(u))))

logic attr__ATTRIBUTE_FIRST8 : int

logic attr__ATTRIBUTE_LAST11 : int

function to_array4(a: ttest_valueS) : us_character t = mk_t(elts5(a),
  offset5(a), attr__ATTRIBUTE_FIRST8, attr__ATTRIBUTE_LAST11)

function of_array4(a: us_character t) : ttest_valueS =
  mk_ttest_valueS(elts(a), offset(a))

logic dummy15 : ttest_valueS

logic test_value : ttest_valueS

axiom def_axiom4 : (test_value = mk_ttest_valueS(elts(to_array(test(name3,
  mk___string(elts2(standard__dir__32__45), offset2(standard__dir__32__45),
  mk(1, attr__ATTRIBUTE_LAST5))))), offset(to_array(test(name3,
  mk___string(elts2(standard__dir__32__45), offset2(standard__dir__32__45),
  mk(1, attr__ATTRIBUTE_LAST5)))))))

logic r21b : integer

axiom def_axiom5 : (r21b = of_int3(last(to_array(normalize_pathname(name3,
  mk___string(elts3(standard__dir__31__40), offset3(standard__dir__31__40),
  mk(1, attr__ATTRIBUTE_LAST6)), of_int8(1))))))

type tTvalueSP1

logic attr__ATTRIBUTE_FIRST9 : int

logic attr__ATTRIBUTE_LAST12 : int

logic attr__ATTRIBUTE_MODULUS11 : int

logic attr__ATTRIBUTE_IMAGE11 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_string -> prop

logic attr__ATTRIBUTE_VALUE11 : us_string -> int

predicate in_range11(x: int) = ((attr__ATTRIBUTE_FIRST9 <= x) and
  (x <= attr__ATTRIBUTE_LAST12))

logic to_int12 : tTvalueSP1 -> int

logic of_int12 : int -> tTvalueSP1

predicate eq11(x: tTvalueSP1, y: tTvalueSP1) = (to_int12(x) = to_int12(y))

axiom range_axiom12 : (forall x:tTvalueSP1. in_range11(to_int12(x)))

axiom coerce_axiom11 :
  (forall x:int [to_int12(of_int12(x))| in_range11(x), of_int12(x)].
  (in_range11(x) -> (to_int12(of_int12(x)) = x)))

axiom unicity_axiom11 :
  (forall x:tTvalueSP1. forall y:tTvalueSP1 [to_int12(x), to_int12(y)].
  ((to_int12(x) = to_int12(y)) -> (x = y)))

logic dummy16 : tTvalueSP1

logic r25b : integer

axiom def_axiom6 : (r25b = of_int3(first(to_array(test(name3,
  mk___string(elts2(standard__dir__32__45), offset2(standard__dir__32__45),
  mk(1, attr__ATTRIBUTE_LAST5)))))))

goal WP_parameter_def3 :
  (((first(to_array(name3)) = attr__ATTRIBUTE_FIRST5) and
  (last(to_array(name3)) = attr__ATTRIBUTE_LAST7)) ->
  ((is_valid(name3) = true) ->
  ((of_int3(first(to_array(normalize_pathname(name3,
  mk___string(elts3(standard__dir__31__40), offset3(standard__dir__31__40),
  mk(1, attr__ATTRIBUTE_LAST6)), of_int8(1))))) = r20b) ->
  ((of_int3(last(to_array(normalize_pathname(name3,
  mk___string(elts3(standard__dir__31__40), offset3(standard__dir__31__40),
  mk(1, attr__ATTRIBUTE_LAST6)), of_int8(1))))) = r21b) ->
  ((to_int3(r20b) <= to_int3(r21b)) -> ((1 <= to_int3(r20b)) and
  (to_int3(r21b) <= 2147483647)))))))

