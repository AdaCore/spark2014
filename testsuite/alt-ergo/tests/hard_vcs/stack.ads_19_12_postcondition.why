(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_character

type us_private

type us_type_of_heap

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

type range_type

type us_string

logic mk___string : us_character map, int, range_type -> us_string

logic elts1 : us_string -> us_character map

axiom elts_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (elts1(mk___string(u, u1, u2)) = u))

logic offset1 : us_string -> int

axiom offset_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (offset1(mk___string(u, u1, u2)) = u1))

logic rt : us_string -> range_type

axiom rt_def :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (rt(mk___string(u, u1, u2)) = u2))

axiom us_string_inversion :
  (forall u:us_string. (u = mk___string(elts1(u), offset1(u), rt(u))))

logic abs : int -> int

axiom abs_def :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type size_t

logic attr__ATTRIBUTE_MODULUS2 : int

logic attr__ATTRIBUTE_IMAGE2 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_string -> prop

logic attr__ATTRIBUTE_VALUE2 : us_string -> int

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

logic to_int2 : size_t -> int

logic of_int2 : int -> size_t

predicate eq2(x: size_t, y: size_t) = (to_int2(x) = to_int2(y))

axiom range_axiom2 : (forall x:size_t. in_range2(to_int2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_int2(of_int2(x))| in_range2(x), of_int2(x)].
  (in_range2(x) -> (to_int2(of_int2(x)) = x)))

axiom unicity_axiom2 :
  (forall x:size_t. forall y:size_t [to_int2(x), to_int2(y)].
  ((to_int2(x) = to_int2(y)) -> (x = y)))

logic dummy2 : size_t

type element_t

logic attr__ATTRIBUTE_MODULUS3 : int

logic attr__ATTRIBUTE_IMAGE3 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_string -> prop

logic attr__ATTRIBUTE_VALUE3 : us_string -> int

predicate in_range3(x: int) = (((-1) <= x) and (x <= 2147483647))

logic to_int3 : element_t -> int

logic of_int3 : int -> element_t

predicate eq3(x: element_t, y: element_t) = (to_int3(x) = to_int3(y))

axiom range_axiom3 : (forall x:element_t. in_range3(to_int3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_int3(of_int3(x))| in_range3(x), of_int3(x)].
  (in_range3(x) -> (to_int3(of_int3(x)) = x)))

axiom unicity_axiom3 :
  (forall x:element_t. forall y:element_t [to_int3(x), to_int3(y)].
  ((to_int3(x) = to_int3(y)) -> (x = y)))

logic dummy3 : element_t

logic get : 'a map, int -> 'a

logic set : 'a map, int, 'a -> 'a map

axiom Select_eq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)]. ((i = j) -> (get(set(m, i, a),
  j) = a)))))

axiom Select_neq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)| set(m, i, a), get(m, j)].
  ((not (i = j)) -> (get(set(m, i, a), j) = get(m, j))))))

logic attr__ATTRIBUTE_LENGTH : 'a t -> int

axiom attr__ATTRIBUTE_LENGTH_def2 :
  (forall x:'a t. (((first(x) <= last(x)) ->
  (attr__ATTRIBUTE_LENGTH(x) = ((last(x) - first(x)) + 1))) and
  ((not (first(x) <= last(x))) -> (attr__ATTRIBUTE_LENGTH(x) = 0))))

logic bool_eq1 : 'a t, 'a t -> bool

axiom T__ada_array___equal_def :
  (forall a:'a map. forall a1:int. forall a2:int. forall a3:int.
  (forall b:'a map. forall b1:int. forall b2:int. forall b3:int
  [bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2)))))) ->
  (bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true)) and
  ((bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2))))))))))

type stack_t

logic mk_stack_t : element_t map, int -> stack_t

logic elts2 : stack_t -> element_t map

axiom elts_def4 :
  (forall u:element_t map. forall u1:int. (elts2(mk_stack_t(u, u1)) = u))

logic offset2 : stack_t -> int

axiom offset_def4 :
  (forall u:element_t map. forall u1:int. (offset2(mk_stack_t(u, u1)) = u1))

axiom stack_t_inversion2 :
  (forall u:stack_t. (u = mk_stack_t(elts2(u), offset2(u))))

function to_array(a: stack_t) : element_t t = mk_t(elts2(a), offset2(a), 1,
  100)

function of_array(a: element_t t) : stack_t = mk_stack_t(elts(a), offset(a))

logic dummy4 : stack_t

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int6 : bool -> int

axiom to_int_def :
  (forall b:bool. (((b = true) -> (to_int6(b) = 1)) and ((not (b = true)) ->
  (to_int6(b) = 0))))

logic of_int6 : int -> bool

axiom of_int_def :
  (forall i:int. (((i = 0) -> (of_int6(i) = false)) and ((not (i = 0)) ->
  (of_int6(i) = true))))

logic valid : stack_t, size_t -> bool

type t14s

logic attr__ATTRIBUTE_FIRST : int

logic attr__ATTRIBUTE_MODULUS4 : int

logic attr__ATTRIBUTE_IMAGE4 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_string -> prop

logic attr__ATTRIBUTE_VALUE4 : us_string -> int

predicate in_range4(x: int) = ((attr__ATTRIBUTE_FIRST <= x) and (x <= 100))

logic to_int4 : t14s -> int

logic of_int4 : int -> t14s

predicate eq4(x: t14s, y: t14s) = (to_int4(x) = to_int4(y))

axiom range_axiom4 : (forall x:t14s. in_range4(to_int4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_int4(of_int4(x))| in_range4(x), of_int4(x)].
  (in_range4(x) -> (to_int4(of_int4(x)) = x)))

axiom unicity_axiom4 :
  (forall x:t14s. forall y:t14s [to_int4(x), to_int4(y)].
  ((to_int4(x) = to_int4(y)) -> (x = y)))

logic dummy5 : t14s

type integer

logic attr__ATTRIBUTE_MODULUS1 : int

logic attr__ATTRIBUTE_IMAGE1 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_string -> prop

logic attr__ATTRIBUTE_VALUE1 : us_string -> int

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int1 : integer -> int

logic of_int1 : int -> integer

predicate eq1(x: integer, y: integer) = (to_int1(x) = to_int1(y))

axiom range_axiom1 : (forall x:integer. in_range1(to_int1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_int1(of_int1(x))| in_range1(x), of_int1(x)].
  (in_range1(x) -> (to_int1(of_int1(x)) = x)))

axiom unicity_axiom1 :
  (forall x:integer. forall y:integer [to_int1(x), to_int1(y)].
  ((to_int1(x) = to_int1(y)) -> (x = y)))

logic dummy1 : integer

type t12s

logic attr__ATTRIBUTE_LAST : int

logic attr__ATTRIBUTE_MODULUS5 : int

logic attr__ATTRIBUTE_IMAGE5 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_string -> prop

logic attr__ATTRIBUTE_VALUE5 : us_string -> int

predicate in_range5(x: int) = ((1 <= x) and (x <= attr__ATTRIBUTE_LAST))

logic to_int5 : t12s -> int

logic of_int5 : int -> t12s

predicate eq5(x: t12s, y: t12s) = (to_int5(x) = to_int5(y))

axiom range_axiom5 : (forall x:t12s. in_range5(to_int5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_int5(of_int5(x))| in_range5(x), of_int5(x)].
  (in_range5(x) -> (to_int5(of_int5(x)) = x)))

axiom unicity_axiom5 :
  (forall x:t12s. forall y:t12s [to_int5(x), to_int5(y)].
  ((to_int5(x) = to_int5(y)) -> (x = y)))

logic dummy6 : t12s

axiom def_axiom :
  (forall stack__valid__t:element_t map. forall stack__valid__t1:int.
  (forall stack__valid__s:size_t [valid(mk_stack_t(stack__valid__t,
  stack__valid__t1), stack__valid__s)]. (((valid(mk_stack_t(stack__valid__t,
  stack__valid__t1), stack__valid__s) = true) ->
  ((forall stack__valid__L11s__i:int. (((1 <= stack__valid__L11s__i) and
   (stack__valid__L11s__i <= to_int2(stack__valid__s))) ->
   ((0 <= to_int3(get(stack__valid__t,
   ((stack__valid__L11s__i + stack__valid__t1) - 1)))) and
   (to_int3(get(stack__valid__t,
   ((stack__valid__L11s__i + stack__valid__t1) - 1))) <= 2147483647)))) and
  (forall stack__valid__L13s__i:int.
  ((((to_int2(stack__valid__s) + 1) <= stack__valid__L13s__i) and
  (stack__valid__L13s__i <= 100)) -> (to_int3(get(stack__valid__t,
  ((stack__valid__L13s__i + stack__valid__t1) - 1))) = (-1)))))) and
  (((forall stack__valid__L11s__i:int. (((1 <= stack__valid__L11s__i) and
    (stack__valid__L11s__i <= to_int2(stack__valid__s))) ->
    ((0 <= to_int3(get(stack__valid__t,
    ((stack__valid__L11s__i + stack__valid__t1) - 1)))) and
    (to_int3(get(stack__valid__t,
    ((stack__valid__L11s__i + stack__valid__t1) - 1))) <= 2147483647)))) and
  (forall stack__valid__L13s__i:int.
  ((((to_int2(stack__valid__s) + 1) <= stack__valid__L13s__i) and
  (stack__valid__L13s__i <= 100)) -> (to_int3(get(stack__valid__t,
  ((stack__valid__L13s__i + stack__valid__t1) - 1))) = (-1))))) ->
  (valid(mk_stack_t(stack__valid__t, stack__valid__t1),
  stack__valid__s) = true)))))

type positive

logic attr__ATTRIBUTE_MODULUS6 : int

logic attr__ATTRIBUTE_IMAGE6 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_string -> prop

logic attr__ATTRIBUTE_VALUE6 : us_string -> int

predicate in_range6(x: int) = ((1 <= x) and (x <= 2147483647))

logic to_int7 : positive -> int

logic of_int7 : int -> positive

predicate eq6(x: positive, y: positive) = (to_int7(x) = to_int7(y))

axiom range_axiom6 : (forall x:positive. in_range6(to_int7(x)))

axiom coerce_axiom6 :
  (forall x:int [to_int7(of_int7(x))| in_range6(x), of_int7(x)].
  (in_range6(x) -> (to_int7(of_int7(x)) = x)))

axiom unicity_axiom6 :
  (forall x:positive. forall y:positive [to_int7(x), to_int7(y)].
  ((to_int7(x) = to_int7(y)) -> (x = y)))

logic dummy7 : positive

type t1b

logic attr__ATTRIBUTE_MODULUS7 : int

logic attr__ATTRIBUTE_IMAGE7 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_string -> prop

logic attr__ATTRIBUTE_VALUE7 : us_string -> int

predicate in_range7(x: int) = ((1 <= x) and (x <= 100))

logic to_int8 : t1b -> int

logic of_int8 : int -> t1b

predicate eq7(x: t1b, y: t1b) = (to_int8(x) = to_int8(y))

axiom range_axiom7 : (forall x:t1b. in_range7(to_int8(x)))

axiom coerce_axiom7 :
  (forall x:int [to_int8(of_int8(x))| in_range7(x), of_int8(x)].
  (in_range7(x) -> (to_int8(of_int8(x)) = x)))

axiom unicity_axiom7 :
  (forall x:t1b. forall y:t1b [to_int8(x), to_int8(y)].
  ((to_int8(x) = to_int8(y)) -> (x = y)))

logic dummy8 : t1b

type index_t

logic attr__ATTRIBUTE_MODULUS : int

logic attr__ATTRIBUTE_IMAGE : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check : us_string -> prop

logic attr__ATTRIBUTE_VALUE : us_string -> int

predicate in_range(x: int) = ((1 <= x) and (x <= 100))

logic to_int : index_t -> int

logic of_int : int -> index_t

predicate eq(x: index_t, y: index_t) = (to_int(x) = to_int(y))

axiom range_axiom : (forall x:index_t. in_range(to_int(x)))

axiom coerce_axiom :
  (forall x:int [to_int(of_int(x))| in_range(x), of_int(x)]. (in_range(x) ->
  (to_int(of_int(x)) = x)))

axiom unicity_axiom :
  (forall x:index_t. forall y:index_t [to_int(x), to_int(y)].
  ((to_int(x) = to_int(y)) -> (x = y)))

logic dummy : index_t

logic t3 : stack_t

type t3b

logic attr__ATTRIBUTE_LAST1 : int

logic attr__ATTRIBUTE_MODULUS8 : int

logic attr__ATTRIBUTE_IMAGE8 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_string -> prop

logic attr__ATTRIBUTE_VALUE8 : us_string -> int

predicate in_range8(x: int) = ((1 <= x) and (x <= attr__ATTRIBUTE_LAST1))

logic to_int9 : t3b -> int

logic of_int9 : int -> t3b

predicate eq8(x: t3b, y: t3b) = (to_int9(x) = to_int9(y))

axiom range_axiom8 : (forall x:t3b. in_range8(to_int9(x)))

axiom coerce_axiom8 :
  (forall x:int [to_int9(of_int9(x))| in_range8(x), of_int9(x)].
  (in_range8(x) -> (to_int9(of_int9(x)) = x)))

axiom unicity_axiom8 :
  (forall x:t3b. forall y:t3b [to_int9(x), to_int9(y)].
  ((to_int9(x) = to_int9(y)) -> (x = y)))

logic dummy9 : t3b

goal WP_parameter_def2 :
  (forall ustemp_standard__stack_0:int. forall ustemp_standard__stack_1:int.
  forall stack__size__L_1__index:int. forall stack__size__L_1__index1:int.
  forall stack__size___result:size_t. forall stack__size___result1:size_t.
  forall stack__size__L_1__index2:int. forall rho:size_t. forall rho1:int.
  forall rho2:size_t. forall rho3:int. forall stack__size___result2:size_t.
  forall stack__size___result3:size_t.
  ((exists stack__size__L6s__s:int. (((0 <= stack__size__L6s__s) and
   (stack__size__L6s__s <= 100)) and (valid(t3,
   of_int2(stack__size__L6s__s)) = true))) ->
  (forall result:size_t.
  ((((((((((ustemp_standard__stack_0 <= stack__size__L_1__index) and
  (stack__size__L_1__index <= ustemp_standard__stack_1)) and
  ((forall stack__size__L_1__L4b__i:int.
   (((1 <= stack__size__L_1__L4b__i) and
   (stack__size__L_1__L4b__i <= (stack__size__L_1__index1 - 1))) ->
   (not (to_int3(get(elts2(t3),
   ((stack__size__L_1__L4b__i + offset2(t3)) - 1))) = (-1))))) and
  ((((to_int3(get(elts2(t3),
  ((stack__size__L_1__index1 + offset2(t3)) - 1))) = (-1)) and
  (stack__size___result = of_int2((stack__size__L_1__index1 - 1)))) and
  ((rho = stack__size___result) and (rho1 = stack__size__L_1__index1))) and
  ((1 <= stack__size__L_1__index1) and
  (stack__size__L_1__index1 <= 100))))) and
  (stack__size__L_1__index = ustemp_standard__stack_0)) and
  (ustemp_standard__stack_1 = 100)) and (ustemp_standard__stack_0 = 1)) and
  ((stack__size___result3 = rho) and (stack__size__L_1__index2 = rho1))) or
  ((stack__size___result3 = of_int2(100)) and
  ((stack__size__L_1__index = 1) and ((((1 <= stack__size__L_1__index) and
  (stack__size__L_1__index <= 100)) and
  ((((forall stack__size__L_1__L4b__i:int.
     (((1 <= stack__size__L_1__L4b__i) and
     (stack__size__L_1__L4b__i <= (stack__size__L_1__index1 - 1))) ->
     (not (to_int3(get(elts2(t3),
     ((stack__size__L_1__L4b__i + offset2(t3)) - 1))) = (-1))))) and
  false) and ((stack__size___result = rho2) and
  (stack__size__L_1__index2 = rho3))) or
  ((forall stack__size__L_1__L4b__i:int.
   (((1 <= stack__size__L_1__L4b__i) and
   (stack__size__L_1__L4b__i <= (stack__size__L_1__index1 - 1))) ->
   (not (to_int3(get(elts2(t3),
   ((stack__size__L_1__L4b__i + offset2(t3)) - 1))) = (-1))))) and
  ((((not (stack__size__L_1__index2 <= 100)) and
  (stack__size__L_1__index2 = (stack__size__L_1__index1 + 1))) and
  ((not (to_int3(get(elts2(t3),
  ((stack__size__L_1__index1 + offset2(t3)) - 1))) = (-1))) and
  (stack__size___result = stack__size___result1))) and
  ((1 <= stack__size__L_1__index1) and
  (stack__size__L_1__index1 <= 100)))))) or
  ((not ((1 <= stack__size__L_1__index) and
  (stack__size__L_1__index <= 100))) and
  ((stack__size___result = stack__size___result2) and
  (stack__size__L_1__index2 = stack__size__L_1__index))))))) and
  (result = stack__size___result3)) -> (valid(t3,
  stack__size___result3) = true)))))

