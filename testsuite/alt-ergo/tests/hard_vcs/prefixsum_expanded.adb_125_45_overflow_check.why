(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_character

type us_private

type us_type_of_heap

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

type range_type

type us_string

logic mk___string : us_character map, int, range_type -> us_string

logic elts1 : us_string -> us_character map

axiom elts_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (elts1(mk___string(u, u1, u2)) = u))

logic offset1 : us_string -> int

axiom offset_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (offset1(mk___string(u, u1, u2)) = u1))

logic rt : us_string -> range_type

axiom rt_def :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (rt(mk___string(u, u1, u2)) = u2))

axiom us_string_inversion :
  (forall u:us_string. (u = mk___string(elts1(u), offset1(u), rt(u))))

logic abs : int -> int

axiom abs_def :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type integer

logic attr__ATTRIBUTE_MODULUS1 : int

logic attr__ATTRIBUTE_IMAGE1 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_string -> prop

logic attr__ATTRIBUTE_VALUE1 : us_string -> int

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int1 : integer -> int

logic of_int1 : int -> integer

predicate eq1(x: integer, y: integer) = (to_int1(x) = to_int1(y))

axiom range_axiom1 : (forall x:integer. in_range1(to_int1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_int1(of_int1(x))| in_range1(x), of_int1(x)].
  (in_range1(x) -> (to_int1(of_int1(x)) = x)))

axiom unicity_axiom1 :
  (forall x:integer. forall y:integer [to_int1(x), to_int1(y)].
  ((to_int1(x) = to_int1(y)) -> (x = y)))

logic dummy1 : integer

type t6

type positive

logic attr__ATTRIBUTE_MODULUS : int

logic attr__ATTRIBUTE_IMAGE : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check : us_string -> prop

logic attr__ATTRIBUTE_VALUE : us_string -> int

predicate in_range(x: int) = ((1 <= x) and (x <= 2147483647))

logic to_int : positive -> int

logic of_int : int -> positive

predicate eq(x: positive, y: positive) = (to_int(x) = to_int(y))

axiom range_axiom : (forall x:positive. in_range(to_int(x)))

axiom coerce_axiom :
  (forall x:int [to_int(of_int(x))| in_range(x), of_int(x)]. (in_range(x) ->
  (to_int(of_int(x)) = x)))

axiom unicity_axiom :
  (forall x:positive. forall y:positive [to_int(x), to_int(y)].
  ((to_int(x) = to_int(y)) -> (x = y)))

logic dummy : positive

logic get : 'a map, int -> 'a

logic set : 'a map, int, 'a -> 'a map

axiom Select_eq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a1:'a [get(set(m, i, a1), j)]. ((i = j) -> (get(set(m, i, a1),
  j) = a1)))))

axiom Select_neq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a1:'a [get(set(m, i, a1), j)| set(m, i, a1), get(m, j)].
  ((not (i = j)) -> (get(set(m, i, a1), j) = get(m, j))))))

logic attr__ATTRIBUTE_LENGTH : 'a t -> int

axiom attr__ATTRIBUTE_LENGTH_def1 :
  (forall x:'a t. (((first(x) <= last(x)) ->
  (attr__ATTRIBUTE_LENGTH(x) = ((last(x) - first(x)) + 1))) and
  ((not (first(x) <= last(x))) -> (attr__ATTRIBUTE_LENGTH(x) = 0))))

logic bool_eq1 : 'a t, 'a t -> bool

axiom T__ada_array___equal_def :
  (forall a1:'a map. forall a2:int. forall a3:int. forall a4:int.
  (forall b1:'a map. forall b2:int. forall b3:int. forall b4:int
  [bool_eq1(mk_t(a1, a2, a3, a4), mk_t(b1, b2, b3, b4))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a1, a2, a3,
  a4)) = attr__ATTRIBUTE_LENGTH(mk_t(b1, b2, b3, b4))) and
  (forall i:int [get(elts(mk_t(a1, a2, a3, a4)), ((i + offset(mk_t(a1, a2,
  a3, a4))) - first(mk_t(a1, a2, a3, a4))))]. (((a3 <= i) and (i <= a4)) ->
  (get(a1, ((i + a2) - a3)) = get(b1, ((((b3 - a3) + i) + b2) - b3)))))) ->
  (bool_eq1(mk_t(a1, a2, a3, a4), mk_t(b1, b2, b3, b4)) = true)) and
  ((bool_eq1(mk_t(a1, a2, a3, a4), mk_t(b1, b2, b3, b4)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a1, a2, a3,
  a4)) = attr__ATTRIBUTE_LENGTH(mk_t(b1, b2, b3, b4))) and
  (forall i:int [get(elts(mk_t(a1, a2, a3, a4)), ((i + offset(mk_t(a1, a2,
  a3, a4))) - first(mk_t(a1, a2, a3, a4))))]. (((a3 <= i) and (i <= a4)) ->
  (get(a1, ((i + a2) - a3)) = get(b1, ((((b3 - a3) + i) + b2) - b3))))))))))

type input

logic mk_input : integer map, int -> input

logic elts2 : input -> integer map

axiom elts_def3 :
  (forall u:integer map. forall u1:int. (elts2(mk_input(u, u1)) = u))

logic offset2 : input -> int

axiom offset_def3 :
  (forall u:integer map. forall u1:int. (offset2(mk_input(u, u1)) = u1))

axiom input_inversion1 :
  (forall u:input. (u = mk_input(elts2(u), offset2(u))))

function to_array(a1: input) : integer t = mk_t(elts2(a1), offset2(a1), 0, 7)

function of_array(a1: integer t) : input = mk_input(elts(a1), offset(a1))

logic dummy2 : input

function ite(b1: bool, x: 'a, y: 'a) : 'a = match_bool(b1, x, y)

logic to_int2 : bool -> int

axiom to_int_def :
  (forall b1:bool. (((b1 = true) -> (to_int2(b1) = 1)) and
  ((not (b1 = true)) -> (to_int2(b1) = 0))))

logic of_int2 : int -> bool

axiom of_int_def :
  (forall i:int. (((i = 0) -> (of_int2(i) = false)) and ((not (i = 0)) ->
  (of_int2(i) = true))))

logic all_elements_in : input, positive -> bool

type t2s

logic attr__ATTRIBUTE_MODULUS2 : int

logic attr__ATTRIBUTE_IMAGE2 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_string -> prop

logic attr__ATTRIBUTE_VALUE2 : us_string -> int

predicate in_range2(x: int) = ((0 <= x) and (x <= 7))

logic to_int3 : t2s -> int

logic of_int3 : int -> t2s

predicate eq2(x: t2s, y: t2s) = (to_int3(x) = to_int3(y))

axiom range_axiom2 : (forall x:t2s. in_range2(to_int3(x)))

axiom coerce_axiom2 :
  (forall x:int [to_int3(of_int3(x))| in_range2(x), of_int3(x)].
  (in_range2(x) -> (to_int3(of_int3(x)) = x)))

axiom unicity_axiom2 :
  (forall x:t2s. forall y:t2s [to_int3(x), to_int3(y)].
  ((to_int3(x) = to_int3(y)) -> (x = y)))

logic dummy3 : t2s

axiom def_axiom :
  (forall prefixsum_expanded__all_elements_in__a:integer map.
  forall prefixsum_expanded__all_elements_in__a1:int.
  (forall prefixsum_expanded__all_elements_in__max:positive
  [all_elements_in(mk_input(prefixsum_expanded__all_elements_in__a,
  prefixsum_expanded__all_elements_in__a1),
  prefixsum_expanded__all_elements_in__max)].
  (((all_elements_in(mk_input(prefixsum_expanded__all_elements_in__a,
  prefixsum_expanded__all_elements_in__a1),
  prefixsum_expanded__all_elements_in__max) = true) ->
  (forall prefixsum_expanded__all_elements_in__L27s__k:int.
  (((0 <= prefixsum_expanded__all_elements_in__L27s__k) and
  (prefixsum_expanded__all_elements_in__L27s__k <= 7)) ->
  (((-to_int(prefixsum_expanded__all_elements_in__max)) <= to_int1(get(prefixsum_expanded__all_elements_in__a,
  ((prefixsum_expanded__all_elements_in__L27s__k + prefixsum_expanded__all_elements_in__a1) - 0)))) and
  (to_int1(get(prefixsum_expanded__all_elements_in__a,
  ((prefixsum_expanded__all_elements_in__L27s__k + prefixsum_expanded__all_elements_in__a1) - 0))) <= to_int(prefixsum_expanded__all_elements_in__max)))))) and
  ((forall prefixsum_expanded__all_elements_in__L27s__k:int.
   (((0 <= prefixsum_expanded__all_elements_in__L27s__k) and
   (prefixsum_expanded__all_elements_in__L27s__k <= 7)) ->
   (((-to_int(prefixsum_expanded__all_elements_in__max)) <= to_int1(get(prefixsum_expanded__all_elements_in__a,
   ((prefixsum_expanded__all_elements_in__L27s__k + prefixsum_expanded__all_elements_in__a1) - 0)))) and
   (to_int1(get(prefixsum_expanded__all_elements_in__a,
   ((prefixsum_expanded__all_elements_in__L27s__k + prefixsum_expanded__all_elements_in__a1) - 0))) <= to_int(prefixsum_expanded__all_elements_in__max))))) ->
  (all_elements_in(mk_input(prefixsum_expanded__all_elements_in__a,
  prefixsum_expanded__all_elements_in__a1),
  prefixsum_expanded__all_elements_in__max) = true)))))

logic intermediate_form : input, input -> bool

type index

logic attr__ATTRIBUTE_MODULUS3 : int

logic attr__ATTRIBUTE_IMAGE3 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_string -> prop

logic attr__ATTRIBUTE_VALUE3 : us_string -> int

predicate in_range3(x: int) = ((0 <= x) and (x <= 7))

logic to_int4 : index -> int

logic of_int4 : int -> index

predicate eq3(x: index, y: index) = (to_int4(x) = to_int4(y))

axiom range_axiom3 : (forall x:index. in_range3(to_int4(x)))

axiom coerce_axiom3 :
  (forall x:int [to_int4(of_int4(x))| in_range3(x), of_int4(x)].
  (in_range3(x) -> (to_int4(of_int4(x)) = x)))

axiom unicity_axiom3 :
  (forall x:index. forall y:index [to_int4(x), to_int4(y)].
  ((to_int4(x) = to_int4(y)) -> (x = y)))

logic dummy4 : index

axiom def_axiom2 :
  (forall prefixsum_expanded__intermediate_form__a:integer map.
  forall prefixsum_expanded__intermediate_form__a1:int.
  forall prefixsum_expanded__intermediate_form__b:integer map.
  forall prefixsum_expanded__intermediate_form__b1:int
  [intermediate_form(mk_input(prefixsum_expanded__intermediate_form__a,
  prefixsum_expanded__intermediate_form__a1),
  mk_input(prefixsum_expanded__intermediate_form__b,
  prefixsum_expanded__intermediate_form__b1))].
  ((intermediate_form(mk_input(prefixsum_expanded__intermediate_form__a,
  prefixsum_expanded__intermediate_form__a1),
  mk_input(prefixsum_expanded__intermediate_form__b,
  prefixsum_expanded__intermediate_form__b1)) = true) <->
  ((((((((to_int1(get(prefixsum_expanded__intermediate_form__a,
  ((7 + prefixsum_expanded__intermediate_form__a1) - 0))) = (((((((to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((0 + prefixsum_expanded__intermediate_form__b1) - 0))) + to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((1 + prefixsum_expanded__intermediate_form__b1) - 0)))) + to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((2 + prefixsum_expanded__intermediate_form__b1) - 0)))) + to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((3 + prefixsum_expanded__intermediate_form__b1) - 0)))) + to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((4 + prefixsum_expanded__intermediate_form__b1) - 0)))) + to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((5 + prefixsum_expanded__intermediate_form__b1) - 0)))) + to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((6 + prefixsum_expanded__intermediate_form__b1) - 0)))) + to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((7 + prefixsum_expanded__intermediate_form__b1) - 0))))) and
  (to_int1(get(prefixsum_expanded__intermediate_form__a,
  ((3 + prefixsum_expanded__intermediate_form__a1) - 0))) = (((to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((3 + prefixsum_expanded__intermediate_form__b1) - 0))) + to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((2 + prefixsum_expanded__intermediate_form__b1) - 0)))) + to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((1 + prefixsum_expanded__intermediate_form__b1) - 0)))) + to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((0 + prefixsum_expanded__intermediate_form__b1) - 0)))))) and
  (to_int1(get(prefixsum_expanded__intermediate_form__a,
  ((5 + prefixsum_expanded__intermediate_form__a1) - 0))) = (to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((5 + prefixsum_expanded__intermediate_form__b1) - 0))) + to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((4 + prefixsum_expanded__intermediate_form__b1) - 0)))))) and
  (to_int1(get(prefixsum_expanded__intermediate_form__a,
  ((1 + prefixsum_expanded__intermediate_form__a1) - 0))) = (to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((1 + prefixsum_expanded__intermediate_form__b1) - 0))) + to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((0 + prefixsum_expanded__intermediate_form__b1) - 0)))))) and
  (to_int1(get(prefixsum_expanded__intermediate_form__a,
  ((0 + prefixsum_expanded__intermediate_form__a1) - 0))) = to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((0 + prefixsum_expanded__intermediate_form__b1) - 0))))) and
  (to_int1(get(prefixsum_expanded__intermediate_form__a,
  ((2 + prefixsum_expanded__intermediate_form__a1) - 0))) = to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((2 + prefixsum_expanded__intermediate_form__b1) - 0))))) and
  (to_int1(get(prefixsum_expanded__intermediate_form__a,
  ((4 + prefixsum_expanded__intermediate_form__a1) - 0))) = to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((4 + prefixsum_expanded__intermediate_form__b1) - 0))))) and
  (to_int1(get(prefixsum_expanded__intermediate_form__a,
  ((6 + prefixsum_expanded__intermediate_form__a1) - 0))) = to_int1(get(prefixsum_expanded__intermediate_form__b,
  ((6 + prefixsum_expanded__intermediate_form__b1) - 0)))))))

type t7

logic ghost__ : input

type natural

logic attr__ATTRIBUTE_MODULUS6 : int

logic attr__ATTRIBUTE_IMAGE6 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_string -> prop

logic attr__ATTRIBUTE_VALUE6 : us_string -> int

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

logic to_int7 : natural -> int

logic of_int7 : int -> natural

predicate eq6(x: natural, y: natural) = (to_int7(x) = to_int7(y))

axiom range_axiom6 : (forall x:natural. in_range6(to_int7(x)))

axiom coerce_axiom6 :
  (forall x:int [to_int7(of_int7(x))| in_range6(x), of_int7(x)].
  (in_range6(x) -> (to_int7(of_int7(x)) = x)))

axiom unicity_axiom6 :
  (forall x:natural. forall y:natural [to_int7(x), to_int7(y)].
  ((to_int7(x) = to_int7(y)) -> (x = y)))

logic dummy7 : natural

type t8

type t9

type t10

logic input_space : positive

type t11

type t14b

logic attr__ATTRIBUTE_MODULUS9 : int

logic attr__ATTRIBUTE_IMAGE9 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_string -> prop

logic attr__ATTRIBUTE_VALUE9 : us_string -> int

predicate in_range9(x: int) = ((0 <= x) and (x <= 7))

logic to_int10 : t14b -> int

logic of_int10 : int -> t14b

predicate eq9(x: t14b, y: t14b) = (to_int10(x) = to_int10(y))

axiom range_axiom9 : (forall x:t14b. in_range9(to_int10(x)))

axiom coerce_axiom9 :
  (forall x:int [to_int10(of_int10(x))| in_range9(x), of_int10(x)].
  (in_range9(x) -> (to_int10(of_int10(x)) = x)))

axiom unicity_axiom9 :
  (forall x:t14b. forall y:t14b [to_int10(x), to_int10(y)].
  ((to_int10(x) = to_int10(y)) -> (x = y)))

logic dummy10 : t14b

type t10b

logic attr__ATTRIBUTE_MODULUS10 : int

logic attr__ATTRIBUTE_IMAGE10 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_string -> prop

logic attr__ATTRIBUTE_VALUE10 : us_string -> int

predicate in_range10(x: int) = ((0 <= x) and (x <= 7))

logic to_int11 : t10b -> int

logic of_int11 : int -> t10b

predicate eq10(x: t10b, y: t10b) = (to_int11(x) = to_int11(y))

axiom range_axiom10 : (forall x:t10b. in_range10(to_int11(x)))

axiom coerce_axiom10 :
  (forall x:int [to_int11(of_int11(x))| in_range10(x), of_int11(x)].
  (in_range10(x) -> (to_int11(of_int11(x)) = x)))

axiom unicity_axiom10 :
  (forall x:t10b. forall y:t10b [to_int11(x), to_int11(y)].
  ((to_int11(x) = to_int11(y)) -> (x = y)))

logic dummy11 : t10b

goal WP_parameter_def2 :
  (forall space:natural. forall a1:integer map. forall a2:int.
  forall a3:integer map. forall a4:int. forall space1:natural.
  forall saved_a1:integer map. forall saved_a2:int. forall c:bool.
  forall c1:bool. (((all_elements_in(ghost__, of_int(1000000)) = true) and
  ((all_elements_in(mk_input(a1, a2), of_int(8000000)) = true) and
  ((to_int(input_space) = 8) and (intermediate_form(mk_input(a1, a2),
  ghost__) = true)))) -> ((space = of_int7(to_int(input_space))) ->
  (((set(a1, ((7 + a2) - 0), of_int1(0)) = a3) and (a2 = a4)) ->
  ((space1 = of_int7(div(to_int7(space), 2))) -> ((mk_input(saved_a1,
  saved_a2) = mk_input(a3, a4)) -> (((((to_int1(get(saved_a1,
  ((0 + saved_a2) - 0))) = to_int1(get(elts2(ghost__),
  ((0 + offset2(ghost__)) - 0)))) and (((to_int1(get(saved_a1,
  ((1 + saved_a2) - 0))) = (to_int1(get(elts2(ghost__),
  ((0 + offset2(ghost__)) - 0))) + to_int1(get(elts2(ghost__),
  ((1 + offset2(ghost__)) - 0))))) and (c1 = true)) or
  ((not (to_int1(get(saved_a1,
  ((1 + saved_a2) - 0))) = (to_int1(get(elts2(ghost__),
  ((0 + offset2(ghost__)) - 0))) + to_int1(get(elts2(ghost__),
  ((1 + offset2(ghost__)) - 0)))))) and (c1 = false)))) or
  ((not (to_int1(get(saved_a1,
  ((0 + saved_a2) - 0))) = to_int1(get(elts2(ghost__),
  ((0 + offset2(ghost__)) - 0))))) and (c1 = false))) and (((c1 = true) and
  (((to_int1(get(saved_a1,
  ((2 + saved_a2) - 0))) = to_int1(get(elts2(ghost__),
  ((2 + offset2(ghost__)) - 0)))) and (c = true)) or
  ((not (to_int1(get(saved_a1,
  ((2 + saved_a2) - 0))) = to_int1(get(elts2(ghost__),
  ((2 + offset2(ghost__)) - 0))))) and (c = false)))) or
  ((not (c1 = true)) and (c = false)))) -> ((c = true) ->
  in_range1(((to_int1(get(elts2(ghost__),
  ((0 + offset2(ghost__)) - 0))) + to_int1(get(elts2(ghost__),
  ((1 + offset2(ghost__)) - 0)))) + to_int1(get(elts2(ghost__),
  ((2 + offset2(ghost__)) - 0)))))))))))))

