(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_character

type us_private

type us_type_of_heap

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

type range_type

type us_string

logic mk___string : us_character map, int, range_type -> us_string

logic elts1 : us_string -> us_character map

axiom elts_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (elts1(mk___string(u, u1, u2)) = u))

logic offset1 : us_string -> int

axiom offset_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (offset1(mk___string(u, u1, u2)) = u1))

logic rt : us_string -> range_type

axiom rt_def :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (rt(mk___string(u, u1, u2)) = u2))

axiom us_string_inversion :
  (forall u:us_string. (u = mk___string(elts1(u), offset1(u), rt(u))))

logic abs : int -> int

axiom abs_def :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type name_t

logic attr__ATTRIBUTE_MODULUS1 : int

logic attr__ATTRIBUTE_IMAGE1 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_string -> prop

logic attr__ATTRIBUTE_VALUE1 : us_string -> int

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic to_int1 : name_t -> int

logic of_int1 : int -> name_t

predicate eq1(x: name_t, y: name_t) = (to_int1(x) = to_int1(y))

axiom range_axiom1 : (forall x:name_t. in_range1(to_int1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_int1(of_int1(x))| in_range1(x), of_int1(x)].
  (in_range1(x) -> (to_int1(of_int1(x)) = x)))

axiom unicity_axiom1 :
  (forall x:name_t. forall y:name_t [to_int1(x), to_int1(y)].
  ((to_int1(x) = to_int1(y)) -> (x = y)))

logic dummy2 : name_t

type uml_action

logic mk_uml_action : name_t -> uml_action

logic rec__name_data1 : uml_action -> name_t

axiom rec__name_data_def1 :
  (forall u:name_t. (rec__name_data1(mk_uml_action(u)) = u))

axiom uml_action_inversion :
  (forall u:uml_action. (u = mk_uml_action(rec__name_data1(u))))

logic bool_eq6 : uml_action, uml_action -> bool

axiom bool_eq_def4 :
  (forall a:uml_action. forall b:uml_action.
  (((rec__name_data1(a) = rec__name_data1(b)) -> (bool_eq6(a, b) = true)) and
  ((not (rec__name_data1(a) = rec__name_data1(b))) -> (bool_eq6(a,
  b) = false))))

logic dummy9 : uml_action

logic get : 'a map, int -> 'a

logic set : 'a map, int, 'a -> 'a map

axiom Select_eq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)]. ((i = j) -> (get(set(m, i, a),
  j) = a)))))

axiom Select_neq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)| set(m, i, a), get(m, j)].
  ((not (i = j)) -> (get(set(m, i, a), j) = get(m, j))))))

logic attr__ATTRIBUTE_LENGTH : 'a t -> int

axiom attr__ATTRIBUTE_LENGTH_def1 :
  (forall x:'a t. (((first(x) <= last(x)) ->
  (attr__ATTRIBUTE_LENGTH(x) = ((last(x) - first(x)) + 1))) and
  ((not (first(x) <= last(x))) -> (attr__ATTRIBUTE_LENGTH(x) = 0))))

logic bool_eq3 : 'a t, 'a t -> bool

axiom T__ada_array___equal_def :
  (forall a:'a map. forall a1:int. forall a2:int. forall a3:int.
  (forall b:'a map. forall b1:int. forall b2:int. forall b3:int
  [bool_eq3(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2)))))) ->
  (bool_eq3(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true)) and
  ((bool_eq3(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2))))))))))

type uml_action_vector

logic mk_uml_action_vector : uml_action map, int -> uml_action_vector

logic elts4 : uml_action_vector -> uml_action map

axiom elts_def4 :
  (forall u:uml_action map. forall u1:int. (elts4(mk_uml_action_vector(u,
  u1)) = u))

logic offset4 : uml_action_vector -> int

axiom offset_def4 :
  (forall u:uml_action map. forall u1:int. (offset4(mk_uml_action_vector(u,
  u1)) = u1))

axiom uml_action_vector_inversion :
  (forall u:uml_action_vector. (u = mk_uml_action_vector(elts4(u),
  offset4(u))))

function to_array2(a: uml_action_vector) : uml_action t = mk_t(elts4(a),
  offset4(a), 0, 100)

function of_array2(a: uml_action t) : uml_action_vector =
  mk_uml_action_vector(elts(a), offset(a))

logic dummy10 : uml_action_vector

type uml_action_access

logic attr__ATTRIBUTE_MODULUS2 : int

logic attr__ATTRIBUTE_IMAGE2 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_string -> prop

logic attr__ATTRIBUTE_VALUE2 : us_string -> int

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

logic to_int2 : uml_action_access -> int

logic of_int2 : int -> uml_action_access

predicate eq2(x: uml_action_access, y: uml_action_access) =
  (to_int2(x) = to_int2(y))

axiom range_axiom2 : (forall x:uml_action_access. in_range2(to_int2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_int2(of_int2(x))| in_range2(x), of_int2(x)].
  (in_range2(x) -> (to_int2(of_int2(x)) = x)))

axiom unicity_axiom2 :
  (forall x:uml_action_access. forall y:uml_action_access [to_int2(x),
  to_int2(y)]. ((to_int2(x) = to_int2(y)) -> (x = y)))

logic dummy7 : uml_action_access

type uml_control_flow

logic mk_uml_control_flow : uml_action_access,
  uml_action_access -> uml_control_flow

logic rec__from_data1 : uml_control_flow -> uml_action_access

axiom rec__from_data_def3 :
  (forall u:uml_action_access. forall u1:uml_action_access.
  (rec__from_data1(mk_uml_control_flow(u, u1)) = u))

logic rec__to_data1 : uml_control_flow -> uml_action_access

axiom rec__to_data_def3 :
  (forall u:uml_action_access. forall u1:uml_action_access.
  (rec__to_data1(mk_uml_control_flow(u, u1)) = u1))

axiom uml_control_flow_inversion1 :
  (forall u:uml_control_flow. (u = mk_uml_control_flow(rec__from_data1(u),
  rec__to_data1(u))))

logic bool_eq5 : uml_control_flow, uml_control_flow -> bool

axiom bool_eq_def3 :
  (forall a:uml_control_flow. forall b:uml_control_flow.
  ((((rec__from_data1(a) = rec__from_data1(b)) and
  (rec__to_data1(a) = rec__to_data1(b))) -> (bool_eq5(a, b) = true)) and
  ((not ((rec__from_data1(a) = rec__from_data1(b)) and
  (rec__to_data1(a) = rec__to_data1(b)))) -> (bool_eq5(a, b) = false))))

logic dummy8 : uml_control_flow

type uml_control_flow_vector

logic mk_uml_control_flow_vector : uml_control_flow map,
  int -> uml_control_flow_vector

logic elts5 : uml_control_flow_vector -> uml_control_flow map

axiom elts_def5 :
  (forall u:uml_control_flow map. forall u1:int.
  (elts5(mk_uml_control_flow_vector(u, u1)) = u))

logic offset5 : uml_control_flow_vector -> int

axiom offset_def5 :
  (forall u:uml_control_flow map. forall u1:int.
  (offset5(mk_uml_control_flow_vector(u, u1)) = u1))

axiom uml_control_flow_vector_inversion :
  (forall u:uml_control_flow_vector.
  (u = mk_uml_control_flow_vector(elts5(u), offset5(u))))

function to_array3(a: uml_control_flow_vector) : uml_control_flow t =
  mk_t(elts5(a), offset5(a), 0, 100)

function of_array3(a: uml_control_flow t) : uml_control_flow_vector =
  mk_uml_control_flow_vector(elts(a), offset(a))

logic dummy11 : uml_control_flow_vector

type uml_activity

logic mk_uml_activity : uml_action_vector,
  uml_control_flow_vector -> uml_activity

logic rec__owned_action_data : uml_activity -> uml_action_vector

axiom rec__owned_action_data_def :
  (forall u:uml_action_vector. forall u1:uml_control_flow_vector.
  (rec__owned_action_data(mk_uml_activity(u, u1)) = u))

logic rec__owned_flow_data : uml_activity -> uml_control_flow_vector

axiom rec__owned_flow_data_def :
  (forall u:uml_action_vector. forall u1:uml_control_flow_vector.
  (rec__owned_flow_data(mk_uml_activity(u, u1)) = u1))

axiom uml_activity_inversion :
  (forall u:uml_activity. (u = mk_uml_activity(rec__owned_action_data(u),
  rec__owned_flow_data(u))))

logic bool_eq7 : uml_activity, uml_activity -> bool

axiom bool_eq_def5 :
  (forall a:uml_activity. forall b:uml_activity.
  ((((rec__owned_action_data(a) = rec__owned_action_data(b)) and
  (rec__owned_flow_data(a) = rec__owned_flow_data(b))) -> (bool_eq7(a,
  b) = true)) and
  ((not ((rec__owned_action_data(a) = rec__owned_action_data(b)) and
  (rec__owned_flow_data(a) = rec__owned_flow_data(b)))) -> (bool_eq7(a,
  b) = false))))

logic dummy12 : uml_activity

logic owned_action : uml_activity -> uml_action_vector

axiom def_axiom6 :
  (forall model__owned_action__self:uml_action map.
  forall model__owned_action__self1:int.
  forall model__owned_action__self2:uml_control_flow map.
  forall model__owned_action__self3:int
  [owned_action(mk_uml_activity(mk_uml_action_vector(model__owned_action__self,
  model__owned_action__self1),
  mk_uml_control_flow_vector(model__owned_action__self2,
  model__owned_action__self3)))].
  (owned_action(mk_uml_activity(mk_uml_action_vector(model__owned_action__self,
  model__owned_action__self1),
  mk_uml_control_flow_vector(model__owned_action__self2,
  model__owned_action__self3))) = mk_uml_action_vector(model__owned_action__self,
  model__owned_action__self1)))

type t4b

logic attr__ATTRIBUTE_LAST : int

logic attr__ATTRIBUTE_MODULUS3 : int

logic attr__ATTRIBUTE_IMAGE3 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_string -> prop

logic attr__ATTRIBUTE_VALUE3 : us_string -> int

predicate in_range3(x: int) = ((0 <= x) and (x <= attr__ATTRIBUTE_LAST))

logic to_int3 : t4b -> int

logic of_int3 : int -> t4b

predicate eq3(x: t4b, y: t4b) = (to_int3(x) = to_int3(y))

axiom range_axiom3 : (forall x:t4b. in_range3(to_int3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_int3(of_int3(x))| in_range3(x), of_int3(x)].
  (in_range3(x) -> (to_int3(of_int3(x)) = x)))

axiom unicity_axiom3 :
  (forall x:t4b. forall y:t4b [to_int3(x), to_int3(y)].
  ((to_int3(x) = to_int3(y)) -> (x = y)))

logic dummy13 : t4b

type uml_state

logic mk_uml_state : name_t -> uml_state

logic rec__name_data : uml_state -> name_t

axiom rec__name_data_def2 :
  (forall u:name_t. (rec__name_data(mk_uml_state(u)) = u))

axiom uml_state_inversion1 :
  (forall u:uml_state. (u = mk_uml_state(rec__name_data(u))))

logic bool_eq2 : uml_state, uml_state -> bool

axiom bool_eq_def1 :
  (forall a:uml_state. forall b:uml_state.
  (((rec__name_data(a) = rec__name_data(b)) -> (bool_eq2(a, b) = true)) and
  ((not (rec__name_data(a) = rec__name_data(b))) -> (bool_eq2(a,
  b) = false))))

logic dummy3 : uml_state

type uml_state_vector

logic mk_uml_state_vector : uml_state map, int -> uml_state_vector

logic elts2 : uml_state_vector -> uml_state map

axiom elts_def6 :
  (forall u:uml_state map. forall u1:int. (elts2(mk_uml_state_vector(u,
  u1)) = u))

logic offset2 : uml_state_vector -> int

axiom offset_def6 :
  (forall u:uml_state map. forall u1:int. (offset2(mk_uml_state_vector(u,
  u1)) = u1))

axiom uml_state_vector_inversion1 :
  (forall u:uml_state_vector. (u = mk_uml_state_vector(elts2(u),
  offset2(u))))

function to_array(a: uml_state_vector) : uml_state t = mk_t(elts2(a),
  offset2(a), 0, 100)

function of_array(a: uml_state t) : uml_state_vector =
  mk_uml_state_vector(elts(a), offset(a))

logic dummy4 : uml_state_vector

type uml_state_access

logic attr__ATTRIBUTE_MODULUS : int

logic attr__ATTRIBUTE_IMAGE : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check : us_string -> prop

logic attr__ATTRIBUTE_VALUE : us_string -> int

predicate in_range(x: int) = ((0 <= x) and (x <= 100))

logic to_int : uml_state_access -> int

logic of_int : int -> uml_state_access

predicate eq(x: uml_state_access, y: uml_state_access) =
  (to_int(x) = to_int(y))

axiom range_axiom : (forall x:uml_state_access. in_range(to_int(x)))

axiom coerce_axiom :
  (forall x:int [to_int(of_int(x))| in_range(x), of_int(x)]. (in_range(x) ->
  (to_int(of_int(x)) = x)))

axiom unicity_axiom :
  (forall x:uml_state_access. forall y:uml_state_access [to_int(x),
  to_int(y)]. ((to_int(x) = to_int(y)) -> (x = y)))

logic dummy : uml_state_access

type uml_transition

logic mk_uml_transition : uml_state_access,
  uml_state_access -> uml_transition

logic rec__from_data : uml_transition -> uml_state_access

axiom rec__from_data_def4 :
  (forall u:uml_state_access. forall u1:uml_state_access.
  (rec__from_data(mk_uml_transition(u, u1)) = u))

logic rec__to_data : uml_transition -> uml_state_access

axiom rec__to_data_def4 :
  (forall u:uml_state_access. forall u1:uml_state_access.
  (rec__to_data(mk_uml_transition(u, u1)) = u1))

axiom uml_transition_inversion2 :
  (forall u:uml_transition. (u = mk_uml_transition(rec__from_data(u),
  rec__to_data(u))))

logic bool_eq1 : uml_transition, uml_transition -> bool

axiom bool_eq_def :
  (forall a:uml_transition. forall b:uml_transition.
  ((((rec__from_data(a) = rec__from_data(b)) and
  (rec__to_data(a) = rec__to_data(b))) -> (bool_eq1(a, b) = true)) and
  ((not ((rec__from_data(a) = rec__from_data(b)) and
  (rec__to_data(a) = rec__to_data(b)))) -> (bool_eq1(a, b) = false))))

logic dummy1 : uml_transition

type uml_transition_vector

logic mk_uml_transition_vector : uml_transition map,
  int -> uml_transition_vector

logic elts3 : uml_transition_vector -> uml_transition map

axiom elts_def7 :
  (forall u:uml_transition map. forall u1:int.
  (elts3(mk_uml_transition_vector(u, u1)) = u))

logic offset3 : uml_transition_vector -> int

axiom offset_def7 :
  (forall u:uml_transition map. forall u1:int.
  (offset3(mk_uml_transition_vector(u, u1)) = u1))

axiom uml_transition_vector_inversion1 :
  (forall u:uml_transition_vector. (u = mk_uml_transition_vector(elts3(u),
  offset3(u))))

function to_array1(a: uml_transition_vector) : uml_transition t =
  mk_t(elts3(a), offset3(a), 0, 100)

function of_array1(a: uml_transition t) : uml_transition_vector =
  mk_uml_transition_vector(elts(a), offset(a))

logic dummy5 : uml_transition_vector

type uml_state_machine

logic mk_uml_state_machine : uml_state_vector,
  uml_transition_vector -> uml_state_machine

logic rec__owned_state_data : uml_state_machine -> uml_state_vector

axiom rec__owned_state_data_def1 :
  (forall u:uml_state_vector. forall u1:uml_transition_vector.
  (rec__owned_state_data(mk_uml_state_machine(u, u1)) = u))

logic rec__owned_transition_data : uml_state_machine -> uml_transition_vector

axiom rec__owned_transition_data_def1 :
  (forall u:uml_state_vector. forall u1:uml_transition_vector.
  (rec__owned_transition_data(mk_uml_state_machine(u, u1)) = u1))

axiom uml_state_machine_inversion1 :
  (forall u:uml_state_machine.
  (u = mk_uml_state_machine(rec__owned_state_data(u),
  rec__owned_transition_data(u))))

logic bool_eq4 : uml_state_machine, uml_state_machine -> bool

axiom bool_eq_def2 :
  (forall a:uml_state_machine. forall b:uml_state_machine.
  ((((rec__owned_state_data(a) = rec__owned_state_data(b)) and
  (rec__owned_transition_data(a) = rec__owned_transition_data(b))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((rec__owned_state_data(a) = rec__owned_state_data(b)) and
  (rec__owned_transition_data(a) = rec__owned_transition_data(b)))) ->
  (bool_eq4(a, b) = false))))

logic dummy6 : uml_state_machine

logic sm : uml_state_machine

type t10b

logic attr__ATTRIBUTE_LAST1 : int

logic attr__ATTRIBUTE_MODULUS4 : int

logic attr__ATTRIBUTE_IMAGE4 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_string -> prop

logic attr__ATTRIBUTE_VALUE4 : us_string -> int

predicate in_range4(x: int) = ((0 <= x) and (x <= attr__ATTRIBUTE_LAST1))

logic to_int4 : t10b -> int

logic of_int4 : int -> t10b

predicate eq4(x: t10b, y: t10b) = (to_int4(x) = to_int4(y))

axiom range_axiom4 : (forall x:t10b. in_range4(to_int4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_int4(of_int4(x))| in_range4(x), of_int4(x)].
  (in_range4(x) -> (to_int4(of_int4(x)) = x)))

axiom unicity_axiom4 :
  (forall x:t10b. forall y:t10b [to_int4(x), to_int4(y)].
  ((to_int4(x) = to_int4(y)) -> (x = y)))

logic dummy14 : t10b

logic to__ : uml_transition -> uml_state_access

axiom def_axiom1 :
  (forall model__to__self:uml_state_access.
  forall model__to__self1:uml_state_access
  [to__(mk_uml_transition(model__to__self, model__to__self1))].
  (to__(mk_uml_transition(model__to__self,
  model__to__self1)) = model__to__self1))

logic to__2 : uml_control_flow -> uml_action_access

axiom def_axiom4 :
  (forall model__to__2__self:uml_action_access.
  forall model__to__2__self1:uml_action_access
  [to__2(mk_uml_control_flow(model__to__2__self, model__to__2__self1))].
  (to__2(mk_uml_control_flow(model__to__2__self,
  model__to__2__self1)) = model__to__2__self1))

type tuml_state_accessB

logic attr__ATTRIBUTE_MODULUS5 : int

logic attr__ATTRIBUTE_IMAGE5 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_string -> prop

logic attr__ATTRIBUTE_VALUE5 : us_string -> int

predicate in_range5(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int5 : tuml_state_accessB -> int

logic of_int5 : int -> tuml_state_accessB

predicate eq5(x: tuml_state_accessB, y: tuml_state_accessB) =
  (to_int5(x) = to_int5(y))

axiom range_axiom5 : (forall x:tuml_state_accessB. in_range5(to_int5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_int5(of_int5(x))| in_range5(x), of_int5(x)].
  (in_range5(x) -> (to_int5(of_int5(x)) = x)))

axiom unicity_axiom5 :
  (forall x:tuml_state_accessB. forall y:tuml_state_accessB [to_int5(x),
  to_int5(y)]. ((to_int5(x) = to_int5(y)) -> (x = y)))

logic dummy15 : tuml_state_accessB

type t29s

logic attr__ATTRIBUTE_FIRST : int

logic attr__ATTRIBUTE_LAST2 : int

logic attr__ATTRIBUTE_MODULUS6 : int

logic attr__ATTRIBUTE_IMAGE6 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_string -> prop

logic attr__ATTRIBUTE_VALUE6 : us_string -> int

predicate in_range6(x: int) = ((attr__ATTRIBUTE_FIRST <= x) and
  (x <= attr__ATTRIBUTE_LAST2))

logic to_int6 : t29s -> int

logic of_int6 : int -> t29s

predicate eq6(x: t29s, y: t29s) = (to_int6(x) = to_int6(y))

axiom range_axiom6 : (forall x:t29s. in_range6(to_int6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_int6(of_int6(x))| in_range6(x), of_int6(x)].
  (in_range6(x) -> (to_int6(of_int6(x)) = x)))

axiom unicity_axiom6 :
  (forall x:t29s. forall y:t29s [to_int6(x), to_int6(y)].
  ((to_int6(x) = to_int6(y)) -> (x = y)))

logic dummy16 : t29s

logic owned_state : uml_state_machine -> uml_state_vector

axiom def_axiom2 :
  (forall model__owned_state__self:uml_state map.
  forall model__owned_state__self1:int.
  forall model__owned_state__self2:uml_transition map.
  forall model__owned_state__self3:int
  [owned_state(mk_uml_state_machine(mk_uml_state_vector(model__owned_state__self,
  model__owned_state__self1),
  mk_uml_transition_vector(model__owned_state__self2,
  model__owned_state__self3)))].
  (owned_state(mk_uml_state_machine(mk_uml_state_vector(model__owned_state__self,
  model__owned_state__self1),
  mk_uml_transition_vector(model__owned_state__self2,
  model__owned_state__self3))) = mk_uml_state_vector(model__owned_state__self,
  model__owned_state__self1)))

logic r1b : uml_state_vector

axiom def_axiom8 : (r1b = owned_state(sm))

type uml_transition_access

logic attr__ATTRIBUTE_MODULUS7 : int

logic attr__ATTRIBUTE_IMAGE7 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_string -> prop

logic attr__ATTRIBUTE_VALUE7 : us_string -> int

predicate in_range7(x: int) = ((0 <= x) and (x <= 100))

logic to_int7 : uml_transition_access -> int

logic of_int7 : int -> uml_transition_access

predicate eq7(x: uml_transition_access, y: uml_transition_access) =
  (to_int7(x) = to_int7(y))

axiom range_axiom7 : (forall x:uml_transition_access. in_range7(to_int7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_int7(of_int7(x))| in_range7(x), of_int7(x)].
  (in_range7(x) -> (to_int7(of_int7(x)) = x)))

axiom unicity_axiom7 :
  (forall x:uml_transition_access. forall y:uml_transition_access
  [to_int7(x), to_int7(y)]. ((to_int7(x) = to_int7(y)) -> (x = y)))

logic dummy17 : uml_transition_access

logic owned_transition : uml_state_machine -> uml_transition_vector

axiom def_axiom3 :
  (forall model__owned_transition__self:uml_state map.
  forall model__owned_transition__self1:int.
  forall model__owned_transition__self2:uml_transition map.
  forall model__owned_transition__self3:int
  [owned_transition(mk_uml_state_machine(mk_uml_state_vector(model__owned_transition__self,
  model__owned_transition__self1),
  mk_uml_transition_vector(model__owned_transition__self2,
  model__owned_transition__self3)))].
  (owned_transition(mk_uml_state_machine(mk_uml_state_vector(model__owned_transition__self,
  model__owned_transition__self1),
  mk_uml_transition_vector(model__owned_transition__self2,
  model__owned_transition__self3))) = mk_uml_transition_vector(model__owned_transition__self2,
  model__owned_transition__self3)))

logic r7b : uml_transition_vector

axiom def_axiom9 : (r7b = owned_transition(sm))

logic name : uml_state -> name_t

axiom def_axiom10 :
  (forall model__name__self:name_t [name(mk_uml_state(model__name__self))].
  (name(mk_uml_state(model__name__self)) = model__name__self))

logic owned_flow : uml_activity -> uml_control_flow_vector

axiom def_axiom7 :
  (forall model__owned_flow__self:uml_action map.
  forall model__owned_flow__self1:int.
  forall model__owned_flow__self2:uml_control_flow map.
  forall model__owned_flow__self3:int
  [owned_flow(mk_uml_activity(mk_uml_action_vector(model__owned_flow__self,
  model__owned_flow__self1),
  mk_uml_control_flow_vector(model__owned_flow__self2,
  model__owned_flow__self3)))].
  (owned_flow(mk_uml_activity(mk_uml_action_vector(model__owned_flow__self,
  model__owned_flow__self1),
  mk_uml_control_flow_vector(model__owned_flow__self2,
  model__owned_flow__self3))) = mk_uml_control_flow_vector(model__owned_flow__self2,
  model__owned_flow__self3)))

logic from__2 : uml_control_flow -> uml_action_access

axiom def_axiom5 :
  (forall model__from__2__self:uml_action_access.
  forall model__from__2__self1:uml_action_access
  [from__2(mk_uml_control_flow(model__from__2__self,
  model__from__2__self1))].
  (from__2(mk_uml_control_flow(model__from__2__self,
  model__from__2__self1)) = model__from__2__self))

logic name__2 : uml_action -> name_t

axiom def_axiom11 :
  (forall model__name__2__self:name_t
  [name__2(mk_uml_action(model__name__2__self))].
  (name__2(mk_uml_action(model__name__2__self)) = model__name__2__self))

type t9

type tuml_transition_accessB

logic attr__ATTRIBUTE_MODULUS8 : int

logic attr__ATTRIBUTE_IMAGE8 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_string -> prop

logic attr__ATTRIBUTE_VALUE8 : us_string -> int

predicate in_range8(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int8 : tuml_transition_accessB -> int

logic of_int8 : int -> tuml_transition_accessB

predicate eq8(x: tuml_transition_accessB, y: tuml_transition_accessB) =
  (to_int8(x) = to_int8(y))

axiom range_axiom8 :
  (forall x:tuml_transition_accessB. in_range8(to_int8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_int8(of_int8(x))| in_range8(x), of_int8(x)].
  (in_range8(x) -> (to_int8(of_int8(x)) = x)))

axiom unicity_axiom8 :
  (forall x:tuml_transition_accessB. forall y:tuml_transition_accessB
  [to_int8(x), to_int8(y)]. ((to_int8(x) = to_int8(y)) -> (x = y)))

logic dummy18 : tuml_transition_accessB

type t2b

logic attr__ATTRIBUTE_MODULUS9 : int

logic attr__ATTRIBUTE_IMAGE9 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_string -> prop

logic attr__ATTRIBUTE_VALUE9 : us_string -> int

predicate in_range9(x: int) = ((0 <= x) and (x <= 100))

logic to_int9 : t2b -> int

logic of_int9 : int -> t2b

predicate eq9(x: t2b, y: t2b) = (to_int9(x) = to_int9(y))

axiom range_axiom9 : (forall x:t2b. in_range9(to_int9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_int9(of_int9(x))| in_range9(x), of_int9(x)].
  (in_range9(x) -> (to_int9(of_int9(x)) = x)))

axiom unicity_axiom9 :
  (forall x:t2b. forall y:t2b [to_int9(x), to_int9(y)].
  ((to_int9(x) = to_int9(y)) -> (x = y)))

logic dummy19 : t2b

type t8b

logic attr__ATTRIBUTE_MODULUS10 : int

logic attr__ATTRIBUTE_IMAGE10 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_string -> prop

logic attr__ATTRIBUTE_VALUE10 : us_string -> int

predicate in_range10(x: int) = ((0 <= x) and (x <= 100))

logic to_int10 : t8b -> int

logic of_int10 : int -> t8b

predicate eq10(x: t8b, y: t8b) = (to_int10(x) = to_int10(y))

axiom range_axiom10 : (forall x:t8b. in_range10(to_int10(x)))

axiom coerce_axiom10 :
  (forall x:int [to_int10(of_int10(x))| in_range10(x), of_int10(x)].
  (in_range10(x) -> (to_int10(of_int10(x)) = x)))

axiom unicity_axiom10 :
  (forall x:t8b. forall y:t8b [to_int10(x), to_int10(y)].
  ((to_int10(x) = to_int10(y)) -> (x = y)))

logic dummy20 : t8b

type t10

logic from : uml_transition -> uml_state_access

axiom def_axiom :
  (forall model__from__self:uml_state_access.
  forall model__from__self1:uml_state_access
  [from(mk_uml_transition(model__from__self, model__from__self1))].
  (from(mk_uml_transition(model__from__self,
  model__from__self1)) = model__from__self))

type t11

goal WP_parameter_def8 :
  (forall model__transform__L_1__s:int. forall av:uml_action map.
  forall av1:int. forall model__transform__L_1__s1:int.
  forall av2:uml_action map. forall av3:int. forall av4:uml_action map.
  forall av5:int. forall model__transform__L_1__s2:int.
  forall rho:uml_action map. forall rho1:int. forall rho2:int.
  forall model__transform__L_2__s:int. forall model__transform__L_2__s1:int.
  forall cfv:uml_control_flow map. forall cfv1:int.
  forall model__set_from__2__self:uml_action_access.
  forall model__set_from__2__self1:uml_action_access.
  forall model__set_from__2__self2:uml_action_access.
  forall model__set_from__2__self3:uml_action_access.
  forall cfv2:uml_control_flow map. forall cfv3:int.
  forall model__set_to__2__self:uml_action_access.
  forall model__set_to__2__self1:uml_action_access.
  forall model__set_to__2__self2:uml_action_access.
  forall model__set_to__2__self3:uml_action_access.
  forall cfv4:uml_control_flow map. forall cfv5:int.
  forall model__transform__L_2__s2:int. ((owned_state(sm) = r1b) ->
  (((model__transform__L_1__s = 0) and ((((0 <= model__transform__L_1__s) and
  (model__transform__L_1__s <= 100)) and
  ((((forall model__transform__L_1__L5b__t:int.
     (((0 <= model__transform__L_1__L5b__t) and
     (model__transform__L_1__L5b__t <= (model__transform__L_1__s1 - 1))) ->
     (to_int1(name(get(elts2(owned_state(sm)),
     ((model__transform__L_1__L5b__t + offset2(owned_state(sm))) - 0)))) = to_int1(name__2(get(av2,
     ((model__transform__L_1__L5b__t + av3) - 0))))))) and
  false) and ((mk_uml_action_vector(av4, av5) = mk_uml_action_vector(rho,
  rho1)) and (model__transform__L_1__s2 = rho2))) or
  ((forall model__transform__L_1__L5b__t:int.
   (((0 <= model__transform__L_1__L5b__t) and
   (model__transform__L_1__L5b__t <= (model__transform__L_1__s1 - 1))) ->
   (to_int1(name(get(elts2(owned_state(sm)),
   ((model__transform__L_1__L5b__t + offset2(owned_state(sm))) - 0)))) = to_int1(name__2(get(av2,
   ((model__transform__L_1__L5b__t + av3) - 0))))))) and
  ((((not (model__transform__L_1__s2 <= 100)) and
  (model__transform__L_1__s2 = (model__transform__L_1__s1 + 1))) and
  ((set(av2, ((model__transform__L_1__s1 + av3) - 0),
  mk_uml_action(name(get(elts2(owned_state(sm)),
  ((model__transform__L_1__s1 + offset2(owned_state(sm))) - 0))))) = av4) and
  (av3 = av5))) and ((0 <= model__transform__L_1__s1) and
  (model__transform__L_1__s1 <= 100)))))) or
  ((not ((0 <= model__transform__L_1__s) and
  (model__transform__L_1__s <= 100))) and ((mk_uml_action_vector(av4,
  av5) = mk_uml_action_vector(av, av1)) and
  (model__transform__L_1__s2 = model__transform__L_1__s))))) ->
  ((owned_transition(sm) = r7b) -> ((model__transform__L_2__s = 0) ->
  (((0 <= model__transform__L_2__s) and (model__transform__L_2__s <= 100)) ->
  ((forall model__transform__L_2__L11b__t:int.
   (((0 <= model__transform__L_2__L11b__t) and
   (model__transform__L_2__L11b__t <= (model__transform__L_2__s1 - 1))) ->
   ((to_int1(name(get(elts2(owned_state(sm)),
   ((to_int(from(get(elts3(owned_transition(sm)),
   ((model__transform__L_2__L11b__t + offset3(owned_transition(sm))) - 0)))) + offset2(owned_state(sm))) - 0)))) = to_int1(name__2(get(av4,
   ((to_int2(from__2(get(cfv,
   ((model__transform__L_2__L11b__t + cfv1) - 0)))) + av5) - 0))))) and
   (to_int1(name(get(elts2(owned_state(sm)),
   ((to_int(to__(get(elts3(owned_transition(sm)),
   ((model__transform__L_2__L11b__t + offset3(owned_transition(sm))) - 0)))) + offset2(owned_state(sm))) - 0)))) = to_int1(name__2(get(av4,
   ((to_int2(to__2(get(cfv,
   ((model__transform__L_2__L11b__t + cfv1) - 0)))) + av5) - 0)))))))) ->
  ((((0 <= model__transform__L_2__s1) and
  (model__transform__L_2__s1 <= 100)) and
  (((mk_uml_control_flow(model__set_from__2__self,
  model__set_from__2__self1) = get(cfv,
  ((model__transform__L_2__s1 + cfv1) - 0))) and
  (((to_int2(from__2(mk_uml_control_flow(model__set_from__2__self2,
  model__set_from__2__self3))) = to_int2(of_int2(to_int(from(get(elts3(owned_transition(sm)),
  ((model__transform__L_2__s1 + offset3(owned_transition(sm))) - 0))))))) and
  (to_int2(to__2(mk_uml_control_flow(model__set_from__2__self2,
  model__set_from__2__self3))) = to_int2(to__2(mk_uml_control_flow(model__set_from__2__self,
  model__set_from__2__self1))))) and ((set(cfv,
  ((model__transform__L_2__s1 + cfv1) - 0),
  mk_uml_control_flow(model__set_from__2__self2,
  model__set_from__2__self3)) = cfv2) and (cfv1 = cfv3)))) and
  (((mk_uml_control_flow(model__set_to__2__self,
  model__set_to__2__self1) = get(cfv2,
  ((model__transform__L_2__s1 + cfv3) - 0))) and
  (((to_int2(to__2(mk_uml_control_flow(model__set_to__2__self2,
  model__set_to__2__self3))) = to_int2(of_int2(to_int(to__(get(elts3(owned_transition(sm)),
  ((model__transform__L_2__s1 + offset3(owned_transition(sm))) - 0))))))) and
  (to_int2(from__2(mk_uml_control_flow(model__set_to__2__self2,
  model__set_to__2__self3))) = to_int2(from__2(mk_uml_control_flow(model__set_to__2__self,
  model__set_to__2__self1))))) and ((set(cfv2,
  ((model__transform__L_2__s1 + cfv3) - 0),
  mk_uml_control_flow(model__set_to__2__self2,
  model__set_to__2__self3)) = cfv4) and (cfv3 = cfv5)))) and
  ((model__transform__L_2__s2 = (model__transform__L_2__s1 + 1)) and
  (model__transform__L_2__s2 <= 100))))) ->
  (forall model__transform__L_2__L11b__t:int.
  (((0 <= model__transform__L_2__L11b__t) and
  (model__transform__L_2__L11b__t <= (model__transform__L_2__s2 - 1))) ->
  ((to_int1(name(get(elts2(owned_state(sm)),
  ((to_int(from(get(elts3(owned_transition(sm)),
  ((model__transform__L_2__L11b__t + offset3(owned_transition(sm))) - 0)))) + offset2(owned_state(sm))) - 0)))) = to_int1(name__2(get(av4,
  ((to_int2(from__2(get(cfv4,
  ((model__transform__L_2__L11b__t + cfv5) - 0)))) + av5) - 0))))) and
  (to_int1(name(get(elts2(owned_state(sm)),
  ((to_int(to__(get(elts3(owned_transition(sm)),
  ((model__transform__L_2__L11b__t + offset3(owned_transition(sm))) - 0)))) + offset2(owned_state(sm))) - 0)))) = to_int1(name__2(get(av4,
  ((to_int2(to__2(get(cfv4,
  ((model__transform__L_2__L11b__t + cfv5) - 0)))) + av5) - 0))))))))))))))))

