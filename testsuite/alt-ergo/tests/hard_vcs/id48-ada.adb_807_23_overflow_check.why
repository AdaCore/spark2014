(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x2: bool, y: bool) : bool = match_bool(x2, y, false)

function orb(x2: bool, y: bool) : bool = match_bool(x2, true, y)

function xorb(x2: bool, y: bool) : bool = match_bool(y, match_bool(x2, false,
  true), match_bool(x2, true, false))

function notb(x2: bool) : bool = match_bool(x2, false, true)

function implb(x2: bool, y: bool) : bool = match_bool(y, true, match_bool(x2,
  false, true))

logic us__ignore : 'a -> unit

type us_private

type us_type_of_heap

type us_image

axiom add_div :
  (forall x2:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x2 + y) / z) = ((x2 / z) + (y / z)))))

axiom sub_div :
  (forall x2:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x2 - y) / z) = ((x2 / z) - (y / z)))))

axiom neg_div :
  (forall x2:real. forall y:real. ((not (y = 0.0)) ->
  (((-x2) / y) = (-(x2 / y)))))

axiom assoc_mul_div :
  (forall x2:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x2 * y) / z) = (x2 * (y / z)))))

axiom assoc_div_mul :
  (forall x2:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x2 / y) / z) = (x2 / (y * z)))))

axiom assoc_div_div :
  (forall x2:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x2 / (y / z)) = ((x2 * z) / y))))

logic abs : real -> real

axiom abs_def :
  (forall x2:real. (((0.0 <= x2) -> (abs(x2) = x2)) and ((not (0.0 <= x2)) ->
  (abs(x2) = (-x2)))))

axiom Abs_le :
  (forall x2:real. forall y:real. ((abs(x2) <= y) <-> (((-y) <= x2) and
  (x2 <= y))))

axiom Abs_pos : (forall x2:real. (0.0 <= abs(x2)))

axiom Abs_sum :
  (forall x2:real. forall y:real. (abs((x2 + y)) <= (abs(x2) + abs(y))))

axiom Abs_prod :
  (forall x2:real. forall y:real. (abs((x2 * y)) = (abs(x2) * abs(y))))

axiom triangular_inequality :
  (forall x2:real. forall y:real. forall z:real.
  (abs((x2 - z)) <= (abs((x2 - y)) + abs((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x2:int. forall y:int.
  (from_int((x2 + y)) = (from_int(x2) + from_int(y))))

axiom Sub :
  (forall x2:int. forall y:int.
  (from_int((x2 - y)) = (from_int(x2) - from_int(y))))

axiom Mul :
  (forall x2:int. forall y:int.
  (from_int((x2 * y)) = (from_int(x2) * from_int(y))))

axiom Neg : (forall x2:int. (from_int((-x2)) = (-from_int(x2))))

axiom Monotonic :
  (forall x2:int. forall y:int. ((x2 <= y) -> (from_int(x2) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x2:real. ((0.0 <= x2) -> ((from_int(truncate(x2)) <= x2) and
  (x2 <  from_int((truncate(x2) + 1))))))

axiom Truncate_up_neg :
  (forall x2:real. ((x2 <= 0.0) -> ((from_int((truncate(x2) - 1)) <  x2) and
  (x2 <= from_int(truncate(x2))))))

axiom Real_of_truncate :
  (forall x2:real. (((x2 - 1.0) <= from_int(truncate(x2))) and
  (from_int(truncate(x2)) <= (x2 + 1.0))))

axiom Truncate_monotonic :
  (forall x2:real. forall y:real. ((x2 <= y) ->
  (truncate(x2) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x2:real. forall i:int. ((x2 <= from_int(i)) ->
  (truncate(x2) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x2:real. forall i:int. ((from_int(i) <= x2) ->
  (i <= truncate(x2))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x2:real. ((from_int(floor(x2)) <= x2) and
  (x2 <  from_int((floor(x2) + 1)))))

axiom Ceil_up :
  (forall x2:real. ((from_int((ceil(x2) - 1)) <  x2) and
  (x2 <= from_int(ceil(x2)))))

axiom Floor_monotonic :
  (forall x2:real. forall y:real. ((x2 <= y) -> (floor(x2) <= floor(y))))

axiom Ceil_monotonic :
  (forall x2:real. forall y:real. ((x2 <= y) -> (ceil(x2) <= ceil(y))))

logic power : real, int -> real

axiom Power_0 : (forall x2:real. (power(x2, 0) = 1.0))

axiom Power_s :
  (forall x2:real. forall n:int. ((0 <= n) -> (power(x2,
  (n + 1)) = (x2 * power(x2, n)))))

axiom Power_s_alt :
  (forall x2:real. forall n:int. ((0 <  n) -> (power(x2, n) = (x2 * power(x2,
  (n - 1))))))

axiom Power_1 : (forall x2:real. (power(x2, 1) = x2))

axiom Power_sum :
  (forall x2:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x2, (n + m)) = (power(x2, n) * power(x2, m))))))

axiom Power_mult :
  (forall x2:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x2, (n * m)) = power(power(x2, n), m)))))

axiom Power_mult2 :
  (forall x2:real. forall y:real. forall n:int. ((0 <= n) -> (power((x2 * y),
  n) = (power(x2, n) * power(y, n)))))

axiom Pow_ge_one :
  (forall x2:real. forall n:int. (((0 <= n) and (1.0 <= x2)) ->
  (1.0 <= power(x2, n))))

logic round : real -> int

axiom Round_down :
  (forall x2:real. (((x2 - from_int(floor(x2))) <  0.5) ->
  (round(x2) = floor(x2))))

axiom Round_up :
  (forall x2:real. (((from_int(ceil(x2)) - x2) <  0.5) ->
  (round(x2) = ceil(x2))))

axiom Round_neg_tie :
  (forall x2:real. ((((x2 - from_int(floor(x2))) = 0.5) and (x2 <  0.0)) ->
  (round(x2) = floor(x2))))

axiom Round_pos_tie :
  (forall x2:real. ((((from_int(ceil(x2)) - x2) = 0.5) and (0.0 <  x2)) ->
  (round(x2) = ceil(x2))))

axiom Round_int : (forall i:int. (round(from_int(i)) = i))

axiom Round_near_int :
  (forall i:int.
  (forall x2:real. ((((-0.5) <  x2) and (x2 <  0.5)) ->
  (round((from_int(i) + x2)) = i))))

axiom Round_monotonic :
  (forall x2:real. forall y:real. ((x2 <= y) -> (round(x2) <= round(y))))

axiom Round_monotonic_int1 :
  (forall x2:real. forall i:int. ((x2 <= from_int(i)) -> (round(x2) <= i)))

axiom Round_monotonic_int2 :
  (forall x2:real. forall i:int. ((from_int(i) <= x2) -> (i <= round(x2))))

logic bool_lt : real, real -> bool

logic bool_le : real, real -> bool

logic bool_gt : real, real -> bool

logic bool_ge : real, real -> bool

logic bool_eq : real, real -> bool

logic bool_neq : real, real -> bool

axiom Bool_real__lt_axiom :
  (forall x2:real. (forall y:real. ((bool_lt(x2, y) = true) <-> (x2 <  y))))

axiom Bool_real__le_axiom :
  (forall x2:real. (forall y:real. ((bool_le(x2, y) = true) <-> (x2 <= y))))

axiom Bool_real__gt_axiom :
  (forall x2:real. (forall y:real. ((bool_gt(x2, y) = true) <-> (y <  x2))))

axiom Bool_real__ge_axiom :
  (forall x2:real. (forall y:real. ((bool_ge(x2, y) = true) <-> (y <= x2))))

axiom Bool_real__eq_axiom :
  (forall x2:real. (forall y:real. ((bool_eq(x2, y) = true) <-> (x2 = y))))

axiom Bool_real__neq_axiom :
  (forall x2:real.
  (forall y:real. ((bool_neq(x2, y) = true) <-> (not (x2 = y)))))

type id8

logic attr__ATTRIBUTE_MODULUS : real

predicate in_range(x2: real) =
  (((-from_int(340282001837565597733306976381245063168)) <= x2) and
  (x2 <= from_int(340282001837565597733306976381245063168)))

logic to_real : id8 -> real

logic of_real : real -> id8

predicate eq(x2: id8, y: id8) = (to_real(x2) = to_real(y))

axiom range_axiom : (forall x2:id8. in_range(to_real(x2)))

axiom coerce_axiom :
  (forall x2:real [to_real(of_real(x2))| in_range(x2), of_real(x2)].
  (in_range(x2) -> (to_real(of_real(x2)) = x2)))

axiom inversion_axiom :
  (forall x2:id8 [to_real(x2)]. (of_real(to_real(x2)) = x2))

logic attr__ATTRIBUTE_IMAGE : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> real

logic dummy : id8

type t4

logic id176 : id8

type t5

logic id34 : id8

axiom def_axiom14 : (id34 = of_real((from_int(6) + 0.283185482025146484375)))

type tid8B

logic attr__ATTRIBUTE_MODULUS1 : real

predicate in_range1(x2: real) =
  (((-from_int(340282346638528859811704183484516925440)) <= x2) and
  (x2 <= from_int(340282346638528859811704183484516925440)))

logic to_real1 : tid8B -> real

logic of_real1 : real -> tid8B

predicate eq1(x2: tid8B, y: tid8B) = (to_real1(x2) = to_real1(y))

axiom range_axiom1 : (forall x2:tid8B. in_range1(to_real1(x2)))

axiom coerce_axiom1 :
  (forall x2:real [to_real1(of_real1(x2))| in_range1(x2), of_real1(x2)].
  (in_range1(x2) -> (to_real1(of_real1(x2)) = x2)))

axiom inversion_axiom1 :
  (forall x2:tid8B [to_real1(x2)]. (of_real1(to_real1(x2)) = x2))

logic attr__ATTRIBUTE_IMAGE1 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> real

logic dummy1 : tid8B

logic id24 : id8 -> id8

logic abs1 : int -> int

axiom abs_def2 :
  (forall x2:int. (((0 <= x2) -> (abs1(x2) = x2)) and ((not (0 <= x2)) ->
  (abs1(x2) = (-x2)))))

axiom Abs_le1 :
  (forall x2:int. forall y:int. ((abs1(x2) <= y) <-> (((-y) <= x2) and
  (x2 <= y))))

axiom Abs_pos1 : (forall x2:int. (0 <= abs1(x2)))

logic power1 : int, int -> int

axiom Power_01 : (forall x2:int. (power1(x2, 0) = 1))

axiom Power_s1 :
  (forall x2:int. forall n:int. ((0 <= n) -> (power1(x2,
  (n + 1)) = (x2 * power1(x2, n)))))

axiom Power_s_alt1 :
  (forall x2:int. forall n:int. ((0 <  n) -> (power1(x2,
  n) = (x2 * power1(x2, (n - 1))))))

axiom Power_11 : (forall x2:int. (power1(x2, 1) = x2))

axiom Power_sum1 :
  (forall x2:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x2, (n + m)) = (power1(x2, n) * power1(x2, m))))))

axiom Power_mult1 :
  (forall x2:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x2, (n * m)) = power1(power1(x2, n), m)))))

axiom Power_mult21 :
  (forall x2:int. forall y:int. forall n:int. ((0 <= n) -> (power1((x2 * y),
  n) = (power1(x2, n) * power1(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x2:int. forall y:int. ((x2 <= max(x2, y)) and (y <= max(x2, y))))

axiom Max_is_some :
  (forall x2:int. forall y:int. ((max(x2, y) = x2) or (max(x2, y) = y)))

axiom Min_is_le :
  (forall x2:int. forall y:int. ((min(x2, y) <= x2) and (min(x2, y) <= y)))

axiom Min_is_some :
  (forall x2:int. forall y:int. ((min(x2, y) = x2) or (min(x2, y) = y)))

axiom Max_x : (forall x2:int. forall y:int. ((y <= x2) -> (max(x2, y) = x2)))

axiom Max_y : (forall x2:int. forall y:int. ((x2 <= y) -> (max(x2, y) = y)))

axiom Min_x : (forall x2:int. forall y:int. ((x2 <= y) -> (min(x2, y) = x2)))

axiom Min_y : (forall x2:int. forall y:int. ((y <= x2) -> (min(x2, y) = y)))

axiom Max_sym :
  (forall x2:int. forall y:int. ((y <= x2) -> (max(x2, y) = max(y, x2))))

axiom Min_sym :
  (forall x2:int. forall y:int. ((y <= x2) -> (min(x2, y) = min(y, x2))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x2:int. forall y:int. ((not (y = 0)) -> (x2 = ((y * div(x2,
  y)) + mod(x2, y)))))

axiom Div_bound :
  (forall x2:int. forall y:int. (((0 <= x2) and (0 <  y)) -> ((0 <= div(x2,
  y)) and (div(x2, y) <= x2))))

axiom Mod_bound :
  (forall x2:int. forall y:int. ((not (y = 0)) -> (((-abs1(y)) <  mod(x2,
  y)) and (mod(x2, y) <  abs1(y)))))

axiom Div_sign_pos :
  (forall x2:int. forall y:int. (((0 <= x2) and (0 <  y)) -> (0 <= div(x2,
  y))))

axiom Div_sign_neg :
  (forall x2:int. forall y:int. (((x2 <= 0) and (0 <  y)) -> (div(x2,
  y) <= 0)))

axiom Mod_sign_pos :
  (forall x2:int. forall y:int. (((0 <= x2) and (not (y = 0))) ->
  (0 <= mod(x2, y))))

axiom Mod_sign_neg :
  (forall x2:int. forall y:int. (((x2 <= 0) and (not (y = 0))) -> (mod(x2,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x2:int. forall y:int. ((not (y = 0)) -> (abs1((div(x2,
  y) * y)) <= abs1(x2))))

axiom Div_1 : (forall x2:int. (div(x2, 1) = x2))

axiom Mod_1 : (forall x2:int. (mod(x2, 1) = 0))

axiom Div_inf :
  (forall x2:int. forall y:int. (((0 <= x2) and (x2 <  y)) -> (div(x2,
  y) = 0)))

axiom Mod_inf :
  (forall x2:int. forall y:int. (((0 <= x2) and (x2 <  y)) -> (mod(x2,
  y) = x2)))

axiom Div_mult :
  (forall x2:int. forall y:int. forall z:int [div(((x2 * y) + z), x2)].
  (((0 <  x2) and ((0 <= y) and (0 <= z))) -> (div(((x2 * y) + z),
  x2) = (y + div(z, x2)))))

axiom Mod_mult :
  (forall x2:int. forall y:int. forall z:int [mod(((x2 * y) + z), x2)].
  (((0 <  x2) and ((0 <= y) and (0 <= z))) -> (mod(((x2 * y) + z),
  x2) = mod(z, x2))))

axiom Div_mod1 :
  (forall x2:int. forall y:int. ((not (y = 0)) ->
  (x2 = ((y * (x2 / y)) + (x2 % y)))))

axiom Div_bound1 :
  (forall x2:int. forall y:int. (((0 <= x2) and (0 <  y)) ->
  ((0 <= (x2 / y)) and ((x2 / y) <= x2))))

axiom Mod_bound1 :
  (forall x2:int. forall y:int. ((not (y = 0)) -> ((0 <= (x2 % y)) and
  ((x2 % y) <  abs1(y)))))

axiom Mod_11 : (forall x2:int. ((x2 % 1) = 0))

axiom Div_11 : (forall x2:int. ((x2 / 1) = x2))

axiom Div_inf1 :
  (forall x2:int. forall y:int. (((0 <= x2) and (x2 <  y)) ->
  ((x2 / y) = 0)))

axiom Div_inf_neg :
  (forall x2:int. forall y:int. (((0 <  x2) and (x2 <= y)) ->
  (((-x2) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x2:int. (forall y:int. ((bool_eq1(x2, y) = true) <-> (x2 = y))))

axiom bool_ne_axiom :
  (forall x2:int.
  (forall y:int. ((bool_ne(x2, y) = true) <-> (not (x2 = y)))))

axiom bool_lt_axiom :
  (forall x2:int. (forall y:int. ((bool_lt1(x2, y) = true) <-> (x2 <  y))))

axiom Bool_int__le_axiom :
  (forall x2:int. (forall y:int. ((bool_le1(x2, y) = true) <-> (x2 <= y))))

axiom bool_gt_axiom :
  (forall x2:int. (forall y:int. ((bool_gt1(x2, y) = true) <-> (y <  x2))))

axiom bool_ge_axiom :
  (forall x2:int. (forall y:int. ((bool_ge1(x2, y) = true) <-> (y <= x2))))

function ite(b: bool, x2: 'a, y: 'a) : 'a = match_bool(b, x2, y)

logic to_int1 : bool -> int

axiom to_int_def :
  (forall b:bool. (((b = true) -> (to_int1(b) = 1)) and ((not (b = true)) ->
  (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int. (((i = 0) -> (of_int1(i) = false)) and ((not (i = 0)) ->
  (of_int1(i) = true))))

predicate in_range4(x2: int) = ((x2 = 0) or (x2 = 1))

logic attr__ATTRIBUTE_IMAGE4 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> bool

logic id15 : id8, id8 -> id8

type id348

logic attr__ATTRIBUTE_MODULUS4 : int

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

predicate in_range5(x2: int) = ((1 <= x2) and (x2 <= 3))

logic to_int2 : id348 -> int

logic of_int2 : int -> id348

predicate eq4(x2: id348, y: id348) = (to_int2(x2) = to_int2(y))

axiom range_axiom4 : (forall x2:id348. in_range5(to_int2(x2)))

axiom inversion_axiom4 :
  (forall x2:id348 [to_int2(x2)]. (of_int2(to_int2(x2)) = x2))

logic dummy10 : id348

axiom coerce_axiom4 :
  (forall x2:int [to_int2(of_int2(x2))| in_range5(x2), of_int2(x2)].
  (in_range5(x2) -> (to_int2(of_int2(x2)) = x2)))

type id3

logic attr__ATTRIBUTE_MODULUS5 : int

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

predicate in_range6(x2: int) = (((-2147483648) <= x2) and (x2 <= 2147483647))

logic to_int3 : id3 -> int

logic of_int3 : int -> id3

predicate eq5(x2: id3, y: id3) = (to_int3(x2) = to_int3(y))

axiom range_axiom5 : (forall x2:id3. in_range6(to_int3(x2)))

axiom inversion_axiom5 :
  (forall x2:id3 [to_int3(x2)]. (of_int3(to_int3(x2)) = x2))

logic dummy11 : id3

axiom coerce_axiom5 :
  (forall x2:int [to_int3(of_int3(x2))| in_range6(x2), of_int3(x2)].
  (in_range6(x2) -> (to_int3(of_int3(x2)) = x2)))

logic id14 : id3 -> id8

logic id177 : id8

type t6

type t7

type id290

logic attr__ATTRIBUTE_MODULUS6 : real

predicate in_range7(x2: real) = (((-1.0) <= x2) and (x2 <= 1.0))

logic to_real3 : id290 -> real

logic of_real3 : real -> id290

predicate eq6(x2: id290, y: id290) = (to_real3(x2) = to_real3(y))

axiom range_axiom6 : (forall x2:id290. in_range7(to_real3(x2)))

axiom coerce_axiom6 :
  (forall x2:real [to_real3(of_real3(x2))| in_range7(x2), of_real3(x2)].
  (in_range7(x2) -> (to_real3(of_real3(x2)) = x2)))

axiom inversion_axiom6 :
  (forall x2:id290 [to_real3(x2)]. (of_real3(to_real3(x2)) = x2))

logic attr__ATTRIBUTE_IMAGE7 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> real

logic dummy12 : id290

type id40

logic attr__ATTRIBUTE_MODULUS7 : real

predicate in_range8(x2: real) = ((0.0e-1 <= x2) and (x2 <= from_int(360)))

logic to_real4 : id40 -> real

logic of_real4 : real -> id40

predicate eq7(x2: id40, y: id40) = (to_real4(x2) = to_real4(y))

axiom range_axiom7 : (forall x2:id40. in_range8(to_real4(x2)))

axiom coerce_axiom7 :
  (forall x2:real [to_real4(of_real4(x2))| in_range8(x2), of_real4(x2)].
  (in_range8(x2) -> (to_real4(of_real4(x2)) = x2)))

axiom inversion_axiom7 :
  (forall x2:id40 [to_real4(x2)]. (of_real4(to_real4(x2)) = x2))

logic attr__ATTRIBUTE_IMAGE8 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> real

logic dummy13 : id40

type 'a map

type 'a t2

logic mk_t : 'a map, int, int, int -> 'a t2

logic elts : 'a t2 -> 'a map

axiom elts_def4 :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t2 -> int

axiom offset_def4 :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t2 -> int

axiom first_def1 :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t2 -> int

axiom last_def1 :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion1 :
  (forall u:'a t2. (u = mk_t(elts(u), offset(u), first(u), last(u))))

logic get : 'a map, int -> 'a

logic set : 'a map, int, 'a -> 'a map

axiom Select_eq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)]. ((i = j) -> (get(set(m, i, a),
  j) = a)))))

axiom Select_neq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)| set(m, i, a), get(m, j)].
  ((not (i = j)) -> (get(set(m, i, a), j) = get(m, j))))))

logic attr__ATTRIBUTE_LENGTH : 'a t2 -> int

axiom attr__ATTRIBUTE_LENGTH_def1 :
  (forall x2:'a t2. (((first(x2) <= last(x2)) ->
  (attr__ATTRIBUTE_LENGTH(x2) = ((last(x2) - first(x2)) + 1))) and
  ((not (first(x2) <= last(x2))) -> (attr__ATTRIBUTE_LENGTH(x2) = 0))))

logic bool_eq2 : 'a t2, 'a t2 -> bool

axiom T__ada_array___equal_def :
  (forall a:'a map. forall a1:int. forall a2:int. forall a3:int.
  (forall b:'a map. forall b1:int. forall b2:int. forall b3:int
  [bool_eq2(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2)))))) ->
  (bool_eq2(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true)) and
  ((bool_eq2(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2))))))))))

type us_t3

logic mk___t3 : id40 map, int -> us_t3

logic elts4 : us_t3 -> id40 map

axiom elts_def5 :
  (forall u:id40 map. forall u1:int. (elts4(mk___t3(u, u1)) = u))

logic offset4 : us_t3 -> int

axiom offset_def5 :
  (forall u:id40 map. forall u1:int. (offset4(mk___t3(u, u1)) = u1))

axiom us_t_inversion3 : (forall u:us_t3. (u = mk___t3(elts4(u), offset4(u))))

function to_array3(a: us_t3) : id40 t2 = mk_t(elts4(a), offset4(a), 0, 3)

function of_array3(a: id40 t2) : us_t3 = mk___t3(elts(a), offset(a))

logic dummy14 : id40 map

logic dummy15 : int

type t20b

type us_t4

logic mk___t4 : id40 map, int -> us_t4

logic elts5 : us_t4 -> id40 map

axiom elts_def6 :
  (forall u:id40 map. forall u1:int. (elts5(mk___t4(u, u1)) = u))

logic offset5 : us_t4 -> int

axiom offset_def6 :
  (forall u:id40 map. forall u1:int. (offset5(mk___t4(u, u1)) = u1))

axiom us_t_inversion4 : (forall u:us_t4. (u = mk___t4(elts5(u), offset5(u))))

function to_array4(a: us_t4) : id40 t2 = mk_t(elts5(a), offset5(a), 0, 3)

function of_array4(a: id40 t2) : us_t4 = mk___t4(elts(a), offset(a))

logic dummy16 : id40 map

logic dummy17 : int

type id179

type t8

type t9

type t10

type tid3B

logic attr__ATTRIBUTE_MODULUS8 : int

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

predicate in_range9(x2: int) = (((-2147483648) <= x2) and (x2 <= 2147483647))

logic to_int4 : tid3B -> int

logic of_int4 : int -> tid3B

predicate eq8(x2: tid3B, y: tid3B) = (to_int4(x2) = to_int4(y))

axiom range_axiom8 : (forall x2:tid3B. in_range9(to_int4(x2)))

axiom inversion_axiom8 :
  (forall x2:tid3B [to_int4(x2)]. (of_int4(to_int4(x2)) = x2))

logic dummy18 : tid3B

axiom coerce_axiom8 :
  (forall x2:int [to_int4(of_int4(x2))| in_range9(x2), of_int4(x2)].
  (in_range9(x2) -> (to_int4(of_int4(x2)) = x2)))

type id4

logic attr__ATTRIBUTE_MODULUS9 : int

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

predicate in_range10(x2: int) = (((-1) <= x2) and (x2 <= 1))

logic to_int5 : id4 -> int

logic of_int5 : int -> id4

predicate eq9(x2: id4, y: id4) = (to_int5(x2) = to_int5(y))

axiom range_axiom9 : (forall x2:id4. in_range10(to_int5(x2)))

axiom inversion_axiom9 :
  (forall x2:id4 [to_int5(x2)]. (of_int5(to_int5(x2)) = x2))

logic dummy19 : id4

axiom coerce_axiom9 :
  (forall x2:int [to_int5(of_int5(x2))| in_range10(x2), of_int5(x2)].
  (in_range10(x2) -> (to_int5(of_int5(x2)) = x2)))

logic id13 : id8 -> id4

type t11

type t12

type us_t5

logic mk___t5 : id290 map, int -> us_t5

logic elts6 : us_t5 -> id290 map

axiom elts_def7 :
  (forall u:id290 map. forall u1:int. (elts6(mk___t5(u, u1)) = u))

logic offset6 : us_t5 -> int

axiom offset_def7 :
  (forall u:id290 map. forall u1:int. (offset6(mk___t5(u, u1)) = u1))

axiom us_t_inversion5 : (forall u:us_t5. (u = mk___t5(elts6(u), offset6(u))))

function to_array5(a: us_t5) : id290 t2 = mk_t(elts6(a), offset6(a), 1, 3)

function of_array5(a: id290 t2) : us_t5 = mk___t5(elts(a), offset(a))

logic dummy20 : id290 map

logic dummy21 : int

type id173

logic id172 : id290 map

logic id1721 : int

logic id191 : id8

axiom def_axiom15 : (id191 = of_real(0.529919981956481933593750))

logic id31 : id8

axiom def_axiom16 :
  (id31 = of_real((from_int(1) + 0.57079637050628662109375)))

logic id26 : id8 -> id8

type t13

logic id174 : id8

logic id190 : id8

axiom def_axiom17 : (id190 = of_real(0.3839724361896514892578125))

type id63

logic attr__ATTRIBUTE_MODULUS3 : int

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

predicate in_range3(x2: int) = ((0 <= x2) and (x2 <= 3))

logic to_int : id63 -> int

logic of_int : int -> id63

predicate eq3(x2: id63, y: id63) = (to_int(x2) = to_int(y))

axiom range_axiom3 : (forall x2:id63. in_range3(to_int(x2)))

axiom inversion_axiom3 :
  (forall x2:id63 [to_int(x2)]. (of_int(to_int(x2)) = x2))

logic dummy3 : id63

axiom coerce_axiom3 :
  (forall x2:int [to_int(of_int(x2))| in_range3(x2), of_int(x2)].
  (in_range3(x2) -> (to_int(of_int(x2)) = x2)))

logic id48__ada__867__9 : id40, id40, id40, id40 -> us_t3

axiom def_axiom18 :
  (forall ustemp_id48__ada_16:id40. forall ustemp_id48__ada_17:id40.
  forall ustemp_id48__ada_18:id40. forall ustemp_id48__ada_19:id40
  [id48__ada__867__9(ustemp_id48__ada_16, ustemp_id48__ada_17,
  ustemp_id48__ada_18, ustemp_id48__ada_19)].
  ((((get(elts4(id48__ada__867__9(ustemp_id48__ada_16, ustemp_id48__ada_17,
  ustemp_id48__ada_18, ustemp_id48__ada_19)),
  ((0 + offset4(id48__ada__867__9(ustemp_id48__ada_16, ustemp_id48__ada_17,
  ustemp_id48__ada_18,
  ustemp_id48__ada_19))) - 0)) = ustemp_id48__ada_16) and
  (get(elts4(id48__ada__867__9(ustemp_id48__ada_16, ustemp_id48__ada_17,
  ustemp_id48__ada_18, ustemp_id48__ada_19)),
  ((1 + offset4(id48__ada__867__9(ustemp_id48__ada_16, ustemp_id48__ada_17,
  ustemp_id48__ada_18,
  ustemp_id48__ada_19))) - 0)) = ustemp_id48__ada_17)) and
  (get(elts4(id48__ada__867__9(ustemp_id48__ada_16, ustemp_id48__ada_17,
  ustemp_id48__ada_18, ustemp_id48__ada_19)),
  ((2 + offset4(id48__ada__867__9(ustemp_id48__ada_16, ustemp_id48__ada_17,
  ustemp_id48__ada_18,
  ustemp_id48__ada_19))) - 0)) = ustemp_id48__ada_18)) and
  (get(elts4(id48__ada__867__9(ustemp_id48__ada_16, ustemp_id48__ada_17,
  ustemp_id48__ada_18, ustemp_id48__ada_19)),
  ((3 + offset4(id48__ada__867__9(ustemp_id48__ada_16, ustemp_id48__ada_17,
  ustemp_id48__ada_18, ustemp_id48__ada_19))) - 0)) = ustemp_id48__ada_19)))

logic id25 : id8 -> id8

type t14

logic id175 : bool

logic id17 : id8 -> id8

logic id16 : id8, id8 -> id8

axiom real_const_axiom208 : (0.0 = from_int(0))

axiom real_const_axiom209 : (1.0 = from_int(1))

axiom real_const_axiom210 : (2147483648.0 = from_int(2147483648))

axiom real_const_axiom211 :
  (340282001837565597733306976381245063168.0 = from_int(340282001837565597733306976381245063168))

axiom real_const_axiom212 :
  (340282346638528859811704183484516925440.0 = from_int(340282346638528859811704183484516925440))

axiom real_const_axiom213 : (360.0 = from_int(360))

axiom real_const_axiom214 : (6.0 = from_int(6))

goal WP_parameter_def4 :
  (forall o:id4. forall o1:id8. forall o2:real. forall o3:real.
  forall o4:real. forall o5:real. forall o6:id8. forall o7:id8.
  forall o8:real. forall o9:id8. forall o10:real. forall o11:real.
  forall o12:id8. forall o13:real. forall o14:real. forall o15:real.
  forall id180:id8. forall id181:id8. forall id182:id8. forall id183:id4.
  forall id184:id8. forall id185:id8. forall id186:id8. forall id187:id8.
  forall id188:id8. forall id189:id8. forall id1801:id8. forall id1811:id8.
  forall id1821:id8. forall c:bool. forall id1831:id4. forall id1802:id8.
  ((id180 = of_real(0.0e-1)) -> ((id181 = of_real(0.0e-1)) ->
  ((id182 = of_real(0.0e-1)) -> ((id183 = of_int5(0)) ->
  ((id184 = of_real(0.0e-1)) -> ((id185 = of_real(0.0e-1)) ->
  ((id186 = of_real(0.0e-1)) -> ((id187 = of_real(0.0e-1)) ->
  ((id188 = of_real(0.0e-1)) -> ((id189 = of_real(0.0e-1)) ->
  ((id1801 = of_real(to_real3(get(id172, ((1 + id1721) - 1))))) ->
  ((id1811 = of_real(to_real3(get(id172, ((2 + id1721) - 1))))) ->
  ((id1821 = of_real(to_real3(get(id172, ((3 + id1721) - 1))))) ->
  ((((((o7 = id17(id1801)) and ((((0.0e-1 <= to_real(o7)) and
  ((to_real(id1801) <  0.0e-1) -> (to_real(o7) = (-to_real(id1801))))) and
  ((0.0e-1 <= to_real(id1801)) -> (to_real(o7) = to_real(id1801)))) and
  (to_real(o7) = abs(to_real(id1801))))) and (o8 = to_real(o7))) and
  (((o8 <  0.0000099999997473787516355514526367187500) and (c = true)) or
  ((not (o8 <  0.0000099999997473787516355514526367187500)) and
  (c = false)))) and (((c = true) and ((((o = id13(id1801)) and
  (((0.0e-1 <= to_real(id1801)) -> (to_int5(o) = 1)) and
  ((to_real(id1801) <  0.0e-1) -> (to_int5(o) = (-1))))) and
  (id1831 = o)) and ((((((((o1 = id14(of_int3(to_int5(id1831)))) and
  (((to_real(o1) = from_int(to_int3(of_int3(to_int5(id1831))))) and
  ((-from_int(2147483648)) <= to_real(o1))) and
  (to_real(o1) <= from_int(2147483648)))) and (o2 = to_real(o1))) and
  (o3 = (0.0000099999997473787516355514526367187500 * o2))) and
  (o4 = o3)) and (o5 = o4)) and (o6 = of_real(o5))) and (id1802 = o6)))) or
  ((not (c = true)) and ((id1802 = id1801) and (id1831 = id183))))) ->
  ((((((o12 = id25(id190)) and (((-1.0) <= to_real(o12)) and
  (to_real(o12) <= 1.0))) and (o13 = to_real(o12))) and
  (o14 = (to_real(id1821) * o13))) and (o15 = o14)) ->
  (((((o9 = id24(id190)) and (((-1.0) <= to_real(o9)) and
  (to_real(o9) <= 1.0))) and (o10 = to_real(o9))) and
  (o11 = (to_real(id1811) * o10))) -> in_range1(o11))))))))))))))))))

