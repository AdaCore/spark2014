(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x32: bool, y: bool) : bool = match_bool(x32, y, false)

function orb(x32: bool, y: bool) : bool = match_bool(x32, true, y)

function xorb(x32: bool, y: bool) : bool = match_bool(y, match_bool(x32,
  false, true), match_bool(x32, true, false))

function notb(x32: bool) : bool = match_bool(x32, false, true)

function implb(x32: bool, y: bool) : bool = match_bool(y, true,
  match_bool(x32, false, true))

logic us__ignore : 'a -> unit

type us_private

type us_type_of_heap

type us_image

axiom add_div :
  (forall x38:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x38 + y) / z) = ((x38 / z) + (y / z)))))

axiom sub_div :
  (forall x38:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x38 - y) / z) = ((x38 / z) - (y / z)))))

axiom neg_div :
  (forall x38:real. forall y:real. ((not (y = 0.0)) ->
  (((-x38) / y) = (-(x38 / y)))))

axiom assoc_mul_div :
  (forall x38:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x38 * y) / z) = (x38 * (y / z)))))

axiom assoc_div_mul :
  (forall x38:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x38 / y) / z) = (x38 / (y * z)))))

axiom assoc_div_div :
  (forall x38:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x38 / (y / z)) = ((x38 * z) / y))))

logic abs : real -> real

axiom abs_def :
  (forall x38:real. (((0.0 <= x38) -> (abs(x38) = x38)) and
  ((not (0.0 <= x38)) -> (abs(x38) = (-x38)))))

axiom Abs_le :
  (forall x38:real. forall y:real. ((abs(x38) <= y) <-> (((-y) <= x38) and
  (x38 <= y))))

axiom Abs_pos : (forall x38:real. (0.0 <= abs(x38)))

axiom Abs_sum :
  (forall x38:real. forall y:real. (abs((x38 + y)) <= (abs(x38) + abs(y))))

axiom Abs_prod :
  (forall x38:real. forall y:real. (abs((x38 * y)) = (abs(x38) * abs(y))))

axiom triangular_inequality :
  (forall x38:real. forall y:real. forall z:real.
  (abs((x38 - z)) <= (abs((x38 - y)) + abs((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x38:int. forall y:int.
  (from_int((x38 + y)) = (from_int(x38) + from_int(y))))

axiom Sub :
  (forall x38:int. forall y:int.
  (from_int((x38 - y)) = (from_int(x38) - from_int(y))))

axiom Mul :
  (forall x38:int. forall y:int.
  (from_int((x38 * y)) = (from_int(x38) * from_int(y))))

axiom Neg : (forall x38:int. (from_int((-x38)) = (-from_int(x38))))

axiom Monotonic :
  (forall x38:int. forall y:int. ((x38 <= y) ->
  (from_int(x38) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x38:real. ((0.0 <= x38) -> ((from_int(truncate(x38)) <= x38) and
  (x38 <  from_int((truncate(x38) + 1))))))

axiom Truncate_up_neg :
  (forall x38:real. ((x38 <= 0.0) ->
  ((from_int((truncate(x38) - 1)) <  x38) and
  (x38 <= from_int(truncate(x38))))))

axiom Real_of_truncate :
  (forall x38:real. (((x38 - 1.0) <= from_int(truncate(x38))) and
  (from_int(truncate(x38)) <= (x38 + 1.0))))

axiom Truncate_monotonic :
  (forall x38:real. forall y:real. ((x38 <= y) ->
  (truncate(x38) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x38:real. forall i:int. ((x38 <= from_int(i)) ->
  (truncate(x38) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x38:real. forall i:int. ((from_int(i) <= x38) ->
  (i <= truncate(x38))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x38:real. ((from_int(floor(x38)) <= x38) and
  (x38 <  from_int((floor(x38) + 1)))))

axiom Ceil_up :
  (forall x38:real. ((from_int((ceil(x38) - 1)) <  x38) and
  (x38 <= from_int(ceil(x38)))))

axiom Floor_monotonic :
  (forall x38:real. forall y:real. ((x38 <= y) -> (floor(x38) <= floor(y))))

axiom Ceil_monotonic :
  (forall x38:real. forall y:real. ((x38 <= y) -> (ceil(x38) <= ceil(y))))

logic power : real, int -> real

axiom Power_0 : (forall x38:real. (power(x38, 0) = 1.0))

axiom Power_s :
  (forall x38:real. forall n:int. ((0 <= n) -> (power(x38,
  (n + 1)) = (x38 * power(x38, n)))))

axiom Power_s_alt :
  (forall x38:real. forall n:int. ((0 <  n) -> (power(x38,
  n) = (x38 * power(x38, (n - 1))))))

axiom Power_1 : (forall x38:real. (power(x38, 1) = x38))

axiom Power_sum :
  (forall x38:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x38, (n + m)) = (power(x38, n) * power(x38, m))))))

axiom Power_mult :
  (forall x38:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x38, (n * m)) = power(power(x38, n), m)))))

axiom Power_mult2 :
  (forall x38:real. forall y:real. forall n:int. ((0 <= n) ->
  (power((x38 * y), n) = (power(x38, n) * power(y, n)))))

axiom Pow_ge_one :
  (forall x38:real. forall n:int. (((0 <= n) and (1.0 <= x38)) ->
  (1.0 <= power(x38, n))))

logic round : real -> int

axiom Round_down :
  (forall x38:real. (((x38 - from_int(floor(x38))) <  0.5) ->
  (round(x38) = floor(x38))))

axiom Round_up :
  (forall x38:real. (((from_int(ceil(x38)) - x38) <  0.5) ->
  (round(x38) = ceil(x38))))

axiom Round_neg_tie :
  (forall x38:real. ((((x38 - from_int(floor(x38))) = 0.5) and
  (x38 <  0.0)) -> (round(x38) = floor(x38))))

axiom Round_pos_tie :
  (forall x38:real. ((((from_int(ceil(x38)) - x38) = 0.5) and
  (0.0 <  x38)) -> (round(x38) = ceil(x38))))

axiom Round_int : (forall i:int. (round(from_int(i)) = i))

axiom Round_near_int :
  (forall i:int.
  (forall x38:real. ((((-0.5) <  x38) and (x38 <  0.5)) ->
  (round((from_int(i) + x38)) = i))))

axiom Round_monotonic :
  (forall x38:real. forall y:real. ((x38 <= y) -> (round(x38) <= round(y))))

axiom Round_monotonic_int1 :
  (forall x38:real. forall i:int. ((x38 <= from_int(i)) ->
  (round(x38) <= i)))

axiom Round_monotonic_int2 :
  (forall x38:real. forall i:int. ((from_int(i) <= x38) ->
  (i <= round(x38))))

logic bool_lt : real, real -> bool

logic bool_le : real, real -> bool

logic bool_gt : real, real -> bool

logic bool_ge : real, real -> bool

logic bool_eq : real, real -> bool

logic bool_neq : real, real -> bool

axiom Bool_real__lt_axiom :
  (forall x38:real.
  (forall y:real. ((bool_lt(x38, y) = true) <-> (x38 <  y))))

axiom Bool_real__le_axiom :
  (forall x38:real.
  (forall y:real. ((bool_le(x38, y) = true) <-> (x38 <= y))))

axiom Bool_real__gt_axiom :
  (forall x38:real.
  (forall y:real. ((bool_gt(x38, y) = true) <-> (y <  x38))))

axiom Bool_real__ge_axiom :
  (forall x38:real.
  (forall y:real. ((bool_ge(x38, y) = true) <-> (y <= x38))))

axiom Bool_real__eq_axiom :
  (forall x38:real.
  (forall y:real. ((bool_eq(x38, y) = true) <-> (x38 = y))))

axiom Bool_real__neq_axiom :
  (forall x38:real.
  (forall y:real. ((bool_neq(x38, y) = true) <-> (not (x38 = y)))))

type id33

logic attr__ATTRIBUTE_MODULUS36 : real

predicate in_range37(x69: real) =
  (((-from_int(179769313486230992020837658662958976449983786842660837038051950520470225041328231969140916633187800533730466089161066554924736511065843430761450912561375902626228407975439389274600334275543138858136649643188850972831127319165264882230776574279710570506769976271339046103675183211667223597286787226421245771776)) <= x69) and
  (x69 <= from_int(179769313486230992020837658662958976449983786842660837038051950520470225041328231969140916633187800533730466089161066554924736511065843430761450912561375902626228407975439389274600334275543138858136649643188850972831127319165264882230776574279710570506769976271339046103675183211667223597286787226421245771776)))

logic to_real28 : id33 -> real

logic of_real28 : real -> id33

predicate eq36(x69: id33, y: id33) = (to_real28(x69) = to_real28(y))

axiom range_axiom36 : (forall x69:id33. in_range37(to_real28(x69)))

axiom coerce_axiom36 :
  (forall x69:real [to_real28(of_real28(x69))| in_range37(x69),
  of_real28(x69)]. (in_range37(x69) -> (to_real28(of_real28(x69)) = x69)))

axiom inversion_axiom36 :
  (forall x69:id33 [to_real28(x69)]. (of_real28(to_real28(x69)) = x69))

logic attr__ATTRIBUTE_IMAGE37 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check37 : us_image -> prop

logic attr__ATTRIBUTE_VALUE37 : us_image -> real

logic dummy36 : id33

logic abs1 : int -> int

axiom abs_def22 :
  (forall x70:int. (((0 <= x70) -> (abs1(x70) = x70)) and
  ((not (0 <= x70)) -> (abs1(x70) = (-x70)))))

axiom Abs_le1 :
  (forall x70:int. forall y:int. ((abs1(x70) <= y) <-> (((-y) <= x70) and
  (x70 <= y))))

axiom Abs_pos1 : (forall x70:int. (0 <= abs1(x70)))

logic power1 : int, int -> int

axiom Power_01 : (forall x70:int. (power1(x70, 0) = 1))

axiom Power_s1 :
  (forall x70:int. forall n:int. ((0 <= n) -> (power1(x70,
  (n + 1)) = (x70 * power1(x70, n)))))

axiom Power_s_alt1 :
  (forall x70:int. forall n:int. ((0 <  n) -> (power1(x70,
  n) = (x70 * power1(x70, (n - 1))))))

axiom Power_11 : (forall x70:int. (power1(x70, 1) = x70))

axiom Power_sum1 :
  (forall x70:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x70, (n + m)) = (power1(x70, n) * power1(x70, m))))))

axiom Power_mult1 :
  (forall x70:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x70, (n * m)) = power1(power1(x70, n), m)))))

axiom Power_mult21 :
  (forall x70:int. forall y:int. forall n:int. ((0 <= n) ->
  (power1((x70 * y), n) = (power1(x70, n) * power1(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x70:int. forall y:int. ((x70 <= max(x70, y)) and (y <= max(x70,
  y))))

axiom Max_is_some :
  (forall x70:int. forall y:int. ((max(x70, y) = x70) or (max(x70, y) = y)))

axiom Min_is_le :
  (forall x70:int. forall y:int. ((min(x70, y) <= x70) and (min(x70,
  y) <= y)))

axiom Min_is_some :
  (forall x70:int. forall y:int. ((min(x70, y) = x70) or (min(x70, y) = y)))

axiom Max_x :
  (forall x70:int. forall y:int. ((y <= x70) -> (max(x70, y) = x70)))

axiom Max_y :
  (forall x70:int. forall y:int. ((x70 <= y) -> (max(x70, y) = y)))

axiom Min_x :
  (forall x70:int. forall y:int. ((x70 <= y) -> (min(x70, y) = x70)))

axiom Min_y :
  (forall x70:int. forall y:int. ((y <= x70) -> (min(x70, y) = y)))

axiom Max_sym :
  (forall x70:int. forall y:int. ((y <= x70) -> (max(x70, y) = max(y, x70))))

axiom Min_sym :
  (forall x70:int. forall y:int. ((y <= x70) -> (min(x70, y) = min(y, x70))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x70:int. forall y:int. ((not (y = 0)) -> (x70 = ((y * div(x70,
  y)) + mod(x70, y)))))

axiom Div_bound :
  (forall x70:int. forall y:int. (((0 <= x70) and (0 <  y)) ->
  ((0 <= div(x70, y)) and (div(x70, y) <= x70))))

axiom Mod_bound :
  (forall x70:int. forall y:int. ((not (y = 0)) -> (((-abs1(y)) <  mod(x70,
  y)) and (mod(x70, y) <  abs1(y)))))

axiom Div_sign_pos :
  (forall x70:int. forall y:int. (((0 <= x70) and (0 <  y)) -> (0 <= div(x70,
  y))))

axiom Div_sign_neg :
  (forall x70:int. forall y:int. (((x70 <= 0) and (0 <  y)) -> (div(x70,
  y) <= 0)))

axiom Mod_sign_pos :
  (forall x70:int. forall y:int. (((0 <= x70) and (not (y = 0))) ->
  (0 <= mod(x70, y))))

axiom Mod_sign_neg :
  (forall x70:int. forall y:int. (((x70 <= 0) and (not (y = 0))) -> (mod(x70,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x70:int. forall y:int. ((not (y = 0)) -> (abs1((div(x70,
  y) * y)) <= abs1(x70))))

axiom Div_1 : (forall x70:int. (div(x70, 1) = x70))

axiom Mod_1 : (forall x70:int. (mod(x70, 1) = 0))

axiom Div_inf :
  (forall x70:int. forall y:int. (((0 <= x70) and (x70 <  y)) -> (div(x70,
  y) = 0)))

axiom Mod_inf :
  (forall x70:int. forall y:int. (((0 <= x70) and (x70 <  y)) -> (mod(x70,
  y) = x70)))

axiom Div_mult :
  (forall x70:int. forall y:int. forall z:int [div(((x70 * y) + z), x70)].
  (((0 <  x70) and ((0 <= y) and (0 <= z))) -> (div(((x70 * y) + z),
  x70) = (y + div(z, x70)))))

axiom Mod_mult :
  (forall x70:int. forall y:int. forall z:int [mod(((x70 * y) + z), x70)].
  (((0 <  x70) and ((0 <= y) and (0 <= z))) -> (mod(((x70 * y) + z),
  x70) = mod(z, x70))))

axiom Div_mod1 :
  (forall x70:int. forall y:int. ((not (y = 0)) ->
  (x70 = ((y * (x70 / y)) + (x70 % y)))))

axiom Div_bound1 :
  (forall x70:int. forall y:int. (((0 <= x70) and (0 <  y)) ->
  ((0 <= (x70 / y)) and ((x70 / y) <= x70))))

axiom Mod_bound1 :
  (forall x70:int. forall y:int. ((not (y = 0)) -> ((0 <= (x70 % y)) and
  ((x70 % y) <  abs1(y)))))

axiom Mod_11 : (forall x70:int. ((x70 % 1) = 0))

axiom Div_11 : (forall x70:int. ((x70 / 1) = x70))

axiom Div_inf1 :
  (forall x70:int. forall y:int. (((0 <= x70) and (x70 <  y)) ->
  ((x70 / y) = 0)))

axiom Div_inf_neg :
  (forall x70:int. forall y:int. (((0 <  x70) and (x70 <= y)) ->
  (((-x70) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x70:int. (forall y:int. ((bool_eq1(x70, y) = true) <-> (x70 = y))))

axiom bool_ne_axiom :
  (forall x70:int.
  (forall y:int. ((bool_ne(x70, y) = true) <-> (not (x70 = y)))))

axiom bool_lt_axiom :
  (forall x70:int.
  (forall y:int. ((bool_lt1(x70, y) = true) <-> (x70 <  y))))

axiom Bool_int__le_axiom :
  (forall x70:int.
  (forall y:int. ((bool_le1(x70, y) = true) <-> (x70 <= y))))

axiom bool_gt_axiom :
  (forall x70:int.
  (forall y:int. ((bool_gt1(x70, y) = true) <-> (y <  x70))))

axiom bool_ge_axiom :
  (forall x70:int.
  (forall y:int. ((bool_ge1(x70, y) = true) <-> (y <= x70))))

function ite(b: bool, x70: 'a, y: 'a) : 'a = match_bool(b, x70, y)

logic to_int2 : bool -> int

axiom to_int_def19 :
  (forall b:bool. (((b = true) -> (to_int2(b) = 1)) and ((not (b = true)) ->
  (to_int2(b) = 0))))

logic of_int2 : int -> bool

axiom of_int_def19 :
  (forall i:int. (((i = 0) -> (of_int2(i) = false)) and ((not (i = 0)) ->
  (of_int2(i) = true))))

predicate in_range29(x70: int) = ((x70 = 0) or (x70 = 1))

logic attr__ATTRIBUTE_IMAGE29 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check29 : us_image -> prop

logic attr__ATTRIBUTE_VALUE29 : us_image -> bool

logic x98 : id33

type tid33B

logic attr__ATTRIBUTE_MODULUS37 : real

predicate in_range38(x99: real) =
  (((-from_int(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) <= x99) and
  (x99 <= from_int(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)))

logic to_real29 : tid33B -> real

logic of_real29 : real -> tid33B

predicate eq37(x99: tid33B, y: tid33B) = (to_real29(x99) = to_real29(y))

axiom range_axiom37 : (forall x99:tid33B. in_range38(to_real29(x99)))

axiom coerce_axiom37 :
  (forall x99:real [to_real29(of_real29(x99))| in_range38(x99),
  of_real29(x99)]. (in_range38(x99) -> (to_real29(of_real29(x99)) = x99)))

axiom inversion_axiom37 :
  (forall x99:tid33B [to_real29(x99)]. (of_real29(to_real29(x99)) = x99))

logic attr__ATTRIBUTE_IMAGE38 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check38 : us_image -> prop

logic attr__ATTRIBUTE_VALUE38 : us_image -> real

logic dummy37 : tid33B

axiom real_const_axiom1047 : (0.0 = from_int(0))

axiom real_const_axiom1048 :
  (179769313486230992020837658662958976449983786842660837038051950520470225041328231969140916633187800533730466089161066554924736511065843430761450912561375902626228407975439389274600334275543138858136649643188850972831127319165264882230776574279710570506769976271339046103675183211667223597286787226421245771776.0 = from_int(179769313486230992020837658662958976449983786842660837038051950520470225041328231969140916633187800533730466089161066554924736511065843430761450912561375902626228407975439389274600334275543138858136649643188850972831127319165264882230776574279710570506769976271339046103675183211667223597286787226421245771776))

axiom real_const_axiom1049 :
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0 = from_int(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368))

goal WP_parameter_def108 :
  ((((-from_int(179769313486230992020837658662958976449983786842660837038051950520470225041328231969140916633187800533730466089161066554924736511065843430761450912561375902626228407975439389274600334275543138858136649643188850972831127319165264882230776574279710570506769976271339046103675183211667223597286787226421245771776)) <= to_real28(x98)) and
  (to_real28(x98) <= from_int(179769313486230992020837658662958976449983786842660837038051950520470225041328231969140916633187800533730466089161066554924736511065843430761450912561375902626228407975439389274600334275543138858136649643188850972831127319165264882230776574279710570506769976271339046103675183211667223597286787226421245771776))) ->
  in_range37(from_int(round(to_real28(x98)))))

