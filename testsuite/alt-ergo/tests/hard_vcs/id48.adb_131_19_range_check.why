(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_private

type us_type_of_heap

type us_image

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

logic abs1 : real -> real

axiom abs_def2 :
  (forall x:real. (((0.0 <= x) -> (abs1(x) = x)) and ((not (0.0 <= x)) ->
  (abs1(x) = (-x)))))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs1(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos1 : (forall x:real. (0.0 <= abs1(x)))

axiom Abs_sum :
  (forall x:real. forall y:real. (abs1((x + y)) <= (abs1(x) + abs1(y))))

axiom Abs_prod :
  (forall x:real. forall y:real. (abs1((x * y)) = (abs1(x) * abs1(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs1((x - z)) <= (abs1((x - y)) + abs1((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x:int. forall y:int.
  (from_int((x + y)) = (from_int(x) + from_int(y))))

axiom Sub :
  (forall x:int. forall y:int.
  (from_int((x - y)) = (from_int(x) - from_int(y))))

axiom Mul :
  (forall x:int. forall y:int.
  (from_int((x * y)) = (from_int(x) * from_int(y))))

axiom Neg : (forall x:int. (from_int((-x)) = (-from_int(x))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) -> (from_int(x) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((from_int(truncate(x)) <= x) and
  (x <  from_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((from_int((truncate(x) - 1)) <  x) and
  (x <= from_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= from_int(truncate(x))) and
  (from_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int(i)) -> (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((from_int(floor(x)) <= x) and
  (x <  from_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((from_int((ceil(x) - 1)) <  x) and
  (x <= from_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

logic power1 : real, int -> real

axiom Power_01 : (forall x:real. (power1(x, 0) = 1.0))

axiom Power_s1 :
  (forall x:real. forall n:int. ((0 <= n) -> (power1(x,
  (n + 1)) = (x * power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:real. forall n:int. ((0 <  n) -> (power1(x, n) = (x * power1(x,
  (n - 1))))))

axiom Power_11 : (forall x:real. (power1(x, 1) = x))

axiom Power_sum1 :
  (forall x:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = (power1(x, n) * power1(x, m))))))

axiom Power_mult1 :
  (forall x:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:real. forall y:real. forall n:int. ((0 <= n) -> (power1((x * y),
  n) = (power1(x, n) * power1(y, n)))))

axiom Pow_ge_one :
  (forall x:real. forall n:int. (((0 <= n) and (1.0 <= x)) ->
  (1.0 <= power1(x, n))))

logic round : real -> int

axiom Round_down :
  (forall x:real. (((x - from_int(floor(x))) <  0.5) ->
  (round(x) = floor(x))))

axiom Round_up :
  (forall x:real. (((from_int(ceil(x)) - x) <  0.5) -> (round(x) = ceil(x))))

axiom Round_neg_tie :
  (forall x:real. ((((x - from_int(floor(x))) = 0.5) and (x <  0.0)) ->
  (round(x) = floor(x))))

axiom Round_pos_tie :
  (forall x:real. ((((from_int(ceil(x)) - x) = 0.5) and (0.0 <  x)) ->
  (round(x) = ceil(x))))

axiom Round_int : (forall i:int. (round(from_int(i)) = i))

axiom Round_near_int :
  (forall i:int.
  (forall x:real. ((((-0.5) <  x) and (x <  0.5)) ->
  (round((from_int(i) + x)) = i))))

axiom Round_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (round(x) <= round(y))))

axiom Round_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int(i)) -> (round(x) <= i)))

axiom Round_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= round(x))))

logic bool_lt1 : real, real -> bool

logic bool_le1 : real, real -> bool

logic bool_gt1 : real, real -> bool

logic bool_ge1 : real, real -> bool

logic bool_eq2 : real, real -> bool

logic bool_neq : real, real -> bool

axiom Bool_real__lt_axiom :
  (forall x:real. (forall y:real. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom Bool_real__le_axiom :
  (forall x:real. (forall y:real. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom Bool_real__gt_axiom :
  (forall x:real. (forall y:real. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom Bool_real__ge_axiom :
  (forall x:real. (forall y:real. ((bool_ge1(x, y) = true) <-> (y <= x))))

axiom Bool_real__eq_axiom :
  (forall x:real. (forall y:real. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom Bool_real__neq_axiom :
  (forall x:real.
  (forall y:real. ((bool_neq(x, y) = true) <-> (not (x = y)))))

type id8

logic attr__ATTRIBUTE_MODULUS14 : real

predicate in_range15(x: real) =
  (((-from_int(340282001837565597733306976381245063168)) <= x) and
  (x <= from_int(340282001837565597733306976381245063168)))

logic to_real2 : id8 -> real

logic of_real2 : real -> id8

predicate eq14(x: id8, y: id8) = (to_real2(x) = to_real2(y))

axiom range_axiom14 : (forall x:id8. in_range15(to_real2(x)))

axiom coerce_axiom14 :
  (forall x:real [to_real2(of_real2(x))| in_range15(x), of_real2(x)].
  (in_range15(x) -> (to_real2(of_real2(x)) = x)))

axiom inversion_axiom14 :
  (forall x:id8 [to_real2(x)]. (of_real2(to_real2(x)) = x))

logic attr__ATTRIBUTE_IMAGE15 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> real

logic dummy30 : id8

logic abs : int -> int

axiom abs_def6 :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type tid3B

logic attr__ATTRIBUTE_MODULUS3 : int

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

predicate in_range3(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int3 : tid3B -> int

logic of_int3 : int -> tid3B

predicate eq3(x: tid3B, y: tid3B) = (to_int3(x) = to_int3(y))

axiom range_axiom3 : (forall x:tid3B. in_range3(to_int3(x)))

axiom inversion_axiom3 :
  (forall x:tid3B [to_int3(x)]. (of_int3(to_int3(x)) = x))

logic dummy9 : tid3B

axiom coerce_axiom3 :
  (forall x:int [to_int3(of_int3(x))| in_range3(x), of_int3(x)].
  (in_range3(x) -> (to_int3(of_int3(x)) = x)))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int10 : bool -> int

axiom to_int_def3 :
  (forall b:bool. (((b = true) -> (to_int10(b) = 1)) and ((not (b = true)) ->
  (to_int10(b) = 0))))

logic of_int10 : int -> bool

axiom of_int_def3 :
  (forall i:int. (((i = 0) -> (of_int10(i) = false)) and ((not (i = 0)) ->
  (of_int10(i) = true))))

predicate in_range10(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE10 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> bool

type tid8B

logic attr__ATTRIBUTE_MODULUS13 : real

predicate in_range14(x: real) =
  (((-from_int(340282346638528859811704183484516925440)) <= x) and
  (x <= from_int(340282346638528859811704183484516925440)))

logic to_real1 : tid8B -> real

logic of_real1 : real -> tid8B

predicate eq13(x: tid8B, y: tid8B) = (to_real1(x) = to_real1(y))

axiom range_axiom13 : (forall x:tid8B. in_range14(to_real1(x)))

axiom coerce_axiom13 :
  (forall x:real [to_real1(of_real1(x))| in_range14(x), of_real1(x)].
  (in_range14(x) -> (to_real1(of_real1(x)) = x)))

axiom inversion_axiom13 :
  (forall x:tid8B [to_real1(x)]. (of_real1(to_real1(x)) = x))

logic attr__ATTRIBUTE_IMAGE14 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> real

logic dummy29 : tid8B

type id4

logic attr__ATTRIBUTE_MODULUS10 : int

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

predicate in_range11(x: int) = (((-1) <= x) and (x <= 1))

logic to_int11 : id4 -> int

logic of_int11 : int -> id4

predicate eq10(x: id4, y: id4) = (to_int11(x) = to_int11(y))

axiom range_axiom10 : (forall x:id4. in_range11(to_int11(x)))

axiom inversion_axiom10 :
  (forall x:id4 [to_int11(x)]. (of_int11(to_int11(x)) = x))

logic dummy24 : id4

axiom coerce_axiom10 :
  (forall x:int [to_int11(of_int11(x))| in_range11(x), of_int11(x)].
  (in_range11(x) -> (to_int11(of_int11(x)) = x)))

logic id13 : id8 -> id4

logic id60 : id8

type id40

logic attr__ATTRIBUTE_MODULUS12 : real

predicate in_range13(x: real) = ((0.0e-1 <= x) and (x <= from_int(360)))

logic to_real : id40 -> real

logic of_real : real -> id40

predicate eq12(x: id40, y: id40) = (to_real(x) = to_real(y))

axiom range_axiom12 : (forall x:id40. in_range13(to_real(x)))

axiom coerce_axiom12 :
  (forall x:real [to_real(of_real(x))| in_range13(x), of_real(x)].
  (in_range13(x) -> (to_real(of_real(x)) = x)))

axiom inversion_axiom12 :
  (forall x:id40 [to_real(x)]. (of_real(to_real(x)) = x))

logic attr__ATTRIBUTE_IMAGE13 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> real

logic dummy28 : id40

type id45

logic attr__ATTRIBUTE_MODULUS22 : real

predicate in_range23(x: real) =
  (((-(from_int(1) + 0.57079637050628662109375)) <= x) and
  (x <= (from_int(1) + 0.57079637050628662109375)))

logic to_real7 : id45 -> real

logic of_real7 : real -> id45

predicate eq22(x: id45, y: id45) = (to_real7(x) = to_real7(y))

axiom range_axiom22 : (forall x:id45. in_range23(to_real7(x)))

axiom coerce_axiom22 :
  (forall x:real [to_real7(of_real7(x))| in_range23(x), of_real7(x)].
  (in_range23(x) -> (to_real7(of_real7(x)) = x)))

axiom inversion_axiom22 :
  (forall x:id45 [to_real7(x)]. (of_real7(to_real7(x)) = x))

logic attr__ATTRIBUTE_IMAGE23 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check23 : us_image -> prop

logic attr__ATTRIBUTE_VALUE23 : us_image -> real

logic dummy54 : id45

logic id261 : id45

type id41

logic attr__ATTRIBUTE_MODULUS30 : real

predicate in_range31(x: real) = (((-from_int(180)) <= x) and
  (x <= from_int(180)))

logic to_real13 : id41 -> real

logic of_real13 : real -> id41

predicate eq30(x: id41, y: id41) = (to_real13(x) = to_real13(y))

axiom range_axiom30 : (forall x:id41. in_range31(to_real13(x)))

axiom coerce_axiom30 :
  (forall x:real [to_real13(of_real13(x))| in_range31(x), of_real13(x)].
  (in_range31(x) -> (to_real13(of_real13(x)) = x)))

axiom inversion_axiom30 :
  (forall x:id41 [to_real13(x)]. (of_real13(to_real13(x)) = x))

logic attr__ATTRIBUTE_IMAGE31 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check31 : us_image -> prop

logic attr__ATTRIBUTE_VALUE31 : us_image -> real

logic dummy86 : id41

type t41

logic id17 : id8 -> id8

logic id36 : id8

axiom def_axiom58 : (id36 = of_real2(from_int(180)))

type t42

type id3

logic attr__ATTRIBUTE_MODULUS9 : int

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

predicate in_range9(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int9 : id3 -> int

logic of_int9 : int -> id3

predicate eq9(x: id3, y: id3) = (to_int9(x) = to_int9(y))

axiom range_axiom9 : (forall x:id3. in_range9(to_int9(x)))

axiom inversion_axiom9 :
  (forall x:id3 [to_int9(x)]. (of_int9(to_int9(x)) = x))

logic dummy23 : id3

axiom coerce_axiom9 :
  (forall x:int [to_int9(of_int9(x))| in_range9(x), of_int9(x)].
  (in_range9(x) -> (to_int9(of_int9(x)) = x)))

type t43

logic id31 : id8

axiom def_axiom36 :
  (id31 = of_real2((from_int(1) + 0.57079637050628662109375)))

logic id14 : id3 -> id8

logic id38 : id8

axiom def_axiom44 : (id38 = of_real2(from_int(360)))

type t44

axiom real_const_axiom696 : (0.0 = from_int(0))

axiom real_const_axiom697 : (1.0 = from_int(1))

axiom real_const_axiom698 : (180.0 = from_int(180))

axiom real_const_axiom699 : (2147483648.0 = from_int(2147483648))

axiom real_const_axiom700 :
  (340282001837565597733306976381245063168.0 = from_int(340282001837565597733306976381245063168))

axiom real_const_axiom701 :
  (340282346638528859811704183484516925440.0 = from_int(340282346638528859811704183484516925440))

axiom real_const_axiom702 : (360.0 = from_int(360))

axiom real_const_axiom703 : (57.0 = from_int(57))

goal WP_parameter_def5 :
  (forall o:id4. forall o1:id8. forall o2:real. forall o3:real.
  forall o4:real. forall o5:real. forall o6:id8. forall o7:id8.
  forall o8:real. forall c:bool. forall id183:id4. forall id1831:id4.
  forall id180:id8. forall id1801:id8. forall id263:id41.
  ((((-(from_int(1) + 0.57079637050628662109375)) <= to_real7(id261)) and
  (to_real7(id261) <= to_real2(id31))) -> ((((((o7 = id17(id60)) and
  ((((0.0e-1 <= to_real2(o7)) and ((to_real2(id60) <  0.0e-1) ->
  (to_real2(o7) = (-to_real2(id60))))) and ((0.0e-1 <= to_real2(id60)) ->
  (to_real2(o7) = to_real2(id60)))) and
  (to_real2(o7) = abs1(to_real2(id60))))) and (o8 = to_real2(o7))) and
  (((o8 <  0.0000099999997473787516355514526367187500) and (c = true)) or
  ((not (o8 <  0.0000099999997473787516355514526367187500)) and
  (c = false)))) and (((c = true) and (((((o = id13(id60)) and
  (((0.0e-1 <= to_real2(id60)) -> (to_int11(o) = 1)) and
  ((to_real2(id60) <  0.0e-1) -> (to_int11(o) = (-1))))) and (id183 = o)) and
  ((((((((o1 = id14(of_int9(to_int11(id183)))) and
  (((to_real2(o1) = from_int(to_int9(of_int9(to_int11(id183))))) and
  ((-from_int(2147483648)) <= to_real2(o1))) and
  (to_real2(o1) <= from_int(2147483648)))) and (o2 = to_real2(o1))) and
  (o3 = (0.0000099999997473787516355514526367187500 * o2))) and
  (o4 = o3)) and (o5 = o4)) and (o6 = of_real2(o5))) and (id180 = o6))) and
  (id1801 = id180))) or ((not (c = true)) and ((id1801 = id60) and
  (id183 = id1831))))) ->
  ((id263 = of_real13((to_real7(id261) * (from_int(57) + 0.295776367187500000)))) ->
  ((not ((-to_real2(id1801)) <  0.0e-1)) ->
  ((not (to_real13(id263) <  0.0e-1)) -> in_range13(to_real13(id263))))))))

