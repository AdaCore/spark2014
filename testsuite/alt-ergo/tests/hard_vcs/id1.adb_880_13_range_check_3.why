(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x32: bool, y: bool) : bool = match_bool(x32, y, false)

function orb(x32: bool, y: bool) : bool = match_bool(x32, true, y)

function xorb(x32: bool, y: bool) : bool = match_bool(y, match_bool(x32,
  false, true), match_bool(x32, true, false))

function notb(x32: bool) : bool = match_bool(x32, false, true)

function implb(x32: bool, y: bool) : bool = match_bool(y, true,
  match_bool(x32, false, true))

logic us__ignore : 'a -> unit

type us_private

type us_type_of_heap

type us_image

axiom add_div :
  (forall x38:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x38 + y) / z) = ((x38 / z) + (y / z)))))

axiom sub_div :
  (forall x38:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x38 - y) / z) = ((x38 / z) - (y / z)))))

axiom neg_div :
  (forall x38:real. forall y:real. ((not (y = 0.0)) ->
  (((-x38) / y) = (-(x38 / y)))))

axiom assoc_mul_div :
  (forall x38:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x38 * y) / z) = (x38 * (y / z)))))

axiom assoc_div_mul :
  (forall x38:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x38 / y) / z) = (x38 / (y * z)))))

axiom assoc_div_div :
  (forall x38:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x38 / (y / z)) = ((x38 * z) / y))))

logic abs : real -> real

axiom abs_def :
  (forall x38:real. (((0.0 <= x38) -> (abs(x38) = x38)) and
  ((not (0.0 <= x38)) -> (abs(x38) = (-x38)))))

axiom Abs_le :
  (forall x38:real. forall y:real. ((abs(x38) <= y) <-> (((-y) <= x38) and
  (x38 <= y))))

axiom Abs_pos : (forall x38:real. (0.0 <= abs(x38)))

axiom Abs_sum :
  (forall x38:real. forall y:real. (abs((x38 + y)) <= (abs(x38) + abs(y))))

axiom Abs_prod :
  (forall x38:real. forall y:real. (abs((x38 * y)) = (abs(x38) * abs(y))))

axiom triangular_inequality :
  (forall x38:real. forall y:real. forall z:real.
  (abs((x38 - z)) <= (abs((x38 - y)) + abs((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x38:int. forall y:int.
  (from_int((x38 + y)) = (from_int(x38) + from_int(y))))

axiom Sub :
  (forall x38:int. forall y:int.
  (from_int((x38 - y)) = (from_int(x38) - from_int(y))))

axiom Mul :
  (forall x38:int. forall y:int.
  (from_int((x38 * y)) = (from_int(x38) * from_int(y))))

axiom Neg : (forall x38:int. (from_int((-x38)) = (-from_int(x38))))

axiom Monotonic :
  (forall x38:int. forall y:int. ((x38 <= y) ->
  (from_int(x38) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x38:real. ((0.0 <= x38) -> ((from_int(truncate(x38)) <= x38) and
  (x38 <  from_int((truncate(x38) + 1))))))

axiom Truncate_up_neg :
  (forall x38:real. ((x38 <= 0.0) ->
  ((from_int((truncate(x38) - 1)) <  x38) and
  (x38 <= from_int(truncate(x38))))))

axiom Real_of_truncate :
  (forall x38:real. (((x38 - 1.0) <= from_int(truncate(x38))) and
  (from_int(truncate(x38)) <= (x38 + 1.0))))

axiom Truncate_monotonic :
  (forall x38:real. forall y:real. ((x38 <= y) ->
  (truncate(x38) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x38:real. forall i:int. ((x38 <= from_int(i)) ->
  (truncate(x38) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x38:real. forall i:int. ((from_int(i) <= x38) ->
  (i <= truncate(x38))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x38:real. ((from_int(floor(x38)) <= x38) and
  (x38 <  from_int((floor(x38) + 1)))))

axiom Ceil_up :
  (forall x38:real. ((from_int((ceil(x38) - 1)) <  x38) and
  (x38 <= from_int(ceil(x38)))))

axiom Floor_monotonic :
  (forall x38:real. forall y:real. ((x38 <= y) -> (floor(x38) <= floor(y))))

axiom Ceil_monotonic :
  (forall x38:real. forall y:real. ((x38 <= y) -> (ceil(x38) <= ceil(y))))

logic power : real, int -> real

axiom Power_0 : (forall x38:real. (power(x38, 0) = 1.0))

axiom Power_s :
  (forall x38:real. forall n:int. ((0 <= n) -> (power(x38,
  (n + 1)) = (x38 * power(x38, n)))))

axiom Power_s_alt :
  (forall x38:real. forall n:int. ((0 <  n) -> (power(x38,
  n) = (x38 * power(x38, (n - 1))))))

axiom Power_1 : (forall x38:real. (power(x38, 1) = x38))

axiom Power_sum :
  (forall x38:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x38, (n + m)) = (power(x38, n) * power(x38, m))))))

axiom Power_mult :
  (forall x38:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x38, (n * m)) = power(power(x38, n), m)))))

axiom Power_mult2 :
  (forall x38:real. forall y:real. forall n:int. ((0 <= n) ->
  (power((x38 * y), n) = (power(x38, n) * power(y, n)))))

axiom Pow_ge_one :
  (forall x38:real. forall n:int. (((0 <= n) and (1.0 <= x38)) ->
  (1.0 <= power(x38, n))))

logic round : real -> int

axiom Round_down :
  (forall x38:real. (((x38 - from_int(floor(x38))) <  0.5) ->
  (round(x38) = floor(x38))))

axiom Round_up :
  (forall x38:real. (((from_int(ceil(x38)) - x38) <  0.5) ->
  (round(x38) = ceil(x38))))

axiom Round_neg_tie :
  (forall x38:real. ((((x38 - from_int(floor(x38))) = 0.5) and
  (x38 <  0.0)) -> (round(x38) = floor(x38))))

axiom Round_pos_tie :
  (forall x38:real. ((((from_int(ceil(x38)) - x38) = 0.5) and
  (0.0 <  x38)) -> (round(x38) = ceil(x38))))

axiom Round_int : (forall i:int. (round(from_int(i)) = i))

axiom Round_near_int :
  (forall i:int.
  (forall x38:real. ((((-0.5) <  x38) and (x38 <  0.5)) ->
  (round((from_int(i) + x38)) = i))))

axiom Round_monotonic :
  (forall x38:real. forall y:real. ((x38 <= y) -> (round(x38) <= round(y))))

axiom Round_monotonic_int1 :
  (forall x38:real. forall i:int. ((x38 <= from_int(i)) ->
  (round(x38) <= i)))

axiom Round_monotonic_int2 :
  (forall x38:real. forall i:int. ((from_int(i) <= x38) ->
  (i <= round(x38))))

logic bool_lt : real, real -> bool

logic bool_le : real, real -> bool

logic bool_gt : real, real -> bool

logic bool_ge : real, real -> bool

logic bool_eq : real, real -> bool

logic bool_neq : real, real -> bool

axiom Bool_real__lt_axiom :
  (forall x38:real.
  (forall y:real. ((bool_lt(x38, y) = true) <-> (x38 <  y))))

axiom Bool_real__le_axiom :
  (forall x38:real.
  (forall y:real. ((bool_le(x38, y) = true) <-> (x38 <= y))))

axiom Bool_real__gt_axiom :
  (forall x38:real.
  (forall y:real. ((bool_gt(x38, y) = true) <-> (y <  x38))))

axiom Bool_real__ge_axiom :
  (forall x38:real.
  (forall y:real. ((bool_ge(x38, y) = true) <-> (y <= x38))))

axiom Bool_real__eq_axiom :
  (forall x38:real.
  (forall y:real. ((bool_eq(x38, y) = true) <-> (x38 = y))))

axiom Bool_real__neq_axiom :
  (forall x38:real.
  (forall y:real. ((bool_neq(x38, y) = true) <-> (not (x38 = y)))))

type float

logic attr__ATTRIBUTE_MODULUS39 : real

predicate in_range40(x101: real) =
  (((-from_int(340282346638528859811704183484516925440)) <= x101) and
  (x101 <= from_int(340282346638528859811704183484516925440)))

logic to_real30 : float -> real

logic of_real30 : real -> float

predicate eq39(x101: float, y: float) = (to_real30(x101) = to_real30(y))

axiom range_axiom39 : (forall x101:float. in_range40(to_real30(x101)))

axiom coerce_axiom39 :
  (forall x101:real [to_real30(of_real30(x101))| in_range40(x101),
  of_real30(x101)]. (in_range40(x101) ->
  (to_real30(of_real30(x101)) = x101)))

axiom inversion_axiom39 :
  (forall x101:float [to_real30(x101)]. (of_real30(to_real30(x101)) = x101))

logic attr__ATTRIBUTE_IMAGE40 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check40 : us_image -> prop

logic attr__ATTRIBUTE_VALUE40 : us_image -> real

logic dummy39 : float

logic abs1 : int -> int

axiom abs_def35 :
  (forall x101:int. (((0 <= x101) -> (abs1(x101) = x101)) and
  ((not (0 <= x101)) -> (abs1(x101) = (-x101)))))

axiom Abs_le1 :
  (forall x101:int. forall y:int. ((abs1(x101) <= y) <-> (((-y) <= x101) and
  (x101 <= y))))

axiom Abs_pos1 : (forall x101:int. (0 <= abs1(x101)))

logic power1 : int, int -> int

axiom Power_01 : (forall x101:int. (power1(x101, 0) = 1))

axiom Power_s1 :
  (forall x101:int. forall n:int. ((0 <= n) -> (power1(x101,
  (n + 1)) = (x101 * power1(x101, n)))))

axiom Power_s_alt1 :
  (forall x101:int. forall n:int. ((0 <  n) -> (power1(x101,
  n) = (x101 * power1(x101, (n - 1))))))

axiom Power_11 : (forall x101:int. (power1(x101, 1) = x101))

axiom Power_sum1 :
  (forall x101:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x101, (n + m)) = (power1(x101, n) * power1(x101, m))))))

axiom Power_mult1 :
  (forall x101:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x101, (n * m)) = power1(power1(x101, n), m)))))

axiom Power_mult21 :
  (forall x101:int. forall y:int. forall n:int. ((0 <= n) ->
  (power1((x101 * y), n) = (power1(x101, n) * power1(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x101:int. forall y:int. ((x101 <= max(x101, y)) and (y <= max(x101,
  y))))

axiom Max_is_some :
  (forall x101:int. forall y:int. ((max(x101, y) = x101) or (max(x101,
  y) = y)))

axiom Min_is_le :
  (forall x101:int. forall y:int. ((min(x101, y) <= x101) and (min(x101,
  y) <= y)))

axiom Min_is_some :
  (forall x101:int. forall y:int. ((min(x101, y) = x101) or (min(x101,
  y) = y)))

axiom Max_x :
  (forall x101:int. forall y:int. ((y <= x101) -> (max(x101, y) = x101)))

axiom Max_y :
  (forall x101:int. forall y:int. ((x101 <= y) -> (max(x101, y) = y)))

axiom Min_x :
  (forall x101:int. forall y:int. ((x101 <= y) -> (min(x101, y) = x101)))

axiom Min_y :
  (forall x101:int. forall y:int. ((y <= x101) -> (min(x101, y) = y)))

axiom Max_sym :
  (forall x101:int. forall y:int. ((y <= x101) -> (max(x101, y) = max(y,
  x101))))

axiom Min_sym :
  (forall x101:int. forall y:int. ((y <= x101) -> (min(x101, y) = min(y,
  x101))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x101:int. forall y:int. ((not (y = 0)) -> (x101 = ((y * div(x101,
  y)) + mod(x101, y)))))

axiom Div_bound :
  (forall x101:int. forall y:int. (((0 <= x101) and (0 <  y)) ->
  ((0 <= div(x101, y)) and (div(x101, y) <= x101))))

axiom Mod_bound :
  (forall x101:int. forall y:int. ((not (y = 0)) -> (((-abs1(y)) <  mod(x101,
  y)) and (mod(x101, y) <  abs1(y)))))

axiom Div_sign_pos :
  (forall x101:int. forall y:int. (((0 <= x101) and (0 <  y)) ->
  (0 <= div(x101, y))))

axiom Div_sign_neg :
  (forall x101:int. forall y:int. (((x101 <= 0) and (0 <  y)) -> (div(x101,
  y) <= 0)))

axiom Mod_sign_pos :
  (forall x101:int. forall y:int. (((0 <= x101) and (not (y = 0))) ->
  (0 <= mod(x101, y))))

axiom Mod_sign_neg :
  (forall x101:int. forall y:int. (((x101 <= 0) and (not (y = 0))) ->
  (mod(x101, y) <= 0)))

axiom Rounds_toward_zero :
  (forall x101:int. forall y:int. ((not (y = 0)) -> (abs1((div(x101,
  y) * y)) <= abs1(x101))))

axiom Div_1 : (forall x101:int. (div(x101, 1) = x101))

axiom Mod_1 : (forall x101:int. (mod(x101, 1) = 0))

axiom Div_inf :
  (forall x101:int. forall y:int. (((0 <= x101) and (x101 <  y)) ->
  (div(x101, y) = 0)))

axiom Mod_inf :
  (forall x101:int. forall y:int. (((0 <= x101) and (x101 <  y)) ->
  (mod(x101, y) = x101)))

axiom Div_mult :
  (forall x101:int. forall y:int. forall z:int [div(((x101 * y) + z), x101)].
  (((0 <  x101) and ((0 <= y) and (0 <= z))) -> (div(((x101 * y) + z),
  x101) = (y + div(z, x101)))))

axiom Mod_mult :
  (forall x101:int. forall y:int. forall z:int [mod(((x101 * y) + z), x101)].
  (((0 <  x101) and ((0 <= y) and (0 <= z))) -> (mod(((x101 * y) + z),
  x101) = mod(z, x101))))

axiom Div_mod1 :
  (forall x101:int. forall y:int. ((not (y = 0)) ->
  (x101 = ((y * (x101 / y)) + (x101 % y)))))

axiom Div_bound1 :
  (forall x101:int. forall y:int. (((0 <= x101) and (0 <  y)) ->
  ((0 <= (x101 / y)) and ((x101 / y) <= x101))))

axiom Mod_bound1 :
  (forall x101:int. forall y:int. ((not (y = 0)) -> ((0 <= (x101 % y)) and
  ((x101 % y) <  abs1(y)))))

axiom Mod_11 : (forall x101:int. ((x101 % 1) = 0))

axiom Div_11 : (forall x101:int. ((x101 / 1) = x101))

axiom Div_inf1 :
  (forall x101:int. forall y:int. (((0 <= x101) and (x101 <  y)) ->
  ((x101 / y) = 0)))

axiom Div_inf_neg :
  (forall x101:int. forall y:int. (((0 <  x101) and (x101 <= y)) ->
  (((-x101) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x101:int.
  (forall y:int. ((bool_eq1(x101, y) = true) <-> (x101 = y))))

axiom bool_ne_axiom :
  (forall x101:int.
  (forall y:int. ((bool_ne(x101, y) = true) <-> (not (x101 = y)))))

axiom bool_lt_axiom :
  (forall x101:int.
  (forall y:int. ((bool_lt1(x101, y) = true) <-> (x101 <  y))))

axiom Bool_int__le_axiom :
  (forall x101:int.
  (forall y:int. ((bool_le1(x101, y) = true) <-> (x101 <= y))))

axiom bool_gt_axiom :
  (forall x101:int.
  (forall y:int. ((bool_gt1(x101, y) = true) <-> (y <  x101))))

axiom bool_ge_axiom :
  (forall x101:int.
  (forall y:int. ((bool_ge1(x101, y) = true) <-> (y <= x101))))

type natural

logic attr__ATTRIBUTE_MODULUS40 : int

logic attr__ATTRIBUTE_IMAGE41 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check41 : us_image -> prop

logic attr__ATTRIBUTE_VALUE41 : us_image -> int

predicate in_range41(x101: int) = ((0 <= x101) and (x101 <= 2147483647))

logic to_int10 : natural -> int

logic of_int10 : int -> natural

predicate eq40(x101: natural, y: natural) = (to_int10(x101) = to_int10(y))

axiom range_axiom40 : (forall x101:natural. in_range41(to_int10(x101)))

axiom inversion_axiom40 :
  (forall x101:natural [to_int10(x101)]. (of_int10(to_int10(x101)) = x101))

logic dummy40 : natural

axiom coerce_axiom40 :
  (forall x101:int [to_int10(of_int10(x101))| in_range41(x101),
  of_int10(x101)]. (in_range41(x101) -> (to_int10(of_int10(x101)) = x101)))

type integer

logic attr__ATTRIBUTE_MODULUS41 : int

logic attr__ATTRIBUTE_IMAGE42 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check42 : us_image -> prop

logic attr__ATTRIBUTE_VALUE42 : us_image -> int

predicate in_range42(x101: int) = (((-2147483648) <= x101) and
  (x101 <= 2147483647))

logic to_int11 : integer -> int

logic of_int11 : int -> integer

predicate eq41(x101: integer, y: integer) = (to_int11(x101) = to_int11(y))

axiom range_axiom41 : (forall x101:integer. in_range42(to_int11(x101)))

axiom inversion_axiom41 :
  (forall x101:integer [to_int11(x101)]. (of_int11(to_int11(x101)) = x101))

logic dummy41 : integer

axiom coerce_axiom41 :
  (forall x101:int [to_int11(of_int11(x101))| in_range42(x101),
  of_int11(x101)]. (in_range42(x101) -> (to_int11(of_int11(x101)) = x101)))

type 'a map

logic get : int, int, 'a map -> 'a

logic set : int, int, 'a map, 'a -> 'a map

axiom accupd_eq :
  (forall a:'a map.
  (forall i:int.
  (forall j:int.
  (forall v:'a [set(i, j, a, v)]. (get(i, j, set(i, j, a, v)) = v)))))

axiom accupd_neq :
  (forall a:'a map.
  (forall i1:int.
  (forall i2:int.
  (forall j1:int.
  (forall j2:int.
  (forall v:'a [get(i2, j2, set(i1, j1, a, v))| set(i1, j1, a, v), get(i2,
  j2, a)]. (((not (i1 = i2)) or (not (j1 = j2))) -> (get(i2, j2, set(i1, j1,
  a, v)) = get(i2, j2, a)))))))))

type 'a t26

logic mk_t : 'a map, int, int, int, int, int, int -> 'a t26

logic elts : 'a t26 -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (elts(mk_t(u, u1, u2, u3, u4,
  u5, u6)) = u))

logic offset : 'a t26 -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (offset(mk_t(u, u1, u2, u3,
  u4, u5, u6)) = u1))

logic offset_2 : 'a t26 -> int

axiom offset_2_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (offset_2(mk_t(u, u1, u2, u3,
  u4, u5, u6)) = u2))

logic first : 'a t26 -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (first(mk_t(u, u1, u2, u3, u4,
  u5, u6)) = u3))

logic last : 'a t26 -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (last(mk_t(u, u1, u2, u3, u4,
  u5, u6)) = u4))

logic first_2 : 'a t26 -> int

axiom first_2_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (first_2(mk_t(u, u1, u2, u3,
  u4, u5, u6)) = u5))

logic last_2 : 'a t26 -> int

axiom last_2_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (last_2(mk_t(u, u1, u2, u3,
  u4, u5, u6)) = u6))

axiom t_inversion :
  (forall u:'a t26. (u = mk_t(elts(u), offset(u), offset_2(u), first(u),
  last(u), first_2(u), last_2(u))))

function access(i: int, j: int, x101: 'a t26) : 'a =
  get(((i + offset(x101)) - first(x101)),
  ((j + offset_2(x101)) - first_2(x101)), elts(x101))

function update(i: int, j: int, x101: 'a t26, v: 'a) : 'a t26 =
  mk_t(set(((i + offset(x101)) - first(x101)),
  ((j + offset_2(x101)) - first_2(x101)), elts(x101), v), offset(x101),
  offset_2(x101), first(x101), last(x101), first_2(x101), last_2(x101))

logic bool_eq2 : 'a t26, 'a t26 -> bool

logic attr__ATTRIBUTE_LENGTH : 'a t26 -> int

axiom attr__ATTRIBUTE_LENGTH_def :
  (forall x101:'a t26. (((first(x101) <= last(x101)) ->
  (attr__ATTRIBUTE_LENGTH(x101) = ((last(x101) - first(x101)) + 1))) and
  ((not (first(x101) <= last(x101))) -> (attr__ATTRIBUTE_LENGTH(x101) = 0))))

logic attr__ATTRIBUTE_LENGTH_2 : 'a t26 -> int

axiom attr__ATTRIBUTE_LENGTH_2_def :
  (forall x101:'a t26. (((first_2(x101) <= last_2(x101)) ->
  (attr__ATTRIBUTE_LENGTH_2(x101) = ((last_2(x101) - first_2(x101)) + 1))) and
  ((not (first_2(x101) <= last_2(x101))) ->
  (attr__ATTRIBUTE_LENGTH_2(x101) = 0))))

axiom T__ada_array_2___equal_def :
  (forall a:'a map. forall a1:int. forall a2:int. forall a3:int.
  forall a4:int. forall a5:int. forall a6:int.
  (forall b:'a map. forall b1:int. forall b2:int. forall b3:int.
  forall b4:int. forall b5:int. forall b6:int [bool_eq2(mk_t(a, a1, a2, a3,
  a4, a5, a6), mk_t(b, b1, b2, b3, b4, b5, b6))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2, a3, a4, a5,
  a6)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3, b4, b5, b6))) and
  ((attr__ATTRIBUTE_LENGTH_2(mk_t(a, a1, a2, a3, a4, a5,
  a6)) = attr__ATTRIBUTE_LENGTH_2(mk_t(b, b1, b2, b3, b4, b5, b6))) and
  (forall i:int.
  (forall j:int [access(i, j, mk_t(a, a1, a2, a3, a4, a5, a6))].
  (((a3 <= i) and (i <= a4)) -> (((a5 <= j) and (j <= a6)) ->
  (get(((i + a1) - a3), ((j + a2) - a5),
  a) = get(((((b3 - a3) + i) + b1) - b3), ((((b5 - a5) + j) + b2) - b5),
  b)))))))) -> (bool_eq2(mk_t(a, a1, a2, a3, a4, a5, a6), mk_t(b, b1, b2, b3,
  b4, b5, b6)) = true)) and ((bool_eq2(mk_t(a, a1, a2, a3, a4, a5, a6),
  mk_t(b, b1, b2, b3, b4, b5, b6)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2, a3, a4, a5,
  a6)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3, b4, b5, b6))) and
  ((attr__ATTRIBUTE_LENGTH_2(mk_t(a, a1, a2, a3, a4, a5,
  a6)) = attr__ATTRIBUTE_LENGTH_2(mk_t(b, b1, b2, b3, b4, b5, b6))) and
  (forall i:int.
  (forall j:int [access(i, j, mk_t(a, a1, a2, a3, a4, a5, a6))].
  (((a3 <= i) and (i <= a4)) -> (((a5 <= j) and (j <= a6)) ->
  (get(((i + a1) - a3), ((j + a2) - a5),
  a) = get(((((b3 - a3) + i) + b1) - b3), ((((b5 - a5) + j) + b2) - b5),
  b))))))))))))

type t27

logic first1 : t27 -> integer

logic last1 : t27 -> integer

logic mk : int, int -> t27

axiom range_axiom_first :
  (forall a:t27 [first1(a)]. ((to_int11(first1(a)) <= to_int11(last1(a))) ->
  in_range41(to_int11(first1(a)))))

axiom range_axiom_last :
  (forall a:t27 [last1(a)]. ((to_int11(first1(a)) <= to_int11(last1(a))) ->
  in_range41(to_int11(last1(a)))))

predicate range_check(low: int, high: int) = (in_range42(low) and
  (in_range42(high) and ((low <= high) -> (in_range41(low) and
  in_range41(high)))))

type t28

logic first2 : t28 -> integer

logic last2 : t28 -> integer

logic mk1 : int, int -> t28

axiom range_axiom_first1 :
  (forall a:t28 [first2(a)]. ((to_int11(first2(a)) <= to_int11(last2(a))) ->
  in_range41(to_int11(first2(a)))))

axiom range_axiom_last1 :
  (forall a:t28 [last2(a)]. ((to_int11(first2(a)) <= to_int11(last2(a))) ->
  in_range41(to_int11(last2(a)))))

predicate range_check1(low: int, high: int) = (in_range42(low) and
  (in_range42(high) and ((low <= high) -> (in_range41(low) and
  in_range41(high)))))

type us_t

logic mk___t : float map, int, t27, int, t28 -> us_t

logic elts1 : us_t -> float map

axiom elts_def1 :
  (forall u:float map. forall u1:int. forall u2:t27. forall u3:int.
  forall u4:t28. (elts1(mk___t(u, u1, u2, u3, u4)) = u))

logic offset1 : us_t -> int

axiom offset_def1 :
  (forall u:float map. forall u1:int. forall u2:t27. forall u3:int.
  forall u4:t28. (offset1(mk___t(u, u1, u2, u3, u4)) = u1))

logic rt : us_t -> t27

axiom rt_def :
  (forall u:float map. forall u1:int. forall u2:t27. forall u3:int.
  forall u4:t28. (rt(mk___t(u, u1, u2, u3, u4)) = u2))

logic offset_21 : us_t -> int

axiom offset_2_def1 :
  (forall u:float map. forall u1:int. forall u2:t27. forall u3:int.
  forall u4:t28. (offset_21(mk___t(u, u1, u2, u3, u4)) = u3))

logic rt_2 : us_t -> t28

axiom rt_2_def :
  (forall u:float map. forall u1:int. forall u2:t27. forall u3:int.
  forall u4:t28. (rt_2(mk___t(u, u1, u2, u3, u4)) = u4))

axiom us_t_inversion :
  (forall u:us_t. (u = mk___t(elts1(u), offset1(u), rt(u), offset_21(u),
  rt_2(u))))

function to_array(a: us_t) : float t26 = mk_t(elts1(a), offset1(a),
  offset_21(a), to_int11(first1(rt(a))), to_int11(last1(rt(a))),
  to_int11(first2(rt_2(a))), to_int11(last2(rt_2(a))))

function of_array(a: float t26) : us_t = mk___t(elts(a), offset(a),
  mk(first(a), last(a)), offset_2(a), mk1(first_2(a), last_2(a)))

logic dummy42 : float map

logic dummy43 : int

logic dummy44 : t27

logic dummy45 : int

logic dummy46 : t28

type id92

type t168b

logic attr__ATTRIBUTE_FIRST : int

logic attr__ATTRIBUTE_LAST2 : int

logic attr__ATTRIBUTE_MODULUS42 : int

logic attr__ATTRIBUTE_IMAGE43 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check43 : us_image -> prop

logic attr__ATTRIBUTE_VALUE43 : us_image -> int

predicate in_range43(x101: int) = ((attr__ATTRIBUTE_FIRST <= x101) and
  (x101 <= attr__ATTRIBUTE_LAST2))

logic to_int12 : t168b -> int

logic of_int12 : int -> t168b

predicate eq42(x101: t168b, y: t168b) = (to_int12(x101) = to_int12(y))

axiom range_axiom42 : (forall x101:t168b. in_range43(to_int12(x101)))

axiom inversion_axiom42 :
  (forall x101:t168b [to_int12(x101)]. (of_int12(to_int12(x101)) = x101))

logic dummy47 : t168b

axiom coerce_axiom42 :
  (forall x101:int [to_int12(of_int12(x101))| in_range43(x101),
  of_int12(x101)]. (in_range43(x101) -> (to_int12(of_int12(x101)) = x101)))

type t29

type tTresultSP2

logic attr__ATTRIBUTE_FIRST1 : int

logic attr__ATTRIBUTE_LAST3 : int

logic attr__ATTRIBUTE_MODULUS43 : int

logic attr__ATTRIBUTE_IMAGE44 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check44 : us_image -> prop

logic attr__ATTRIBUTE_VALUE44 : us_image -> int

predicate in_range44(x101: int) = ((attr__ATTRIBUTE_FIRST1 <= x101) and
  (x101 <= attr__ATTRIBUTE_LAST3))

logic to_int13 : tTresultSP2 -> int

logic of_int13 : int -> tTresultSP2

predicate eq43(x101: tTresultSP2, y: tTresultSP2) =
  (to_int13(x101) = to_int13(y))

axiom range_axiom43 : (forall x101:tTresultSP2. in_range44(to_int13(x101)))

axiom inversion_axiom43 :
  (forall x101:tTresultSP2 [to_int13(x101)].
  (of_int13(to_int13(x101)) = x101))

logic dummy48 : tTresultSP2

axiom coerce_axiom43 :
  (forall x101:int [to_int13(of_int13(x101))| in_range44(x101),
  of_int13(x101)]. (in_range44(x101) -> (to_int13(of_int13(x101)) = x101)))

logic attr__ATTRIBUTE_FIRST2 : int

logic attr__ATTRIBUTE_LAST4 : int

logic attr__ATTRIBUTE_FIRST_2 : int

logic attr__ATTRIBUTE_LAST_2 : int

type us_t1

logic mk___t1 : float map, int, int -> us_t1

logic elts2 : us_t1 -> float map

axiom elts_def2 :
  (forall u:float map. forall u1:int. forall u2:int. (elts2(mk___t1(u, u1,
  u2)) = u))

logic offset2 : us_t1 -> int

axiom offset_def2 :
  (forall u:float map. forall u1:int. forall u2:int. (offset2(mk___t1(u, u1,
  u2)) = u1))

logic offset_22 : us_t1 -> int

axiom offset_2_def2 :
  (forall u:float map. forall u1:int. forall u2:int. (offset_22(mk___t1(u,
  u1, u2)) = u2))

axiom us_t_inversion1 :
  (forall u:us_t1. (u = mk___t1(elts2(u), offset2(u), offset_22(u))))

function to_array1(a: us_t1) : float t26 = mk_t(elts2(a), offset2(a),
  offset_22(a), attr__ATTRIBUTE_FIRST2, attr__ATTRIBUTE_LAST4,
  attr__ATTRIBUTE_FIRST_2, attr__ATTRIBUTE_LAST_2)

function of_array1(a: float t26) : us_t1 = mk___t1(elts(a), offset(a),
  offset_2(a))

logic dummy49 : float map

logic dummy50 : int

logic dummy51 : int

type tresultS

type t30

type t169b

logic attr__ATTRIBUTE_FIRST3 : int

logic attr__ATTRIBUTE_LAST5 : int

logic attr__ATTRIBUTE_MODULUS44 : int

logic attr__ATTRIBUTE_IMAGE45 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check45 : us_image -> prop

logic attr__ATTRIBUTE_VALUE45 : us_image -> int

predicate in_range45(x101: int) = ((attr__ATTRIBUTE_FIRST3 <= x101) and
  (x101 <= attr__ATTRIBUTE_LAST5))

logic to_int14 : t169b -> int

logic of_int14 : int -> t169b

predicate eq44(x101: t169b, y: t169b) = (to_int14(x101) = to_int14(y))

axiom range_axiom44 : (forall x101:t169b. in_range45(to_int14(x101)))

axiom inversion_axiom44 :
  (forall x101:t169b [to_int14(x101)]. (of_int14(to_int14(x101)) = x101))

logic dummy52 : t169b

axiom coerce_axiom44 :
  (forall x101:int [to_int14(of_int14(x101))| in_range45(x101),
  of_int14(x101)]. (in_range45(x101) -> (to_int14(of_int14(x101)) = x101)))

type t31

logic left4 : float map

logic left5 : int

logic left6 : t27

logic left7 : int

logic left8 : t28

type tS163bP1

logic attr__ATTRIBUTE_FIRST4 : int

logic attr__ATTRIBUTE_LAST6 : int

logic attr__ATTRIBUTE_MODULUS45 : int

logic attr__ATTRIBUTE_IMAGE46 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check46 : us_image -> prop

logic attr__ATTRIBUTE_VALUE46 : us_image -> int

predicate in_range46(x101: int) = ((attr__ATTRIBUTE_FIRST4 <= x101) and
  (x101 <= attr__ATTRIBUTE_LAST6))

logic to_int15 : tS163bP1 -> int

logic of_int15 : int -> tS163bP1

predicate eq45(x101: tS163bP1, y: tS163bP1) = (to_int15(x101) = to_int15(y))

axiom range_axiom45 : (forall x101:tS163bP1. in_range46(to_int15(x101)))

axiom inversion_axiom45 :
  (forall x101:tS163bP1 [to_int15(x101)]. (of_int15(to_int15(x101)) = x101))

logic dummy53 : tS163bP1

axiom coerce_axiom45 :
  (forall x101:int [to_int15(of_int15(x101))| in_range46(x101),
  of_int15(x101)]. (in_range46(x101) -> (to_int15(of_int15(x101)) = x101)))

logic right4 : float map

logic right5 : int

logic right6 : t27

logic right7 : int

logic right8 : t28

type tS163bP2

logic attr__ATTRIBUTE_FIRST5 : int

logic attr__ATTRIBUTE_LAST7 : int

logic attr__ATTRIBUTE_MODULUS46 : int

logic attr__ATTRIBUTE_IMAGE47 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check47 : us_image -> prop

logic attr__ATTRIBUTE_VALUE47 : us_image -> int

predicate in_range47(x101: int) = ((attr__ATTRIBUTE_FIRST5 <= x101) and
  (x101 <= attr__ATTRIBUTE_LAST7))

logic to_int16 : tS163bP2 -> int

logic of_int16 : int -> tS163bP2

predicate eq46(x101: tS163bP2, y: tS163bP2) = (to_int16(x101) = to_int16(y))

axiom range_axiom46 : (forall x101:tS163bP2. in_range47(to_int16(x101)))

axiom inversion_axiom46 :
  (forall x101:tS163bP2 [to_int16(x101)]. (of_int16(to_int16(x101)) = x101))

logic dummy54 : tS163bP2

axiom coerce_axiom46 :
  (forall x101:int [to_int16(of_int16(x101))| in_range47(x101),
  of_int16(x101)]. (in_range47(x101) -> (to_int16(of_int16(x101)) = x101)))

logic attr__ATTRIBUTE_FIRST6 : int

logic attr__ATTRIBUTE_LAST8 : int

logic attr__ATTRIBUTE_FIRST_21 : int

logic attr__ATTRIBUTE_LAST_21 : int

type us_t2

logic mk___t2 : float map, int, int -> us_t2

logic elts3 : us_t2 -> float map

axiom elts_def3 :
  (forall u:float map. forall u1:int. forall u2:int. (elts3(mk___t2(u, u1,
  u2)) = u))

logic offset3 : us_t2 -> int

axiom offset_def3 :
  (forall u:float map. forall u1:int. forall u2:int. (offset3(mk___t2(u, u1,
  u2)) = u1))

logic offset_23 : us_t2 -> int

axiom offset_2_def3 :
  (forall u:float map. forall u1:int. forall u2:int. (offset_23(mk___t2(u,
  u1, u2)) = u2))

axiom us_t_inversion2 :
  (forall u:us_t2. (u = mk___t2(elts3(u), offset3(u), offset_23(u))))

function to_array2(a: us_t2) : float t26 = mk_t(elts3(a), offset3(a),
  offset_23(a), attr__ATTRIBUTE_FIRST6, attr__ATTRIBUTE_LAST8,
  attr__ATTRIBUTE_FIRST_21, attr__ATTRIBUTE_LAST_21)

function of_array2(a: float t26) : us_t2 = mk___t2(elts(a), offset(a),
  offset_2(a))

logic dummy55 : float map

logic dummy56 : int

logic dummy57 : int

type t166b

logic standard__id1__882__9 : float -> us_t2

axiom def_axiom8 :
  (forall ustemp_standard__id1_11:float
  [standard__id1__882__9(ustemp_standard__id1_11)].
  (forall ustemp_standard__id1_12:int. forall ustemp_standard__id1_13:int.
  (get(((ustemp_standard__id1_12 + offset3(standard__id1__882__9(ustemp_standard__id1_11))) - attr__ATTRIBUTE_FIRST6),
  ((ustemp_standard__id1_13 + offset_23(standard__id1__882__9(ustemp_standard__id1_11))) - attr__ATTRIBUTE_FIRST_21),
  elts3(standard__id1__882__9(ustemp_standard__id1_11))) = ustemp_standard__id1_11)))

type tS162bP1

logic attr__ATTRIBUTE_FIRST7 : int

logic attr__ATTRIBUTE_LAST9 : int

logic attr__ATTRIBUTE_MODULUS47 : int

logic attr__ATTRIBUTE_IMAGE48 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check48 : us_image -> prop

logic attr__ATTRIBUTE_VALUE48 : us_image -> int

predicate in_range48(x101: int) = ((attr__ATTRIBUTE_FIRST7 <= x101) and
  (x101 <= attr__ATTRIBUTE_LAST9))

logic to_int17 : tS162bP1 -> int

logic of_int17 : int -> tS162bP1

predicate eq47(x101: tS162bP1, y: tS162bP1) = (to_int17(x101) = to_int17(y))

axiom range_axiom47 : (forall x101:tS162bP1. in_range48(to_int17(x101)))

axiom inversion_axiom47 :
  (forall x101:tS162bP1 [to_int17(x101)]. (of_int17(to_int17(x101)) = x101))

logic dummy58 : tS162bP1

axiom coerce_axiom47 :
  (forall x101:int [to_int17(of_int17(x101))| in_range48(x101),
  of_int17(x101)]. (in_range48(x101) -> (to_int17(of_int17(x101)) = x101)))

type t167b

logic attr__ATTRIBUTE_FIRST8 : int

logic attr__ATTRIBUTE_LAST10 : int

logic attr__ATTRIBUTE_MODULUS48 : int

logic attr__ATTRIBUTE_IMAGE49 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check49 : us_image -> prop

logic attr__ATTRIBUTE_VALUE49 : us_image -> int

predicate in_range49(x101: int) = ((attr__ATTRIBUTE_FIRST8 <= x101) and
  (x101 <= attr__ATTRIBUTE_LAST10))

logic to_int18 : t167b -> int

logic of_int18 : int -> t167b

predicate eq48(x101: t167b, y: t167b) = (to_int18(x101) = to_int18(y))

axiom range_axiom48 : (forall x101:t167b. in_range49(to_int18(x101)))

axiom inversion_axiom48 :
  (forall x101:t167b [to_int18(x101)]. (of_int18(to_int18(x101)) = x101))

logic dummy59 : t167b

axiom coerce_axiom48 :
  (forall x101:int [to_int18(of_int18(x101))| in_range49(x101),
  of_int18(x101)]. (in_range49(x101) -> (to_int18(of_int18(x101)) = x101)))

type t32

type tS162bP2

logic attr__ATTRIBUTE_FIRST9 : int

logic attr__ATTRIBUTE_LAST11 : int

logic attr__ATTRIBUTE_MODULUS49 : int

logic attr__ATTRIBUTE_IMAGE50 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check50 : us_image -> prop

logic attr__ATTRIBUTE_VALUE50 : us_image -> int

predicate in_range50(x101: int) = ((attr__ATTRIBUTE_FIRST9 <= x101) and
  (x101 <= attr__ATTRIBUTE_LAST11))

logic to_int19 : tS162bP2 -> int

logic of_int19 : int -> tS162bP2

predicate eq49(x101: tS162bP2, y: tS162bP2) = (to_int19(x101) = to_int19(y))

axiom range_axiom49 : (forall x101:tS162bP2. in_range50(to_int19(x101)))

axiom inversion_axiom49 :
  (forall x101:tS162bP2 [to_int19(x101)]. (of_int19(to_int19(x101)) = x101))

logic dummy60 : tS162bP2

axiom coerce_axiom49 :
  (forall x101:int [to_int19(of_int19(x101))| in_range50(x101),
  of_int19(x101)]. (in_range50(x101) -> (to_int19(of_int19(x101)) = x101)))

type tTresultSP1

logic attr__ATTRIBUTE_FIRST10 : int

logic attr__ATTRIBUTE_LAST12 : int

logic attr__ATTRIBUTE_MODULUS50 : int

logic attr__ATTRIBUTE_IMAGE51 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check51 : us_image -> prop

logic attr__ATTRIBUTE_VALUE51 : us_image -> int

predicate in_range51(x101: int) = ((attr__ATTRIBUTE_FIRST10 <= x101) and
  (x101 <= attr__ATTRIBUTE_LAST12))

logic to_int20 : tTresultSP1 -> int

logic of_int20 : int -> tTresultSP1

predicate eq50(x101: tTresultSP1, y: tTresultSP1) =
  (to_int20(x101) = to_int20(y))

axiom range_axiom50 : (forall x101:tTresultSP1. in_range51(to_int20(x101)))

axiom inversion_axiom50 :
  (forall x101:tTresultSP1 [to_int20(x101)].
  (of_int20(to_int20(x101)) = x101))

logic dummy61 : tTresultSP1

axiom coerce_axiom50 :
  (forall x101:int [to_int20(of_int20(x101))| in_range51(x101),
  of_int20(x101)]. (in_range51(x101) -> (to_int20(of_int20(x101)) = x101)))

axiom real_const_axiom1097 : (0.0 = from_int(0))

axiom real_const_axiom1098 :
  (340282346638528859811704183484516925440.0 = from_int(340282346638528859811704183484516925440))

goal WP_parameter_def111 : ((attr__ATTRIBUTE_LENGTH_2(to_array(mk___t(left4,
  left5, left6, left7,
  left8))) = attr__ATTRIBUTE_LENGTH(to_array(mk___t(right4, right5, right6,
  right7, right8)))) -> ((((first_2(to_array(mk___t(right4, right5, right6,
  right7, right8))) = attr__ATTRIBUTE_FIRST5) and
  (last_2(to_array(mk___t(right4, right5, right6, right7,
  right8))) = attr__ATTRIBUTE_LAST7)) and ((first(to_array(mk___t(right4,
  right5, right6, right7, right8))) = attr__ATTRIBUTE_FIRST4) and
  (last(to_array(mk___t(right4, right5, right6, right7,
  right8))) = attr__ATTRIBUTE_LAST6))) -> ((first_2(to_array(mk___t(left4,
  left5, left6, left7, left8))) <= last_2(to_array(mk___t(left4, left5,
  left6, left7, left8)))) -> ((0 <= first_2(to_array(mk___t(left4, left5,
  left6, left7, left8)))) and (last_2(to_array(mk___t(left4, left5, left6,
  left7, left8))) <= 2147483647)))))

