(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_private

type us_type_of_heap

type us_image

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

logic abs1 : real -> real

axiom abs_def2 :
  (forall x:real. (((0.0 <= x) -> (abs1(x) = x)) and ((not (0.0 <= x)) ->
  (abs1(x) = (-x)))))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs1(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos1 : (forall x:real. (0.0 <= abs1(x)))

axiom Abs_sum :
  (forall x:real. forall y:real. (abs1((x + y)) <= (abs1(x) + abs1(y))))

axiom Abs_prod :
  (forall x:real. forall y:real. (abs1((x * y)) = (abs1(x) * abs1(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs1((x - z)) <= (abs1((x - y)) + abs1((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x:int. forall y:int.
  (from_int((x + y)) = (from_int(x) + from_int(y))))

axiom Sub :
  (forall x:int. forall y:int.
  (from_int((x - y)) = (from_int(x) - from_int(y))))

axiom Mul :
  (forall x:int. forall y:int.
  (from_int((x * y)) = (from_int(x) * from_int(y))))

axiom Neg : (forall x:int. (from_int((-x)) = (-from_int(x))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) -> (from_int(x) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((from_int(truncate(x)) <= x) and
  (x <  from_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((from_int((truncate(x) - 1)) <  x) and
  (x <= from_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= from_int(truncate(x))) and
  (from_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int(i)) -> (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((from_int(floor(x)) <= x) and
  (x <  from_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((from_int((ceil(x) - 1)) <  x) and
  (x <= from_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

logic power1 : real, int -> real

axiom Power_01 : (forall x:real. (power1(x, 0) = 1.0))

axiom Power_s1 :
  (forall x:real. forall n:int. ((0 <= n) -> (power1(x,
  (n + 1)) = (x * power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:real. forall n:int. ((0 <  n) -> (power1(x, n) = (x * power1(x,
  (n - 1))))))

axiom Power_11 : (forall x:real. (power1(x, 1) = x))

axiom Power_sum1 :
  (forall x:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = (power1(x, n) * power1(x, m))))))

axiom Power_mult1 :
  (forall x:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:real. forall y:real. forall n:int. ((0 <= n) -> (power1((x * y),
  n) = (power1(x, n) * power1(y, n)))))

axiom Pow_ge_one :
  (forall x:real. forall n:int. (((0 <= n) and (1.0 <= x)) ->
  (1.0 <= power1(x, n))))

logic round : real -> int

axiom Round_down :
  (forall x:real. (((x - from_int(floor(x))) <  0.5) ->
  (round(x) = floor(x))))

axiom Round_up :
  (forall x:real. (((from_int(ceil(x)) - x) <  0.5) -> (round(x) = ceil(x))))

axiom Round_neg_tie :
  (forall x:real. ((((x - from_int(floor(x))) = 0.5) and (x <  0.0)) ->
  (round(x) = floor(x))))

axiom Round_pos_tie :
  (forall x:real. ((((from_int(ceil(x)) - x) = 0.5) and (0.0 <  x)) ->
  (round(x) = ceil(x))))

axiom Round_int : (forall i:int. (round(from_int(i)) = i))

axiom Round_near_int :
  (forall i:int.
  (forall x:real. ((((-0.5) <  x) and (x <  0.5)) ->
  (round((from_int(i) + x)) = i))))

axiom Round_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (round(x) <= round(y))))

axiom Round_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int(i)) -> (round(x) <= i)))

axiom Round_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= round(x))))

logic bool_lt1 : real, real -> bool

logic bool_le1 : real, real -> bool

logic bool_gt1 : real, real -> bool

logic bool_ge1 : real, real -> bool

logic bool_eq2 : real, real -> bool

logic bool_neq : real, real -> bool

axiom Bool_real__lt_axiom :
  (forall x:real. (forall y:real. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom Bool_real__le_axiom :
  (forall x:real. (forall y:real. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom Bool_real__gt_axiom :
  (forall x:real. (forall y:real. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom Bool_real__ge_axiom :
  (forall x:real. (forall y:real. ((bool_ge1(x, y) = true) <-> (y <= x))))

axiom Bool_real__eq_axiom :
  (forall x:real. (forall y:real. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom Bool_real__neq_axiom :
  (forall x:real.
  (forall y:real. ((bool_neq(x, y) = true) <-> (not (x = y)))))

type id291

logic attr__ATTRIBUTE_MODULUS19 : real

predicate in_range20(x: real) = (((-from_int(100000)) <= x) and
  (x <= from_int(100000)))

logic to_real4 : id291 -> real

logic of_real4 : real -> id291

predicate eq19(x: id291, y: id291) = (to_real4(x) = to_real4(y))

axiom range_axiom19 : (forall x:id291. in_range20(to_real4(x)))

axiom coerce_axiom19 :
  (forall x:real [to_real4(of_real4(x))| in_range20(x), of_real4(x)].
  (in_range20(x) -> (to_real4(of_real4(x)) = x)))

axiom inversion_axiom19 :
  (forall x:id291 [to_real4(x)]. (of_real4(to_real4(x)) = x))

logic attr__ATTRIBUTE_IMAGE20 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check20 : us_image -> prop

logic attr__ATTRIBUTE_VALUE20 : us_image -> real

logic dummy51 : id291

type id40

logic attr__ATTRIBUTE_MODULUS12 : real

predicate in_range13(x: real) = ((0.0e-1 <= x) and (x <= from_int(360)))

logic to_real : id40 -> real

logic of_real : real -> id40

predicate eq12(x: id40, y: id40) = (to_real(x) = to_real(y))

axiom range_axiom12 : (forall x:id40. in_range13(to_real(x)))

axiom coerce_axiom12 :
  (forall x:real [to_real(of_real(x))| in_range13(x), of_real(x)].
  (in_range13(x) -> (to_real(of_real(x)) = x)))

axiom inversion_axiom12 :
  (forall x:id40 [to_real(x)]. (of_real(to_real(x)) = x))

logic attr__ATTRIBUTE_IMAGE13 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> real

logic dummy28 : id40

type t13

type id290

logic attr__ATTRIBUTE_MODULUS20 : real

predicate in_range21(x: real) = (((-1.0) <= x) and (x <= 1.0))

logic to_real5 : id290 -> real

logic of_real5 : real -> id290

predicate eq20(x: id290, y: id290) = (to_real5(x) = to_real5(y))

axiom range_axiom20 : (forall x:id290. in_range21(to_real5(x)))

axiom coerce_axiom20 :
  (forall x:real [to_real5(of_real5(x))| in_range21(x), of_real5(x)].
  (in_range21(x) -> (to_real5(of_real5(x)) = x)))

axiom inversion_axiom20 :
  (forall x:id290 [to_real5(x)]. (of_real5(to_real5(x)) = x))

logic attr__ATTRIBUTE_IMAGE21 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check21 : us_image -> prop

logic attr__ATTRIBUTE_VALUE21 : us_image -> real

logic dummy52 : id290

type t14

type id265

logic attr__ATTRIBUTE_MODULUS21 : real

predicate in_range22(x: real) = (((-from_int(180)) <= x) and
  (x <= from_int(180)))

logic to_real6 : id265 -> real

logic of_real6 : real -> id265

predicate eq21(x: id265, y: id265) = (to_real6(x) = to_real6(y))

axiom range_axiom21 : (forall x:id265. in_range22(to_real6(x)))

axiom coerce_axiom21 :
  (forall x:real [to_real6(of_real6(x))| in_range22(x), of_real6(x)].
  (in_range22(x) -> (to_real6(of_real6(x)) = x)))

axiom inversion_axiom21 :
  (forall x:id265 [to_real6(x)]. (of_real6(to_real6(x)) = x))

logic attr__ATTRIBUTE_IMAGE22 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check22 : us_image -> prop

logic attr__ATTRIBUTE_VALUE22 : us_image -> real

logic dummy53 : id265

logic id176 : id265

type t15

type id45

logic attr__ATTRIBUTE_MODULUS22 : real

predicate in_range23(x: real) =
  (((-(from_int(1) + 0.57079637050628662109375)) <= x) and
  (x <= (from_int(1) + 0.57079637050628662109375)))

logic to_real7 : id45 -> real

logic of_real7 : real -> id45

predicate eq22(x: id45, y: id45) = (to_real7(x) = to_real7(y))

axiom range_axiom22 : (forall x:id45. in_range23(to_real7(x)))

axiom coerce_axiom22 :
  (forall x:real [to_real7(of_real7(x))| in_range23(x), of_real7(x)].
  (in_range23(x) -> (to_real7(of_real7(x)) = x)))

axiom inversion_axiom22 :
  (forall x:id45 [to_real7(x)]. (of_real7(to_real7(x)) = x))

logic attr__ATTRIBUTE_IMAGE23 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check23 : us_image -> prop

logic attr__ATTRIBUTE_VALUE23 : us_image -> real

logic dummy54 : id45

type tid8B

logic attr__ATTRIBUTE_MODULUS13 : real

predicate in_range14(x: real) =
  (((-from_int(340282346638528859811704183484516925440)) <= x) and
  (x <= from_int(340282346638528859811704183484516925440)))

logic to_real1 : tid8B -> real

logic of_real1 : real -> tid8B

predicate eq13(x: tid8B, y: tid8B) = (to_real1(x) = to_real1(y))

axiom range_axiom13 : (forall x:tid8B. in_range14(to_real1(x)))

axiom coerce_axiom13 :
  (forall x:real [to_real1(of_real1(x))| in_range14(x), of_real1(x)].
  (in_range14(x) -> (to_real1(of_real1(x)) = x)))

axiom inversion_axiom13 :
  (forall x:tid8B [to_real1(x)]. (of_real1(to_real1(x)) = x))

logic attr__ATTRIBUTE_IMAGE14 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> real

logic dummy29 : tid8B

type id8

logic attr__ATTRIBUTE_MODULUS14 : real

predicate in_range15(x: real) =
  (((-from_int(340282001837565597733306976381245063168)) <= x) and
  (x <= from_int(340282001837565597733306976381245063168)))

logic to_real2 : id8 -> real

logic of_real2 : real -> id8

predicate eq14(x: id8, y: id8) = (to_real2(x) = to_real2(y))

axiom range_axiom14 : (forall x:id8. in_range15(to_real2(x)))

axiom coerce_axiom14 :
  (forall x:real [to_real2(of_real2(x))| in_range15(x), of_real2(x)].
  (in_range15(x) -> (to_real2(of_real2(x)) = x)))

axiom inversion_axiom14 :
  (forall x:id8 [to_real2(x)]. (of_real2(to_real2(x)) = x))

logic attr__ATTRIBUTE_IMAGE15 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> real

logic dummy30 : id8

logic id31 : id8

axiom def_axiom36 :
  (id31 = of_real2((from_int(1) + 0.57079637050628662109375)))

type t16

type t17

logic id177 : id265

type t18

logic abs : int -> int

axiom abs_def3 :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def18 :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def18 :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def3 :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def3 :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion3 :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

logic get : 'a map, int -> 'a

logic set : 'a map, int, 'a -> 'a map

axiom Select_eq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)]. ((i = j) -> (get(set(m, i, a),
  j) = a)))))

axiom Select_neq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)| set(m, i, a), get(m, j)].
  ((not (i = j)) -> (get(set(m, i, a), j) = get(m, j))))))

logic attr__ATTRIBUTE_LENGTH : 'a t -> int

axiom attr__ATTRIBUTE_LENGTH_def3 :
  (forall x:'a t. (((first(x) <= last(x)) ->
  (attr__ATTRIBUTE_LENGTH(x) = ((last(x) - first(x)) + 1))) and
  ((not (first(x) <= last(x))) -> (attr__ATTRIBUTE_LENGTH(x) = 0))))

logic bool_eq1 : 'a t, 'a t -> bool

axiom T__ada_array___equal_def :
  (forall a:'a map. forall a1:int. forall a2:int. forall a3:int.
  (forall b:'a map. forall b1:int. forall b2:int. forall b3:int
  [bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2)))))) ->
  (bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true)) and
  ((bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2))))))))))

type us_t15

logic mk___t15 : id290 map, int -> us_t15

logic elts17 : us_t15 -> id290 map

axiom elts_def19 :
  (forall u:id290 map. forall u1:int. (elts17(mk___t15(u, u1)) = u))

logic offset17 : us_t15 -> int

axiom offset_def19 :
  (forall u:id290 map. forall u1:int. (offset17(mk___t15(u, u1)) = u1))

axiom us_t_inversion15 :
  (forall u:us_t15. (u = mk___t15(elts17(u), offset17(u))))

function to_array15(a: us_t15) : id290 t = mk_t(elts17(a), offset17(a), 1, 3)

function of_array15(a: id290 t) : us_t15 = mk___t15(elts(a), offset(a))

logic dummy55 : id290 map

logic dummy56 : int

type id173

type us_t16

logic mk___t16 : id40 map, int -> us_t16

logic elts18 : us_t16 -> id40 map

axiom elts_def20 :
  (forall u:id40 map. forall u1:int. (elts18(mk___t16(u, u1)) = u))

logic offset18 : us_t16 -> int

axiom offset_def20 :
  (forall u:id40 map. forall u1:int. (offset18(mk___t16(u, u1)) = u1))

axiom us_t_inversion16 :
  (forall u:us_t16. (u = mk___t16(elts18(u), offset18(u))))

function to_array16(a: us_t16) : id40 t = mk_t(elts18(a), offset18(a), 0, 3)

function of_array16(a: id40 t) : us_t16 = mk___t16(elts(a), offset(a))

logic dummy57 : id40 map

logic dummy58 : int

type t7b

logic id191 : id8

axiom def_axiom37 : (id191 = of_real2(0.529919981956481933593750))

type id63

logic attr__ATTRIBUTE_MODULUS1 : int

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

predicate in_range1(x: int) = ((0 <= x) and (x <= 3))

logic to_int1 : id63 -> int

logic of_int1 : int -> id63

predicate eq1(x: id63, y: id63) = (to_int1(x) = to_int1(y))

axiom range_axiom1 : (forall x:id63. in_range1(to_int1(x)))

axiom inversion_axiom1 :
  (forall x:id63 [to_int1(x)]. (of_int1(to_int1(x)) = x))

logic dummy5 : id63

axiom coerce_axiom1 :
  (forall x:int [to_int1(of_int1(x))| in_range1(x), of_int1(x)].
  (in_range1(x) -> (to_int1(of_int1(x)) = x)))

logic standard__id48__937__9 : id40, id40, id40, id40 -> us_t16

axiom def_axiom38 :
  (forall ustemp_standard__id48_78:id40.
  forall ustemp_standard__id48_79:id40. forall ustemp_standard__id48_80:id40.
  forall ustemp_standard__id48_81:id40
  [standard__id48__937__9(ustemp_standard__id48_78, ustemp_standard__id48_79,
  ustemp_standard__id48_80, ustemp_standard__id48_81)].
  ((((get(elts18(standard__id48__937__9(ustemp_standard__id48_78,
  ustemp_standard__id48_79, ustemp_standard__id48_80,
  ustemp_standard__id48_81)),
  ((0 + offset18(standard__id48__937__9(ustemp_standard__id48_78,
  ustemp_standard__id48_79, ustemp_standard__id48_80,
  ustemp_standard__id48_81))) - 0)) = ustemp_standard__id48_78) and
  (get(elts18(standard__id48__937__9(ustemp_standard__id48_78,
  ustemp_standard__id48_79, ustemp_standard__id48_80,
  ustemp_standard__id48_81)),
  ((1 + offset18(standard__id48__937__9(ustemp_standard__id48_78,
  ustemp_standard__id48_79, ustemp_standard__id48_80,
  ustemp_standard__id48_81))) - 0)) = ustemp_standard__id48_79)) and
  (get(elts18(standard__id48__937__9(ustemp_standard__id48_78,
  ustemp_standard__id48_79, ustemp_standard__id48_80,
  ustemp_standard__id48_81)),
  ((2 + offset18(standard__id48__937__9(ustemp_standard__id48_78,
  ustemp_standard__id48_79, ustemp_standard__id48_80,
  ustemp_standard__id48_81))) - 0)) = ustemp_standard__id48_80)) and
  (get(elts18(standard__id48__937__9(ustemp_standard__id48_78,
  ustemp_standard__id48_79, ustemp_standard__id48_80,
  ustemp_standard__id48_81)),
  ((3 + offset18(standard__id48__937__9(ustemp_standard__id48_78,
  ustemp_standard__id48_79, ustemp_standard__id48_80,
  ustemp_standard__id48_81))) - 0)) = ustemp_standard__id48_81)))

type us_t17

logic mk___t17 : id40 map, int -> us_t17

logic elts19 : us_t17 -> id40 map

axiom elts_def21 :
  (forall u:id40 map. forall u1:int. (elts19(mk___t17(u, u1)) = u))

logic offset19 : us_t17 -> int

axiom offset_def21 :
  (forall u:id40 map. forall u1:int. (offset19(mk___t17(u, u1)) = u1))

axiom us_t_inversion17 :
  (forall u:us_t17. (u = mk___t17(elts19(u), offset19(u))))

function to_array17(a: us_t17) : id40 t = mk_t(elts19(a), offset19(a), 0, 3)

function of_array17(a: id40 t) : us_t17 = mk___t17(elts(a), offset(a))

logic dummy59 : id40 map

logic dummy60 : int

type id179

type t19

logic id26 : id8 -> id8

logic id300 : id290

axiom def_axiom39 :
  (id300 = of_real5(0.0000099999997473787516355514526367187500))

type t20

logic id35 : id8

axiom def_axiom40 : (id35 = of_real2(from_int(90)))

type t21

logic id190 : id8

axiom def_axiom41 : (id190 = of_real2(0.3839724361896514892578125))

logic id34 : id8

axiom def_axiom42 :
  (id34 = of_real2((from_int(6) + 0.283185482025146484375)))

logic id25 : id8 -> id8

type id301

logic attr__ATTRIBUTE_MODULUS23 : real

predicate in_range24(x: real) = (((-from_int(100000)) <= x) and
  (x <= from_int(100000)))

logic to_real8 : id301 -> real

logic of_real8 : real -> id301

predicate eq23(x: id301, y: id301) = (to_real8(x) = to_real8(y))

axiom range_axiom23 : (forall x:id301. in_range24(to_real8(x)))

axiom coerce_axiom23 :
  (forall x:real [to_real8(of_real8(x))| in_range24(x), of_real8(x)].
  (in_range24(x) -> (to_real8(of_real8(x)) = x)))

axiom inversion_axiom23 :
  (forall x:id301 [to_real8(x)]. (of_real8(to_real8(x)) = x))

logic attr__ATTRIBUTE_IMAGE24 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check24 : us_image -> prop

logic attr__ATTRIBUTE_VALUE24 : us_image -> real

logic dummy61 : id301

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int10 : bool -> int

axiom to_int_def1 :
  (forall b:bool. (((b = true) -> (to_int10(b) = 1)) and ((not (b = true)) ->
  (to_int10(b) = 0))))

logic of_int10 : int -> bool

axiom of_int_def1 :
  (forall i:int. (((i = 0) -> (of_int10(i) = false)) and ((not (i = 0)) ->
  (of_int10(i) = true))))

predicate in_range10(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE10 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> bool

logic id17 : id8 -> id8

type id293

logic attr__ATTRIBUTE_MODULUS24 : real

predicate in_range25(x: real) = ((0.0e-1 <= x) and (x <= 1.0))

logic to_real9 : id293 -> real

logic of_real9 : real -> id293

predicate eq24(x: id293, y: id293) = (to_real9(x) = to_real9(y))

axiom range_axiom24 : (forall x:id293. in_range25(to_real9(x)))

axiom coerce_axiom24 :
  (forall x:real [to_real9(of_real9(x))| in_range25(x), of_real9(x)].
  (in_range25(x) -> (to_real9(of_real9(x)) = x)))

axiom inversion_axiom24 :
  (forall x:id293 [to_real9(x)]. (of_real9(to_real9(x)) = x))

logic attr__ATTRIBUTE_IMAGE25 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check25 : us_image -> prop

logic attr__ATTRIBUTE_VALUE25 : us_image -> real

logic dummy62 : id293

type t22

logic id172 : id290 map

logic id1721 : int

type t23

logic id16 : id8, id8 -> id8

type t24

logic id24 : id8 -> id8

logic id15 : id8, id8 -> id8

logic id37 : id8

axiom def_axiom43 : (id37 = of_real2(from_int(270)))

logic id174 : id290

type id348

logic attr__ATTRIBUTE_MODULUS25 : int

logic attr__ATTRIBUTE_IMAGE26 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check26 : us_image -> prop

logic attr__ATTRIBUTE_VALUE26 : us_image -> int

predicate in_range26(x: int) = ((1 <= x) and (x <= 3))

logic to_int16 : id348 -> int

logic of_int16 : int -> id348

predicate eq25(x: id348, y: id348) = (to_int16(x) = to_int16(y))

axiom range_axiom25 : (forall x:id348. in_range26(to_int16(x)))

axiom inversion_axiom25 :
  (forall x:id348 [to_int16(x)]. (of_int16(to_int16(x)) = x))

logic dummy63 : id348

axiom coerce_axiom25 :
  (forall x:int [to_int16(of_int16(x))| in_range26(x), of_int16(x)].
  (in_range26(x) -> (to_int16(of_int16(x)) = x)))

type t25

type t26

logic id175 : bool

type t27

type t28

logic id38 : id8

axiom def_axiom44 : (id38 = of_real2(from_int(360)))

logic id11 : id8, id8 -> id8

type t29

axiom real_const_axiom374 : (0.0 = from_int(0))

axiom real_const_axiom375 : (1.0 = from_int(1))

axiom real_const_axiom376 : (100000.0 = from_int(100000))

axiom real_const_axiom377 : (180.0 = from_int(180))

axiom real_const_axiom378 : (270.0 = from_int(270))

axiom real_const_axiom379 :
  (340282001837565597733306976381245063168.0 = from_int(340282001837565597733306976381245063168))

axiom real_const_axiom380 :
  (340282346638528859811704183484516925440.0 = from_int(340282346638528859811704183484516925440))

axiom real_const_axiom381 : (360.0 = from_int(360))

axiom real_const_axiom382 : (6.0 = from_int(6))

axiom real_const_axiom383 : (90.0 = from_int(90))

goal WP_parameter_def2 :
  (forall o:id8. forall o1:real. forall o2:real. forall o3:id301.
  forall o4:id8. forall o5:real. forall o6:real. forall o7:real.
  forall o8:real. forall o9:id290. forall o10:id8. forall o11:real.
  forall o12:real. forall o13:real. forall o14:real. forall o15:id290.
  forall o16:id8. forall o17:id8. forall id180:id290. forall id181:id290.
  forall id182:id290. forall id302:id301. forall id297:id290.
  forall id298:id290. forall id299:id291. forall id296:id8. forall id295:id8.
  forall id187:id40. forall id48__id59__id262:id40.
  forall id48__id59__id2621:id40. forall id1871:id40. forall id2991:id291.
  forall id2961:id8. forall id294:id8. forall id186:id40.
  forall id48__id59__id2622:id40. ((((0.0e-1 <  to_real6(id176)) and
  (to_real6(id177) <  0.0e-1)) and
  (0.0e-1 <= (to_real6(id176) + to_real6(id177)))) -> ((id180 = get(id172,
  ((1 + id1721) - 1))) -> ((id181 = get(id172, ((2 + id1721) - 1))) ->
  ((id182 = get(id172, ((3 + id1721) - 1))) ->
  (((((((o = id11(of_real2(to_real5(id180)), of_real2(to_real5(id300)))) and
  (((((((-(1.0 / to_real2(of_real2(to_real5(id300))))) <= to_real2(o)) and
  (to_real2(o) <= (1.0 / to_real2(of_real2(to_real5(id300)))))) and
  ((to_real2(of_real2(to_real5(id300))) <= to_real2(of_real2(to_real5(id180)))) ->
  (to_real2(o) = (1.0 / to_real2(of_real2(to_real5(id180))))))) and
  (((0.0e-1 <= to_real2(of_real2(to_real5(id180)))) and
  (to_real2(of_real2(to_real5(id180))) <  to_real2(of_real2(to_real5(id300))))) ->
  (to_real2(o) = (1.0 / to_real2(of_real2(to_real5(id300))))))) and
  (((to_real2(of_real2(to_real5(id180))) <  0.0e-1) and
  ((-to_real2(of_real2(to_real5(id300)))) <  to_real2(of_real2(to_real5(id180))))) ->
  (to_real2(o) = (-(1.0 / to_real2(of_real2(to_real5(id300)))))))) and
  ((to_real2(of_real2(to_real5(id180))) <= (-to_real2(of_real2(to_real5(id300))))) ->
  (to_real2(o) = (1.0 / to_real2(of_real2(to_real5(id180)))))))) and
  (o1 = to_real2(o))) and (o2 = o1)) and (o3 = of_real8(o2))) and
  (id302 = o3)) -> (((((((((o4 = id24(id190)) and
  (((-1.0) <= to_real2(o4)) and (to_real2(o4) <= 1.0))) and
  (o5 = to_real2(o4))) and (o6 = (to_real5(id181) * o5))) and (o7 = o6)) and
  (o8 = o7)) and (o9 = of_real5(o8))) and (id297 = o9)) ->
  (((((((((o10 = id25(id190)) and (((-1.0) <= to_real2(o10)) and
  (to_real2(o10) <= 1.0))) and (o11 = to_real2(o10))) and
  (o12 = (to_real5(id182) * o11))) and (o13 = o12)) and (o14 = o13)) and
  (o15 = of_real5(o14))) and (id298 = o15)) ->
  ((id299 = of_real4((to_real5(id297) - to_real5(id298)))) ->
  ((id296 = of_real2((to_real4(id299) * to_real8(id302)))) ->
  ((((o16 = id26(id296)) and
  (((-(from_int(1) + 0.57079637050628662109375)) <= to_real2(o16)) and
  (to_real2(o16) <= to_real2(id31)))) and (id295 = o16)) ->
  (((id48__id59__id262 = id187) and (true and
  (id1871 = id48__id59__id2621))) ->
  ((id2991 = of_real4((to_real5(id297) + to_real5(id298)))) ->
  ((id2961 = of_real2((to_real4(id2991) * to_real8(id302)))) ->
  ((((o17 = id26(id2961)) and
  (((-(from_int(1) + 0.57079637050628662109375)) <= to_real2(o17)) and
  (to_real2(o17) <= to_real2(id31)))) and (id294 = o17)) ->
  ((id48__id59__id2622 = id186) ->
  in_range23(to_real2(id294))))))))))))))))))

