(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x3: bool, y: bool) : bool = match_bool(x3, y, false)

function orb(x3: bool, y: bool) : bool = match_bool(x3, true, y)

function xorb(x3: bool, y: bool) : bool = match_bool(y, match_bool(x3, false,
  true), match_bool(x3, true, false))

function notb(x3: bool) : bool = match_bool(x3, false, true)

function implb(x3: bool, y: bool) : bool = match_bool(y, true, match_bool(x3,
  false, true))

logic us__ignore : 'a -> unit

type us_private

type us_type_of_heap

type us_image

axiom add_div :
  (forall x3:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x3 + y) / z) = ((x3 / z) + (y / z)))))

axiom sub_div :
  (forall x3:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x3 - y) / z) = ((x3 / z) - (y / z)))))

axiom neg_div :
  (forall x3:real. forall y:real. ((not (y = 0.0)) ->
  (((-x3) / y) = (-(x3 / y)))))

axiom assoc_mul_div :
  (forall x3:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x3 * y) / z) = (x3 * (y / z)))))

axiom assoc_div_mul :
  (forall x3:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x3 / y) / z) = (x3 / (y * z)))))

axiom assoc_div_div :
  (forall x3:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x3 / (y / z)) = ((x3 * z) / y))))

logic abs1 : real -> real

axiom abs_def1 :
  (forall x3:real. (((0.0 <= x3) -> (abs1(x3) = x3)) and
  ((not (0.0 <= x3)) -> (abs1(x3) = (-x3)))))

axiom Abs_le1 :
  (forall x3:real. forall y:real. ((abs1(x3) <= y) <-> (((-y) <= x3) and
  (x3 <= y))))

axiom Abs_pos1 : (forall x3:real. (0.0 <= abs1(x3)))

axiom Abs_sum :
  (forall x3:real. forall y:real. (abs1((x3 + y)) <= (abs1(x3) + abs1(y))))

axiom Abs_prod :
  (forall x3:real. forall y:real. (abs1((x3 * y)) = (abs1(x3) * abs1(y))))

axiom triangular_inequality :
  (forall x3:real. forall y:real. forall z:real.
  (abs1((x3 - z)) <= (abs1((x3 - y)) + abs1((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x3:int. forall y:int.
  (from_int((x3 + y)) = (from_int(x3) + from_int(y))))

axiom Sub :
  (forall x3:int. forall y:int.
  (from_int((x3 - y)) = (from_int(x3) - from_int(y))))

axiom Mul :
  (forall x3:int. forall y:int.
  (from_int((x3 * y)) = (from_int(x3) * from_int(y))))

axiom Neg : (forall x3:int. (from_int((-x3)) = (-from_int(x3))))

axiom Monotonic :
  (forall x3:int. forall y:int. ((x3 <= y) -> (from_int(x3) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x3:real. ((0.0 <= x3) -> ((from_int(truncate(x3)) <= x3) and
  (x3 <  from_int((truncate(x3) + 1))))))

axiom Truncate_up_neg :
  (forall x3:real. ((x3 <= 0.0) -> ((from_int((truncate(x3) - 1)) <  x3) and
  (x3 <= from_int(truncate(x3))))))

axiom Real_of_truncate :
  (forall x3:real. (((x3 - 1.0) <= from_int(truncate(x3))) and
  (from_int(truncate(x3)) <= (x3 + 1.0))))

axiom Truncate_monotonic :
  (forall x3:real. forall y:real. ((x3 <= y) ->
  (truncate(x3) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x3:real. forall i:int. ((x3 <= from_int(i)) ->
  (truncate(x3) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x3:real. forall i:int. ((from_int(i) <= x3) ->
  (i <= truncate(x3))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x3:real. ((from_int(floor(x3)) <= x3) and
  (x3 <  from_int((floor(x3) + 1)))))

axiom Ceil_up :
  (forall x3:real. ((from_int((ceil(x3) - 1)) <  x3) and
  (x3 <= from_int(ceil(x3)))))

axiom Floor_monotonic :
  (forall x3:real. forall y:real. ((x3 <= y) -> (floor(x3) <= floor(y))))

axiom Ceil_monotonic :
  (forall x3:real. forall y:real. ((x3 <= y) -> (ceil(x3) <= ceil(y))))

logic power1 : real, int -> real

axiom Power_01 : (forall x3:real. (power1(x3, 0) = 1.0))

axiom Power_s1 :
  (forall x3:real. forall n:int. ((0 <= n) -> (power1(x3,
  (n + 1)) = (x3 * power1(x3, n)))))

axiom Power_s_alt1 :
  (forall x3:real. forall n:int. ((0 <  n) -> (power1(x3,
  n) = (x3 * power1(x3, (n - 1))))))

axiom Power_11 : (forall x3:real. (power1(x3, 1) = x3))

axiom Power_sum1 :
  (forall x3:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x3, (n + m)) = (power1(x3, n) * power1(x3, m))))))

axiom Power_mult1 :
  (forall x3:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x3, (n * m)) = power1(power1(x3, n), m)))))

axiom Power_mult21 :
  (forall x3:real. forall y:real. forall n:int. ((0 <= n) ->
  (power1((x3 * y), n) = (power1(x3, n) * power1(y, n)))))

axiom Pow_ge_one :
  (forall x3:real. forall n:int. (((0 <= n) and (1.0 <= x3)) ->
  (1.0 <= power1(x3, n))))

logic round : real -> int

axiom Round_down :
  (forall x3:real. (((x3 - from_int(floor(x3))) <  0.5) ->
  (round(x3) = floor(x3))))

axiom Round_up :
  (forall x3:real. (((from_int(ceil(x3)) - x3) <  0.5) ->
  (round(x3) = ceil(x3))))

axiom Round_neg_tie :
  (forall x3:real. ((((x3 - from_int(floor(x3))) = 0.5) and (x3 <  0.0)) ->
  (round(x3) = floor(x3))))

axiom Round_pos_tie :
  (forall x3:real. ((((from_int(ceil(x3)) - x3) = 0.5) and (0.0 <  x3)) ->
  (round(x3) = ceil(x3))))

axiom Round_int : (forall i:int. (round(from_int(i)) = i))

axiom Round_near_int :
  (forall i:int.
  (forall x3:real. ((((-0.5) <  x3) and (x3 <  0.5)) ->
  (round((from_int(i) + x3)) = i))))

axiom Round_monotonic :
  (forall x3:real. forall y:real. ((x3 <= y) -> (round(x3) <= round(y))))

axiom Round_monotonic_int1 :
  (forall x3:real. forall i:int. ((x3 <= from_int(i)) -> (round(x3) <= i)))

axiom Round_monotonic_int2 :
  (forall x3:real. forall i:int. ((from_int(i) <= x3) -> (i <= round(x3))))

logic bool_lt1 : real, real -> bool

logic bool_le1 : real, real -> bool

logic bool_gt1 : real, real -> bool

logic bool_ge1 : real, real -> bool

logic bool_eq1 : real, real -> bool

logic bool_neq : real, real -> bool

axiom Bool_real__lt_axiom :
  (forall x3:real. (forall y:real. ((bool_lt1(x3, y) = true) <-> (x3 <  y))))

axiom Bool_real__le_axiom :
  (forall x3:real. (forall y:real. ((bool_le1(x3, y) = true) <-> (x3 <= y))))

axiom Bool_real__gt_axiom :
  (forall x3:real. (forall y:real. ((bool_gt1(x3, y) = true) <-> (y <  x3))))

axiom Bool_real__ge_axiom :
  (forall x3:real. (forall y:real. ((bool_ge1(x3, y) = true) <-> (y <= x3))))

axiom Bool_real__eq_axiom :
  (forall x3:real. (forall y:real. ((bool_eq1(x3, y) = true) <-> (x3 = y))))

axiom Bool_real__neq_axiom :
  (forall x3:real.
  (forall y:real. ((bool_neq(x3, y) = true) <-> (not (x3 = y)))))

type id8

logic attr__ATTRIBUTE_MODULUS4 : real

predicate in_range5(x3: real) =
  (((-from_int(340282001837565597733306976381245063168)) <= x3) and
  (x3 <= from_int(340282001837565597733306976381245063168)))

logic to_real : id8 -> real

logic of_real : real -> id8

predicate eq4(x3: id8, y: id8) = (to_real(x3) = to_real(y))

axiom range_axiom4 : (forall x3:id8. in_range5(to_real(x3)))

axiom coerce_axiom4 :
  (forall x3:real [to_real(of_real(x3))| in_range5(x3), of_real(x3)].
  (in_range5(x3) -> (to_real(of_real(x3)) = x3)))

axiom inversion_axiom4 :
  (forall x3:id8 [to_real(x3)]. (of_real(to_real(x3)) = x3))

logic attr__ATTRIBUTE_IMAGE5 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> real

logic dummy4 : id8

logic x15 : id8

logic abs : int -> int

axiom abs_def9 :
  (forall x16:int. (((0 <= x16) -> (abs(x16) = x16)) and ((not (0 <= x16)) ->
  (abs(x16) = (-x16)))))

axiom Abs_le :
  (forall x16:int. forall y:int. ((abs(x16) <= y) <-> (((-y) <= x16) and
  (x16 <= y))))

axiom Abs_pos : (forall x16:int. (0 <= abs(x16)))

logic power : int, int -> int

axiom Power_0 : (forall x16:int. (power(x16, 0) = 1))

axiom Power_s :
  (forall x16:int. forall n:int. ((0 <= n) -> (power(x16,
  (n + 1)) = (x16 * power(x16, n)))))

axiom Power_s_alt :
  (forall x16:int. forall n:int. ((0 <  n) -> (power(x16,
  n) = (x16 * power(x16, (n - 1))))))

axiom Power_1 : (forall x16:int. (power(x16, 1) = x16))

axiom Power_sum :
  (forall x16:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x16, (n + m)) = (power(x16, n) * power(x16, m))))))

axiom Power_mult :
  (forall x16:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x16, (n * m)) = power(power(x16, n), m)))))

axiom Power_mult2 :
  (forall x16:int. forall y:int. forall n:int. ((0 <= n) -> (power((x16 * y),
  n) = (power(x16, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x16:int. forall y:int. ((x16 <= max(x16, y)) and (y <= max(x16,
  y))))

axiom Max_is_some :
  (forall x16:int. forall y:int. ((max(x16, y) = x16) or (max(x16, y) = y)))

axiom Min_is_le :
  (forall x16:int. forall y:int. ((min(x16, y) <= x16) and (min(x16,
  y) <= y)))

axiom Min_is_some :
  (forall x16:int. forall y:int. ((min(x16, y) = x16) or (min(x16, y) = y)))

axiom Max_x :
  (forall x16:int. forall y:int. ((y <= x16) -> (max(x16, y) = x16)))

axiom Max_y :
  (forall x16:int. forall y:int. ((x16 <= y) -> (max(x16, y) = y)))

axiom Min_x :
  (forall x16:int. forall y:int. ((x16 <= y) -> (min(x16, y) = x16)))

axiom Min_y :
  (forall x16:int. forall y:int. ((y <= x16) -> (min(x16, y) = y)))

axiom Max_sym :
  (forall x16:int. forall y:int. ((y <= x16) -> (max(x16, y) = max(y, x16))))

axiom Min_sym :
  (forall x16:int. forall y:int. ((y <= x16) -> (min(x16, y) = min(y, x16))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x16:int. forall y:int. ((not (y = 0)) -> (x16 = ((y * div(x16,
  y)) + mod(x16, y)))))

axiom Div_bound :
  (forall x16:int. forall y:int. (((0 <= x16) and (0 <  y)) ->
  ((0 <= div(x16, y)) and (div(x16, y) <= x16))))

axiom Mod_bound :
  (forall x16:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x16,
  y)) and (mod(x16, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x16:int. forall y:int. (((0 <= x16) and (0 <  y)) -> (0 <= div(x16,
  y))))

axiom Div_sign_neg :
  (forall x16:int. forall y:int. (((x16 <= 0) and (0 <  y)) -> (div(x16,
  y) <= 0)))

axiom Mod_sign_pos :
  (forall x16:int. forall y:int. (((0 <= x16) and (not (y = 0))) ->
  (0 <= mod(x16, y))))

axiom Mod_sign_neg :
  (forall x16:int. forall y:int. (((x16 <= 0) and (not (y = 0))) -> (mod(x16,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x16:int. forall y:int. ((not (y = 0)) -> (abs((div(x16,
  y) * y)) <= abs(x16))))

axiom Div_1 : (forall x16:int. (div(x16, 1) = x16))

axiom Mod_1 : (forall x16:int. (mod(x16, 1) = 0))

axiom Div_inf :
  (forall x16:int. forall y:int. (((0 <= x16) and (x16 <  y)) -> (div(x16,
  y) = 0)))

axiom Mod_inf :
  (forall x16:int. forall y:int. (((0 <= x16) and (x16 <  y)) -> (mod(x16,
  y) = x16)))

axiom Div_mult :
  (forall x16:int. forall y:int. forall z:int [div(((x16 * y) + z), x16)].
  (((0 <  x16) and ((0 <= y) and (0 <= z))) -> (div(((x16 * y) + z),
  x16) = (y + div(z, x16)))))

axiom Mod_mult :
  (forall x16:int. forall y:int. forall z:int [mod(((x16 * y) + z), x16)].
  (((0 <  x16) and ((0 <= y) and (0 <= z))) -> (mod(((x16 * y) + z),
  x16) = mod(z, x16))))

axiom Div_mod1 :
  (forall x16:int. forall y:int. ((not (y = 0)) ->
  (x16 = ((y * (x16 / y)) + (x16 % y)))))

axiom Div_bound1 :
  (forall x16:int. forall y:int. (((0 <= x16) and (0 <  y)) ->
  ((0 <= (x16 / y)) and ((x16 / y) <= x16))))

axiom Mod_bound1 :
  (forall x16:int. forall y:int. ((not (y = 0)) -> ((0 <= (x16 % y)) and
  ((x16 % y) <  abs(y)))))

axiom Mod_11 : (forall x16:int. ((x16 % 1) = 0))

axiom Div_11 : (forall x16:int. ((x16 / 1) = x16))

axiom Div_inf1 :
  (forall x16:int. forall y:int. (((0 <= x16) and (x16 <  y)) ->
  ((x16 / y) = 0)))

axiom Div_inf_neg :
  (forall x16:int. forall y:int. (((0 <  x16) and (x16 <= y)) ->
  (((-x16) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x16:int. (forall y:int. ((bool_eq(x16, y) = true) <-> (x16 = y))))

axiom bool_ne_axiom :
  (forall x16:int.
  (forall y:int. ((bool_ne(x16, y) = true) <-> (not (x16 = y)))))

axiom bool_lt_axiom :
  (forall x16:int. (forall y:int. ((bool_lt(x16, y) = true) <-> (x16 <  y))))

axiom Bool_int__le_axiom :
  (forall x16:int. (forall y:int. ((bool_le(x16, y) = true) <-> (x16 <= y))))

axiom bool_gt_axiom :
  (forall x16:int. (forall y:int. ((bool_gt(x16, y) = true) <-> (y <  x16))))

axiom bool_ge_axiom :
  (forall x16:int. (forall y:int. ((bool_ge(x16, y) = true) <-> (y <= x16))))

function ite(b: bool, x16: 'a, y: 'a) : 'a = match_bool(b, x16, y)

logic to_int2 : bool -> int

axiom to_int_def8 :
  (forall b:bool. (((b = true) -> (to_int2(b) = 1)) and ((not (b = true)) ->
  (to_int2(b) = 0))))

logic of_int2 : int -> bool

axiom of_int_def8 :
  (forall i:int. (((i = 0) -> (of_int2(i) = false)) and ((not (i = 0)) ->
  (of_int2(i) = true))))

predicate in_range2(x16: int) = ((x16 = 0) or (x16 = 1))

logic attr__ATTRIBUTE_IMAGE2 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> bool

type integer

logic attr__ATTRIBUTE_MODULUS6 : int

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

predicate in_range7(x16: int) = (((-2147483648) <= x16) and
  (x16 <= 2147483647))

logic to_int5 : integer -> int

logic of_int5 : int -> integer

predicate eq6(x16: integer, y: integer) = (to_int5(x16) = to_int5(y))

axiom range_axiom6 : (forall x16:integer. in_range7(to_int5(x16)))

axiom inversion_axiom6 :
  (forall x16:integer [to_int5(x16)]. (of_int5(to_int5(x16)) = x16))

logic dummy6 : integer

axiom coerce_axiom6 :
  (forall x16:int [to_int5(of_int5(x16))| in_range7(x16), of_int5(x16)].
  (in_range7(x16) -> (to_int5(of_int5(x16)) = x16)))

type tid8B

logic attr__ATTRIBUTE_MODULUS5 : real

predicate in_range6(x16: real) =
  (((-from_int(340282346638528859811704183484516925440)) <= x16) and
  (x16 <= from_int(340282346638528859811704183484516925440)))

logic to_real1 : tid8B -> real

logic of_real1 : real -> tid8B

predicate eq5(x16: tid8B, y: tid8B) = (to_real1(x16) = to_real1(y))

axiom range_axiom5 : (forall x16:tid8B. in_range6(to_real1(x16)))

axiom coerce_axiom5 :
  (forall x16:real [to_real1(of_real1(x16))| in_range6(x16), of_real1(x16)].
  (in_range6(x16) -> (to_real1(of_real1(x16)) = x16)))

axiom inversion_axiom5 :
  (forall x16:tid8B [to_real1(x16)]. (of_real1(to_real1(x16)) = x16))

logic attr__ATTRIBUTE_IMAGE6 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> real

logic dummy5 : tid8B

axiom real_const_axiom169 : (0.0 = from_int(0))

axiom real_const_axiom170 :
  (340282001837565597733306976381245063168.0 = from_int(340282001837565597733306976381245063168))

axiom real_const_axiom171 :
  (340282346638528859811704183484516925440.0 = from_int(340282346638528859811704183484516925440))

goal WP_parameter_def14 :
  (forall id1__id22__L29s__y:int. forall o:bool. forall o1:bool.
  forall id1__id22___result:id8.
  ((((-from_int(340282001837565597733306976381245063168)) <= to_real(x15)) and
  (to_real(x15) <= from_int(340282001837565597733306976381245063168))) ->
  ((id1__id22___result = of_real(from_int(round(to_real(x15))))) ->
  ((((-2147483648) <= id1__id22__L29s__y) and
  (id1__id22__L29s__y <= 2147483647)) -> ((((to_real(x15) <  0.0e-1) and
  ((((to_real(id1__id22___result) - 0.500000000000000000000000) <  to_real(x15)) and
  (((to_real(x15) <= (to_real(id1__id22___result) + 0.500000000000000000000000)) and
  (o1 = true)) or
  ((not (to_real(x15) <= (to_real(id1__id22___result) + 0.500000000000000000000000))) and
  (o1 = false)))) or
  ((not ((to_real(id1__id22___result) - 0.500000000000000000000000) <  to_real(x15))) and
  (o1 = false)))) or ((not (to_real(x15) <  0.0e-1)) and
  (o1 = of_int2(1)))) -> ((((0.0e-1 <= to_real(x15)) and
  ((((to_real(id1__id22___result) - 0.500000000000000000000000) <= to_real(x15)) and
  (((to_real(x15) <  (to_real(id1__id22___result) + 0.500000000000000000000000)) and
  (o = true)) or
  ((not (to_real(x15) <  (to_real(id1__id22___result) + 0.500000000000000000000000))) and
  (o = false)))) or
  ((not ((to_real(id1__id22___result) - 0.500000000000000000000000) <= to_real(x15))) and
  (o = false)))) or ((not (0.0e-1 <= to_real(x15))) and (o = of_int2(1)))) ->
  in_range5(from_int(id1__id22__L29s__y))))))))

