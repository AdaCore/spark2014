(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_character

type us_private

type us_type_of_heap

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

type range_type

type us_string

logic mk___string : us_character map, int, range_type -> us_string

logic elts1 : us_string -> us_character map

axiom elts_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (elts1(mk___string(u, u1, u2)) = u))

logic offset1 : us_string -> int

axiom offset_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (offset1(mk___string(u, u1, u2)) = u1))

logic rt : us_string -> range_type

axiom rt_def :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (rt(mk___string(u, u1, u2)) = u2))

axiom us_string_inversion :
  (forall u:us_string. (u = mk___string(elts1(u), offset1(u), rt(u))))

logic abs : int -> int

axiom abs_def :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type integer

logic attr__ATTRIBUTE_MODULUS : int

logic attr__ATTRIBUTE_IMAGE : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check : us_string -> prop

logic attr__ATTRIBUTE_VALUE : us_string -> int

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int : integer -> int

logic of_int : int -> integer

predicate eq(x: integer, y: integer) = (to_int(x) = to_int(y))

axiom range_axiom : (forall x:integer. in_range(to_int(x)))

axiom coerce_axiom :
  (forall x:int [to_int(of_int(x))| in_range(x), of_int(x)]. (in_range(x) ->
  (to_int(of_int(x)) = x)))

axiom unicity_axiom :
  (forall x:integer. forall y:integer [to_int(x), to_int(y)].
  ((to_int(x) = to_int(y)) -> (x = y)))

logic dummy : integer

logic r1b : integer

type f

logic attr__ATTRIBUTE_FIRST : int

logic attr__ATTRIBUTE_MODULUS1 : int

logic attr__ATTRIBUTE_IMAGE1 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_string -> prop

logic attr__ATTRIBUTE_VALUE1 : us_string -> int

predicate in_range1(x: int) = ((attr__ATTRIBUTE_FIRST <= x) and (x <= 10))

logic to_int1 : f -> int

logic of_int1 : int -> f

predicate eq1(x: f, y: f) = (to_int1(x) = to_int1(y))

axiom range_axiom1 : (forall x:f. in_range1(to_int1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_int1(of_int1(x))| in_range1(x), of_int1(x)].
  (in_range1(x) -> (to_int1(of_int1(x)) = x)))

axiom unicity_axiom1 :
  (forall x:f. forall y:f [to_int1(x), to_int1(y)].
  ((to_int1(x) = to_int1(y)) -> (x = y)))

logic dummy1 : f

type t1

type positive

logic attr__ATTRIBUTE_MODULUS2 : int

logic attr__ATTRIBUTE_IMAGE2 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_string -> prop

logic attr__ATTRIBUTE_VALUE2 : us_string -> int

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic to_int2 : positive -> int

logic of_int2 : int -> positive

predicate eq2(x: positive, y: positive) = (to_int2(x) = to_int2(y))

axiom range_axiom2 : (forall x:positive. in_range2(to_int2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_int2(of_int2(x))| in_range2(x), of_int2(x)].
  (in_range2(x) -> (to_int2(of_int2(x)) = x)))

axiom unicity_axiom2 :
  (forall x:positive. forall y:positive [to_int2(x), to_int2(y)].
  ((to_int2(x) = to_int2(y)) -> (x = y)))

logic dummy2 : positive

type e

logic attr__ATTRIBUTE_FIRST1 : int

logic attr__ATTRIBUTE_MODULUS3 : int

logic attr__ATTRIBUTE_IMAGE3 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_string -> prop

logic attr__ATTRIBUTE_VALUE3 : us_string -> int

predicate in_range3(x: int) = ((attr__ATTRIBUTE_FIRST1 <= x) and (x <= 10))

logic to_int3 : e -> int

logic of_int3 : int -> e

predicate eq3(x: e, y: e) = (to_int3(x) = to_int3(y))

axiom range_axiom3 : (forall x:e. in_range3(to_int3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_int3(of_int3(x))| in_range3(x), of_int3(x)].
  (in_range3(x) -> (to_int3(of_int3(x)) = x)))

axiom unicity_axiom3 :
  (forall x:e. forall y:e [to_int3(x), to_int3(y)].
  ((to_int3(x) = to_int3(y)) -> (x = y)))

logic dummy3 : e

type t2

logic attr__ATTRIBUTE_FIRST2 : int

logic attr__ATTRIBUTE_MODULUS4 : int

logic attr__ATTRIBUTE_IMAGE4 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_string -> prop

logic attr__ATTRIBUTE_VALUE4 : us_string -> int

predicate in_range4(x: int) = ((attr__ATTRIBUTE_FIRST2 <= x) and (x <= 10))

logic to_int4 : t2 -> int

logic of_int4 : int -> t2

predicate eq4(x: t2, y: t2) = (to_int4(x) = to_int4(y))

axiom range_axiom4 : (forall x:t2. in_range4(to_int4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_int4(of_int4(x))| in_range4(x), of_int4(x)].
  (in_range4(x) -> (to_int4(of_int4(x)) = x)))

axiom unicity_axiom4 :
  (forall x:t2. forall y:t2 [to_int4(x), to_int4(y)].
  ((to_int4(x) = to_int4(y)) -> (x = y)))

logic dummy4 : t2

type t3

type g

logic attr__ATTRIBUTE_FIRST3 : int

logic attr__ATTRIBUTE_MODULUS5 : int

logic attr__ATTRIBUTE_IMAGE5 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_string -> prop

logic attr__ATTRIBUTE_VALUE5 : us_string -> int

predicate in_range5(x: int) = ((attr__ATTRIBUTE_FIRST3 <= x) and (x <= 10))

logic to_int5 : g -> int

logic of_int5 : int -> g

predicate eq5(x: g, y: g) = (to_int5(x) = to_int5(y))

axiom range_axiom5 : (forall x:g. in_range5(to_int5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_int5(of_int5(x))| in_range5(x), of_int5(x)].
  (in_range5(x) -> (to_int5(of_int5(x)) = x)))

axiom unicity_axiom5 :
  (forall x:g. forall y:g [to_int5(x), to_int5(y)].
  ((to_int5(x) = to_int5(y)) -> (x = y)))

logic dummy5 : g

type t4

logic r2b : integer

type a

logic attr__ATTRIBUTE_LAST : int

logic attr__ATTRIBUTE_MODULUS6 : int

logic attr__ATTRIBUTE_IMAGE6 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_string -> prop

logic attr__ATTRIBUTE_VALUE6 : us_string -> int

predicate in_range6(x: int) = ((1 <= x) and (x <= attr__ATTRIBUTE_LAST))

logic to_int6 : a -> int

logic of_int6 : int -> a

predicate eq6(x: a, y: a) = (to_int6(x) = to_int6(y))

axiom range_axiom6 : (forall x:a. in_range6(to_int6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_int6(of_int6(x))| in_range6(x), of_int6(x)].
  (in_range6(x) -> (to_int6(of_int6(x)) = x)))

axiom unicity_axiom6 :
  (forall x:a. forall y:a [to_int6(x), to_int6(y)].
  ((to_int6(x) = to_int6(y)) -> (x = y)))

logic dummy6 : a

type t5

type h

logic attr__ATTRIBUTE_FIRST4 : int

logic attr__ATTRIBUTE_LAST1 : int

logic attr__ATTRIBUTE_MODULUS7 : int

logic attr__ATTRIBUTE_IMAGE7 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_string -> prop

logic attr__ATTRIBUTE_VALUE7 : us_string -> int

predicate in_range7(x: int) = ((attr__ATTRIBUTE_FIRST4 <= x) and
  (x <= attr__ATTRIBUTE_LAST1))

logic to_int7 : h -> int

logic of_int7 : int -> h

predicate eq7(x: h, y: h) = (to_int7(x) = to_int7(y))

axiom range_axiom7 : (forall x:h. in_range7(to_int7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_int7(of_int7(x))| in_range7(x), of_int7(x)].
  (in_range7(x) -> (to_int7(of_int7(x)) = x)))

axiom unicity_axiom7 :
  (forall x:h. forall y:h [to_int7(x), to_int7(y)].
  ((to_int7(x) = to_int7(y)) -> (x = y)))

logic dummy7 : h

type t6

logic x : positive

logic r3b : integer

type b

logic attr__ATTRIBUTE_LAST2 : int

logic attr__ATTRIBUTE_MODULUS8 : int

logic attr__ATTRIBUTE_IMAGE8 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_string -> prop

logic attr__ATTRIBUTE_VALUE8 : us_string -> int

predicate in_range8(x1: int) = ((2 <= x1) and (x1 <= attr__ATTRIBUTE_LAST2))

logic to_int8 : b -> int

logic of_int8 : int -> b

predicate eq8(x1: b, y: b) = (to_int8(x1) = to_int8(y))

axiom range_axiom8 : (forall x1:b. in_range8(to_int8(x1)))

axiom coerce_axiom8 :
  (forall x1:int [to_int8(of_int8(x1))| in_range8(x1), of_int8(x1)].
  (in_range8(x1) -> (to_int8(of_int8(x1)) = x1)))

axiom unicity_axiom8 :
  (forall x1:b. forall y:b [to_int8(x1), to_int8(y)].
  ((to_int8(x1) = to_int8(y)) -> (x1 = y)))

logic dummy8 : b

type t7

type ttB

logic attr__ATTRIBUTE_MODULUS9 : int

logic attr__ATTRIBUTE_IMAGE9 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_string -> prop

logic attr__ATTRIBUTE_VALUE9 : us_string -> int

predicate in_range9(x1: int) = (((-2147483648) <= x1) and (x1 <= 2147483647))

logic to_int9 : ttB -> int

logic of_int9 : int -> ttB

predicate eq9(x1: ttB, y: ttB) = (to_int9(x1) = to_int9(y))

axiom range_axiom9 : (forall x1:ttB. in_range9(to_int9(x1)))

axiom coerce_axiom9 :
  (forall x1:int [to_int9(of_int9(x1))| in_range9(x1), of_int9(x1)].
  (in_range9(x1) -> (to_int9(of_int9(x1)) = x1)))

axiom unicity_axiom9 :
  (forall x1:ttB. forall y:ttB [to_int9(x1), to_int9(y)].
  ((to_int9(x1) = to_int9(y)) -> (x1 = y)))

logic dummy9 : ttB

type c

logic attr__ATTRIBUTE_LAST3 : int

logic attr__ATTRIBUTE_MODULUS10 : int

logic attr__ATTRIBUTE_IMAGE10 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_string -> prop

logic attr__ATTRIBUTE_VALUE10 : us_string -> int

predicate in_range10(x1: int) = ((3 <= x1) and (x1 <= attr__ATTRIBUTE_LAST3))

logic to_int10 : c -> int

logic of_int10 : int -> c

predicate eq10(x1: c, y: c) = (to_int10(x1) = to_int10(y))

axiom range_axiom10 : (forall x1:c. in_range10(to_int10(x1)))

axiom coerce_axiom10 :
  (forall x1:int [to_int10(of_int10(x1))| in_range10(x1), of_int10(x1)].
  (in_range10(x1) -> (to_int10(of_int10(x1)) = x1)))

axiom unicity_axiom10 :
  (forall x1:c. forall y:c [to_int10(x1), to_int10(y)].
  ((to_int10(x1) = to_int10(y)) -> (x1 = y)))

logic dummy10 : c

type t8

type t9

logic z : integer

axiom def_axiom : (z = of_int((to_int2(x) + 1)))

goal WP_parameter_def :
  (forall m:integer. forall oa:a. forall ob:b. forall oc:c. forall oe:e.
  forall of_o:f. forall og:g. forall oh:h. forall m1:integer.
  forall dynamic__p___result:integer. ((to_int2(x) <= 10) ->
  (forall result:integer.
  ((((((((((((((((((((((((dynamic__p___result = of_int(to_int5(og))) and
  (m1 = of_int((to_int(m) + 1)))) and (oh = of_int7((to_int(z) + 1)))) and
  (og = of_int5(10))) and (of_o = of_int1(10))) and
  (oe = of_int3(to_int2(x)))) and (oc = of_int10(to_int(m)))) and
  (ob = of_int8(2))) and (oa = of_int6(1))) and
  ((to_int2(x) = attr__ATTRIBUTE_FIRST2) and (10 = 10))) and
  (((to_int(z) + 1) = attr__ATTRIBUTE_FIRST4) and
  (to_int(r3b) = attr__ATTRIBUTE_LAST1))) and
  (of_int((to_int(m) - 1)) = r3b)) and
  ((to_int(r2b) = attr__ATTRIBUTE_FIRST3) and (10 = 10))) and (m = r2b)) and
  ((to_int(z) = attr__ATTRIBUTE_FIRST) and (10 = 10))) and
  ((to_int2(x) = attr__ATTRIBUTE_FIRST1) and (10 = 10))) and ((3 = 3) and
  (to_int(r1b) = attr__ATTRIBUTE_LAST3))) and (m = r1b)) and ((2 = 2) and
  (to_int(z) = attr__ATTRIBUTE_LAST2))) and ((1 = 1) and
  (to_int2(x) = attr__ATTRIBUTE_LAST))) and
  (m = of_int((to_int2(x) + 2)))) and (of_int((to_int2(x) + 1)) = z)) and
  (result = dynamic__p___result)) ->
  (((to_int2(x) + 2) <= to_int(dynamic__p___result)) and
  (to_int(dynamic__p___result) <= 10))))))

