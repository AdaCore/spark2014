(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_private

type us_type_of_heap

type us_image

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

logic abs : real -> real

axiom abs_def :
  (forall x:real. (((0.0 <= x) -> (abs(x) = x)) and ((not (0.0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs(x)))

axiom Abs_sum :
  (forall x:real. forall y:real. (abs((x + y)) <= (abs(x) + abs(y))))

axiom Abs_prod :
  (forall x:real. forall y:real. (abs((x * y)) = (abs(x) * abs(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs((x - z)) <= (abs((x - y)) + abs((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x:int. forall y:int.
  (from_int((x + y)) = (from_int(x) + from_int(y))))

axiom Sub :
  (forall x:int. forall y:int.
  (from_int((x - y)) = (from_int(x) - from_int(y))))

axiom Mul :
  (forall x:int. forall y:int.
  (from_int((x * y)) = (from_int(x) * from_int(y))))

axiom Neg : (forall x:int. (from_int((-x)) = (-from_int(x))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) -> (from_int(x) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((from_int(truncate(x)) <= x) and
  (x <  from_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((from_int((truncate(x) - 1)) <  x) and
  (x <= from_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= from_int(truncate(x))) and
  (from_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int(i)) -> (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((from_int(floor(x)) <= x) and
  (x <  from_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((from_int((ceil(x) - 1)) <  x) and
  (x <= from_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

logic power : real, int -> real

axiom Power_0 : (forall x:real. (power(x, 0) = 1.0))

axiom Power_s :
  (forall x:real. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:real. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:real. (power(x, 1) = x))

axiom Power_sum :
  (forall x:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:real. forall y:real. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

axiom Pow_ge_one :
  (forall x:real. forall n:int. (((0 <= n) and (1.0 <= x)) ->
  (1.0 <= power(x, n))))

logic round : real -> int

axiom Round_down :
  (forall x:real. (((x - from_int(floor(x))) <  0.5) ->
  (round(x) = floor(x))))

axiom Round_up :
  (forall x:real. (((from_int(ceil(x)) - x) <  0.5) -> (round(x) = ceil(x))))

axiom Round_neg_tie :
  (forall x:real. ((((x - from_int(floor(x))) = 0.5) and (x <  0.0)) ->
  (round(x) = floor(x))))

axiom Round_pos_tie :
  (forall x:real. ((((from_int(ceil(x)) - x) = 0.5) and (0.0 <  x)) ->
  (round(x) = ceil(x))))

axiom Round_int : (forall i:int. (round(from_int(i)) = i))

axiom Round_near_int :
  (forall i:int.
  (forall x:real. ((((-0.5) <  x) and (x <  0.5)) ->
  (round((from_int(i) + x)) = i))))

axiom Round_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (round(x) <= round(y))))

axiom Round_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int(i)) -> (round(x) <= i)))

axiom Round_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= round(x))))

logic bool_lt : real, real -> bool

logic bool_le : real, real -> bool

logic bool_gt : real, real -> bool

logic bool_ge : real, real -> bool

logic bool_eq : real, real -> bool

logic bool_neq : real, real -> bool

axiom Bool_real__lt_axiom :
  (forall x:real. (forall y:real. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_real__le_axiom :
  (forall x:real. (forall y:real. ((bool_le(x, y) = true) <-> (x <= y))))

axiom Bool_real__gt_axiom :
  (forall x:real. (forall y:real. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom Bool_real__ge_axiom :
  (forall x:real. (forall y:real. ((bool_ge(x, y) = true) <-> (y <= x))))

axiom Bool_real__eq_axiom :
  (forall x:real. (forall y:real. ((bool_eq(x, y) = true) <-> (x = y))))

axiom Bool_real__neq_axiom :
  (forall x:real.
  (forall y:real. ((bool_neq(x, y) = true) <-> (not (x = y)))))

type id7

logic attr__ATTRIBUTE_MODULUS30 : real

predicate in_range31(x52: real) =
  (((-from_int(340282001837565597733306976381245063168)) <= x52) and
  (x52 <= from_int(340282001837565597733306976381245063168)))

logic to_real27 : id7 -> real

logic of_real27 : real -> id7

predicate eq30(x52: id7, y: id7) = (to_real27(x52) = to_real27(y))

axiom range_axiom30 : (forall x52:id7. in_range31(to_real27(x52)))

axiom coerce_axiom30 :
  (forall x52:real [to_real27(of_real27(x52))| in_range31(x52),
  of_real27(x52)]. (in_range31(x52) -> (to_real27(of_real27(x52)) = x52)))

axiom inversion_axiom30 :
  (forall x52:id7 [to_real27(x52)]. (of_real27(to_real27(x52)) = x52))

logic attr__ATTRIBUTE_IMAGE31 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check31 : us_image -> prop

logic attr__ATTRIBUTE_VALUE31 : us_image -> real

logic dummy30 : id7

logic x67 : id7

type tid7B

logic attr__ATTRIBUTE_MODULUS17 : real

predicate in_range17(x68: real) =
  (((-from_int(340282346638528859811704183484516925440)) <= x68) and
  (x68 <= from_int(340282346638528859811704183484516925440)))

logic to_real17 : tid7B -> real

logic of_real17 : real -> tid7B

predicate eq17(x68: tid7B, y: tid7B) = (to_real17(x68) = to_real17(y))

axiom range_axiom17 : (forall x68:tid7B. in_range17(to_real17(x68)))

axiom coerce_axiom17 :
  (forall x68:real [to_real17(of_real17(x68))| in_range17(x68),
  of_real17(x68)]. (in_range17(x68) -> (to_real17(of_real17(x68)) = x68)))

axiom inversion_axiom17 :
  (forall x68:tid7B [to_real17(x68)]. (of_real17(to_real17(x68)) = x68))

logic attr__ATTRIBUTE_IMAGE17 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_image -> prop

logic attr__ATTRIBUTE_VALUE17 : us_image -> real

logic dummy17 : tid7B

axiom real_const_axiom697 : (0.0 = from_int(0))

axiom real_const_axiom698 :
  (340282001837565597733306976381245063168.0 = from_int(340282001837565597733306976381245063168))

axiom real_const_axiom699 :
  (340282346638528859811704183484516925440.0 = from_int(340282346638528859811704183484516925440))

goal WP_parameter_def72 :
  (forall id1__id30___result:id7.
  (((-from_int(340282001837565597733306976381245063168)) <= to_real27(x67)) ->
  (forall result:id7.
  (((id1__id30___result = of_real27(from_int(floor(to_real27(x67))))) and
  (result = id1__id30___result)) ->
  ((to_real27(id1__id30___result) <= to_real27(x67)) and
  (((to_real27(x67) - 1.0) <= to_real27(id1__id30___result)) and
  (to_real27(id1__id30___result) = from_int(floor(to_real27(x67))))))))))

