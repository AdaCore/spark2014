(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_character

type us_private

type us_type_of_heap

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

type range_type

type us_string

logic mk___string : us_character map, int, range_type -> us_string

logic elts1 : us_string -> us_character map

axiom elts_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (elts1(mk___string(u, u1, u2)) = u))

logic offset1 : us_string -> int

axiom offset_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (offset1(mk___string(u, u1, u2)) = u1))

logic rt : us_string -> range_type

axiom rt_def :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (rt(mk___string(u, u1, u2)) = u2))

axiom us_string_inversion :
  (forall u:us_string. (u = mk___string(elts1(u), offset1(u), rt(u))))

logic abs : int -> int

axiom abs_def :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type integer

logic attr__ATTRIBUTE_MODULUS : int

logic attr__ATTRIBUTE_IMAGE : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check : us_string -> prop

logic attr__ATTRIBUTE_VALUE : us_string -> int

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int : integer -> int

logic of_int : int -> integer

predicate eq(x: integer, y: integer) = (to_int(x) = to_int(y))

axiom range_axiom : (forall x:integer. in_range(to_int(x)))

axiom coerce_axiom :
  (forall x:int [to_int(of_int(x))| in_range(x), of_int(x)]. (in_range(x) ->
  (to_int(of_int(x)) = x)))

axiom unicity_axiom :
  (forall x:integer. forall y:integer [to_int(x), to_int(y)].
  ((to_int(x) = to_int(y)) -> (x = y)))

logic dummy : integer

type 'a map1

logic get : int, int, 'a map1 -> 'a

logic set : int, int, 'a map1, 'a -> 'a map1

axiom accupd_eq :
  (forall a:'a map1.
  (forall i:int.
  (forall j:int.
  (forall v:'a [set(i, j, a, v)]. (get(i, j, set(i, j, a, v)) = v)))))

axiom accupd_neq :
  (forall a:'a map1.
  (forall i1:int.
  (forall i2:int.
  (forall j1:int.
  (forall j2:int.
  (forall v:'a [get(i2, j2, set(i1, j1, a, v))| set(i1, j1, a, v), get(i2,
  j2, a)]. (((not (i1 = i2)) or (not (j1 = j2))) -> (get(i2, j2, set(i1, j1,
  a, v)) = get(i2, j2, a)))))))))

type 'a t1

logic mk_t1 : 'a map1, int, int, int, int, int, int -> 'a t1

logic elts2 : 'a t1 -> 'a map1

axiom elts_def2 :
  (forall u:'a map1. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (elts2(mk_t1(u, u1, u2, u3,
  u4, u5, u6)) = u))

logic offset2 : 'a t1 -> int

axiom offset_def2 :
  (forall u:'a map1. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (offset2(mk_t1(u, u1, u2, u3,
  u4, u5, u6)) = u1))

logic offset_2 : 'a t1 -> int

axiom offset_2_def :
  (forall u:'a map1. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (offset_2(mk_t1(u, u1, u2, u3,
  u4, u5, u6)) = u2))

logic first1 : 'a t1 -> int

axiom first_def1 :
  (forall u:'a map1. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (first1(mk_t1(u, u1, u2, u3,
  u4, u5, u6)) = u3))

logic last1 : 'a t1 -> int

axiom last_def1 :
  (forall u:'a map1. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (last1(mk_t1(u, u1, u2, u3,
  u4, u5, u6)) = u4))

logic first_2 : 'a t1 -> int

axiom first_2_def :
  (forall u:'a map1. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (first_2(mk_t1(u, u1, u2, u3,
  u4, u5, u6)) = u5))

logic last_2 : 'a t1 -> int

axiom last_2_def :
  (forall u:'a map1. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (last_2(mk_t1(u, u1, u2, u3,
  u4, u5, u6)) = u6))

axiom t_inversion1 :
  (forall u:'a t1. (u = mk_t1(elts2(u), offset2(u), offset_2(u), first1(u),
  last1(u), first_2(u), last_2(u))))

function access(i: int, j: int, x: 'a t1) : 'a =
  get(((i + offset2(x)) - first1(x)), ((j + offset_2(x)) - first_2(x)),
  elts2(x))

function update(i: int, j: int, x: 'a t1, v: 'a) : 'a t1 =
  mk_t1(set(((i + offset2(x)) - first1(x)), ((j + offset_2(x)) - first_2(x)),
  elts2(x), v), offset2(x), offset_2(x), first1(x), last1(x), first_2(x),
  last_2(x))

logic bool_eq1 : 'a t1, 'a t1 -> bool

logic attr__ATTRIBUTE_LENGTH : 'a t1 -> int

axiom attr__ATTRIBUTE_LENGTH_def :
  (forall x:'a t1. (((first1(x) <= last1(x)) ->
  (attr__ATTRIBUTE_LENGTH(x) = ((last1(x) - first1(x)) + 1))) and
  ((not (first1(x) <= last1(x))) -> (attr__ATTRIBUTE_LENGTH(x) = 0))))

logic attr__ATTRIBUTE_LENGTH_2 : 'a t1 -> int

axiom attr__ATTRIBUTE_LENGTH_2_def :
  (forall x:'a t1. (((first_2(x) <= last_2(x)) ->
  (attr__ATTRIBUTE_LENGTH_2(x) = ((last_2(x) - first_2(x)) + 1))) and
  ((not (first_2(x) <= last_2(x))) -> (attr__ATTRIBUTE_LENGTH_2(x) = 0))))

axiom T__ada_array_2___equal_def :
  (forall a:'a map1. forall a1:int. forall a2:int. forall a3:int.
  forall a4:int. forall a5:int. forall a6:int.
  (forall b:'a map1. forall b1:int. forall b2:int. forall b3:int.
  forall b4:int. forall b5:int. forall b6:int [bool_eq1(mk_t1(a, a1, a2, a3,
  a4, a5, a6), mk_t1(b, b1, b2, b3, b4, b5, b6))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t1(a, a1, a2, a3, a4, a5,
  a6)) = attr__ATTRIBUTE_LENGTH(mk_t1(b, b1, b2, b3, b4, b5, b6))) and
  ((attr__ATTRIBUTE_LENGTH_2(mk_t1(a, a1, a2, a3, a4, a5,
  a6)) = attr__ATTRIBUTE_LENGTH_2(mk_t1(b, b1, b2, b3, b4, b5, b6))) and
  (forall i:int.
  (forall j:int [access(i, j, mk_t1(a, a1, a2, a3, a4, a5, a6))].
  (((a3 <= i) and (i <= a4)) -> (((a5 <= j) and (j <= a6)) ->
  (get(((i + a1) - a3), ((j + a2) - a5),
  a) = get(((((b3 - a3) + i) + b1) - b3), ((((b5 - a5) + j) + b2) - b5),
  b)))))))) -> (bool_eq1(mk_t1(a, a1, a2, a3, a4, a5, a6), mk_t1(b, b1, b2,
  b3, b4, b5, b6)) = true)) and ((bool_eq1(mk_t1(a, a1, a2, a3, a4, a5, a6),
  mk_t1(b, b1, b2, b3, b4, b5, b6)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t1(a, a1, a2, a3, a4, a5,
  a6)) = attr__ATTRIBUTE_LENGTH(mk_t1(b, b1, b2, b3, b4, b5, b6))) and
  ((attr__ATTRIBUTE_LENGTH_2(mk_t1(a, a1, a2, a3, a4, a5,
  a6)) = attr__ATTRIBUTE_LENGTH_2(mk_t1(b, b1, b2, b3, b4, b5, b6))) and
  (forall i:int.
  (forall j:int [access(i, j, mk_t1(a, a1, a2, a3, a4, a5, a6))].
  (((a3 <= i) and (i <= a4)) -> (((a5 <= j) and (j <= a6)) ->
  (get(((i + a1) - a3), ((j + a2) - a5),
  a) = get(((((b3 - a3) + i) + b1) - b3), ((((b5 - a5) + j) + b2) - b5),
  b))))))))))))

type a

logic mk_a : integer map1, int, int -> a

logic elts3 : a -> integer map1

axiom elts_def3 :
  (forall u:integer map1. forall u1:int. forall u2:int. (elts3(mk_a(u, u1,
  u2)) = u))

logic offset3 : a -> int

axiom offset_def3 :
  (forall u:integer map1. forall u1:int. forall u2:int. (offset3(mk_a(u, u1,
  u2)) = u1))

logic offset_21 : a -> int

axiom offset_2_def1 :
  (forall u:integer map1. forall u1:int. forall u2:int. (offset_21(mk_a(u,
  u1, u2)) = u2))

axiom a_inversion :
  (forall u:a. (u = mk_a(elts3(u), offset3(u), offset_21(u))))

function to_array(a1: a) : integer t1 = mk_t1(elts3(a1), offset3(a1),
  offset_21(a1), 1, 10, 2, 11)

function of_array(a1: integer t1) : a = mk_a(elts2(a1), offset2(a1),
  offset_2(a1))

logic dummy1 : a

type t2

type taD1

logic attr__ATTRIBUTE_MODULUS1 : int

logic attr__ATTRIBUTE_IMAGE1 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_string -> prop

logic attr__ATTRIBUTE_VALUE1 : us_string -> int

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic to_int1 : taD1 -> int

logic of_int1 : int -> taD1

predicate eq1(x: taD1, y: taD1) = (to_int1(x) = to_int1(y))

axiom range_axiom1 : (forall x:taD1. in_range1(to_int1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_int1(of_int1(x))| in_range1(x), of_int1(x)].
  (in_range1(x) -> (to_int1(of_int1(x)) = x)))

axiom unicity_axiom1 :
  (forall x:taD1. forall y:taD1 [to_int1(x), to_int1(y)].
  ((to_int1(x) = to_int1(y)) -> (x = y)))

logic dummy2 : taD1

type taD2

logic attr__ATTRIBUTE_MODULUS2 : int

logic attr__ATTRIBUTE_IMAGE2 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_string -> prop

logic attr__ATTRIBUTE_VALUE2 : us_string -> int

predicate in_range2(x: int) = ((2 <= x) and (x <= 11))

logic to_int2 : taD2 -> int

logic of_int2 : int -> taD2

predicate eq2(x: taD2, y: taD2) = (to_int2(x) = to_int2(y))

axiom range_axiom2 : (forall x:taD2. in_range2(to_int2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_int2(of_int2(x))| in_range2(x), of_int2(x)].
  (in_range2(x) -> (to_int2(of_int2(x)) = x)))

axiom unicity_axiom2 :
  (forall x:taD2. forall y:taD2 [to_int2(x), to_int2(y)].
  ((to_int2(x) = to_int2(y)) -> (x = y)))

logic dummy3 : taD2

goal WP_parameter_def :
  (forall x:integer map1. forall x1:int. forall x2:int.
  forall x3:integer map1. forall x4:int. forall x5:int.
  ((to_int(get(((1 + x1) - 1), ((2 + x2) - 2), x)) <  20) ->
  ((((elts2(update(1, 2, mk_t1(x, x1, x2, 1, 10, 2, 11),
  of_int((to_int(get(((1 + x1) - 1), ((2 + x2) - 2), x)) + 1)))) = x3) and
  (offset2(update(1, 2, mk_t1(x, x1, x2, 1, 10, 2, 11),
  of_int((to_int(get(((1 + x1) - 1), ((2 + x2) - 2), x)) + 1)))) = x4)) and
  (offset_2(update(1, 2, mk_t1(x, x1, x2, 1, 10, 2, 11),
  of_int((to_int(get(((1 + x1) - 1), ((2 + x2) - 2), x)) + 1)))) = x5)) ->
  ((to_int(get(((1 + x4) - 1), ((2 + x5) - 2), x3)) <= 20) and
  ((to_int(get(((1 + x4) - 1), ((3 + x5) - 2),
  x3)) = to_int(get(((1 + x1) - 1), ((3 + x2) - 2), x))) and
  (to_int(get(((2 + x4) - 1), ((2 + x5) - 2),
  x3)) = to_int(get(((2 + x1) - 1), ((2 + x2) - 2), x))))))))

