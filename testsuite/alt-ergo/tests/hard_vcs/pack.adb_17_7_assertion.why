(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_character

type us_private

type us_type_of_heap

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

type range_type

type us_string

logic mk___string : us_character map, int, range_type -> us_string

logic elts1 : us_string -> us_character map

axiom elts_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (elts1(mk___string(u, u1, u2)) = u))

logic offset1 : us_string -> int

axiom offset_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (offset1(mk___string(u, u1, u2)) = u1))

logic rt : us_string -> range_type

axiom rt_def :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (rt(mk___string(u, u1, u2)) = u2))

axiom us_string_inversion :
  (forall u:us_string. (u = mk___string(elts1(u), offset1(u), rt(u))))

logic abs : int -> int

axiom abs_def :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type character

logic attr__ATTRIBUTE_MODULUS : int

logic attr__ATTRIBUTE_IMAGE : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check : us_string -> prop

logic attr__ATTRIBUTE_VALUE : us_string -> int

predicate in_range(x: int) = ((0 <= x) and (x <= 255))

logic to_int : us_character -> int

logic of_int : int -> us_character

predicate eq(x: us_character, y: us_character) = (to_int(x) = to_int(y))

axiom range_axiom : (forall x:us_character. in_range(to_int(x)))

axiom coerce_axiom :
  (forall x:int [to_int(of_int(x))| in_range(x), of_int(x)]. (in_range(x) ->
  (to_int(of_int(x)) = x)))

axiom unicity_axiom :
  (forall x:us_character. forall y:us_character [to_int(x), to_int(y)].
  ((to_int(x) = to_int(y)) -> (x = y)))

logic dummy : us_character

logic get : 'a map, int -> 'a

logic set : 'a map, int, 'a -> 'a map

axiom Select_eq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)]. ((i = j) -> (get(set(m, i, a),
  j) = a)))))

axiom Select_neq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)| set(m, i, a), get(m, j)].
  ((not (i = j)) -> (get(set(m, i, a), j) = get(m, j))))))

logic attr__ATTRIBUTE_LENGTH : 'a t -> int

axiom attr__ATTRIBUTE_LENGTH_def :
  (forall x:'a t. (((first(x) <= last(x)) ->
  (attr__ATTRIBUTE_LENGTH(x) = ((last(x) - first(x)) + 1))) and
  ((not (first(x) <= last(x))) -> (attr__ATTRIBUTE_LENGTH(x) = 0))))

logic bool_eq1 : 'a t, 'a t -> bool

axiom T__ada_array___equal_def :
  (forall a:'a map. forall a1:int. forall a2:int. forall a3:int.
  (forall b:'a map. forall b1:int. forall b2:int. forall b3:int
  [bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2)))))) ->
  (bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true)) and
  ((bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2))))))))))

type t10b

logic mk_t10b : us_character map, int -> t10b

logic elts20 : t10b -> us_character map

axiom elts_def22 :
  (forall u:us_character map. forall u1:int. (elts20(mk_t10b(u, u1)) = u))

logic offset20 : t10b -> int

axiom offset_def22 :
  (forall u:us_character map. forall u1:int. (offset20(mk_t10b(u, u1)) = u1))

axiom t10b_inversion : (forall u:t10b. (u = mk_t10b(elts20(u), offset20(u))))

function to_array18(a: t10b) : us_character t = mk_t(elts20(a), offset20(a),
  1, 4)

function of_array18(a: us_character t) : t10b = mk_t10b(elts(a), offset(a))

logic dummy26 : t10b

type tglobS

logic mk_tglobS : us_character map, int -> tglobS

logic elts4 : tglobS -> us_character map

axiom elts_def23 :
  (forall u:us_character map. forall u1:int. (elts4(mk_tglobS(u, u1)) = u))

logic offset4 : tglobS -> int

axiom offset_def23 :
  (forall u:us_character map. forall u1:int. (offset4(mk_tglobS(u,
  u1)) = u1))

axiom tglobS_inversion3 :
  (forall u:tglobS. (u = mk_tglobS(elts4(u), offset4(u))))

function to_array2(a: tglobS) : us_character t = mk_t(elts4(a), offset4(a),
  1, 26)

function of_array2(a: us_character t) : tglobS = mk_tglobS(elts(a),
  offset(a))

logic dummy4 : tglobS

type tmy_s1S

logic mk_tmy_s1S : us_character map, int -> tmy_s1S

logic elts21 : tmy_s1S -> us_character map

axiom elts_def24 :
  (forall u:us_character map. forall u1:int. (elts21(mk_tmy_s1S(u, u1)) = u))

logic offset21 : tmy_s1S -> int

axiom offset_def24 :
  (forall u:us_character map. forall u1:int. (offset21(mk_tmy_s1S(u,
  u1)) = u1))

axiom tmy_s1S_inversion :
  (forall u:tmy_s1S. (u = mk_tmy_s1S(elts21(u), offset21(u))))

function to_array19(a: tmy_s1S) : us_character t = mk_t(elts21(a),
  offset21(a), 1, 4)

function of_array19(a: us_character t) : tmy_s1S = mk_tmy_s1S(elts(a),
  offset(a))

logic dummy27 : tmy_s1S

type t8

type integer

logic attr__ATTRIBUTE_MODULUS1 : int

logic attr__ATTRIBUTE_IMAGE1 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_string -> prop

logic attr__ATTRIBUTE_VALUE1 : us_string -> int

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int1 : integer -> int

logic of_int1 : int -> integer

predicate eq1(x: integer, y: integer) = (to_int1(x) = to_int1(y))

axiom range_axiom1 : (forall x:integer. in_range1(to_int1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_int1(of_int1(x))| in_range1(x), of_int1(x)].
  (in_range1(x) -> (to_int1(of_int1(x)) = x)))

axiom unicity_axiom1 :
  (forall x:integer. forall y:integer [to_int1(x), to_int1(y)].
  ((to_int1(x) = to_int1(y)) -> (x = y)))

logic dummy2 : integer

type tmy_aS2

logic mk_tmy_aS2 : integer map, int -> tmy_aS2

logic elts22 : tmy_aS2 -> integer map

axiom elts_def25 :
  (forall u:integer map. forall u1:int. (elts22(mk_tmy_aS2(u, u1)) = u))

logic offset22 : tmy_aS2 -> int

axiom offset_def25 :
  (forall u:integer map. forall u1:int. (offset22(mk_tmy_aS2(u, u1)) = u1))

axiom tmy_aS_inversion2 :
  (forall u:tmy_aS2. (u = mk_tmy_aS2(elts22(u), offset22(u))))

function to_array20(a: tmy_aS2) : integer t = mk_t(elts22(a), offset22(a), 1,
  4)

function of_array20(a: integer t) : tmy_aS2 = mk_tmy_aS2(elts(a), offset(a))

logic dummy28 : tmy_aS2

type t16b

logic mk_t16b : integer map, int -> t16b

logic elts23 : t16b -> integer map

axiom elts_def26 :
  (forall u:integer map. forall u1:int. (elts23(mk_t16b(u, u1)) = u))

logic offset23 : t16b -> int

axiom offset_def26 :
  (forall u:integer map. forall u1:int. (offset23(mk_t16b(u, u1)) = u1))

axiom t16b_inversion : (forall u:t16b. (u = mk_t16b(elts23(u), offset23(u))))

function to_array21(a: t16b) : integer t = mk_t(elts23(a), offset23(a), 1, 4)

function of_array21(a: integer t) : t16b = mk_t16b(elts(a), offset(a))

logic dummy29 : t16b

logic standard__pack__16__29 : integer -> t16b

axiom def_axiom7 :
  (forall ustemp_standard__pack_21:integer.
  (forall ustemp_standard__pack_22:int.
  (get(elts23(standard__pack__16__29(ustemp_standard__pack_21)),
  ((ustemp_standard__pack_22 + offset23(standard__pack__16__29(ustemp_standard__pack_21))) - 1)) = ustemp_standard__pack_21)))

type tTglobSP1

logic attr__ATTRIBUTE_MODULUS8 : int

logic attr__ATTRIBUTE_IMAGE8 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_string -> prop

logic attr__ATTRIBUTE_VALUE8 : us_string -> int

predicate in_range8(x: int) = ((1 <= x) and (x <= 26))

logic to_int8 : tTglobSP1 -> int

logic of_int8 : int -> tTglobSP1

predicate eq8(x: tTglobSP1, y: tTglobSP1) = (to_int8(x) = to_int8(y))

axiom range_axiom9 : (forall x:tTglobSP1. in_range8(to_int8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_int8(of_int8(x))| in_range8(x), of_int8(x)].
  (in_range8(x) -> (to_int8(of_int8(x)) = x)))

axiom unicity_axiom8 :
  (forall x:tTglobSP1. forall y:tTglobSP1 [to_int8(x), to_int8(y)].
  ((to_int8(x) = to_int8(y)) -> (x = y)))

logic dummy30 : tTglobSP1

logic standard__pack__12__34 : us_character -> t10b

axiom def_axiom8 :
  (forall ustemp_standard__pack_32:us_character.
  (forall ustemp_standard__pack_33:int.
  (get(elts20(standard__pack__12__34(ustemp_standard__pack_32)),
  ((ustemp_standard__pack_33 + offset20(standard__pack__12__34(ustemp_standard__pack_32))) - 1)) = ustemp_standard__pack_32)))

type t20b

logic mk_t20b : integer map, int -> t20b

logic elts24 : t20b -> integer map

axiom elts_def27 :
  (forall u:integer map. forall u1:int. (elts24(mk_t20b(u, u1)) = u))

logic offset24 : t20b -> int

axiom offset_def27 :
  (forall u:integer map. forall u1:int. (offset24(mk_t20b(u, u1)) = u1))

axiom t20b_inversion : (forall u:t20b. (u = mk_t20b(elts24(u), offset24(u))))

function to_array22(a: t20b) : integer t = mk_t(elts24(a), offset24(a), 1, 4)

function of_array22(a: integer t) : t20b = mk_t20b(elts(a), offset(a))

logic dummy31 : t20b

type t18b

logic mk_t18b : integer map, int -> t18b

logic elts25 : t18b -> integer map

axiom elts_def28 :
  (forall u:integer map. forall u1:int. (elts25(mk_t18b(u, u1)) = u))

logic offset25 : t18b -> int

axiom offset_def28 :
  (forall u:integer map. forall u1:int. (offset25(mk_t18b(u, u1)) = u1))

axiom t18b_inversion : (forall u:t18b. (u = mk_t18b(elts25(u), offset25(u))))

function to_array23(a: t18b) : integer t = mk_t(elts25(a), offset25(a), 1, 4)

function of_array23(a: integer t) : t18b = mk_t18b(elts(a), offset(a))

logic dummy32 : t18b

logic standard__pack__17__29 : integer -> t18b

axiom def_axiom9 :
  (forall ustemp_standard__pack_24:integer.
  (forall ustemp_standard__pack_25:int.
  (get(elts25(standard__pack__17__29(ustemp_standard__pack_24)),
  ((ustemp_standard__pack_25 + offset25(standard__pack__17__29(ustemp_standard__pack_24))) - 1)) = ustemp_standard__pack_24)))

type t12b

logic mk_t12b : integer map, int -> t12b

logic elts26 : t12b -> integer map

axiom elts_def29 :
  (forall u:integer map. forall u1:int. (elts26(mk_t12b(u, u1)) = u))

logic offset26 : t12b -> int

axiom offset_def29 :
  (forall u:integer map. forall u1:int. (offset26(mk_t12b(u, u1)) = u1))

axiom t12b_inversion : (forall u:t12b. (u = mk_t12b(elts26(u), offset26(u))))

function to_array24(a: t12b) : integer t = mk_t(elts26(a), offset26(a), 1, 4)

function of_array24(a: integer t) : t12b = mk_t12b(elts(a), offset(a))

logic dummy33 : t12b

logic standard__pack__13__41 : integer -> t12b

axiom def_axiom10 :
  (forall ustemp_standard__pack_1:integer.
  (forall ustemp_standard__pack_2:int.
  (get(elts26(standard__pack__13__41(ustemp_standard__pack_1)),
  ((ustemp_standard__pack_2 + offset26(standard__pack__13__41(ustemp_standard__pack_1))) - 1)) = ustemp_standard__pack_1)))

logic my_a2 : tmy_aS2

axiom def_axiom11 :
  (my_a2 = mk_tmy_aS2(elts26(standard__pack__13__41(of_int1(42))),
  offset26(standard__pack__13__41(of_int1(42)))))

type t1

logic standard__pack__18__30 : integer -> t20b

axiom def_axiom12 :
  (forall ustemp_standard__pack_27:integer.
  (forall ustemp_standard__pack_28:int.
  (get(elts24(standard__pack__18__30(ustemp_standard__pack_27)),
  ((ustemp_standard__pack_28 + offset24(standard__pack__18__30(ustemp_standard__pack_27))) - 1)) = ustemp_standard__pack_27)))

type tmy_bS2

logic mk_tmy_bS2 : integer map, int -> tmy_bS2

logic elts27 : tmy_bS2 -> integer map

axiom elts_def30 :
  (forall u:integer map. forall u1:int. (elts27(mk_tmy_bS2(u, u1)) = u))

logic offset27 : tmy_bS2 -> int

axiom offset_def30 :
  (forall u:integer map. forall u1:int. (offset27(mk_tmy_bS2(u, u1)) = u1))

axiom tmy_bS_inversion2 :
  (forall u:tmy_bS2. (u = mk_tmy_bS2(elts27(u), offset27(u))))

function to_array25(a: tmy_bS2) : integer t = mk_t(elts27(a), offset27(a), 1,
  4)

function of_array25(a: integer t) : tmy_bS2 = mk_tmy_bS2(elts(a), offset(a))

logic dummy34 : tmy_bS2

logic my_b2 : tmy_bS2

axiom def_axiom13 : (my_b2 = mk_tmy_bS2(elts22(my_a2),
  (offset22(my_a2) + (1 - 1))))

goal WP_parameter_def5 :
  (forall my_s1:us_character map. forall my_s11:int.
  (forall glob:us_character map. forall glob1:int.
  (((my_s1 = elts20(standard__pack__12__34(get(glob,
  ((1 + glob1) - 1))))) and
  (my_s11 = offset20(standard__pack__12__34(get(glob,
  ((1 + glob1) - 1)))))) ->
  ((mk_tmy_aS2(elts26(standard__pack__13__41(of_int1(42))),
  offset26(standard__pack__13__41(of_int1(42)))) = my_a2) ->
  ((mk_tmy_bS2(elts22(my_a2), (offset22(my_a2) + (1 - 1))) = my_b2) ->
  ((bool_eq1(mk_t(elts22(my_a2), offset22(my_a2), 1, 4),
  mk_t(elts23(standard__pack__16__29(of_int1(42))),
  offset23(standard__pack__16__29(of_int1(42))), 1, 4)) = true) ->
  (bool_eq1(mk_t(elts27(my_b2), offset27(my_b2), 1, 4),
  mk_t(elts25(standard__pack__17__29(of_int1(42))),
  offset25(standard__pack__17__29(of_int1(42))), 1, 4)) = true)))))))

