(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_character

type us_private

type us_type_of_heap

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

type range_type

type us_string

logic mk___string : us_character map, int, range_type -> us_string

logic elts1 : us_string -> us_character map

axiom elts_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (elts1(mk___string(u, u1, u2)) = u))

logic offset1 : us_string -> int

axiom offset_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (offset1(mk___string(u, u1, u2)) = u1))

logic rt : us_string -> range_type

axiom rt_def :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (rt(mk___string(u, u1, u2)) = u2))

axiom us_string_inversion :
  (forall u:us_string. (u = mk___string(elts1(u), offset1(u), rt(u))))

logic abs : int -> int

axiom abs_def :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type tTtaSP2

logic attr__ATTRIBUTE_MODULUS : int

logic attr__ATTRIBUTE_IMAGE : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check : us_string -> prop

logic attr__ATTRIBUTE_VALUE : us_string -> int

predicate in_range(x: int) = ((1 <= x) and (x <= 2))

logic to_int : tTtaSP2 -> int

logic of_int : int -> tTtaSP2

predicate eq(x: tTtaSP2, y: tTtaSP2) = (to_int(x) = to_int(y))

axiom range_axiom : (forall x:tTtaSP2. in_range(to_int(x)))

axiom coerce_axiom :
  (forall x:int [to_int(of_int(x))| in_range(x), of_int(x)]. (in_range(x) ->
  (to_int(of_int(x)) = x)))

axiom unicity_axiom :
  (forall x:tTtaSP2. forall y:tTtaSP2 [to_int(x), to_int(y)].
  ((to_int(x) = to_int(y)) -> (x = y)))

logic dummy : tTtaSP2

type character

logic attr__ATTRIBUTE_MODULUS1 : int

logic attr__ATTRIBUTE_IMAGE1 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_string -> prop

logic attr__ATTRIBUTE_VALUE1 : us_string -> int

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

logic to_int1 : us_character -> int

logic of_int1 : int -> us_character

predicate eq1(x: us_character, y: us_character) = (to_int1(x) = to_int1(y))

axiom range_axiom1 : (forall x:us_character. in_range1(to_int1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_int1(of_int1(x))| in_range1(x), of_int1(x)].
  (in_range1(x) -> (to_int1(of_int1(x)) = x)))

axiom unicity_axiom1 :
  (forall x:us_character. forall y:us_character [to_int1(x), to_int1(y)].
  ((to_int1(x) = to_int1(y)) -> (x = y)))

logic dummy1 : us_character

logic get : 'a map, int -> 'a

logic set : 'a map, int, 'a -> 'a map

axiom Select_eq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)]. ((i = j) -> (get(set(m, i, a),
  j) = a)))))

axiom Select_neq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)| set(m, i, a), get(m, j)].
  ((not (i = j)) -> (get(set(m, i, a), j) = get(m, j))))))

logic attr__ATTRIBUTE_LENGTH : 'a t -> int

axiom attr__ATTRIBUTE_LENGTH_def :
  (forall x:'a t. (((first(x) <= last(x)) ->
  (attr__ATTRIBUTE_LENGTH(x) = ((last(x) - first(x)) + 1))) and
  ((not (first(x) <= last(x))) -> (attr__ATTRIBUTE_LENGTH(x) = 0))))

logic bool_eq1 : 'a t, 'a t -> bool

axiom T__ada_array___equal_def :
  (forall a:'a map. forall a1:int. forall a2:int. forall a3:int.
  (forall b:'a map. forall b1:int. forall b2:int. forall b3:int
  [bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2)))))) ->
  (bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true)) and
  ((bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2))))))))))

type t12b

logic mk_t12b : us_character map, int -> t12b

logic elts2 : t12b -> us_character map

axiom elts_def2 :
  (forall u:us_character map. forall u1:int. (elts2(mk_t12b(u, u1)) = u))

logic offset2 : t12b -> int

axiom offset_def2 :
  (forall u:us_character map. forall u1:int. (offset2(mk_t12b(u, u1)) = u1))

axiom t12b_inversion : (forall u:t12b. (u = mk_t12b(elts2(u), offset2(u))))

logic attr__ATTRIBUTE_LAST : int

function to_array(a: t12b) : us_character t = mk_t(elts2(a), offset2(a), 1,
  attr__ATTRIBUTE_LAST)

function of_array(a: us_character t) : t12b = mk_t12b(elts(a), offset(a))

logic dummy2 : t12b

logic optional__35__17 : t12b

type t3b

logic mk_t3b : us_character map, int -> t3b

logic elts3 : t3b -> us_character map

axiom elts_def3 :
  (forall u:us_character map. forall u1:int. (elts3(mk_t3b(u, u1)) = u))

logic offset3 : t3b -> int

axiom offset_def3 :
  (forall u:us_character map. forall u1:int. (offset3(mk_t3b(u, u1)) = u1))

axiom t3b_inversion : (forall u:t3b. (u = mk_t3b(elts3(u), offset3(u))))

logic attr__ATTRIBUTE_LAST1 : int

function to_array1(a: t3b) : us_character t = mk_t(elts3(a), offset3(a), 1,
  attr__ATTRIBUTE_LAST1)

function of_array1(a: us_character t) : t3b = mk_t3b(elts(a), offset(a))

logic dummy3 : t3b

type t10b

logic attr__ATTRIBUTE_MODULUS2 : int

logic attr__ATTRIBUTE_IMAGE2 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_string -> prop

logic attr__ATTRIBUTE_VALUE2 : us_string -> int

predicate in_range2(x: int) = ((1 <= x) and (x <= 3))

logic to_int2 : t10b -> int

logic of_int2 : int -> t10b

predicate eq2(x: t10b, y: t10b) = (to_int2(x) = to_int2(y))

axiom range_axiom2 : (forall x:t10b. in_range2(to_int2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_int2(of_int2(x))| in_range2(x), of_int2(x)].
  (in_range2(x) -> (to_int2(of_int2(x)) = x)))

axiom unicity_axiom2 :
  (forall x:t10b. forall y:t10b [to_int2(x), to_int2(y)].
  ((to_int2(x) = to_int2(y)) -> (x = y)))

logic dummy4 : t10b

type natural

logic attr__ATTRIBUTE_MODULUS3 : int

logic attr__ATTRIBUTE_IMAGE3 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_string -> prop

logic attr__ATTRIBUTE_VALUE3 : us_string -> int

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic to_int3 : natural -> int

logic of_int3 : int -> natural

predicate eq3(x: natural, y: natural) = (to_int3(x) = to_int3(y))

axiom range_axiom3 : (forall x:natural. in_range3(to_int3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_int3(of_int3(x))| in_range3(x), of_int3(x)].
  (in_range3(x) -> (to_int3(of_int3(x)) = x)))

axiom unicity_axiom3 :
  (forall x:natural. forall y:natural [to_int3(x), to_int3(y)].
  ((to_int3(x) = to_int3(y)) -> (x = y)))

logic dummy5 : natural

type ttaS

logic mk_ttaS : natural map, int -> ttaS

logic elts4 : ttaS -> natural map

axiom elts_def4 :
  (forall u:natural map. forall u1:int. (elts4(mk_ttaS(u, u1)) = u))

logic offset4 : ttaS -> int

axiom offset_def4 :
  (forall u:natural map. forall u1:int. (offset4(mk_ttaS(u, u1)) = u1))

axiom ttaS_inversion : (forall u:ttaS. (u = mk_ttaS(elts4(u), offset4(u))))

function to_array2(a: ttaS) : natural t = mk_t(elts4(a), offset4(a), 1, 5)

function of_array2(a: natural t) : ttaS = mk_ttaS(elts(a), offset(a))

logic dummy6 : ttaS

logic optional__10__14 : t3b

type 'a map1

logic get1 : int, int, 'a map1 -> 'a

logic set1 : int, int, 'a map1, 'a -> 'a map1

axiom accupd_eq :
  (forall a:'a map1.
  (forall i:int.
  (forall j:int.
  (forall v:'a [set1(i, j, a, v)]. (get1(i, j, set1(i, j, a, v)) = v)))))

axiom accupd_neq :
  (forall a:'a map1.
  (forall i1:int.
  (forall i2:int.
  (forall j1:int.
  (forall j2:int.
  (forall v:'a [get1(i2, j2, set1(i1, j1, a, v))| set1(i1, j1, a, v),
  get1(i2, j2, a)]. (((not (i1 = i2)) or (not (j1 = j2))) -> (get1(i2, j2,
  set1(i1, j1, a, v)) = get1(i2, j2, a)))))))))

type 'a t1

logic mk_t1 : 'a map1, int, int, int, int, int, int -> 'a t1

logic elts5 : 'a t1 -> 'a map1

axiom elts_def5 :
  (forall u:'a map1. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (elts5(mk_t1(u, u1, u2, u3,
  u4, u5, u6)) = u))

logic offset5 : 'a t1 -> int

axiom offset_def5 :
  (forall u:'a map1. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (offset5(mk_t1(u, u1, u2, u3,
  u4, u5, u6)) = u1))

logic offset_2 : 'a t1 -> int

axiom offset_2_def :
  (forall u:'a map1. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (offset_2(mk_t1(u, u1, u2, u3,
  u4, u5, u6)) = u2))

logic first1 : 'a t1 -> int

axiom first_def1 :
  (forall u:'a map1. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (first1(mk_t1(u, u1, u2, u3,
  u4, u5, u6)) = u3))

logic last1 : 'a t1 -> int

axiom last_def1 :
  (forall u:'a map1. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (last1(mk_t1(u, u1, u2, u3,
  u4, u5, u6)) = u4))

logic first_2 : 'a t1 -> int

axiom first_2_def :
  (forall u:'a map1. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (first_2(mk_t1(u, u1, u2, u3,
  u4, u5, u6)) = u5))

logic last_2 : 'a t1 -> int

axiom last_2_def :
  (forall u:'a map1. forall u1:int. forall u2:int. forall u3:int.
  forall u4:int. forall u5:int. forall u6:int. (last_2(mk_t1(u, u1, u2, u3,
  u4, u5, u6)) = u6))

axiom t_inversion1 :
  (forall u:'a t1. (u = mk_t1(elts5(u), offset5(u), offset_2(u), first1(u),
  last1(u), first_2(u), last_2(u))))

function access(i: int, j: int, x: 'a t1) : 'a =
  get1(((i + offset5(x)) - first1(x)), ((j + offset_2(x)) - first_2(x)),
  elts5(x))

function update(i: int, j: int, x: 'a t1, v: 'a) : 'a t1 =
  mk_t1(set1(((i + offset5(x)) - first1(x)),
  ((j + offset_2(x)) - first_2(x)), elts5(x), v), offset5(x), offset_2(x),
  first1(x), last1(x), first_2(x), last_2(x))

logic bool_eq2 : 'a t1, 'a t1 -> bool

logic attr__ATTRIBUTE_LENGTH1 : 'a t1 -> int

axiom attr__ATTRIBUTE_LENGTH_def1 :
  (forall x:'a t1. (((first1(x) <= last1(x)) ->
  (attr__ATTRIBUTE_LENGTH1(x) = ((last1(x) - first1(x)) + 1))) and
  ((not (first1(x) <= last1(x))) -> (attr__ATTRIBUTE_LENGTH1(x) = 0))))

logic attr__ATTRIBUTE_LENGTH_2 : 'a t1 -> int

axiom attr__ATTRIBUTE_LENGTH_2_def :
  (forall x:'a t1. (((first_2(x) <= last_2(x)) ->
  (attr__ATTRIBUTE_LENGTH_2(x) = ((last_2(x) - first_2(x)) + 1))) and
  ((not (first_2(x) <= last_2(x))) -> (attr__ATTRIBUTE_LENGTH_2(x) = 0))))

axiom T__ada_array_2___equal_def :
  (forall a:'a map1. forall a1:int. forall a2:int. forall a3:int.
  forall a4:int. forall a5:int. forall a6:int.
  (forall b:'a map1. forall b1:int. forall b2:int. forall b3:int.
  forall b4:int. forall b5:int. forall b6:int [bool_eq2(mk_t1(a, a1, a2, a3,
  a4, a5, a6), mk_t1(b, b1, b2, b3, b4, b5, b6))].
  ((((attr__ATTRIBUTE_LENGTH1(mk_t1(a, a1, a2, a3, a4, a5,
  a6)) = attr__ATTRIBUTE_LENGTH1(mk_t1(b, b1, b2, b3, b4, b5, b6))) and
  ((attr__ATTRIBUTE_LENGTH_2(mk_t1(a, a1, a2, a3, a4, a5,
  a6)) = attr__ATTRIBUTE_LENGTH_2(mk_t1(b, b1, b2, b3, b4, b5, b6))) and
  (forall i:int.
  (forall j:int [access(i, j, mk_t1(a, a1, a2, a3, a4, a5, a6))].
  (((a3 <= i) and (i <= a4)) -> (((a5 <= j) and (j <= a6)) ->
  (get1(((i + a1) - a3), ((j + a2) - a5),
  a) = get1(((((b3 - a3) + i) + b1) - b3), ((((b5 - a5) + j) + b2) - b5),
  b)))))))) -> (bool_eq2(mk_t1(a, a1, a2, a3, a4, a5, a6), mk_t1(b, b1, b2,
  b3, b4, b5, b6)) = true)) and ((bool_eq2(mk_t1(a, a1, a2, a3, a4, a5, a6),
  mk_t1(b, b1, b2, b3, b4, b5, b6)) = true) ->
  ((attr__ATTRIBUTE_LENGTH1(mk_t1(a, a1, a2, a3, a4, a5,
  a6)) = attr__ATTRIBUTE_LENGTH1(mk_t1(b, b1, b2, b3, b4, b5, b6))) and
  ((attr__ATTRIBUTE_LENGTH_2(mk_t1(a, a1, a2, a3, a4, a5,
  a6)) = attr__ATTRIBUTE_LENGTH_2(mk_t1(b, b1, b2, b3, b4, b5, b6))) and
  (forall i:int.
  (forall j:int [access(i, j, mk_t1(a, a1, a2, a3, a4, a5, a6))].
  (((a3 <= i) and (i <= a4)) -> (((a5 <= j) and (j <= a6)) ->
  (get1(((i + a1) - a3), ((j + a2) - a5),
  a) = get1(((((b3 - a3) + i) + b1) - b3), ((((b5 - a5) + j) + b2) - b5),
  b))))))))))))

type ttaS1

logic mk_ttaS1 : natural map1, int, int -> ttaS1

logic elts6 : ttaS1 -> natural map1

axiom elts_def6 :
  (forall u:natural map1. forall u1:int. forall u2:int. (elts6(mk_ttaS1(u,
  u1, u2)) = u))

logic offset6 : ttaS1 -> int

axiom offset_def6 :
  (forall u:natural map1. forall u1:int. forall u2:int. (offset6(mk_ttaS1(u,
  u1, u2)) = u1))

logic offset_21 : ttaS1 -> int

axiom offset_2_def1 :
  (forall u:natural map1. forall u1:int. forall u2:int.
  (offset_21(mk_ttaS1(u, u1, u2)) = u2))

axiom ttaS_inversion1 :
  (forall u:ttaS1. (u = mk_ttaS1(elts6(u), offset6(u), offset_21(u))))

function to_array3(a: ttaS1) : natural t1 = mk_t1(elts6(a), offset6(a),
  offset_21(a), 1, 3, 1, 2)

function of_array3(a: natural t1) : ttaS1 = mk_ttaS1(elts5(a), offset5(a),
  offset_2(a))

logic dummy7 : ttaS1

type t2

type t9b

logic mk_t9b : natural map1, int, int -> t9b

logic elts7 : t9b -> natural map1

axiom elts_def7 :
  (forall u:natural map1. forall u1:int. forall u2:int. (elts7(mk_t9b(u, u1,
  u2)) = u))

logic offset7 : t9b -> int

axiom offset_def7 :
  (forall u:natural map1. forall u1:int. forall u2:int. (offset7(mk_t9b(u,
  u1, u2)) = u1))

logic offset_22 : t9b -> int

axiom offset_2_def2 :
  (forall u:natural map1. forall u1:int. forall u2:int. (offset_22(mk_t9b(u,
  u1, u2)) = u2))

axiom t9b_inversion :
  (forall u:t9b. (u = mk_t9b(elts7(u), offset7(u), offset_22(u))))

function to_array4(a: t9b) : natural t1 = mk_t1(elts7(a), offset7(a),
  offset_22(a), 1, 3, 1, 2)

function of_array4(a: natural t1) : t9b = mk_t9b(elts5(a), offset5(a),
  offset_2(a))

logic dummy8 : t9b

type t6b

logic attr__ATTRIBUTE_MODULUS4 : int

logic attr__ATTRIBUTE_IMAGE4 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_string -> prop

logic attr__ATTRIBUTE_VALUE4 : us_string -> int

predicate in_range4(x: int) = ((1 <= x) and (x <= 5))

logic to_int4 : t6b -> int

logic of_int4 : int -> t6b

predicate eq4(x: t6b, y: t6b) = (to_int4(x) = to_int4(y))

axiom range_axiom4 : (forall x:t6b. in_range4(to_int4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_int4(of_int4(x))| in_range4(x), of_int4(x)].
  (in_range4(x) -> (to_int4(of_int4(x)) = x)))

axiom unicity_axiom4 :
  (forall x:t6b. forall y:t6b [to_int4(x), to_int4(y)].
  ((to_int4(x) = to_int4(y)) -> (x = y)))

logic dummy9 : t6b

type integer

logic attr__ATTRIBUTE_MODULUS5 : int

logic attr__ATTRIBUTE_IMAGE5 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_string -> prop

logic attr__ATTRIBUTE_VALUE5 : us_string -> int

predicate in_range5(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int5 : integer -> int

logic of_int5 : int -> integer

predicate eq5(x: integer, y: integer) = (to_int5(x) = to_int5(y))

axiom range_axiom5 : (forall x:integer. in_range5(to_int5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_int5(of_int5(x))| in_range5(x), of_int5(x)].
  (in_range5(x) -> (to_int5(of_int5(x)) = x)))

axiom unicity_axiom5 :
  (forall x:integer. forall y:integer [to_int5(x), to_int5(y)].
  ((to_int5(x) = to_int5(y)) -> (x = y)))

logic dummy10 : integer

type t3

logic sum_of : natural -> natural

logic optional__24__46 : natural -> t9b

axiom def_axiom :
  (forall ustemp_optional_12:natural.
  (forall ustemp_optional_13:int. forall ustemp_optional_14:int.
  (get1(((ustemp_optional_13 + offset7(optional__24__46(ustemp_optional_12))) - 1),
  ((ustemp_optional_14 + offset_22(optional__24__46(ustemp_optional_12))) - 1),
  elts7(optional__24__46(ustemp_optional_12))) = ustemp_optional_12)))

type t5b

logic mk_t5b : natural map, int -> t5b

logic elts8 : t5b -> natural map

axiom elts_def8 :
  (forall u:natural map. forall u1:int. (elts8(mk_t5b(u, u1)) = u))

logic offset8 : t5b -> int

axiom offset_def8 :
  (forall u:natural map. forall u1:int. (offset8(mk_t5b(u, u1)) = u1))

axiom t5b_inversion : (forall u:t5b. (u = mk_t5b(elts8(u), offset8(u))))

function to_array5(a: t5b) : natural t = mk_t(elts8(a), offset8(a), 1, 5)

function of_array5(a: natural t) : t5b = mk_t5b(elts(a), offset(a))

logic dummy11 : t5b

logic optional__13__35 : natural -> t5b

axiom def_axiom1 :
  (forall ustemp_optional_4:natural.
  (forall ustemp_optional_5:int.
  (get(elts8(optional__13__35(ustemp_optional_4)),
  ((ustemp_optional_5 + offset8(optional__13__35(ustemp_optional_4))) - 1)) = ustemp_optional_4)))

type file_type

type t4

type no_param_proc

type t5

type t6

logic first2 : range_type -> integer

logic last2 : range_type -> integer

logic mk : int, int -> range_type

axiom range_axiom6 :
  (forall a:range_type. ((to_int5(first2(a)) <= to_int5(last2(a))) ->
  (((1 <= to_int5(first2(a))) and (to_int5(first2(a)) <= 2147483647)) and
  ((1 <= to_int5(last2(a))) and (to_int5(last2(a)) <= 2147483647)))))

type string

function to_array6(a: us_string) : us_character t = mk_t(elts1(a),
  offset1(a), to_int5(first2(rt(a))), to_int5(last2(rt(a))))

function of_array6(a: us_character t) : us_string = mk___string(elts(a),
  offset(a), mk(first(a), last(a)))

logic dummy12 : us_string

type t11b

logic attr__ATTRIBUTE_MODULUS6 : int

logic attr__ATTRIBUTE_IMAGE6 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_string -> prop

logic attr__ATTRIBUTE_VALUE6 : us_string -> int

predicate in_range6(x: int) = ((1 <= x) and (x <= 2))

logic to_int6 : t11b -> int

logic of_int6 : int -> t11b

predicate eq6(x: t11b, y: t11b) = (to_int6(x) = to_int6(y))

axiom range_axiom7 : (forall x:t11b. in_range6(to_int6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_int6(of_int6(x))| in_range6(x), of_int6(x)].
  (in_range6(x) -> (to_int6(of_int6(x)) = x)))

axiom unicity_axiom6 :
  (forall x:t11b. forall y:t11b [to_int6(x), to_int6(y)].
  ((to_int6(x) = to_int6(y)) -> (x = y)))

logic dummy13 : t11b

type tTtaSP1

logic attr__ATTRIBUTE_MODULUS7 : int

logic attr__ATTRIBUTE_IMAGE7 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_string -> prop

logic attr__ATTRIBUTE_VALUE7 : us_string -> int

predicate in_range7(x: int) = ((1 <= x) and (x <= 3))

logic to_int7 : tTtaSP1 -> int

logic of_int7 : int -> tTtaSP1

predicate eq7(x: tTtaSP1, y: tTtaSP1) = (to_int7(x) = to_int7(y))

axiom range_axiom8 : (forall x:tTtaSP1. in_range7(to_int7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_int7(of_int7(x))| in_range7(x), of_int7(x)].
  (in_range7(x) -> (to_int7(of_int7(x)) = x)))

axiom unicity_axiom7 :
  (forall x:tTtaSP1. forall y:tTtaSP1 [to_int7(x), to_int7(y)].
  ((to_int7(x) = to_int7(y)) -> (x = y)))

logic dummy14 : tTtaSP1

goal WP_parameter_def :
  (forall ustemp_optional_0:natural map. forall ustemp_optional_01:int.
  forall ta:natural map. forall ta1:int.
  forall optional__B_1__L_2__index:int.
  forall optional__B_1__L_2__index1:int. forall ta2:natural map.
  forall ta3:int. forall ta4:natural map. forall ta5:int.
  forall optional__B_1__L_2__index2:int. forall rho:natural map.
  forall rho1:int. forall rho2:int. forall ta6:natural map1. forall ta7:int.
  forall ta8:int. forall ta9:natural map1. forall ta10:int. forall ta11:int.
  forall optional__B_3__L_4__outer:int.
  forall optional__B_3__L_4__outer1:int.
  forall optional__B_3__L_5__inner:int.
  ((((elts8(optional__13__35(of_int3(0))) = ta) and
  (offset8(optional__13__35(of_int3(0))) = ta1)) and
  ((optional__B_1__L_2__index = 1) and
  ((((1 <= optional__B_1__L_2__index) and
  (optional__B_1__L_2__index <= 5)) and ((((to_int3(get(ta,
  ((optional__B_1__L_2__index1 + ta1) - 1))) = 0) and false) and
  (((rho = ta4) and (rho1 = ta5)) and
  (optional__B_1__L_2__index2 = rho2))) or (((to_int3(get(ustemp_optional_0,
  ((optional__B_1__L_2__index1 + ustemp_optional_01) - 1))) = 0) and
  ((((not (optional__B_1__L_2__index2 <= 5)) and
  (optional__B_1__L_2__index2 = (optional__B_1__L_2__index1 + 1))) and
  ((set(ta2, ((optional__B_1__L_2__index1 + ta3) - 1), of_int3(1)) = ta4) and
  (ta3 = ta5))) and ((1 <= optional__B_1__L_2__index1) and
  (optional__B_1__L_2__index1 <= 5)))) and ((ustemp_optional_0 = ta) and
  (ustemp_optional_01 = ta1))))) or
  ((not ((1 <= optional__B_1__L_2__index) and
  (optional__B_1__L_2__index <= 5))) and ((mk_ttaS(ta4, ta5) = mk_ttaS(ta,
  ta1)) and (optional__B_1__L_2__index2 = optional__B_1__L_2__index)))))) ->
  ((((elts7(optional__24__46(of_int3(0))) = ta6) and
  (offset7(optional__24__46(of_int3(0))) = ta7)) and
  (offset_22(optional__24__46(of_int3(0))) = ta8)) ->
  ((((elts5(update(to_int3(sum_of(of_int3(2))), 2, mk_t1(ta6, ta7, ta8, 1, 3,
  1, 2), of_int3(1))) = ta9) and (offset5(update(to_int3(sum_of(of_int3(2))),
  2, mk_t1(ta6, ta7, ta8, 1, 3, 1, 2), of_int3(1))) = ta10)) and
  (offset_2(update(to_int3(sum_of(of_int3(2))), 2, mk_t1(ta6, ta7, ta8, 1, 3,
  1, 2), of_int3(1))) = ta11)) -> ((optional__B_3__L_4__outer = 1) ->
  (((1 <= optional__B_3__L_4__outer) and (optional__B_3__L_4__outer <= 3)) ->
  (((1 <= optional__B_3__L_4__outer1) and
  (optional__B_3__L_4__outer1 <= 3)) -> ((optional__B_3__L_5__inner = 1) ->
  (((1 <= optional__B_3__L_5__inner) and (optional__B_3__L_5__inner <= 2)) ->
  (to_int3(get1(((optional__B_3__L_4__outer1 + ta10) - 1),
  ((optional__B_3__L_5__inner + ta11) - 1), ta9)) = 0))))))))))

