(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x32: bool, y: bool) : bool = match_bool(x32, y, false)

function orb(x32: bool, y: bool) : bool = match_bool(x32, true, y)

function xorb(x32: bool, y: bool) : bool = match_bool(y, match_bool(x32,
  false, true), match_bool(x32, true, false))

function notb(x32: bool) : bool = match_bool(x32, false, true)

function implb(x32: bool, y: bool) : bool = match_bool(y, true,
  match_bool(x32, false, true))

logic us__ignore : 'a -> unit

type us_private

type us_type_of_heap

type us_image

logic abs1 : int -> int

axiom abs_def1 :
  (forall x32:int. (((0 <= x32) -> (abs1(x32) = x32)) and
  ((not (0 <= x32)) -> (abs1(x32) = (-x32)))))

axiom Abs_le1 :
  (forall x32:int. forall y:int. ((abs1(x32) <= y) <-> (((-y) <= x32) and
  (x32 <= y))))

axiom Abs_pos1 : (forall x32:int. (0 <= abs1(x32)))

logic power1 : int, int -> int

axiom Power_01 : (forall x32:int. (power1(x32, 0) = 1))

axiom Power_s1 :
  (forall x32:int. forall n:int. ((0 <= n) -> (power1(x32,
  (n + 1)) = (x32 * power1(x32, n)))))

axiom Power_s_alt1 :
  (forall x32:int. forall n:int. ((0 <  n) -> (power1(x32,
  n) = (x32 * power1(x32, (n - 1))))))

axiom Power_11 : (forall x32:int. (power1(x32, 1) = x32))

axiom Power_sum1 :
  (forall x32:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x32, (n + m)) = (power1(x32, n) * power1(x32, m))))))

axiom Power_mult1 :
  (forall x32:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x32, (n * m)) = power1(power1(x32, n), m)))))

axiom Power_mult21 :
  (forall x32:int. forall y:int. forall n:int. ((0 <= n) ->
  (power1((x32 * y), n) = (power1(x32, n) * power1(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x32:int. forall y:int. ((x32 <= max(x32, y)) and (y <= max(x32,
  y))))

axiom Max_is_some :
  (forall x32:int. forall y:int. ((max(x32, y) = x32) or (max(x32, y) = y)))

axiom Min_is_le :
  (forall x32:int. forall y:int. ((min(x32, y) <= x32) and (min(x32,
  y) <= y)))

axiom Min_is_some :
  (forall x32:int. forall y:int. ((min(x32, y) = x32) or (min(x32, y) = y)))

axiom Max_x :
  (forall x32:int. forall y:int. ((y <= x32) -> (max(x32, y) = x32)))

axiom Max_y :
  (forall x32:int. forall y:int. ((x32 <= y) -> (max(x32, y) = y)))

axiom Min_x :
  (forall x32:int. forall y:int. ((x32 <= y) -> (min(x32, y) = x32)))

axiom Min_y :
  (forall x32:int. forall y:int. ((y <= x32) -> (min(x32, y) = y)))

axiom Max_sym :
  (forall x32:int. forall y:int. ((y <= x32) -> (max(x32, y) = max(y, x32))))

axiom Min_sym :
  (forall x32:int. forall y:int. ((y <= x32) -> (min(x32, y) = min(y, x32))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x32:int. forall y:int. ((not (y = 0)) -> (x32 = ((y * div(x32,
  y)) + mod(x32, y)))))

axiom Div_bound :
  (forall x32:int. forall y:int. (((0 <= x32) and (0 <  y)) ->
  ((0 <= div(x32, y)) and (div(x32, y) <= x32))))

axiom Mod_bound :
  (forall x32:int. forall y:int. ((not (y = 0)) -> (((-abs1(y)) <  mod(x32,
  y)) and (mod(x32, y) <  abs1(y)))))

axiom Div_sign_pos :
  (forall x32:int. forall y:int. (((0 <= x32) and (0 <  y)) -> (0 <= div(x32,
  y))))

axiom Div_sign_neg :
  (forall x32:int. forall y:int. (((x32 <= 0) and (0 <  y)) -> (div(x32,
  y) <= 0)))

axiom Mod_sign_pos :
  (forall x32:int. forall y:int. (((0 <= x32) and (not (y = 0))) ->
  (0 <= mod(x32, y))))

axiom Mod_sign_neg :
  (forall x32:int. forall y:int. (((x32 <= 0) and (not (y = 0))) -> (mod(x32,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x32:int. forall y:int. ((not (y = 0)) -> (abs1((div(x32,
  y) * y)) <= abs1(x32))))

axiom Div_1 : (forall x32:int. (div(x32, 1) = x32))

axiom Mod_1 : (forall x32:int. (mod(x32, 1) = 0))

axiom Div_inf :
  (forall x32:int. forall y:int. (((0 <= x32) and (x32 <  y)) -> (div(x32,
  y) = 0)))

axiom Mod_inf :
  (forall x32:int. forall y:int. (((0 <= x32) and (x32 <  y)) -> (mod(x32,
  y) = x32)))

axiom Div_mult :
  (forall x32:int. forall y:int. forall z:int [div(((x32 * y) + z), x32)].
  (((0 <  x32) and ((0 <= y) and (0 <= z))) -> (div(((x32 * y) + z),
  x32) = (y + div(z, x32)))))

axiom Mod_mult :
  (forall x32:int. forall y:int. forall z:int [mod(((x32 * y) + z), x32)].
  (((0 <  x32) and ((0 <= y) and (0 <= z))) -> (mod(((x32 * y) + z),
  x32) = mod(z, x32))))

axiom Div_mod1 :
  (forall x32:int. forall y:int. ((not (y = 0)) ->
  (x32 = ((y * (x32 / y)) + (x32 % y)))))

axiom Div_bound1 :
  (forall x32:int. forall y:int. (((0 <= x32) and (0 <  y)) ->
  ((0 <= (x32 / y)) and ((x32 / y) <= x32))))

axiom Mod_bound1 :
  (forall x32:int. forall y:int. ((not (y = 0)) -> ((0 <= (x32 % y)) and
  ((x32 % y) <  abs1(y)))))

axiom Mod_11 : (forall x32:int. ((x32 % 1) = 0))

axiom Div_11 : (forall x32:int. ((x32 / 1) = x32))

axiom Div_inf1 :
  (forall x32:int. forall y:int. (((0 <= x32) and (x32 <  y)) ->
  ((x32 / y) = 0)))

axiom Div_inf_neg :
  (forall x32:int. forall y:int. (((0 <  x32) and (x32 <= y)) ->
  (((-x32) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x32:int. (forall y:int. ((bool_eq1(x32, y) = true) <-> (x32 = y))))

axiom bool_ne_axiom :
  (forall x32:int.
  (forall y:int. ((bool_ne(x32, y) = true) <-> (not (x32 = y)))))

axiom bool_lt_axiom :
  (forall x32:int.
  (forall y:int. ((bool_lt1(x32, y) = true) <-> (x32 <  y))))

axiom Bool_int__le_axiom :
  (forall x32:int.
  (forall y:int. ((bool_le1(x32, y) = true) <-> (x32 <= y))))

axiom bool_gt_axiom :
  (forall x32:int.
  (forall y:int. ((bool_gt1(x32, y) = true) <-> (y <  x32))))

axiom bool_ge_axiom :
  (forall x32:int.
  (forall y:int. ((bool_ge1(x32, y) = true) <-> (y <= x32))))

function ite(b: bool, x37: 'a, y: 'a) : 'a = match_bool(b, x37, y)

logic to_int2 : bool -> int

axiom to_int_def2 :
  (forall b:bool. (((b = true) -> (to_int2(b) = 1)) and ((not (b = true)) ->
  (to_int2(b) = 0))))

logic of_int2 : int -> bool

axiom of_int_def2 :
  (forall i:int. (((i = 0) -> (of_int2(i) = false)) and ((not (i = 0)) ->
  (of_int2(i) = true))))

predicate in_range29(x37: int) = ((x37 = 0) or (x37 = 1))

logic attr__ATTRIBUTE_IMAGE29 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check29 : us_image -> prop

logic attr__ATTRIBUTE_VALUE29 : us_image -> bool

axiom add_div :
  (forall x37:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x37 + y) / z) = ((x37 / z) + (y / z)))))

axiom sub_div :
  (forall x37:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x37 - y) / z) = ((x37 / z) - (y / z)))))

axiom neg_div :
  (forall x37:real. forall y:real. ((not (y = 0.0)) ->
  (((-x37) / y) = (-(x37 / y)))))

axiom assoc_mul_div :
  (forall x37:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x37 * y) / z) = (x37 * (y / z)))))

axiom assoc_div_mul :
  (forall x37:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x37 / y) / z) = (x37 / (y * z)))))

axiom assoc_div_div :
  (forall x37:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x37 / (y / z)) = ((x37 * z) / y))))

logic abs : real -> real

axiom abs_def3 :
  (forall x37:real. (((0.0 <= x37) -> (abs(x37) = x37)) and
  ((not (0.0 <= x37)) -> (abs(x37) = (-x37)))))

axiom Abs_le :
  (forall x37:real. forall y:real. ((abs(x37) <= y) <-> (((-y) <= x37) and
  (x37 <= y))))

axiom Abs_pos : (forall x37:real. (0.0 <= abs(x37)))

axiom Abs_sum :
  (forall x37:real. forall y:real. (abs((x37 + y)) <= (abs(x37) + abs(y))))

axiom Abs_prod :
  (forall x37:real. forall y:real. (abs((x37 * y)) = (abs(x37) * abs(y))))

axiom triangular_inequality :
  (forall x37:real. forall y:real. forall z:real.
  (abs((x37 - z)) <= (abs((x37 - y)) + abs((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x37:int. forall y:int.
  (from_int((x37 + y)) = (from_int(x37) + from_int(y))))

axiom Sub :
  (forall x37:int. forall y:int.
  (from_int((x37 - y)) = (from_int(x37) - from_int(y))))

axiom Mul :
  (forall x37:int. forall y:int.
  (from_int((x37 * y)) = (from_int(x37) * from_int(y))))

axiom Neg : (forall x37:int. (from_int((-x37)) = (-from_int(x37))))

axiom Monotonic :
  (forall x37:int. forall y:int. ((x37 <= y) ->
  (from_int(x37) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x37:real. ((0.0 <= x37) -> ((from_int(truncate(x37)) <= x37) and
  (x37 <  from_int((truncate(x37) + 1))))))

axiom Truncate_up_neg :
  (forall x37:real. ((x37 <= 0.0) ->
  ((from_int((truncate(x37) - 1)) <  x37) and
  (x37 <= from_int(truncate(x37))))))

axiom Real_of_truncate :
  (forall x37:real. (((x37 - 1.0) <= from_int(truncate(x37))) and
  (from_int(truncate(x37)) <= (x37 + 1.0))))

axiom Truncate_monotonic :
  (forall x37:real. forall y:real. ((x37 <= y) ->
  (truncate(x37) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x37:real. forall i:int. ((x37 <= from_int(i)) ->
  (truncate(x37) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x37:real. forall i:int. ((from_int(i) <= x37) ->
  (i <= truncate(x37))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x37:real. ((from_int(floor(x37)) <= x37) and
  (x37 <  from_int((floor(x37) + 1)))))

axiom Ceil_up :
  (forall x37:real. ((from_int((ceil(x37) - 1)) <  x37) and
  (x37 <= from_int(ceil(x37)))))

axiom Floor_monotonic :
  (forall x37:real. forall y:real. ((x37 <= y) -> (floor(x37) <= floor(y))))

axiom Ceil_monotonic :
  (forall x37:real. forall y:real. ((x37 <= y) -> (ceil(x37) <= ceil(y))))

logic power : real, int -> real

axiom Power_0 : (forall x37:real. (power(x37, 0) = 1.0))

axiom Power_s :
  (forall x37:real. forall n:int. ((0 <= n) -> (power(x37,
  (n + 1)) = (x37 * power(x37, n)))))

axiom Power_s_alt :
  (forall x37:real. forall n:int. ((0 <  n) -> (power(x37,
  n) = (x37 * power(x37, (n - 1))))))

axiom Power_1 : (forall x37:real. (power(x37, 1) = x37))

axiom Power_sum :
  (forall x37:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x37, (n + m)) = (power(x37, n) * power(x37, m))))))

axiom Power_mult :
  (forall x37:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x37, (n * m)) = power(power(x37, n), m)))))

axiom Power_mult2 :
  (forall x37:real. forall y:real. forall n:int. ((0 <= n) ->
  (power((x37 * y), n) = (power(x37, n) * power(y, n)))))

axiom Pow_ge_one :
  (forall x37:real. forall n:int. (((0 <= n) and (1.0 <= x37)) ->
  (1.0 <= power(x37, n))))

logic round : real -> int

axiom Round_down :
  (forall x37:real. (((x37 - from_int(floor(x37))) <  0.5) ->
  (round(x37) = floor(x37))))

axiom Round_up :
  (forall x37:real. (((from_int(ceil(x37)) - x37) <  0.5) ->
  (round(x37) = ceil(x37))))

axiom Round_neg_tie :
  (forall x37:real. ((((x37 - from_int(floor(x37))) = 0.5) and
  (x37 <  0.0)) -> (round(x37) = floor(x37))))

axiom Round_pos_tie :
  (forall x37:real. ((((from_int(ceil(x37)) - x37) = 0.5) and
  (0.0 <  x37)) -> (round(x37) = ceil(x37))))

axiom Round_int : (forall i:int. (round(from_int(i)) = i))

axiom Round_near_int :
  (forall i:int.
  (forall x37:real. ((((-0.5) <  x37) and (x37 <  0.5)) ->
  (round((from_int(i) + x37)) = i))))

axiom Round_monotonic :
  (forall x37:real. forall y:real. ((x37 <= y) -> (round(x37) <= round(y))))

axiom Round_monotonic_int1 :
  (forall x37:real. forall i:int. ((x37 <= from_int(i)) ->
  (round(x37) <= i)))

axiom Round_monotonic_int2 :
  (forall x37:real. forall i:int. ((from_int(i) <= x37) ->
  (i <= round(x37))))

logic bool_lt : real, real -> bool

logic bool_le : real, real -> bool

logic bool_gt : real, real -> bool

logic bool_ge : real, real -> bool

logic bool_eq : real, real -> bool

logic bool_neq : real, real -> bool

axiom Bool_real__lt_axiom :
  (forall x37:real.
  (forall y:real. ((bool_lt(x37, y) = true) <-> (x37 <  y))))

axiom Bool_real__le_axiom :
  (forall x37:real.
  (forall y:real. ((bool_le(x37, y) = true) <-> (x37 <= y))))

axiom Bool_real__gt_axiom :
  (forall x37:real.
  (forall y:real. ((bool_gt(x37, y) = true) <-> (y <  x37))))

axiom Bool_real__ge_axiom :
  (forall x37:real.
  (forall y:real. ((bool_ge(x37, y) = true) <-> (y <= x37))))

axiom Bool_real__eq_axiom :
  (forall x37:real.
  (forall y:real. ((bool_eq(x37, y) = true) <-> (x37 = y))))

axiom Bool_real__neq_axiom :
  (forall x37:real.
  (forall y:real. ((bool_neq(x37, y) = true) <-> (not (x37 = y)))))

type tid7B

logic attr__ATTRIBUTE_MODULUS17 : real

predicate in_range17(x37: real) =
  (((-from_int(340282346638528859811704183484516925440)) <= x37) and
  (x37 <= from_int(340282346638528859811704183484516925440)))

logic to_real17 : tid7B -> real

logic of_real17 : real -> tid7B

predicate eq17(x37: tid7B, y: tid7B) = (to_real17(x37) = to_real17(y))

axiom range_axiom17 : (forall x37:tid7B. in_range17(to_real17(x37)))

axiom coerce_axiom17 :
  (forall x37:real [to_real17(of_real17(x37))| in_range17(x37),
  of_real17(x37)]. (in_range17(x37) -> (to_real17(of_real17(x37)) = x37)))

axiom inversion_axiom17 :
  (forall x37:tid7B [to_real17(x37)]. (of_real17(to_real17(x37)) = x37))

logic attr__ATTRIBUTE_IMAGE17 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_image -> prop

logic attr__ATTRIBUTE_VALUE17 : us_image -> real

logic dummy17 : tid7B

type id7

logic attr__ATTRIBUTE_MODULUS30 : real

predicate in_range31(x37: real) =
  (((-from_int(340282001837565597733306976381245063168)) <= x37) and
  (x37 <= from_int(340282001837565597733306976381245063168)))

logic to_real27 : id7 -> real

logic of_real27 : real -> id7

predicate eq30(x37: id7, y: id7) = (to_real27(x37) = to_real27(y))

axiom range_axiom30 : (forall x37:id7. in_range31(to_real27(x37)))

axiom coerce_axiom30 :
  (forall x37:real [to_real27(of_real27(x37))| in_range31(x37),
  of_real27(x37)]. (in_range31(x37) -> (to_real27(of_real27(x37)) = x37)))

axiom inversion_axiom30 :
  (forall x37:id7 [to_real27(x37)]. (of_real27(to_real27(x37)) = x37))

logic attr__ATTRIBUTE_IMAGE31 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check31 : us_image -> prop

logic attr__ATTRIBUTE_VALUE31 : us_image -> real

logic dummy30 : id7

logic x66 : id7

axiom real_const_axiom673 : (0.0 = from_int(0))

axiom real_const_axiom674 :
  (340282001837565597733306976381245063168.0 = from_int(340282001837565597733306976381245063168))

axiom real_const_axiom675 :
  (340282346638528859811704183484516925440.0 = from_int(340282346638528859811704183484516925440))

goal WP_parameter_def71 :
  ((((-from_int(340282001837565597733306976381245063168)) <= to_real27(x66)) and
  (to_real27(x66) <= from_int(340282001837565597733306976381245063168))) ->
  in_range31(from_int(round(to_real27(x66)))))

