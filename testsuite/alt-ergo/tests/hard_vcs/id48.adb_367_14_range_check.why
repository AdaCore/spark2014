(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_private

type us_type_of_heap

type us_image

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

logic abs1 : real -> real

axiom abs_def2 :
  (forall x:real. (((0.0 <= x) -> (abs1(x) = x)) and ((not (0.0 <= x)) ->
  (abs1(x) = (-x)))))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs1(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos1 : (forall x:real. (0.0 <= abs1(x)))

axiom Abs_sum :
  (forall x:real. forall y:real. (abs1((x + y)) <= (abs1(x) + abs1(y))))

axiom Abs_prod :
  (forall x:real. forall y:real. (abs1((x * y)) = (abs1(x) * abs1(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs1((x - z)) <= (abs1((x - y)) + abs1((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x:int. forall y:int.
  (from_int((x + y)) = (from_int(x) + from_int(y))))

axiom Sub :
  (forall x:int. forall y:int.
  (from_int((x - y)) = (from_int(x) - from_int(y))))

axiom Mul :
  (forall x:int. forall y:int.
  (from_int((x * y)) = (from_int(x) * from_int(y))))

axiom Neg : (forall x:int. (from_int((-x)) = (-from_int(x))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) -> (from_int(x) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((from_int(truncate(x)) <= x) and
  (x <  from_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((from_int((truncate(x) - 1)) <  x) and
  (x <= from_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= from_int(truncate(x))) and
  (from_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int(i)) -> (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((from_int(floor(x)) <= x) and
  (x <  from_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((from_int((ceil(x) - 1)) <  x) and
  (x <= from_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

logic power1 : real, int -> real

axiom Power_01 : (forall x:real. (power1(x, 0) = 1.0))

axiom Power_s1 :
  (forall x:real. forall n:int. ((0 <= n) -> (power1(x,
  (n + 1)) = (x * power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:real. forall n:int. ((0 <  n) -> (power1(x, n) = (x * power1(x,
  (n - 1))))))

axiom Power_11 : (forall x:real. (power1(x, 1) = x))

axiom Power_sum1 :
  (forall x:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = (power1(x, n) * power1(x, m))))))

axiom Power_mult1 :
  (forall x:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:real. forall y:real. forall n:int. ((0 <= n) -> (power1((x * y),
  n) = (power1(x, n) * power1(y, n)))))

axiom Pow_ge_one :
  (forall x:real. forall n:int. (((0 <= n) and (1.0 <= x)) ->
  (1.0 <= power1(x, n))))

logic round : real -> int

axiom Round_down :
  (forall x:real. (((x - from_int(floor(x))) <  0.5) ->
  (round(x) = floor(x))))

axiom Round_up :
  (forall x:real. (((from_int(ceil(x)) - x) <  0.5) -> (round(x) = ceil(x))))

axiom Round_neg_tie :
  (forall x:real. ((((x - from_int(floor(x))) = 0.5) and (x <  0.0)) ->
  (round(x) = floor(x))))

axiom Round_pos_tie :
  (forall x:real. ((((from_int(ceil(x)) - x) = 0.5) and (0.0 <  x)) ->
  (round(x) = ceil(x))))

axiom Round_int : (forall i:int. (round(from_int(i)) = i))

axiom Round_near_int :
  (forall i:int.
  (forall x:real. ((((-0.5) <  x) and (x <  0.5)) ->
  (round((from_int(i) + x)) = i))))

axiom Round_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (round(x) <= round(y))))

axiom Round_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int(i)) -> (round(x) <= i)))

axiom Round_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= round(x))))

logic bool_lt1 : real, real -> bool

logic bool_le1 : real, real -> bool

logic bool_gt1 : real, real -> bool

logic bool_ge1 : real, real -> bool

logic bool_eq2 : real, real -> bool

logic bool_neq : real, real -> bool

axiom Bool_real__lt_axiom :
  (forall x:real. (forall y:real. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom Bool_real__le_axiom :
  (forall x:real. (forall y:real. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom Bool_real__gt_axiom :
  (forall x:real. (forall y:real. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom Bool_real__ge_axiom :
  (forall x:real. (forall y:real. ((bool_ge1(x, y) = true) <-> (y <= x))))

axiom Bool_real__eq_axiom :
  (forall x:real. (forall y:real. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom Bool_real__neq_axiom :
  (forall x:real.
  (forall y:real. ((bool_neq(x, y) = true) <-> (not (x = y)))))

type id269

logic attr__ATTRIBUTE_MODULUS27 : real

predicate in_range28(x: real) = (((-1.0) <= x) and (x <= 1.0))

logic to_real10 : id269 -> real

logic of_real10 : real -> id269

predicate eq27(x: id269, y: id269) = (to_real10(x) = to_real10(y))

axiom range_axiom27 : (forall x:id269. in_range28(to_real10(x)))

axiom coerce_axiom27 :
  (forall x:real [to_real10(of_real10(x))| in_range28(x), of_real10(x)].
  (in_range28(x) -> (to_real10(of_real10(x)) = x)))

axiom inversion_axiom27 :
  (forall x:id269 [to_real10(x)]. (of_real10(to_real10(x)) = x))

logic attr__ATTRIBUTE_IMAGE28 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check28 : us_image -> prop

logic attr__ATTRIBUTE_VALUE28 : us_image -> real

logic dummy77 : id269

type t31

logic abs : int -> int

axiom abs_def5 :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type id63

logic attr__ATTRIBUTE_MODULUS1 : int

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

predicate in_range1(x: int) = ((0 <= x) and (x <= 3))

logic to_int1 : id63 -> int

logic of_int1 : int -> id63

predicate eq1(x: id63, y: id63) = (to_int1(x) = to_int1(y))

axiom range_axiom1 : (forall x:id63. in_range1(to_int1(x)))

axiom inversion_axiom1 :
  (forall x:id63 [to_int1(x)]. (of_int1(to_int1(x)) = x))

logic dummy5 : id63

axiom coerce_axiom1 :
  (forall x:int [to_int1(of_int1(x))| in_range1(x), of_int1(x)].
  (in_range1(x) -> (to_int1(of_int1(x)) = x)))

type id271

logic attr__ATTRIBUTE_MODULUS28 : real

predicate in_range29(x: real) = ((0.0e-1 <= x) and
  (x <= 0.500000000000000000000000))

logic to_real11 : id271 -> real

logic of_real11 : real -> id271

predicate eq28(x: id271, y: id271) = (to_real11(x) = to_real11(y))

axiom range_axiom28 : (forall x:id271. in_range29(to_real11(x)))

axiom coerce_axiom28 :
  (forall x:real [to_real11(of_real11(x))| in_range29(x), of_real11(x)].
  (in_range29(x) -> (to_real11(of_real11(x)) = x)))

axiom inversion_axiom28 :
  (forall x:id271 [to_real11(x)]. (of_real11(to_real11(x)) = x))

logic attr__ATTRIBUTE_IMAGE29 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check29 : us_image -> prop

logic attr__ATTRIBUTE_VALUE29 : us_image -> real

logic dummy78 : id271

type t32

type tid8B

logic attr__ATTRIBUTE_MODULUS13 : real

predicate in_range14(x: real) =
  (((-from_int(340282346638528859811704183484516925440)) <= x) and
  (x <= from_int(340282346638528859811704183484516925440)))

logic to_real1 : tid8B -> real

logic of_real1 : real -> tid8B

predicate eq13(x: tid8B, y: tid8B) = (to_real1(x) = to_real1(y))

axiom range_axiom13 : (forall x:tid8B. in_range14(to_real1(x)))

axiom coerce_axiom13 :
  (forall x:real [to_real1(of_real1(x))| in_range14(x), of_real1(x)].
  (in_range14(x) -> (to_real1(of_real1(x)) = x)))

axiom inversion_axiom13 :
  (forall x:tid8B [to_real1(x)]. (of_real1(to_real1(x)) = x))

logic attr__ATTRIBUTE_IMAGE14 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> real

logic dummy29 : tid8B

type id8

logic attr__ATTRIBUTE_MODULUS14 : real

predicate in_range15(x: real) =
  (((-from_int(340282001837565597733306976381245063168)) <= x) and
  (x <= from_int(340282001837565597733306976381245063168)))

logic to_real2 : id8 -> real

logic of_real2 : real -> id8

predicate eq14(x: id8, y: id8) = (to_real2(x) = to_real2(y))

axiom range_axiom14 : (forall x:id8. in_range15(to_real2(x)))

axiom coerce_axiom14 :
  (forall x:real [to_real2(of_real2(x))| in_range15(x), of_real2(x)].
  (in_range15(x) -> (to_real2(of_real2(x)) = x)))

axiom inversion_axiom14 :
  (forall x:id8 [to_real2(x)]. (of_real2(to_real2(x)) = x))

logic attr__ATTRIBUTE_IMAGE15 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> real

logic dummy30 : id8

logic id87 : id8

axiom def_axiom45 : (id87 = of_real2(0.0040322579443454742431640625000))

logic id356 : id271

axiom def_axiom46 : (id356 = of_real11(0.500000000000000000000000))

logic id357 : id271

axiom def_axiom47 : (id357 = of_real11(0.500000000000000000000000))

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def28 :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def28 :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def6 :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def6 :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion6 :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

logic get : 'a map, int -> 'a

logic set : 'a map, int, 'a -> 'a map

axiom Select_eq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)]. ((i = j) -> (get(set(m, i, a),
  j) = a)))))

axiom Select_neq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)| set(m, i, a), get(m, j)].
  ((not (i = j)) -> (get(set(m, i, a), j) = get(m, j))))))

logic attr__ATTRIBUTE_LENGTH : 'a t -> int

axiom attr__ATTRIBUTE_LENGTH_def6 :
  (forall x:'a t. (((first(x) <= last(x)) ->
  (attr__ATTRIBUTE_LENGTH(x) = ((last(x) - first(x)) + 1))) and
  ((not (first(x) <= last(x))) -> (attr__ATTRIBUTE_LENGTH(x) = 0))))

logic bool_eq1 : 'a t, 'a t -> bool

axiom T__ada_array___equal_def :
  (forall a:'a map. forall a1:int. forall a2:int. forall a3:int.
  (forall b:'a map. forall b1:int. forall b2:int. forall b3:int
  [bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2)))))) ->
  (bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true)) and
  ((bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2))))))))))

type us_t20

logic mk___t20 : id271 map, int -> us_t20

logic elts22 : us_t20 -> id271 map

axiom elts_def29 :
  (forall u:id271 map. forall u1:int. (elts22(mk___t20(u, u1)) = u))

logic offset22 : us_t20 -> int

axiom offset_def29 :
  (forall u:id271 map. forall u1:int. (offset22(mk___t20(u, u1)) = u1))

axiom us_t_inversion22 :
  (forall u:us_t20. (u = mk___t20(elts22(u), offset22(u))))

function to_array20(a: us_t20) : id271 t = mk_t(elts22(a), offset22(a), 0, 3)

function of_array20(a: id271 t) : us_t20 = mk___t20(elts(a), offset(a))

logic dummy79 : id271 map

logic dummy80 : int

type id341

type us_t21

logic mk___t21 : id271 map, int -> us_t21

logic elts23 : us_t21 -> id271 map

axiom elts_def30 :
  (forall u:id271 map. forall u1:int. (elts23(mk___t21(u, u1)) = u))

logic offset23 : us_t21 -> int

axiom offset_def30 :
  (forall u:id271 map. forall u1:int. (offset23(mk___t21(u, u1)) = u1))

axiom us_t_inversion23 :
  (forall u:us_t21. (u = mk___t21(elts23(u), offset23(u))))

function to_array21(a: us_t21) : id271 t = mk_t(elts23(a), offset23(a), 0, 3)

function of_array21(a: id271 t) : us_t21 = mk___t21(elts(a), offset(a))

logic dummy81 : id271 map

logic dummy82 : int

type t59s

logic id48__364__6 : id271, id271, id271, id271 -> us_t21

axiom def_axiom48 :
  (forall ustemp_standard__id48_7:id271.
  forall ustemp_standard__id48_8:id271. forall ustemp_standard__id48_9:id271.
  forall ustemp_standard__id48_10:id271
  [id48__364__6(ustemp_standard__id48_7, ustemp_standard__id48_8,
  ustemp_standard__id48_9, ustemp_standard__id48_10)].
  ((((get(elts23(id48__364__6(ustemp_standard__id48_7,
  ustemp_standard__id48_8, ustemp_standard__id48_9,
  ustemp_standard__id48_10)),
  ((0 + offset23(id48__364__6(ustemp_standard__id48_7,
  ustemp_standard__id48_8, ustemp_standard__id48_9,
  ustemp_standard__id48_10))) - 0)) = ustemp_standard__id48_7) and
  (get(elts23(id48__364__6(ustemp_standard__id48_7, ustemp_standard__id48_8,
  ustemp_standard__id48_9, ustemp_standard__id48_10)),
  ((1 + offset23(id48__364__6(ustemp_standard__id48_7,
  ustemp_standard__id48_8, ustemp_standard__id48_9,
  ustemp_standard__id48_10))) - 0)) = ustemp_standard__id48_8)) and
  (get(elts23(id48__364__6(ustemp_standard__id48_7, ustemp_standard__id48_8,
  ustemp_standard__id48_9, ustemp_standard__id48_10)),
  ((2 + offset23(id48__364__6(ustemp_standard__id48_7,
  ustemp_standard__id48_8, ustemp_standard__id48_9,
  ustemp_standard__id48_10))) - 0)) = ustemp_standard__id48_9)) and
  (get(elts23(id48__364__6(ustemp_standard__id48_7, ustemp_standard__id48_8,
  ustemp_standard__id48_9, ustemp_standard__id48_10)),
  ((3 + offset23(id48__364__6(ustemp_standard__id48_7,
  ustemp_standard__id48_8, ustemp_standard__id48_9,
  ustemp_standard__id48_10))) - 0)) = ustemp_standard__id48_10)))

logic id354 : id271

axiom def_axiom49 : (id354 = of_real11(0.500000000000000000000000))

logic id355 : id271

axiom def_axiom50 : (id355 = of_real11(0.500000000000000000000000))

logic id89 : id271 map

logic id891 : int

axiom def_axiom51 : ((id89 = elts23(id48__364__6(id354, id355, id356,
  id357))) and (id891 = offset23(id48__364__6(id354, id355, id356, id357))))

type id267

logic attr__ATTRIBUTE_MODULUS29 : real

predicate in_range30(x: real) = (((-0.500000000000000000000000) <= x) and
  (x <= 0.500000000000000000000000))

logic to_real12 : id267 -> real

logic of_real12 : real -> id267

predicate eq29(x: id267, y: id267) = (to_real12(x) = to_real12(y))

axiom range_axiom29 : (forall x:id267. in_range30(to_real12(x)))

axiom coerce_axiom29 :
  (forall x:real [to_real12(of_real12(x))| in_range30(x), of_real12(x)].
  (in_range30(x) -> (to_real12(of_real12(x)) = x)))

axiom inversion_axiom29 :
  (forall x:id267 [to_real12(x)]. (of_real12(to_real12(x)) = x))

logic attr__ATTRIBUTE_IMAGE30 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check30 : us_image -> prop

logic attr__ATTRIBUTE_VALUE30 : us_image -> real

logic dummy83 : id267

type t33

type t34

type t35

logic id623 : id63

type t36

type t37

logic id85 : id267

type t38

logic id350 : id271

axiom def_axiom52 : (id350 = of_real11(0.24194000661373138427734375))

type us_t22

logic mk___t22 : id271 map, int -> us_t22

logic elts24 : us_t22 -> id271 map

axiom elts_def31 :
  (forall u:id271 map. forall u1:int. (elts24(mk___t22(u, u1)) = u))

logic offset24 : us_t22 -> int

axiom offset_def31 :
  (forall u:id271 map. forall u1:int. (offset24(mk___t22(u, u1)) = u1))

axiom us_t_inversion24 :
  (forall u:us_t22. (u = mk___t22(elts24(u), offset24(u))))

function to_array22(a: us_t22) : id271 t = mk_t(elts24(a), offset24(a), 0, 3)

function of_array22(a: id271 t) : us_t22 = mk___t22(elts(a), offset(a))

logic dummy84 : id271 map

logic dummy85 : int

type t57s

logic id48__357__6 : id271, id271, id271, id271 -> us_t22

axiom def_axiom53 :
  (forall ustemp_standard__id48_1:id271.
  forall ustemp_standard__id48_2:id271. forall ustemp_standard__id48_3:id271.
  forall ustemp_standard__id48_4:id271 [id48__357__6(ustemp_standard__id48_1,
  ustemp_standard__id48_2, ustemp_standard__id48_3,
  ustemp_standard__id48_4)].
  ((((get(elts24(id48__357__6(ustemp_standard__id48_1,
  ustemp_standard__id48_2, ustemp_standard__id48_3,
  ustemp_standard__id48_4)),
  ((0 + offset24(id48__357__6(ustemp_standard__id48_1,
  ustemp_standard__id48_2, ustemp_standard__id48_3,
  ustemp_standard__id48_4))) - 0)) = ustemp_standard__id48_1) and
  (get(elts24(id48__357__6(ustemp_standard__id48_1, ustemp_standard__id48_2,
  ustemp_standard__id48_3, ustemp_standard__id48_4)),
  ((1 + offset24(id48__357__6(ustemp_standard__id48_1,
  ustemp_standard__id48_2, ustemp_standard__id48_3,
  ustemp_standard__id48_4))) - 0)) = ustemp_standard__id48_2)) and
  (get(elts24(id48__357__6(ustemp_standard__id48_1, ustemp_standard__id48_2,
  ustemp_standard__id48_3, ustemp_standard__id48_4)),
  ((2 + offset24(id48__357__6(ustemp_standard__id48_1,
  ustemp_standard__id48_2, ustemp_standard__id48_3,
  ustemp_standard__id48_4))) - 0)) = ustemp_standard__id48_3)) and
  (get(elts24(id48__357__6(ustemp_standard__id48_1, ustemp_standard__id48_2,
  ustemp_standard__id48_3, ustemp_standard__id48_4)),
  ((3 + offset24(id48__357__6(ustemp_standard__id48_1,
  ustemp_standard__id48_2, ustemp_standard__id48_3,
  ustemp_standard__id48_4))) - 0)) = ustemp_standard__id48_4)))

logic id351 : id271

axiom def_axiom54 : (id351 = of_real11(0.24194000661373138427734375))

logic id352 : id271

axiom def_axiom55 : (id352 = of_real11(0.24194000661373138427734375))

logic id353 : id271

axiom def_axiom56 : (id353 = of_real11(0.24194000661373138427734375))

logic id88 : id271 map

logic id881 : int

axiom def_axiom57 : ((id88 = elts24(id48__357__6(id350, id351, id352,
  id353))) and (id881 = offset24(id48__357__6(id350, id351, id352, id353))))

type t39

type t40

axiom real_const_axiom612 : (0.0 = from_int(0))

axiom real_const_axiom613 : (2.0 = from_int(2))

axiom real_const_axiom614 :
  (340282001837565597733306976381245063168.0 = from_int(340282001837565597733306976381245063168))

axiom real_const_axiom615 :
  (340282346638528859811704183484516925440.0 = from_int(340282346638528859811704183484516925440))

goal WP_parameter_def4 :
  (forall id270:id271. forall id272:id271. forall id273:id271.
  forall id274:id269. forall id275:id269. forall id276:id269.
  forall id277:id269. forall id278:id269. forall id279:id269. forall c:bool.
  forall id86:id8. forall c1:bool. forall id861:id8. forall c2:bool.
  forall id862:id8. forall c3:bool. forall id863:id8. forall id864:id8.
  ((id270 = get(id88, ((to_int1(id623) + id881) - 0))) -> ((id272 = get(id89,
  ((to_int1(id623) + id891) - 0))) ->
  ((id273 = of_real11(((to_real11(id270) + to_real11(id272)) / from_int(2)))) ->
  ((id274 = of_real10((to_real11(id270) - to_real2(id87)))) ->
  ((id275 = of_real10((to_real11(id273) - to_real2(id87)))) ->
  ((id276 = of_real10((to_real11(id272) + to_real2(id87)))) ->
  ((id277 = of_real10(((-to_real11(id273)) + to_real2(id87)))) ->
  ((id278 = of_real10(((-to_real11(id270)) + to_real2(id87)))) ->
  ((id279 = of_real10(((-to_real11(id272)) - to_real2(id87)))) ->
  (((((to_real10(id274) <  to_real12(id85)) and
  (((to_real12(id85) <  to_real10(id275)) and (c = true)) or
  ((not (to_real12(id85) <  to_real10(id275))) and (c = false)))) or
  ((not (to_real10(id274) <  to_real12(id85))) and (c = false))) and
  (((c = true) and ((id86 = of_real2(to_real11(id270))) and
  (id864 = id86))) or ((not (c = true)) and
  ((((to_real10(id275) <  to_real12(id85)) and
  (((to_real12(id85) <  to_real10(id276)) and (c1 = true)) or
  ((not (to_real12(id85) <  to_real10(id276))) and (c1 = false)))) or
  ((not (to_real10(id275) <  to_real12(id85))) and (c1 = false))) and
  (((c1 = true) and ((id861 = of_real2(to_real11(id272))) and
  (id864 = id861))) or ((not (c1 = true)) and
  ((((to_real10(id277) <  to_real12(id85)) and
  (((to_real12(id85) <  to_real10(id278)) and (c2 = true)) or
  ((not (to_real12(id85) <  to_real10(id278))) and (c2 = false)))) or
  ((not (to_real10(id277) <  to_real12(id85))) and (c2 = false))) and
  (((c2 = true) and ((id862 = of_real2((-to_real11(id270)))) and
  (id864 = id862))) or ((not (c2 = true)) and
  ((((to_real10(id279) <  to_real12(id85)) and
  (((to_real12(id85) <  to_real10(id277)) and (c3 = true)) or
  ((not (to_real12(id85) <  to_real10(id277))) and (c3 = false)))) or
  ((not (to_real10(id279) <  to_real12(id85))) and (c3 = false))) and
  (((c3 = true) and ((id863 = of_real2((-to_real11(id272)))) and
  (id864 = id863))) or ((not (c3 = true)) and
  (id864 = of_real2(to_real12(id85))))))))))))))) ->
  in_range30(to_real2(id864)))))))))))))

