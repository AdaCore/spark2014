(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_character

type us_private

type us_type_of_heap

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

type range_type

type us_string

logic mk___string : us_character map, int, range_type -> us_string

logic elts1 : us_string -> us_character map

axiom elts_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (elts1(mk___string(u, u1, u2)) = u))

logic offset1 : us_string -> int

axiom offset_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (offset1(mk___string(u, u1, u2)) = u1))

logic rt : us_string -> range_type

axiom rt_def :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (rt(mk___string(u, u1, u2)) = u2))

axiom us_string_inversion :
  (forall u:us_string. (u = mk___string(elts1(u), offset1(u), rt(u))))

logic abs : int -> int

axiom abs_def :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type ttB

logic attr__ATTRIBUTE_MODULUS : int

logic attr__ATTRIBUTE_IMAGE : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check : us_string -> prop

logic attr__ATTRIBUTE_VALUE : us_string -> int

predicate in_range(x: int) = (((-128) <= x) and (x <= 127))

logic to_int : ttB -> int

logic of_int : int -> ttB

predicate eq(x: ttB, y: ttB) = (to_int(x) = to_int(y))

axiom range_axiom : (forall x:ttB. in_range(to_int(x)))

axiom coerce_axiom :
  (forall x:int [to_int(of_int(x))| in_range(x), of_int(x)]. (in_range(x) ->
  (to_int(of_int(x)) = x)))

axiom unicity_axiom :
  (forall x:ttB. forall y:ttB [to_int(x), to_int(y)].
  ((to_int(x) = to_int(y)) -> (x = y)))

logic dummy : ttB

type integer

logic attr__ATTRIBUTE_MODULUS1 : int

logic attr__ATTRIBUTE_IMAGE1 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_string -> prop

logic attr__ATTRIBUTE_VALUE1 : us_string -> int

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int1 : integer -> int

logic of_int1 : int -> integer

predicate eq1(x: integer, y: integer) = (to_int1(x) = to_int1(y))

axiom range_axiom1 : (forall x:integer. in_range1(to_int1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_int1(of_int1(x))| in_range1(x), of_int1(x)].
  (in_range1(x) -> (to_int1(of_int1(x)) = x)))

axiom unicity_axiom1 :
  (forall x:integer. forall y:integer [to_int1(x), to_int1(y)].
  ((to_int1(x) = to_int1(y)) -> (x = y)))

logic dummy1 : integer

logic get : 'a map, int -> 'a

logic set : 'a map, int, 'a -> 'a map

axiom Select_eq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)]. ((i = j) -> (get(set(m, i, a),
  j) = a)))))

axiom Select_neq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)| set(m, i, a), get(m, j)].
  ((not (i = j)) -> (get(set(m, i, a), j) = get(m, j))))))

logic attr__ATTRIBUTE_LENGTH : 'a t -> int

axiom attr__ATTRIBUTE_LENGTH_def :
  (forall x:'a t. (((first(x) <= last(x)) ->
  (attr__ATTRIBUTE_LENGTH(x) = ((last(x) - first(x)) + 1))) and
  ((not (first(x) <= last(x))) -> (attr__ATTRIBUTE_LENGTH(x) = 0))))

logic bool_eq1 : 'a t, 'a t -> bool

axiom T__ada_array___equal_def :
  (forall a:'a map. forall a1:int. forall a2:int. forall a3:int.
  (forall b:'a map. forall b1:int. forall b2:int. forall b3:int
  [bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2)))))) ->
  (bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true)) and
  ((bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2))))))))))

type t4b

logic mk_t4b : integer map, int -> t4b

logic elts2 : t4b -> integer map

axiom elts_def2 :
  (forall u:integer map. forall u1:int. (elts2(mk_t4b(u, u1)) = u))

logic offset2 : t4b -> int

axiom offset_def2 :
  (forall u:integer map. forall u1:int. (offset2(mk_t4b(u, u1)) = u1))

axiom t4b_inversion : (forall u:t4b. (u = mk_t4b(elts2(u), offset2(u))))

logic attr__ATTRIBUTE_LAST : int

function to_array(a: t4b) : integer t = mk_t(elts2(a), offset2(a), 1,
  attr__ATTRIBUTE_LAST)

function of_array(a: integer t) : t4b = mk_t4b(elts(a), offset(a))

logic dummy2 : t4b

type t1

logic attr__ATTRIBUTE_MODULUS2 : int

logic attr__ATTRIBUTE_IMAGE2 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_string -> prop

logic attr__ATTRIBUTE_VALUE2 : us_string -> int

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic to_int2 : t1 -> int

logic of_int2 : int -> t1

predicate eq2(x: t1, y: t1) = (to_int2(x) = to_int2(y))

axiom range_axiom2 : (forall x:t1. in_range2(to_int2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_int2(of_int2(x))| in_range2(x), of_int2(x)].
  (in_range2(x) -> (to_int2(of_int2(x)) = x)))

axiom unicity_axiom2 :
  (forall x:t1. forall y:t1 [to_int2(x), to_int2(y)].
  ((to_int2(x) = to_int2(y)) -> (x = y)))

logic dummy3 : t1

type t14b

logic mk_t14b : integer map, int -> t14b

logic elts3 : t14b -> integer map

axiom elts_def3 :
  (forall u:integer map. forall u1:int. (elts3(mk_t14b(u, u1)) = u))

logic offset3 : t14b -> int

axiom offset_def3 :
  (forall u:integer map. forall u1:int. (offset3(mk_t14b(u, u1)) = u1))

axiom t14b_inversion : (forall u:t14b. (u = mk_t14b(elts3(u), offset3(u))))

logic attr__ATTRIBUTE_LAST1 : int

function to_array1(a: t14b) : integer t = mk_t(elts3(a), offset3(a), 1,
  attr__ATTRIBUTE_LAST1)

function of_array1(a: integer t) : t14b = mk_t14b(elts(a), offset(a))

logic dummy4 : t14b

type r

logic mk_r : t1, t4b -> r

logic rec__length : r -> t1

axiom rec__length_def :
  (forall u:t1. forall u1:t4b. (rec__length(mk_r(u, u1)) = u))

logic rec__contents : r -> t4b

axiom rec__contents_def :
  (forall u:t1. forall u1:t4b. (rec__contents(mk_r(u, u1)) = u1))

axiom r_inversion :
  (forall u:r. (u = mk_r(rec__length(u), rec__contents(u))))

logic bool_eq2 : r, r -> bool

axiom bool_eq_def :
  (forall a:r. forall b:r. ((((rec__length(a) = rec__length(b)) and
  (rec__contents(a) = rec__contents(b))) -> (bool_eq2(a, b) = true)) and
  ((not ((rec__length(a) = rec__length(b)) and
  (rec__contents(a) = rec__contents(b)))) -> (bool_eq2(a, b) = false))))

logic dummy5 : r

type t13b

logic mk_t13b : t1, t14b -> t13b

logic rec__length1 : t13b -> t1

axiom rec__length_def1 :
  (forall u:t1. forall u1:t14b. (rec__length1(mk_t13b(u, u1)) = u))

logic rec__contents1 : t13b -> t14b

axiom rec__contents_def1 :
  (forall u:t1. forall u1:t14b. (rec__contents1(mk_t13b(u, u1)) = u1))

axiom t13b_inversion :
  (forall u:t13b. (u = mk_t13b(rec__length1(u), rec__contents1(u))))

function to_base(a: t13b) : r = mk_r(rec__length1(a),
  of_array(to_array1(rec__contents1(a))))

function of_base(a: r) : t13b = mk_t13b(rec__length(a),
  of_array1(to_array(rec__contents(a))))

logic bool_eq3 : t13b, t13b -> bool

axiom bool_eq_def1 :
  (forall a:t13b. forall b:t13b. ((((rec__length1(a) = rec__length1(b)) and
  (rec__contents1(a) = rec__contents1(b))) -> (bool_eq3(a, b) = true)) and
  ((not ((rec__length1(a) = rec__length1(b)) and
  (rec__contents1(a) = rec__contents1(b)))) -> (bool_eq3(a, b) = false))))

logic dummy6 : t13b

type titemS

logic mk_titemS : integer map, int -> titemS

logic elts4 : titemS -> integer map

axiom elts_def4 :
  (forall u:integer map. forall u1:int. (elts4(mk_titemS(u, u1)) = u))

logic offset4 : titemS -> int

axiom offset_def4 :
  (forall u:integer map. forall u1:int. (offset4(mk_titemS(u, u1)) = u1))

axiom titemS_inversion :
  (forall u:titemS. (u = mk_titemS(elts4(u), offset4(u))))

logic attr__ATTRIBUTE_FIRST : int

logic attr__ATTRIBUTE_LAST2 : int

function to_array2(a: titemS) : integer t = mk_t(elts4(a), offset4(a),
  attr__ATTRIBUTE_FIRST, attr__ATTRIBUTE_LAST2)

function of_array2(a: integer t) : titemS = mk_titemS(elts(a), offset(a))

logic dummy7 : titemS

type range_type1

logic first1 : range_type1 -> ttB

logic last1 : range_type1 -> ttB

logic mk : int, int -> range_type1

axiom range_axiom3 :
  (forall a:range_type1. ((to_int(first1(a)) <= to_int(last1(a))) ->
  (((1 <= to_int(first1(a))) and (to_int(first1(a)) <= 10)) and
  ((1 <= to_int(last1(a))) and (to_int(last1(a)) <= 10)))))

type a

logic mk_a : integer map, int, range_type1 -> a

logic elts5 : a -> integer map

axiom elts_def5 :
  (forall u:integer map. forall u1:int. forall u2:range_type1. (elts5(mk_a(u,
  u1, u2)) = u))

logic offset5 : a -> int

axiom offset_def5 :
  (forall u:integer map. forall u1:int. forall u2:range_type1.
  (offset5(mk_a(u, u1, u2)) = u1))

logic rt1 : a -> range_type1

axiom rt_def1 :
  (forall u:integer map. forall u1:int. forall u2:range_type1. (rt1(mk_a(u,
  u1, u2)) = u2))

axiom a_inversion : (forall u:a. (u = mk_a(elts5(u), offset5(u), rt1(u))))

function to_array3(a1: a) : integer t = mk_t(elts5(a1), offset5(a1),
  to_int(first1(rt1(a1))), to_int(last1(rt1(a1))))

function of_array3(a1: integer t) : a = mk_a(elts(a1), offset(a1),
  mk(first(a1), last(a1)))

logic dummy8 : a

logic f : integer -> a

logic r11b : ttB

axiom def_axiom : (r11b = of_int(first(to_array3(f(of_int1(3))))))

type t2

logic r12b : ttB

axiom def_axiom1 : (r12b = of_int(last(to_array3(f(of_int1(3))))))

type t3

type tTitemSP1

logic attr__ATTRIBUTE_FIRST1 : int

logic attr__ATTRIBUTE_LAST3 : int

logic attr__ATTRIBUTE_MODULUS3 : int

logic attr__ATTRIBUTE_IMAGE3 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_string -> prop

logic attr__ATTRIBUTE_VALUE3 : us_string -> int

predicate in_range3(x: int) = ((attr__ATTRIBUTE_FIRST1 <= x) and
  (x <= attr__ATTRIBUTE_LAST3))

logic to_int3 : tTitemSP1 -> int

logic of_int3 : int -> tTitemSP1

predicate eq3(x: tTitemSP1, y: tTitemSP1) = (to_int3(x) = to_int3(y))

axiom range_axiom4 : (forall x:tTitemSP1. in_range3(to_int3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_int3(of_int3(x))| in_range3(x), of_int3(x)].
  (in_range3(x) -> (to_int3(of_int3(x)) = x)))

axiom unicity_axiom3 :
  (forall x:tTitemSP1. forall y:tTitemSP1 [to_int3(x), to_int3(y)].
  ((to_int3(x) = to_int3(y)) -> (x = y)))

logic dummy9 : tTitemSP1

goal WP_parameter_def : ((of_int(first(to_array3(f(of_int1(3))))) = r11b) ->
  ((of_int(last(to_array3(f(of_int1(3))))) = r12b) ->
  ((to_int(r11b) <= to_int(r12b)) -> ((1 <= to_int(r11b)) and
  (to_int(r12b) <= 10)))))

