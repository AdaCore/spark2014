(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_character

type us_private

type us_type_of_heap

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

type range_type

type us_string

logic mk___string : us_character map, int, range_type -> us_string

logic elts1 : us_string -> us_character map

axiom elts_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (elts1(mk___string(u, u1, u2)) = u))

logic offset1 : us_string -> int

axiom offset_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (offset1(mk___string(u, u1, u2)) = u1))

logic rt : us_string -> range_type

axiom rt_def :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (rt(mk___string(u, u1, u2)) = u2))

axiom us_string_inversion :
  (forall u:us_string. (u = mk___string(elts1(u), offset1(u), rt(u))))

logic abs : int -> int

axiom abs_def :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type t63b

logic attr__ATTRIBUTE_LAST12 : int

logic attr__ATTRIBUTE_MODULUS16 : int

logic attr__ATTRIBUTE_IMAGE16 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_string -> prop

logic attr__ATTRIBUTE_VALUE16 : us_string -> int

predicate in_range16(x: int) = ((0 <= x) and (x <= attr__ATTRIBUTE_LAST12))

logic to_int17 : t63b -> int

logic of_int17 : int -> t63b

predicate eq16(x: t63b, y: t63b) = (to_int17(x) = to_int17(y))

axiom range_axiom17 : (forall x:t63b. in_range16(to_int17(x)))

axiom coerce_axiom16 :
  (forall x:int [to_int17(of_int17(x))| in_range16(x), of_int17(x)].
  (in_range16(x) -> (to_int17(of_int17(x)) = x)))

axiom unicity_axiom16 :
  (forall x:t63b. forall y:t63b [to_int17(x), to_int17(y)].
  ((to_int17(x) = to_int17(y)) -> (x = y)))

logic dummy36 : t63b

type candidate_number_t

logic attr__ATTRIBUTE_MODULUS3 : int

logic attr__ATTRIBUTE_IMAGE3 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_string -> prop

logic attr__ATTRIBUTE_VALUE3 : us_string -> int

predicate in_range3(x: int) = ((0 <= x) and (x <= 20))

logic to_int3 : candidate_number_t -> int

logic of_int3 : int -> candidate_number_t

predicate eq3(x: candidate_number_t, y: candidate_number_t) =
  (to_int3(x) = to_int3(y))

axiom range_axiom3 : (forall x:candidate_number_t. in_range3(to_int3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_int3(of_int3(x))| in_range3(x), of_int3(x)].
  (in_range3(x) -> (to_int3(of_int3(x)) = x)))

axiom unicity_axiom3 :
  (forall x:candidate_number_t. forall y:candidate_number_t [to_int3(x),
  to_int3(y)]. ((to_int3(x) = to_int3(y)) -> (x = y)))

logic dummy6 : candidate_number_t

type t24

type program_phase_t

logic attr__ATTRIBUTE_MODULUS9 : int

logic attr__ATTRIBUTE_IMAGE9 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_string -> prop

logic attr__ATTRIBUTE_VALUE9 : us_string -> int

predicate in_range9(x: int) = ((0 <= x) and (x <= 2))

logic to_int10 : program_phase_t -> int

logic of_int10 : int -> program_phase_t

predicate eq9(x: program_phase_t, y: program_phase_t) =
  (to_int10(x) = to_int10(y))

axiom range_axiom10 : (forall x:program_phase_t. in_range9(to_int10(x)))

axiom coerce_axiom9 :
  (forall x:int [to_int10(of_int10(x))| in_range9(x), of_int10(x)].
  (in_range9(x) -> (to_int10(of_int10(x)) = x)))

axiom unicity_axiom9 :
  (forall x:program_phase_t. forall y:program_phase_t [to_int10(x),
  to_int10(y)]. ((to_int10(x) = to_int10(y)) -> (x = y)))

logic dummy15 : program_phase_t

logic program_phase3 : program_phase_t

type counter_range_t

logic attr__ATTRIBUTE_MODULUS11 : int

logic attr__ATTRIBUTE_IMAGE11 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_string -> prop

logic attr__ATTRIBUTE_VALUE11 : us_string -> int

predicate in_range11(x: int) = ((0 <= x) and (x <= 10000))

logic to_int12 : counter_range_t -> int

logic of_int12 : int -> counter_range_t

predicate eq11(x: counter_range_t, y: counter_range_t) =
  (to_int12(x) = to_int12(y))

axiom range_axiom12 : (forall x:counter_range_t. in_range11(to_int12(x)))

axiom coerce_axiom11 :
  (forall x:int [to_int12(of_int12(x))| in_range11(x), of_int12(x)].
  (in_range11(x) -> (to_int12(of_int12(x)) = x)))

axiom unicity_axiom11 :
  (forall x:counter_range_t. forall y:counter_range_t [to_int12(x),
  to_int12(y)]. ((to_int12(x) = to_int12(y)) -> (x = y)))

logic dummy23 : counter_range_t

logic last_candidate1 : candidate_number_t

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int8 : bool -> int

axiom to_int_def :
  (forall b:bool. (((b = true) -> (to_int8(b) = 1)) and ((not (b = true)) ->
  (to_int8(b) = 0))))

logic of_int8 : int -> bool

axiom of_int_def :
  (forall i:int. (((i = 0) -> (of_int8(i) = false)) and ((not (i = 0)) ->
  (of_int8(i) = true))))

type t59b

logic attr__ATTRIBUTE_FIRST2 : int

logic attr__ATTRIBUTE_MODULUS17 : int

logic attr__ATTRIBUTE_IMAGE17 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_string -> prop

logic attr__ATTRIBUTE_VALUE17 : us_string -> int

predicate in_range17(x: int) = ((attr__ATTRIBUTE_FIRST2 <= x) and (x <= 20))

logic to_int18 : t59b -> int

logic of_int18 : int -> t59b

predicate eq17(x: t59b, y: t59b) = (to_int18(x) = to_int18(y))

axiom range_axiom18 : (forall x:t59b. in_range17(to_int18(x)))

axiom coerce_axiom17 :
  (forall x:int [to_int18(of_int18(x))| in_range17(x), of_int18(x)].
  (in_range17(x) -> (to_int18(of_int18(x)) = x)))

axiom unicity_axiom17 :
  (forall x:t59b. forall y:t59b [to_int18(x), to_int18(y)].
  ((to_int18(x) = to_int18(y)) -> (x = y)))

logic dummy37 : t59b

type t56b

logic attr__ATTRIBUTE_LAST13 : int

logic attr__ATTRIBUTE_MODULUS18 : int

logic attr__ATTRIBUTE_IMAGE18 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check18 : us_string -> prop

logic attr__ATTRIBUTE_VALUE18 : us_string -> int

predicate in_range18(x: int) = ((0 <= x) and (x <= attr__ATTRIBUTE_LAST13))

logic to_int19 : t56b -> int

logic of_int19 : int -> t56b

predicate eq18(x: t56b, y: t56b) = (to_int19(x) = to_int19(y))

axiom range_axiom19 : (forall x:t56b. in_range18(to_int19(x)))

axiom coerce_axiom18 :
  (forall x:int [to_int19(of_int19(x))| in_range18(x), of_int19(x)].
  (in_range18(x) -> (to_int19(of_int19(x)) = x)))

axiom unicity_axiom18 :
  (forall x:t56b. forall y:t56b [to_int19(x), to_int19(y)].
  ((to_int19(x) = to_int19(y)) -> (x = y)))

logic dummy38 : t56b

type t27s

logic attr__ATTRIBUTE_LAST14 : int

logic attr__ATTRIBUTE_MODULUS19 : int

logic attr__ATTRIBUTE_IMAGE19 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check19 : us_string -> prop

logic attr__ATTRIBUTE_VALUE19 : us_string -> int

predicate in_range19(x: int) = ((1 <= x) and (x <= attr__ATTRIBUTE_LAST14))

logic to_int20 : t27s -> int

logic of_int20 : int -> t27s

predicate eq19(x: t27s, y: t27s) = (to_int20(x) = to_int20(y))

axiom range_axiom20 : (forall x:t27s. in_range19(to_int20(x)))

axiom coerce_axiom19 :
  (forall x:int [to_int20(of_int20(x))| in_range19(x), of_int20(x)].
  (in_range19(x) -> (to_int20(of_int20(x)) = x)))

axiom unicity_axiom19 :
  (forall x:t27s. forall y:t27s [to_int20(x), to_int20(y)].
  ((to_int20(x) = to_int20(y)) -> (x = y)))

logic dummy39 : t27s

logic get : 'a map, int -> 'a

logic set : 'a map, int, 'a -> 'a map

axiom Select_eq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)]. ((i = j) -> (get(set(m, i, a),
  j) = a)))))

axiom Select_neq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)| set(m, i, a), get(m, j)].
  ((not (i = j)) -> (get(set(m, i, a), j) = get(m, j))))))

logic attr__ATTRIBUTE_LENGTH : 'a t -> int

axiom attr__ATTRIBUTE_LENGTH_def2 :
  (forall x:'a t. (((first(x) <= last(x)) ->
  (attr__ATTRIBUTE_LENGTH(x) = ((last(x) - first(x)) + 1))) and
  ((not (first(x) <= last(x))) -> (attr__ATTRIBUTE_LENGTH(x) = 0))))

logic bool_eq1 : 'a t, 'a t -> bool

axiom T__ada_array___equal_def :
  (forall a:'a map. forall a1:int. forall a2:int. forall a3:int.
  (forall b:'a map. forall b1:int. forall b2:int. forall b3:int
  [bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2)))))) ->
  (bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true)) and
  ((bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2))))))))))

type counters_t

logic mk_counters_t : counter_range_t map, int -> counters_t

logic elts13 : counters_t -> counter_range_t map

axiom elts_def28 :
  (forall u:counter_range_t map. forall u1:int. (elts13(mk_counters_t(u,
  u1)) = u))

logic offset13 : counters_t -> int

axiom offset_def28 :
  (forall u:counter_range_t map. forall u1:int. (offset13(mk_counters_t(u,
  u1)) = u1))

axiom counters_t_inversion2 :
  (forall u:counters_t. (u = mk_counters_t(elts13(u), offset13(u))))

function to_array12(a: counters_t) : counter_range_t t = mk_t(elts13(a),
  offset13(a), 0, 20)

function of_array12(a: counter_range_t t) : counters_t =
  mk_counters_t(elts(a), offset(a))

logic dummy24 : counters_t

type t45b

logic attr__ATTRIBUTE_LAST15 : int

logic attr__ATTRIBUTE_MODULUS20 : int

logic attr__ATTRIBUTE_IMAGE20 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check20 : us_string -> prop

logic attr__ATTRIBUTE_VALUE20 : us_string -> int

predicate in_range20(x: int) = ((2 <= x) and (x <= attr__ATTRIBUTE_LAST15))

logic to_int21 : t45b -> int

logic of_int21 : int -> t45b

predicate eq20(x: t45b, y: t45b) = (to_int21(x) = to_int21(y))

axiom range_axiom21 : (forall x:t45b. in_range20(to_int21(x)))

axiom coerce_axiom20 :
  (forall x:int [to_int21(of_int21(x))| in_range20(x), of_int21(x)].
  (in_range20(x) -> (to_int21(of_int21(x)) = x)))

axiom unicity_axiom20 :
  (forall x:t45b. forall y:t45b [to_int21(x), to_int21(y)].
  ((to_int21(x) = to_int21(y)) -> (x = y)))

logic dummy40 : t45b

logic counters1 : counters_t

type election_result_t

logic mk_election_result_t : bool map, int -> election_result_t

logic elts21 : election_result_t -> bool map

axiom elts_def29 :
  (forall u:bool map. forall u1:int. (elts21(mk_election_result_t(u,
  u1)) = u))

logic offset21 : election_result_t -> int

axiom offset_def29 :
  (forall u:bool map. forall u1:int. (offset21(mk_election_result_t(u,
  u1)) = u1))

axiom election_result_t_inversion :
  (forall u:election_result_t. (u = mk_election_result_t(elts21(u),
  offset21(u))))

function to_array20(a: election_result_t) : bool t = mk_t(elts21(a),
  offset21(a), 0, 20)

function of_array20(a: bool t) : election_result_t =
  mk_election_result_t(elts(a), offset(a))

logic dummy41 : election_result_t

type t25

type t26

type t49b

logic attr__ATTRIBUTE_LAST16 : int

logic attr__ATTRIBUTE_MODULUS21 : int

logic attr__ATTRIBUTE_IMAGE21 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check21 : us_string -> prop

logic attr__ATTRIBUTE_VALUE21 : us_string -> int

predicate in_range21(x: int) = ((1 <= x) and (x <= attr__ATTRIBUTE_LAST16))

logic to_int22 : t49b -> int

logic of_int22 : int -> t49b

predicate eq21(x: t49b, y: t49b) = (to_int22(x) = to_int22(y))

axiom range_axiom22 : (forall x:t49b. in_range21(to_int22(x)))

axiom coerce_axiom21 :
  (forall x:int [to_int22(of_int22(x))| in_range21(x), of_int22(x)].
  (in_range21(x) -> (to_int22(of_int22(x)) = x)))

axiom unicity_axiom21 :
  (forall x:t49b. forall y:t49b [to_int22(x), to_int22(y)].
  ((to_int22(x) = to_int22(y)) -> (x = y)))

logic dummy42 : t49b

type t61b

logic attr__ATTRIBUTE_FIRST3 : int

logic attr__ATTRIBUTE_LAST17 : int

logic attr__ATTRIBUTE_MODULUS22 : int

logic attr__ATTRIBUTE_IMAGE22 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check22 : us_string -> prop

logic attr__ATTRIBUTE_VALUE22 : us_string -> int

predicate in_range22(x: int) = ((attr__ATTRIBUTE_FIRST3 <= x) and
  (x <= attr__ATTRIBUTE_LAST17))

logic to_int23 : t61b -> int

logic of_int23 : int -> t61b

predicate eq22(x: t61b, y: t61b) = (to_int23(x) = to_int23(y))

axiom range_axiom23 : (forall x:t61b. in_range22(to_int23(x)))

axiom coerce_axiom22 :
  (forall x:int [to_int23(of_int23(x))| in_range22(x), of_int23(x)].
  (in_range22(x) -> (to_int23(of_int23(x)) = x)))

axiom unicity_axiom22 :
  (forall x:t61b. forall y:t61b [to_int23(x), to_int23(y)].
  ((to_int23(x) = to_int23(y)) -> (x = y)))

logic dummy43 : t61b

type tcandidate_number_tB

logic attr__ATTRIBUTE_MODULUS10 : int

logic attr__ATTRIBUTE_IMAGE10 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_string -> prop

logic attr__ATTRIBUTE_VALUE10 : us_string -> int

predicate in_range10(x: int) = (((-128) <= x) and (x <= 127))

logic to_int11 : tcandidate_number_tB -> int

logic of_int11 : int -> tcandidate_number_tB

predicate eq10(x: tcandidate_number_tB, y: tcandidate_number_tB) =
  (to_int11(x) = to_int11(y))

axiom range_axiom11 :
  (forall x:tcandidate_number_tB. in_range10(to_int11(x)))

axiom coerce_axiom10 :
  (forall x:int [to_int11(of_int11(x))| in_range10(x), of_int11(x)].
  (in_range10(x) -> (to_int11(of_int11(x)) = x)))

axiom unicity_axiom10 :
  (forall x:tcandidate_number_tB. forall y:tcandidate_number_tB [to_int11(x),
  to_int11(y)]. ((to_int11(x) = to_int11(y)) -> (x = y)))

logic dummy16 : tcandidate_number_tB

type t29s

logic attr__ATTRIBUTE_FIRST4 : int

logic attr__ATTRIBUTE_MODULUS23 : int

logic attr__ATTRIBUTE_IMAGE23 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check23 : us_string -> prop

logic attr__ATTRIBUTE_VALUE23 : us_string -> int

predicate in_range23(x: int) = ((attr__ATTRIBUTE_FIRST4 <= x) and (x <= 20))

logic to_int24 : t29s -> int

logic of_int24 : int -> t29s

predicate eq23(x: t29s, y: t29s) = (to_int24(x) = to_int24(y))

axiom range_axiom24 : (forall x:t29s. in_range23(to_int24(x)))

axiom coerce_axiom23 :
  (forall x:int [to_int24(of_int24(x))| in_range23(x), of_int24(x)].
  (in_range23(x) -> (to_int24(of_int24(x)) = x)))

axiom unicity_axiom23 :
  (forall x:t29s. forall y:t29s [to_int24(x), to_int24(y)].
  ((to_int24(x) = to_int24(y)) -> (x = y)))

logic dummy44 : t29s

type t54b

logic attr__ATTRIBUTE_LAST18 : int

logic attr__ATTRIBUTE_MODULUS24 : int

logic attr__ATTRIBUTE_IMAGE24 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check24 : us_string -> prop

logic attr__ATTRIBUTE_VALUE24 : us_string -> int

predicate in_range24(x: int) = ((0 <= x) and (x <= attr__ATTRIBUTE_LAST18))

logic to_int25 : t54b -> int

logic of_int25 : int -> t54b

predicate eq24(x: t54b, y: t54b) = (to_int25(x) = to_int25(y))

axiom range_axiom25 : (forall x:t54b. in_range24(to_int25(x)))

axiom coerce_axiom24 :
  (forall x:int [to_int25(of_int25(x))| in_range24(x), of_int25(x)].
  (in_range24(x) -> (to_int25(of_int25(x)) = x)))

axiom unicity_axiom24 :
  (forall x:t54b. forall y:t54b [to_int25(x), to_int25(y)].
  ((to_int25(x) = to_int25(y)) -> (x = y)))

logic dummy45 : t54b

type t47b

logic attr__ATTRIBUTE_LAST19 : int

logic attr__ATTRIBUTE_MODULUS25 : int

logic attr__ATTRIBUTE_IMAGE25 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check25 : us_string -> prop

logic attr__ATTRIBUTE_VALUE25 : us_string -> int

predicate in_range25(x: int) = ((1 <= x) and (x <= attr__ATTRIBUTE_LAST19))

logic to_int26 : t47b -> int

logic of_int26 : int -> t47b

predicate eq25(x: t47b, y: t47b) = (to_int26(x) = to_int26(y))

axiom range_axiom26 : (forall x:t47b. in_range25(to_int26(x)))

axiom coerce_axiom25 :
  (forall x:int [to_int26(of_int26(x))| in_range25(x), of_int26(x)].
  (in_range25(x) -> (to_int26(of_int26(x)) = x)))

axiom unicity_axiom25 :
  (forall x:t47b. forall y:t47b [to_int26(x), to_int26(y)].
  ((to_int26(x) = to_int26(y)) -> (x = y)))

logic dummy46 : t47b

goal WP_parameter_def4 :
  (forall winners:bool map. forall winners1:int. forall winners2:bool map.
  forall winners3:int. forall latest_highest_score:candidate_number_t.
  forall winners4:bool map. forall winners5:int.
  forall evoting__compute_winner__L_9__i:int.
  forall evoting__compute_winner__L_9__i1:int.
  forall latest_highest_score1:candidate_number_t. forall winners6:bool map.
  forall winners7:int. forall evoting__compute_winner__L_10__j:int.
  forall evoting__compute_winner__L_10__j1:int. forall winners8:bool map.
  forall winners9:int. forall winners10:bool map. forall winners11:int.
  forall evoting__compute_winner__L_10__j2:int. forall rho:bool map.
  forall rho1:int. forall rho2:int. forall winners12:bool map.
  forall winners13:int. forall latest_highest_score2:candidate_number_t.
  forall winners14:bool map. forall winners15:int.
  forall latest_highest_score3:candidate_number_t. forall winners16:bool map.
  forall winners17:int. forall evoting__compute_winner__L_9__i2:int.
  ((to_int10(program_phase3) = 2) -> (((set(winners, ((0 + winners1) - 0),
  of_int8(0)) = winners2) and (winners1 = winners3)) ->
  ((latest_highest_score = of_int3(1)) -> (((set(winners2,
  ((to_int3(latest_highest_score) + winners3) - 0),
  of_int8(1)) = winners4) and (winners3 = winners5)) ->
  ((evoting__compute_winner__L_9__i = 2) ->
  (((2 <= evoting__compute_winner__L_9__i) and
  (evoting__compute_winner__L_9__i <= to_int3(last_candidate1))) ->
  ((((((get(winners6, ((0 + winners7) - 0)) = of_int8(0)) and
  (to_int3(latest_highest_score1) <  evoting__compute_winner__L_9__i1)) and
  (get(winners6,
  ((to_int3(latest_highest_score1) + winners7) - 0)) = true)) and
  (forall evoting__compute_winner__L_9__L50b__j:int.
  (((1 <= evoting__compute_winner__L_9__L50b__j) and
  (evoting__compute_winner__L_9__L50b__j <= (evoting__compute_winner__L_9__i1 - 1))) ->
  ((to_int3(latest_highest_score1) <  evoting__compute_winner__L_9__L50b__j) ->
  (to_int12(get(elts13(counters1),
  ((evoting__compute_winner__L_9__L50b__j + offset13(counters1)) - 0))) <  to_int12(get(elts13(counters1),
  ((to_int3(latest_highest_score1) + offset13(counters1)) - 0)))))))) and
  (forall evoting__compute_winner__L_9__L52b__j:int.
  (((1 <= evoting__compute_winner__L_9__L52b__j) and
  (evoting__compute_winner__L_9__L52b__j <= (evoting__compute_winner__L_9__i1 - 1))) ->
  (((get(winners6,
  ((evoting__compute_winner__L_9__L52b__j + winners7) - 0)) = true) and
  (to_int12(get(elts13(counters1),
  ((to_int3(latest_highest_score1) + offset13(counters1)) - 0))) = to_int12(get(elts13(counters1),
  ((evoting__compute_winner__L_9__L52b__j + offset13(counters1)) - 0))))) or
  ((not (get(winners6,
  ((evoting__compute_winner__L_9__L52b__j + winners7) - 0)) = true)) and
  (to_int12(get(elts13(counters1),
  ((evoting__compute_winner__L_9__L52b__j + offset13(counters1)) - 0))) <  to_int12(get(elts13(counters1),
  ((to_int3(latest_highest_score1) + offset13(counters1)) - 0))))))))) ->
  ((((2 <= evoting__compute_winner__L_9__i1) and
  (evoting__compute_winner__L_9__i1 <= to_int3(last_candidate1))) and
  ((((to_int12(get(elts13(counters1),
  ((to_int3(latest_highest_score1) + offset13(counters1)) - 0))) <  to_int12(get(elts13(counters1),
  ((evoting__compute_winner__L_9__i1 + offset13(counters1)) - 0)))) and
  ((((evoting__compute_winner__L_10__j = 0) and
  ((((0 <= evoting__compute_winner__L_10__j) and
  (evoting__compute_winner__L_10__j <= (evoting__compute_winner__L_9__i1 - 1))) and
  ((((forall evoting__compute_winner__L_10__L57b__k:int.
     (((0 <= evoting__compute_winner__L_10__L57b__k) and
     (evoting__compute_winner__L_10__L57b__k <= (evoting__compute_winner__L_10__j1 - 1))) ->
     (not (get(winners8,
     ((evoting__compute_winner__L_10__L57b__k + winners9) - 0)) = true)))) and
  false) and ((mk_election_result_t(winners10,
  winners11) = mk_election_result_t(rho, rho1)) and
  (evoting__compute_winner__L_10__j2 = rho2))) or
  ((forall evoting__compute_winner__L_10__L57b__k:int.
   (((0 <= evoting__compute_winner__L_10__L57b__k) and
   (evoting__compute_winner__L_10__L57b__k <= (evoting__compute_winner__L_10__j1 - 1))) ->
   (not (get(winners8,
   ((evoting__compute_winner__L_10__L57b__k + winners9) - 0)) = true)))) and
  ((((not (evoting__compute_winner__L_10__j2 <= (evoting__compute_winner__L_9__i1 - 1))) and
  (evoting__compute_winner__L_10__j2 = (evoting__compute_winner__L_10__j1 + 1))) and
  ((set(winners8, ((evoting__compute_winner__L_10__j1 + winners9) - 0),
  of_int8(0)) = winners10) and (winners9 = winners11))) and
  ((0 <= evoting__compute_winner__L_10__j1) and
  (evoting__compute_winner__L_10__j1 <= (evoting__compute_winner__L_9__i1 - 1))))))) or
  ((not ((0 <= evoting__compute_winner__L_10__j) and
  (evoting__compute_winner__L_10__j <= (evoting__compute_winner__L_9__i1 - 1)))) and
  ((mk_election_result_t(winners10,
  winners11) = mk_election_result_t(winners6, winners7)) and
  (evoting__compute_winner__L_10__j2 = evoting__compute_winner__L_10__j))))) and
  (((set(winners10, ((evoting__compute_winner__L_9__i1 + winners11) - 0),
  of_int8(1)) = winners12) and (winners11 = winners13)) and
  (latest_highest_score2 = of_int3(evoting__compute_winner__L_9__i1)))) and
  ((mk_election_result_t(winners16,
  winners17) = mk_election_result_t(winners12, winners13)) and
  (latest_highest_score3 = latest_highest_score2)))) or
  ((not (to_int12(get(elts13(counters1),
  ((to_int3(latest_highest_score1) + offset13(counters1)) - 0))) <  to_int12(get(elts13(counters1),
  ((evoting__compute_winner__L_9__i1 + offset13(counters1)) - 0))))) and
  ((((to_int12(get(elts13(counters1),
  ((evoting__compute_winner__L_9__i1 + offset13(counters1)) - 0))) = to_int12(get(elts13(counters1),
  ((to_int3(latest_highest_score1) + offset13(counters1)) - 0)))) and
  ((((set(winners6, ((evoting__compute_winner__L_9__i1 + winners7) - 0),
  of_int8(1)) = winners14) and (winners7 = winners15)) and
  (latest_highest_score3 = of_int3(evoting__compute_winner__L_9__i1))) and
  (mk_election_result_t(winners16,
  winners17) = mk_election_result_t(winners14, winners15)))) or
  ((not (to_int12(get(elts13(counters1),
  ((evoting__compute_winner__L_9__i1 + offset13(counters1)) - 0))) = to_int12(get(elts13(counters1),
  ((to_int3(latest_highest_score1) + offset13(counters1)) - 0))))) and
  (((set(winners6, ((evoting__compute_winner__L_9__i1 + winners7) - 0),
  of_int8(0)) = winners16) and (winners7 = winners17)) and
  (latest_highest_score3 = latest_highest_score1)))) and
  (evoting__compute_winner__L_10__j2 = evoting__compute_winner__L_10__j)))) and
  ((evoting__compute_winner__L_9__i2 = (evoting__compute_winner__L_9__i1 + 1)) and
  (evoting__compute_winner__L_9__i2 <= to_int3(last_candidate1))))) ->
  (((((get(winners16, ((0 + winners17) - 0)) = of_int8(0)) and
  (to_int3(latest_highest_score3) <  evoting__compute_winner__L_9__i2)) and
  (get(winners16,
  ((to_int3(latest_highest_score3) + winners17) - 0)) = true)) and
  (forall evoting__compute_winner__L_9__L50b__j:int.
  (((1 <= evoting__compute_winner__L_9__L50b__j) and
  (evoting__compute_winner__L_9__L50b__j <= (evoting__compute_winner__L_9__i2 - 1))) ->
  ((to_int3(latest_highest_score3) <  evoting__compute_winner__L_9__L50b__j) ->
  (to_int12(get(elts13(counters1),
  ((evoting__compute_winner__L_9__L50b__j + offset13(counters1)) - 0))) <  to_int12(get(elts13(counters1),
  ((to_int3(latest_highest_score3) + offset13(counters1)) - 0)))))))) and
  (forall evoting__compute_winner__L_9__L52b__j:int.
  (((1 <= evoting__compute_winner__L_9__L52b__j) and
  (evoting__compute_winner__L_9__L52b__j <= (evoting__compute_winner__L_9__i2 - 1))) ->
  (((get(winners16,
  ((evoting__compute_winner__L_9__L52b__j + winners17) - 0)) = true) ->
  (to_int12(get(elts13(counters1),
  ((to_int3(latest_highest_score3) + offset13(counters1)) - 0))) = to_int12(get(elts13(counters1),
  ((evoting__compute_winner__L_9__L52b__j + offset13(counters1)) - 0))))) and
  ((not (get(winners16,
  ((evoting__compute_winner__L_9__L52b__j + winners17) - 0)) = true)) ->
  (to_int12(get(elts13(counters1),
  ((evoting__compute_winner__L_9__L52b__j + offset13(counters1)) - 0))) <  to_int12(get(elts13(counters1),
  ((to_int3(latest_highest_score3) + offset13(counters1)) - 0))))))))))))))))))

