(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_character

type us_private

type us_type_of_heap

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

type range_type

type us_string

logic mk___string : us_character map, int, range_type -> us_string

logic elts1 : us_string -> us_character map

axiom elts_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (elts1(mk___string(u, u1, u2)) = u))

logic offset1 : us_string -> int

axiom offset_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (offset1(mk___string(u, u1, u2)) = u1))

logic rt : us_string -> range_type

axiom rt_def :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (rt(mk___string(u, u1, u2)) = u2))

axiom us_string_inversion :
  (forall u:us_string. (u = mk___string(elts1(u), offset1(u), rt(u))))

logic abs1 : int -> int

axiom abs_def1 :
  (forall x:int. (((0 <= x) -> (abs1(x) = x)) and ((not (0 <= x)) ->
  (abs1(x) = (-x)))))

axiom Abs_le1 :
  (forall x:int. forall y:int. ((abs1(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos1 : (forall x:int. (0 <= abs1(x)))

logic power1 : int, int -> int

axiom Power_01 : (forall x:int. (power1(x, 0) = 1))

axiom Power_s1 :
  (forall x:int. forall n:int. ((0 <= n) -> (power1(x,
  (n + 1)) = (x * power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:int. forall n:int. ((0 <  n) -> (power1(x, n) = (x * power1(x,
  (n - 1))))))

axiom Power_11 : (forall x:int. (power1(x, 1) = x))

axiom Power_sum1 :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = (power1(x, n) * power1(x, m))))))

axiom Power_mult1 :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power1((x * y),
  n) = (power1(x, n) * power1(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs1(y)) <  mod(x,
  y)) and (mod(x, y) <  abs1(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs1((div(x,
  y) * y)) <= abs1(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs1(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool. (((b = true) -> (to_int(b) = 1)) and ((not (b = true)) ->
  (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int. (((i = 0) -> (of_int(i) = false)) and ((not (i = 0)) ->
  (of_int(i) = true))))

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom CompatOrderMult :
  (forall x:real. forall y:real. forall z:real. ((x <= y) -> ((0.0 <= z) ->
  ((x * z) <= (y * z)))))

logic abs : real -> real

axiom abs_def2 :
  (forall x:real. (((0.0 <= x) -> (abs(x) = x)) and ((not (0.0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs(x)))

axiom Abs_sum :
  (forall x:real. forall y:real. (abs((x + y)) <= (abs(x) + abs(y))))

axiom Abs_prod :
  (forall x:real. forall y:real. (abs((x * y)) = (abs(x) * abs(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs((x - z)) <= (abs((x - y)) + abs((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x:int. forall y:int.
  (from_int((x + y)) = (from_int(x) + from_int(y))))

axiom Sub :
  (forall x:int. forall y:int.
  (from_int((x - y)) = (from_int(x) - from_int(y))))

axiom Mul :
  (forall x:int. forall y:int.
  (from_int((x * y)) = (from_int(x) * from_int(y))))

axiom Neg : (forall x:int. (from_int((-x)) = (-from_int(x))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((from_int(truncate(x)) <= x) and
  (x <  from_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((from_int((truncate(x) - 1)) <  x) and
  (x <= from_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= from_int(truncate(x))) and
  (from_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int(i)) -> (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((from_int(floor(x)) <= x) and
  (x <  from_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((from_int((ceil(x) - 1)) <  x) and
  (x <= from_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

axiom Assoc :
  (forall x:real. forall y:real. forall z:real.
  (((x * y) * z) = (x * (y * z))))

axiom Unit_def_l : (forall x:real. ((1.0 * x) = x))

axiom Unit_def_r : (forall x:real. ((x * 1.0) = x))

axiom Comm : (forall x:real. forall y:real. ((x * y) = (y * x)))

logic power : real, int -> real

axiom Power_0 : (forall x:real. (power(x, 0) = 1.0))

axiom Power_s :
  (forall x:real. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:real. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:real. (power(x, 1) = x))

axiom Power_sum :
  (forall x:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:real. forall y:real. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic round : real -> int

axiom Round_down :
  (forall x:real. (((x - from_int(floor(x))) <  0.5) ->
  (round(x) = floor(x))))

axiom Round_up :
  (forall x:real. (((from_int(ceil(x)) - x) <  0.5) -> (round(x) = ceil(x))))

axiom Round_neg_tie :
  (forall x:real. ((((x - from_int(floor(x))) = 0.5) and (x <  0.0)) ->
  (round(x) = floor(x))))

axiom Round_pos_tie :
  (forall x:real. ((((from_int(ceil(x)) - x) = 0.5) and (0.0 <  x)) ->
  (round(x) = ceil(x))))

logic bool_lt : real, real -> bool

logic bool_le : real, real -> bool

logic bool_gt : real, real -> bool

logic bool_ge : real, real -> bool

logic bool_eq : real, real -> bool

logic bool_neq : real, real -> bool

axiom Bool_real__lt_axiom :
  (forall x:real. (forall y:real. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_real__le_axiom :
  (forall x:real. (forall y:real. ((bool_le(x, y) = true) <-> (x <= y))))

axiom Bool_real__gt_axiom :
  (forall x:real. (forall y:real. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom Bool_real__ge_axiom :
  (forall x:real. (forall y:real. ((bool_ge(x, y) = true) <-> (y <= x))))

axiom Bool_real__eq_axiom :
  (forall x:real. (forall y:real. ((bool_eq(x, y) = true) <-> (x = y))))

axiom Bool_real__neq_axiom :
  (forall x:real.
  (forall y:real. ((bool_neq(x, y) = true) <-> (not (x = y)))))

type float

logic attr__ATTRIBUTE_MODULUS : real

logic attr__ATTRIBUTE_IMAGE : real -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check : us_string -> prop

logic attr__ATTRIBUTE_VALUE : us_string -> real

predicate in_range(x: real) =
  (((-340282346638528859811704183484516925440.0) <= x) and
  (x <= 340282346638528859811704183484516925440.0))

logic to_real : float -> real

logic of_real : real -> float

predicate eq(x: float, y: float) = (to_real(x) = to_real(y))

axiom range_axiom : (forall x:float. in_range(to_real(x)))

axiom coerce_axiom :
  (forall x:real [to_real(of_real(x))| in_range(x), of_real(x)].
  (in_range(x) -> (to_real(of_real(x)) = x)))

axiom unicity_axiom :
  (forall x:float. forall y:float [to_real(x), to_real(y)].
  ((to_real(x) = to_real(y)) -> (x = y)))

logic dummy : float

logic add : float, float -> float

goal WP_parameter_def1 :
  (forall o:float. forall o1:float. forall o2:float. forall o3:real.
  (((((o1 = add(of_real(0.20000000298023223876953125),
  of_real(0.3000000119209289550781250))) and
  (to_real(o1) = (to_real(of_real(0.20000000298023223876953125)) + to_real(of_real(0.3000000119209289550781250))))) and
  ((o2 = add(of_real(0.100000001490116119384765625), o1)) and
  (to_real(o2) = (to_real(of_real(0.100000001490116119384765625)) + to_real(o1))))) and
  (o3 = to_real(o2))) -> (((o = add(of_real(0.100000001490116119384765625),
  of_real(0.20000000298023223876953125))) and
  (to_real(o) = (to_real(of_real(0.100000001490116119384765625)) + to_real(of_real(0.20000000298023223876953125))))) ->
  ((to_real(o) <  1.0) and
  ((to_real(of_real(0.3000000119209289550781250)) <  1.0) and
  (((-1.0) <  to_real(o)) and
  ((-1.0) <  to_real(of_real(0.3000000119209289550781250)))))))))

