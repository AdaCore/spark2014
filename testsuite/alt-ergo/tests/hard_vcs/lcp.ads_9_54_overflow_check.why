(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_character

type us_private

type us_type_of_heap

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

type range_type

type us_string

logic mk___string : us_character map, int, range_type -> us_string

logic elts1 : us_string -> us_character map

axiom elts_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (elts1(mk___string(u, u1, u2)) = u))

logic offset1 : us_string -> int

axiom offset_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (offset1(mk___string(u, u1, u2)) = u1))

logic rt : us_string -> range_type

axiom rt_def :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (rt(mk___string(u, u1, u2)) = u2))

axiom us_string_inversion :
  (forall u:us_string. (u = mk___string(elts1(u), offset1(u), rt(u))))

logic abs : int -> int

axiom abs_def :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type t3s

logic attr__ATTRIBUTE_LAST : int

logic attr__ATTRIBUTE_MODULUS : int

logic attr__ATTRIBUTE_IMAGE : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check : us_string -> prop

logic attr__ATTRIBUTE_VALUE : us_string -> int

predicate in_range(x: int) = ((0 <= x) and (x <= attr__ATTRIBUTE_LAST))

logic to_int : t3s -> int

logic of_int : int -> t3s

predicate eq(x: t3s, y: t3s) = (to_int(x) = to_int(y))

axiom range_axiom : (forall x:t3s. in_range(to_int(x)))

axiom coerce_axiom :
  (forall x:int [to_int(of_int(x))| in_range(x), of_int(x)]. (in_range(x) ->
  (to_int(of_int(x)) = x)))

axiom unicity_axiom :
  (forall x:t3s. forall y:t3s [to_int(x), to_int(y)].
  ((to_int(x) = to_int(y)) -> (x = y)))

logic dummy : t3s

type integer

logic attr__ATTRIBUTE_MODULUS1 : int

logic attr__ATTRIBUTE_IMAGE1 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_string -> prop

logic attr__ATTRIBUTE_VALUE1 : us_string -> int

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int1 : integer -> int

logic of_int1 : int -> integer

predicate eq1(x: integer, y: integer) = (to_int1(x) = to_int1(y))

axiom range_axiom1 : (forall x:integer. in_range1(to_int1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_int1(of_int1(x))| in_range1(x), of_int1(x)].
  (in_range1(x) -> (to_int1(of_int1(x)) = x)))

axiom unicity_axiom1 :
  (forall x:integer. forall y:integer [to_int1(x), to_int1(y)].
  ((to_int1(x) = to_int1(y)) -> (x = y)))

logic dummy1 : integer

logic get : 'a map, int -> 'a

logic set : 'a map, int, 'a -> 'a map

axiom Select_eq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)]. ((i = j) -> (get(set(m, i, a),
  j) = a)))))

axiom Select_neq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)| set(m, i, a), get(m, j)].
  ((not (i = j)) -> (get(set(m, i, a), j) = get(m, j))))))

logic attr__ATTRIBUTE_LENGTH : 'a t -> int

axiom attr__ATTRIBUTE_LENGTH_def :
  (forall x:'a t. (((first(x) <= last(x)) ->
  (attr__ATTRIBUTE_LENGTH(x) = ((last(x) - first(x)) + 1))) and
  ((not (first(x) <= last(x))) -> (attr__ATTRIBUTE_LENGTH(x) = 0))))

logic bool_eq1 : 'a t, 'a t -> bool

axiom T__ada_array___equal_def :
  (forall a:'a map. forall a1:int. forall a2:int. forall a3:int.
  (forall b:'a map. forall b1:int. forall b2:int. forall b3:int
  [bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2)))))) ->
  (bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true)) and
  ((bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2))))))))))

type range_type1

logic first1 : range_type1 -> integer

logic last1 : range_type1 -> integer

logic mk : int, int -> range_type1

axiom range_axiom2 :
  (forall a:range_type1. ((to_int1(first1(a)) <= to_int1(last1(a))) ->
  (((1 <= to_int1(first1(a))) and (to_int1(first1(a)) <= 1000000)) and
  ((1 <= to_int1(last1(a))) and (to_int1(last1(a)) <= 1000000)))))

type text

logic mk_text : integer map, int, range_type1 -> text

logic elts2 : text -> integer map

axiom elts_def2 :
  (forall u:integer map. forall u1:int. forall u2:range_type1.
  (elts2(mk_text(u, u1, u2)) = u))

logic offset2 : text -> int

axiom offset_def2 :
  (forall u:integer map. forall u1:int. forall u2:range_type1.
  (offset2(mk_text(u, u1, u2)) = u1))

logic rt1 : text -> range_type1

axiom rt_def1 :
  (forall u:integer map. forall u1:int. forall u2:range_type1.
  (rt1(mk_text(u, u1, u2)) = u2))

axiom text_inversion :
  (forall u:text. (u = mk_text(elts2(u), offset2(u), rt1(u))))

function to_array(a: text) : integer t = mk_t(elts2(a), offset2(a),
  to_int1(first1(rt1(a))), to_int1(last1(rt1(a))))

function of_array(a: integer t) : text = mk_text(elts(a), offset(a),
  mk(first(a), last(a)))

logic dummy2 : text

logic a : text

type natural

logic attr__ATTRIBUTE_MODULUS2 : int

logic attr__ATTRIBUTE_IMAGE2 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_string -> prop

logic attr__ATTRIBUTE_VALUE2 : us_string -> int

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic to_int2 : natural -> int

logic of_int2 : int -> natural

predicate eq2(x: natural, y: natural) = (to_int2(x) = to_int2(y))

axiom range_axiom3 : (forall x:natural. in_range2(to_int2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_int2(of_int2(x))| in_range2(x), of_int2(x)].
  (in_range2(x) -> (to_int2(of_int2(x)) = x)))

axiom unicity_axiom2 :
  (forall x:natural. forall y:natural [to_int2(x), to_int2(y)].
  ((to_int2(x) = to_int2(y)) -> (x = y)))

logic dummy3 : natural

type t1

type tS1bP1

logic attr__ATTRIBUTE_FIRST : int

logic attr__ATTRIBUTE_LAST1 : int

logic attr__ATTRIBUTE_MODULUS3 : int

logic attr__ATTRIBUTE_IMAGE3 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_string -> prop

logic attr__ATTRIBUTE_VALUE3 : us_string -> int

predicate in_range3(x: int) = ((attr__ATTRIBUTE_FIRST <= x) and
  (x <= attr__ATTRIBUTE_LAST1))

logic to_int3 : tS1bP1 -> int

logic of_int3 : int -> tS1bP1

predicate eq3(x: tS1bP1, y: tS1bP1) = (to_int3(x) = to_int3(y))

axiom range_axiom4 : (forall x:tS1bP1. in_range3(to_int3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_int3(of_int3(x))| in_range3(x), of_int3(x)].
  (in_range3(x) -> (to_int3(of_int3(x)) = x)))

axiom unicity_axiom3 :
  (forall x:tS1bP1. forall y:tS1bP1 [to_int3(x), to_int3(y)].
  ((to_int3(x) = to_int3(y)) -> (x = y)))

logic dummy4 : tS1bP1

logic x : integer

type index

logic attr__ATTRIBUTE_MODULUS4 : int

logic attr__ATTRIBUTE_IMAGE4 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_string -> prop

logic attr__ATTRIBUTE_VALUE4 : us_string -> int

predicate in_range4(x1: int) = ((1 <= x1) and (x1 <= 1000000))

logic to_int4 : index -> int

logic of_int4 : int -> index

predicate eq4(x1: index, y: index) = (to_int4(x1) = to_int4(y))

axiom range_axiom5 : (forall x1:index. in_range4(to_int4(x1)))

axiom coerce_axiom4 :
  (forall x1:int [to_int4(of_int4(x1))| in_range4(x1), of_int4(x1)].
  (in_range4(x1) -> (to_int4(of_int4(x1)) = x1)))

axiom unicity_axiom4 :
  (forall x1:index. forall y:index [to_int4(x1), to_int4(y)].
  ((to_int4(x1) = to_int4(y)) -> (x1 = y)))

logic dummy5 : index

logic y : integer

type t3b

logic attr__ATTRIBUTE_LAST2 : int

logic attr__ATTRIBUTE_MODULUS5 : int

logic attr__ATTRIBUTE_IMAGE5 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_string -> prop

logic attr__ATTRIBUTE_VALUE5 : us_string -> int

predicate in_range5(x1: int) = ((0 <= x1) and (x1 <= attr__ATTRIBUTE_LAST2))

logic to_int5 : t3b -> int

logic of_int5 : int -> t3b

predicate eq5(x1: t3b, y1: t3b) = (to_int5(x1) = to_int5(y1))

axiom range_axiom6 : (forall x1:t3b. in_range5(to_int5(x1)))

axiom coerce_axiom5 :
  (forall x1:int [to_int5(of_int5(x1))| in_range5(x1), of_int5(x1)].
  (in_range5(x1) -> (to_int5(of_int5(x1)) = x1)))

axiom unicity_axiom5 :
  (forall x1:t3b. forall y1:t3b [to_int5(x1), to_int5(y1)].
  ((to_int5(x1) = to_int5(y1)) -> (x1 = y1)))

logic dummy6 : t3b

goal WP_parameter_def :
  (forall l:natural. forall c:bool. forall c1:bool.
  forall ustemp_standard__lcp_0:int. forall l1:natural.
  forall ustemp_standard__lcp_01:int. forall l2:natural. forall c2:bool.
  forall c3:bool. forall rho:natural. forall rho1:int.
  forall lcp___result:natural. forall c4:bool. forall c5:bool.
  ((((first(to_array(a)) <= to_int1(x)) and
  (to_int1(x) <= last(to_array(a)))) and
  ((first(to_array(a)) <= to_int1(y)) and
  (to_int1(y) <= last(to_array(a))))) -> (((((lcp___result = l2) and
  ((((((to_int1(x) + to_int2(l)) <= last(to_array(a))) and
  ((((to_int1(y) + to_int2(l)) <= last(to_array(a))) and (c1 = true)) or
  ((not ((to_int1(y) + to_int2(l)) <= last(to_array(a)))) and
  (c1 = false)))) or
  ((not ((to_int1(x) + to_int2(l)) <= last(to_array(a)))) and
  (c1 = false))) and (((c1 = true) and (((to_int1(get(elts(to_array(a)),
  (((to_int1(x) + to_int2(l)) + offset(to_array(a))) - first(to_array(a))))) = to_int1(get(elts(to_array(a)),
  (((to_int1(y) + to_int2(l)) + offset(to_array(a))) - first(to_array(a)))))) and
  (c = true)) or ((not (to_int1(get(elts(to_array(a)),
  (((to_int1(x) + to_int2(l)) + offset(to_array(a))) - first(to_array(a))))) = to_int1(get(elts(to_array(a)),
  (((to_int1(y) + to_int2(l)) + offset(to_array(a))) - first(to_array(a))))))) and
  (c = false)))) or ((not (c1 = true)) and (c = false)))) and
  (((c = true) and ((((ustemp_standard__lcp_0 = 0) and
  ((forall lcp__L_1__L4b__k:int. (((0 <= lcp__L_1__L4b__k) and
   (lcp__L_1__L4b__k <= (to_int2(l1) - 1))) ->
   (to_int1(get(elts(to_array(a)),
   (((to_int1(x) + lcp__L_1__L4b__k) + offset(to_array(a))) - first(to_array(a))))) = to_int1(get(elts(to_array(a)),
   (((to_int1(y) + lcp__L_1__L4b__k) + offset(to_array(a))) - first(to_array(a)))))))) and
  false)) and ((l2 = rho) and (ustemp_standard__lcp_01 = rho1))) or
  (((forall lcp__L_1__L4b__k:int. (((0 <= lcp__L_1__L4b__k) and
    (lcp__L_1__L4b__k <= (to_int2(l1) - 1))) ->
    (to_int1(get(elts(to_array(a)),
    (((to_int1(x) + lcp__L_1__L4b__k) + offset(to_array(a))) - first(to_array(a))))) = to_int1(get(elts(to_array(a)),
    (((to_int1(y) + lcp__L_1__L4b__k) + offset(to_array(a))) - first(to_array(a)))))))) and
  (((((((((to_int1(x) + to_int2(l2)) <= last(to_array(a))) and
  ((((to_int1(y) + to_int2(l2)) <= last(to_array(a))) and (c3 = true)) or
  ((not ((to_int1(y) + to_int2(l2)) <= last(to_array(a)))) and
  (c3 = false)))) or
  ((not ((to_int1(x) + to_int2(l2)) <= last(to_array(a)))) and
  (c3 = false))) and (((c3 = true) and (((to_int1(get(elts(to_array(a)),
  (((to_int1(x) + to_int2(l2)) + offset(to_array(a))) - first(to_array(a))))) = to_int1(get(elts(to_array(a)),
  (((to_int1(y) + to_int2(l2)) + offset(to_array(a))) - first(to_array(a)))))) and
  (c2 = true)) or ((not (to_int1(get(elts(to_array(a)),
  (((to_int1(x) + to_int2(l2)) + offset(to_array(a))) - first(to_array(a))))) = to_int1(get(elts(to_array(a)),
  (((to_int1(y) + to_int2(l2)) + offset(to_array(a))) - first(to_array(a))))))) and
  (c2 = false)))) or ((not (c3 = true)) and (c2 = false)))) and
  (not (c2 = true))) and (l2 = of_int2((to_int2(l1) + 1)))) and
  (ustemp_standard__lcp_01 = to_int2(l1))) and
  ((((to_int1(x) + to_int2(l1)) <= last(to_array(a))) and
  ((to_int1(y) + to_int2(l1)) <= last(to_array(a)))) and
  (to_int1(get(elts(to_array(a)),
  (((to_int1(x) + to_int2(l1)) + offset(to_array(a))) - first(to_array(a))))) = to_int1(get(elts(to_array(a)),
  (((to_int1(y) + to_int2(l1)) + offset(to_array(a))) - first(to_array(a))))))))) and
  (ustemp_standard__lcp_0 = 0)))) or ((not (c = true)) and ((l2 = l) and
  (ustemp_standard__lcp_01 = ustemp_standard__lcp_0)))))) and
  (l = of_int2(0))) and ((first(to_array(a)) = attr__ATTRIBUTE_FIRST) and
  (last(to_array(a)) = attr__ATTRIBUTE_LAST1))) -> ((((c4 = true) or
  (forall lcp__L2s__k:int. (((0 <= lcp__L2s__k) and
  (lcp__L2s__k <= (to_int2(lcp___result) - 1))) ->
  (to_int1(get(elts(to_array(a)),
  (((to_int1(x) + lcp__L2s__k) + offset(to_array(a))) - first(to_array(a))))) = to_int1(get(elts(to_array(a)),
  (((to_int1(y) + lcp__L2s__k) + offset(to_array(a))) - first(to_array(a))))))))) ->
  ((c4 = true) and
  (forall lcp__L2s__k:int. (((0 <= lcp__L2s__k) and
  (lcp__L2s__k <= (to_int2(lcp___result) - 1))) ->
  (to_int1(get(elts(to_array(a)),
  (((to_int1(x) + lcp__L2s__k) + offset(to_array(a))) - first(to_array(a))))) = to_int1(get(elts(to_array(a)),
  (((to_int1(y) + lcp__L2s__k) + offset(to_array(a))) - first(to_array(a)))))))))) ->
  ((c4 = true) ->
  ((((last(to_array(a)) <  (to_int1(x) + to_int2(lcp___result))) and
  (c5 = true)) or
  ((not (last(to_array(a)) <  (to_int1(x) + to_int2(lcp___result)))) and
  (((last(to_array(a)) <  (to_int1(y) + to_int2(lcp___result))) and
  (c5 = true)) or
  ((not (last(to_array(a)) <  (to_int1(y) + to_int2(lcp___result)))) and
  (c5 = false))))) -> ((not (c5 = true)) ->
  in_range1((to_int1(y) + to_int2(lcp___result))))))))))

