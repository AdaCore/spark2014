(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x13: bool, y: bool) : bool = match_bool(x13, y, false)

function orb(x13: bool, y: bool) : bool = match_bool(x13, true, y)

function xorb(x13: bool, y: bool) : bool = match_bool(y, match_bool(x13,
  false, true), match_bool(x13, true, false))

function notb(x13: bool) : bool = match_bool(x13, false, true)

function implb(x13: bool, y: bool) : bool = match_bool(y, true,
  match_bool(x13, false, true))

logic us__ignore : 'a -> unit

type us_private

type us_type_of_heap

type us_image

axiom add_div :
  (forall x13:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x13 + y) / z) = ((x13 / z) + (y / z)))))

axiom sub_div :
  (forall x13:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x13 - y) / z) = ((x13 / z) - (y / z)))))

axiom neg_div :
  (forall x13:real. forall y:real. ((not (y = 0.0)) ->
  (((-x13) / y) = (-(x13 / y)))))

axiom assoc_mul_div :
  (forall x13:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x13 * y) / z) = (x13 * (y / z)))))

axiom assoc_div_mul :
  (forall x13:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x13 / y) / z) = (x13 / (y * z)))))

axiom assoc_div_div :
  (forall x13:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x13 / (y / z)) = ((x13 * z) / y))))

logic abs1 : real -> real

axiom abs_def1 :
  (forall x13:real. (((0.0 <= x13) -> (abs1(x13) = x13)) and
  ((not (0.0 <= x13)) -> (abs1(x13) = (-x13)))))

axiom Abs_le1 :
  (forall x13:real. forall y:real. ((abs1(x13) <= y) <-> (((-y) <= x13) and
  (x13 <= y))))

axiom Abs_pos1 : (forall x13:real. (0.0 <= abs1(x13)))

axiom Abs_sum :
  (forall x13:real. forall y:real.
  (abs1((x13 + y)) <= (abs1(x13) + abs1(y))))

axiom Abs_prod :
  (forall x13:real. forall y:real. (abs1((x13 * y)) = (abs1(x13) * abs1(y))))

axiom triangular_inequality :
  (forall x13:real. forall y:real. forall z:real.
  (abs1((x13 - z)) <= (abs1((x13 - y)) + abs1((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x13:int. forall y:int.
  (from_int((x13 + y)) = (from_int(x13) + from_int(y))))

axiom Sub :
  (forall x13:int. forall y:int.
  (from_int((x13 - y)) = (from_int(x13) - from_int(y))))

axiom Mul :
  (forall x13:int. forall y:int.
  (from_int((x13 * y)) = (from_int(x13) * from_int(y))))

axiom Neg : (forall x13:int. (from_int((-x13)) = (-from_int(x13))))

axiom Monotonic :
  (forall x13:int. forall y:int. ((x13 <= y) ->
  (from_int(x13) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x13:real. ((0.0 <= x13) -> ((from_int(truncate(x13)) <= x13) and
  (x13 <  from_int((truncate(x13) + 1))))))

axiom Truncate_up_neg :
  (forall x13:real. ((x13 <= 0.0) ->
  ((from_int((truncate(x13) - 1)) <  x13) and
  (x13 <= from_int(truncate(x13))))))

axiom Real_of_truncate :
  (forall x13:real. (((x13 - 1.0) <= from_int(truncate(x13))) and
  (from_int(truncate(x13)) <= (x13 + 1.0))))

axiom Truncate_monotonic :
  (forall x13:real. forall y:real. ((x13 <= y) ->
  (truncate(x13) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x13:real. forall i:int. ((x13 <= from_int(i)) ->
  (truncate(x13) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x13:real. forall i:int. ((from_int(i) <= x13) ->
  (i <= truncate(x13))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x13:real. ((from_int(floor(x13)) <= x13) and
  (x13 <  from_int((floor(x13) + 1)))))

axiom Ceil_up :
  (forall x13:real. ((from_int((ceil(x13) - 1)) <  x13) and
  (x13 <= from_int(ceil(x13)))))

axiom Floor_monotonic :
  (forall x13:real. forall y:real. ((x13 <= y) -> (floor(x13) <= floor(y))))

axiom Ceil_monotonic :
  (forall x13:real. forall y:real. ((x13 <= y) -> (ceil(x13) <= ceil(y))))

logic power1 : real, int -> real

axiom Power_01 : (forall x13:real. (power1(x13, 0) = 1.0))

axiom Power_s1 :
  (forall x13:real. forall n:int. ((0 <= n) -> (power1(x13,
  (n + 1)) = (x13 * power1(x13, n)))))

axiom Power_s_alt1 :
  (forall x13:real. forall n:int. ((0 <  n) -> (power1(x13,
  n) = (x13 * power1(x13, (n - 1))))))

axiom Power_11 : (forall x13:real. (power1(x13, 1) = x13))

axiom Power_sum1 :
  (forall x13:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x13, (n + m)) = (power1(x13, n) * power1(x13, m))))))

axiom Power_mult1 :
  (forall x13:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x13, (n * m)) = power1(power1(x13, n), m)))))

axiom Power_mult21 :
  (forall x13:real. forall y:real. forall n:int. ((0 <= n) ->
  (power1((x13 * y), n) = (power1(x13, n) * power1(y, n)))))

axiom Pow_ge_one :
  (forall x13:real. forall n:int. (((0 <= n) and (1.0 <= x13)) ->
  (1.0 <= power1(x13, n))))

logic round : real -> int

axiom Round_down :
  (forall x13:real. (((x13 - from_int(floor(x13))) <  0.5) ->
  (round(x13) = floor(x13))))

axiom Round_up :
  (forall x13:real. (((from_int(ceil(x13)) - x13) <  0.5) ->
  (round(x13) = ceil(x13))))

axiom Round_neg_tie :
  (forall x13:real. ((((x13 - from_int(floor(x13))) = 0.5) and
  (x13 <  0.0)) -> (round(x13) = floor(x13))))

axiom Round_pos_tie :
  (forall x13:real. ((((from_int(ceil(x13)) - x13) = 0.5) and
  (0.0 <  x13)) -> (round(x13) = ceil(x13))))

axiom Round_int : (forall i:int. (round(from_int(i)) = i))

axiom Round_near_int :
  (forall i:int.
  (forall x13:real. ((((-0.5) <  x13) and (x13 <  0.5)) ->
  (round((from_int(i) + x13)) = i))))

axiom Round_monotonic :
  (forall x13:real. forall y:real. ((x13 <= y) -> (round(x13) <= round(y))))

axiom Round_monotonic_int1 :
  (forall x13:real. forall i:int. ((x13 <= from_int(i)) ->
  (round(x13) <= i)))

axiom Round_monotonic_int2 :
  (forall x13:real. forall i:int. ((from_int(i) <= x13) ->
  (i <= round(x13))))

logic bool_lt1 : real, real -> bool

logic bool_le1 : real, real -> bool

logic bool_gt1 : real, real -> bool

logic bool_ge1 : real, real -> bool

logic bool_eq1 : real, real -> bool

logic bool_neq : real, real -> bool

axiom Bool_real__lt_axiom :
  (forall x13:real.
  (forall y:real. ((bool_lt1(x13, y) = true) <-> (x13 <  y))))

axiom Bool_real__le_axiom :
  (forall x13:real.
  (forall y:real. ((bool_le1(x13, y) = true) <-> (x13 <= y))))

axiom Bool_real__gt_axiom :
  (forall x13:real.
  (forall y:real. ((bool_gt1(x13, y) = true) <-> (y <  x13))))

axiom Bool_real__ge_axiom :
  (forall x13:real.
  (forall y:real. ((bool_ge1(x13, y) = true) <-> (y <= x13))))

axiom Bool_real__eq_axiom :
  (forall x13:real.
  (forall y:real. ((bool_eq1(x13, y) = true) <-> (x13 = y))))

axiom Bool_real__neq_axiom :
  (forall x13:real.
  (forall y:real. ((bool_neq(x13, y) = true) <-> (not (x13 = y)))))

type id8

logic attr__ATTRIBUTE_MODULUS4 : real

predicate in_range5(x13: real) =
  (((-from_int(340282001837565597733306976381245063168)) <= x13) and
  (x13 <= from_int(340282001837565597733306976381245063168)))

logic to_real : id8 -> real

logic of_real : real -> id8

predicate eq4(x13: id8, y: id8) = (to_real(x13) = to_real(y))

axiom range_axiom4 : (forall x13:id8. in_range5(to_real(x13)))

axiom coerce_axiom4 :
  (forall x13:real [to_real(of_real(x13))| in_range5(x13), of_real(x13)].
  (in_range5(x13) -> (to_real(of_real(x13)) = x13)))

axiom inversion_axiom4 :
  (forall x13:id8 [to_real(x13)]. (of_real(to_real(x13)) = x13))

logic attr__ATTRIBUTE_IMAGE5 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> real

logic dummy4 : id8

type tid8B

logic attr__ATTRIBUTE_MODULUS5 : real

predicate in_range6(x16: real) =
  (((-from_int(340282346638528859811704183484516925440)) <= x16) and
  (x16 <= from_int(340282346638528859811704183484516925440)))

logic to_real1 : tid8B -> real

logic of_real1 : real -> tid8B

predicate eq5(x16: tid8B, y: tid8B) = (to_real1(x16) = to_real1(y))

axiom range_axiom5 : (forall x16:tid8B. in_range6(to_real1(x16)))

axiom coerce_axiom5 :
  (forall x16:real [to_real1(of_real1(x16))| in_range6(x16), of_real1(x16)].
  (in_range6(x16) -> (to_real1(of_real1(x16)) = x16)))

axiom inversion_axiom5 :
  (forall x16:tid8B [to_real1(x16)]. (of_real1(to_real1(x16)) = x16))

logic attr__ATTRIBUTE_IMAGE6 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> real

logic dummy5 : tid8B

logic x16 : id8

axiom real_const_axiom184 : (0.0 = from_int(0))

axiom real_const_axiom185 :
  (340282001837565597733306976381245063168.0 = from_int(340282001837565597733306976381245063168))

axiom real_const_axiom186 :
  (340282346638528859811704183484516925440.0 = from_int(340282346638528859811704183484516925440))

goal WP_parameter_def15 :
  (((-from_int(340282001837565597733306976381245063168)) <= to_real(x16)) ->
  in_range5(from_int(floor(to_real(x16)))))

