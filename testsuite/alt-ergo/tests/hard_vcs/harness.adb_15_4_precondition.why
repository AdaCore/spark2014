(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type unit1

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion : (forall u:'a ref. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

logic us__ignore : 'a -> unit

type us_character

type us_private

type us_type_of_heap

type 'a map

type 'a t

logic mk_t : 'a map, int, int, int -> 'a t

logic elts : 'a t -> 'a map

axiom elts_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (elts(mk_t(u, u1, u2, u3)) = u))

logic offset : 'a t -> int

axiom offset_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (offset(mk_t(u, u1, u2, u3)) = u1))

logic first : 'a t -> int

axiom first_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (first(mk_t(u, u1, u2, u3)) = u2))

logic last : 'a t -> int

axiom last_def :
  (forall u:'a map. forall u1:int. forall u2:int. forall u3:int.
  (last(mk_t(u, u1, u2, u3)) = u3))

axiom t_inversion :
  (forall u:'a t. (u = mk_t(elts(u), offset(u), first(u), last(u))))

type range_type

type us_string

logic mk___string : us_character map, int, range_type -> us_string

logic elts1 : us_string -> us_character map

axiom elts_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (elts1(mk___string(u, u1, u2)) = u))

logic offset1 : us_string -> int

axiom offset_def1 :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (offset1(mk___string(u, u1, u2)) = u1))

logic rt : us_string -> range_type

axiom rt_def :
  (forall u:us_character map. forall u1:int. forall u2:range_type.
  (rt(mk___string(u, u1, u2)) = u2))

axiom us_string_inversion :
  (forall u:us_string. (u = mk___string(elts1(u), offset1(u), rt(u))))

logic abs : int -> int

axiom abs_def :
  (forall x:int. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge :
  (forall x:int. forall y:int. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
  (forall x:int. forall y:int. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs(y)) <  mod(x,
  y)) and (mod(x, y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs((div(x,
  y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left : (forall y:int. ((1 <  y) -> (((-1) % y) = (y - 1))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom Bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type ar_index

logic attr__ATTRIBUTE_MODULUS : int

logic attr__ATTRIBUTE_IMAGE : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check : us_string -> prop

logic attr__ATTRIBUTE_VALUE : us_string -> int

predicate in_range(x: int) = ((0 <= x) and (x <= 9999))

logic to_int : ar_index -> int

logic of_int : int -> ar_index

predicate eq(x: ar_index, y: ar_index) = (to_int(x) = to_int(y))

axiom range_axiom : (forall x:ar_index. in_range(to_int(x)))

axiom coerce_axiom :
  (forall x:int [to_int(of_int(x))| in_range(x), of_int(x)]. (in_range(x) ->
  (to_int(of_int(x)) = x)))

axiom unicity_axiom :
  (forall x:ar_index. forall y:ar_index [to_int(x), to_int(y)].
  ((to_int(x) = to_int(y)) -> (x = y)))

logic dummy : ar_index

type length_type

logic attr__ATTRIBUTE_MODULUS1 : int

logic attr__ATTRIBUTE_IMAGE1 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_string -> prop

logic attr__ATTRIBUTE_VALUE1 : us_string -> int

predicate in_range1(x: int) = ((0 <= x) and (x <= 10000))

logic to_int1 : length_type -> int

logic of_int1 : int -> length_type

predicate eq1(x: length_type, y: length_type) = (to_int1(x) = to_int1(y))

axiom range_axiom1 : (forall x:length_type. in_range1(to_int1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_int1(of_int1(x))| in_range1(x), of_int1(x)].
  (in_range1(x) -> (to_int1(of_int1(x)) = x)))

axiom unicity_axiom1 :
  (forall x:length_type. forall y:length_type [to_int1(x), to_int1(y)].
  ((to_int1(x) = to_int1(y)) -> (x = y)))

logic dummy1 : length_type

type integer

logic attr__ATTRIBUTE_MODULUS2 : int

logic attr__ATTRIBUTE_IMAGE2 : int -> us_string

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_string -> prop

logic attr__ATTRIBUTE_VALUE2 : us_string -> int

predicate in_range2(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int2 : integer -> int

logic of_int2 : int -> integer

predicate eq2(x: integer, y: integer) = (to_int2(x) = to_int2(y))

axiom range_axiom2 : (forall x:integer. in_range2(to_int2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_int2(of_int2(x))| in_range2(x), of_int2(x)].
  (in_range2(x) -> (to_int2(of_int2(x)) = x)))

axiom unicity_axiom2 :
  (forall x:integer. forall y:integer [to_int2(x), to_int2(y)].
  ((to_int2(x) = to_int2(y)) -> (x = y)))

logic dummy2 : integer

logic get : 'a map, int -> 'a

logic set : 'a map, int, 'a -> 'a map

axiom Select_eq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)]. ((i = j) -> (get(set(m, i, a),
  j) = a)))))

axiom Select_neq :
  (forall m:'a map.
  (forall i:int. forall j:int.
  (forall a:'a [get(set(m, i, a), j)| set(m, i, a), get(m, j)].
  ((not (i = j)) -> (get(set(m, i, a), j) = get(m, j))))))

logic attr__ATTRIBUTE_LENGTH : 'a t -> int

axiom attr__ATTRIBUTE_LENGTH_def :
  (forall x:'a t. (((first(x) <= last(x)) ->
  (attr__ATTRIBUTE_LENGTH(x) = ((last(x) - first(x)) + 1))) and
  ((not (first(x) <= last(x))) -> (attr__ATTRIBUTE_LENGTH(x) = 0))))

logic bool_eq1 : 'a t, 'a t -> bool

axiom T__ada_array___equal_def :
  (forall a:'a map. forall a1:int. forall a2:int. forall a3:int.
  (forall b:'a map. forall b1:int. forall b2:int. forall b3:int
  [bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3))].
  ((((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2)))))) ->
  (bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true)) and
  ((bool_eq1(mk_t(a, a1, a2, a3), mk_t(b, b1, b2, b3)) = true) ->
  ((attr__ATTRIBUTE_LENGTH(mk_t(a, a1, a2,
  a3)) = attr__ATTRIBUTE_LENGTH(mk_t(b, b1, b2, b3))) and
  (forall i:int [get(elts(mk_t(a, a1, a2, a3)), ((i + offset(mk_t(a, a1, a2,
  a3))) - first(mk_t(a, a1, a2, a3))))]. (((a2 <= i) and (i <= a3)) ->
  (get(a, ((i + a1) - a2)) = get(b, ((((b2 - a2) + i) + b1) - b2))))))))))

type buf_array

logic mk_buf_array : integer map, int -> buf_array

logic elts2 : buf_array -> integer map

axiom elts_def2 :
  (forall u:integer map. forall u1:int. (elts2(mk_buf_array(u, u1)) = u))

logic offset2 : buf_array -> int

axiom offset_def2 :
  (forall u:integer map. forall u1:int. (offset2(mk_buf_array(u, u1)) = u1))

axiom buf_array_inversion :
  (forall u:buf_array. (u = mk_buf_array(elts2(u), offset2(u))))

function to_array(a: buf_array) : integer t = mk_t(elts2(a), offset2(a), 0,
  9999)

function of_array(a: integer t) : buf_array = mk_buf_array(elts(a),
  offset(a))

logic dummy3 : buf_array

type ring_buffer

logic mk_ring_buffer : buf_array, ar_index, length_type -> ring_buffer

logic rec__data : ring_buffer -> buf_array

axiom rec__data_def :
  (forall u:buf_array. forall u1:ar_index. forall u2:length_type.
  (rec__data(mk_ring_buffer(u, u1, u2)) = u))

logic rec__first : ring_buffer -> ar_index

axiom rec__first_def :
  (forall u:buf_array. forall u1:ar_index. forall u2:length_type.
  (rec__first(mk_ring_buffer(u, u1, u2)) = u1))

logic rec__length : ring_buffer -> length_type

axiom rec__length_def :
  (forall u:buf_array. forall u1:ar_index. forall u2:length_type.
  (rec__length(mk_ring_buffer(u, u1, u2)) = u2))

axiom ring_buffer_inversion :
  (forall u:ring_buffer. (u = mk_ring_buffer(rec__data(u), rec__first(u),
  rec__length(u))))

logic bool_eq2 : ring_buffer, ring_buffer -> bool

axiom bool_eq_def :
  (forall a:ring_buffer. forall b:ring_buffer.
  (((((rec__data(a) = rec__data(b)) and (rec__first(a) = rec__first(b))) and
  (rec__length(a) = rec__length(b))) -> (bool_eq2(a, b) = true)) and
  ((not (((rec__data(a) = rec__data(b)) and
  (rec__first(a) = rec__first(b))) and (rec__length(a) = rec__length(b)))) ->
  (bool_eq2(a, b) = false))))

logic dummy4 : ring_buffer

type t1

type t2

logic x : integer

logic head : ring_buffer -> integer

axiom def_axiom :
  (forall ring_buf__head__r:integer map. forall ring_buf__head__r1:int.
  forall ring_buf__head__r2:ar_index. forall ring_buf__head__r3:length_type
  [head(mk_ring_buffer(mk_buf_array(ring_buf__head__r, ring_buf__head__r1),
  ring_buf__head__r2, ring_buf__head__r3))].
  (head(mk_ring_buffer(mk_buf_array(ring_buf__head__r, ring_buf__head__r1),
  ring_buf__head__r2, ring_buf__head__r3)) = get(ring_buf__head__r,
  ((to_int(ring_buf__head__r2) + ring_buf__head__r1) - 0))))

function ite(b: bool, x1: 'a, y: 'a) : 'a = match_bool(b, x1, y)

logic to_int3 : bool -> int

axiom to_int_def :
  (forall b:bool. (((b = true) -> (to_int3(b) = 1)) and ((not (b = true)) ->
  (to_int3(b) = 0))))

logic of_int3 : int -> bool

axiom of_int_def :
  (forall i:int. (((i = 0) -> (of_int3(i) = false)) and ((not (i = 0)) ->
  (of_int3(i) = true))))

logic is_empty : ring_buffer -> bool

axiom def_axiom1 :
  (forall ring_buf__is_empty__r:integer map.
  forall ring_buf__is_empty__r1:int. forall ring_buf__is_empty__r2:ar_index.
  forall ring_buf__is_empty__r3:length_type
  [is_empty(mk_ring_buffer(mk_buf_array(ring_buf__is_empty__r,
  ring_buf__is_empty__r1), ring_buf__is_empty__r2, ring_buf__is_empty__r3))].
  ((is_empty(mk_ring_buffer(mk_buf_array(ring_buf__is_empty__r,
  ring_buf__is_empty__r1), ring_buf__is_empty__r2,
  ring_buf__is_empty__r3)) = true) <->
  (to_int1(ring_buf__is_empty__r3) = 0)))

logic y : integer

logic is_full : ring_buffer -> bool

axiom def_axiom2 :
  (forall ring_buf__is_full__r:integer map. forall ring_buf__is_full__r1:int.
  forall ring_buf__is_full__r2:ar_index.
  forall ring_buf__is_full__r3:length_type
  [is_full(mk_ring_buffer(mk_buf_array(ring_buf__is_full__r,
  ring_buf__is_full__r1), ring_buf__is_full__r2, ring_buf__is_full__r3))].
  ((is_full(mk_ring_buffer(mk_buf_array(ring_buf__is_full__r,
  ring_buf__is_full__r1), ring_buf__is_full__r2,
  ring_buf__is_full__r3)) = true) <->
  (to_int1(ring_buf__is_full__r3) = 10000)))

logic z : integer

goal WP_parameter_def :
  (forall r:integer map. forall r1:int. forall r2:ar_index.
  forall r3:length_type. forall ring_buf__clear__r:integer map.
  forall ring_buf__clear__r1:int. forall ring_buf__clear__r2:ar_index.
  forall ring_buf__clear__r3:length_type.
  forall ring_buf__clear__r4:integer map. forall ring_buf__clear__r5:int.
  forall ring_buf__clear__r6:ar_index.
  forall ring_buf__clear__r7:length_type. forall r4:integer map.
  forall r5:int. forall r6:ar_index. forall r7:length_type.
  forall ring_buf__push__r:integer map. forall ring_buf__push__r1:int.
  forall ring_buf__push__r2:ar_index. forall ring_buf__push__r3:length_type.
  forall ring_buf__push__r4:integer map. forall ring_buf__push__r5:int.
  forall ring_buf__push__r6:ar_index. forall ring_buf__push__r7:length_type.
  forall r8:integer map. forall r9:int. forall r10:ar_index.
  forall r11:length_type. forall ring_buf__push__r8:integer map.
  forall ring_buf__push__r9:int. forall ring_buf__push__r10:ar_index.
  forall ring_buf__push__r11:length_type.
  forall ring_buf__push__r12:integer map. forall ring_buf__push__r13:int.
  forall ring_buf__push__r14:ar_index.
  forall ring_buf__push__r15:length_type. forall r12:integer map.
  forall r13:int. forall r14:ar_index. forall r15:length_type.
  forall h:integer. forall ring_buf__pop__element:integer.
  forall ring_buf__pop__r:integer map. forall ring_buf__pop__r1:int.
  forall ring_buf__pop__r2:ar_index. forall ring_buf__pop__r3:length_type.
  forall ring_buf__pop__r4:integer map. forall ring_buf__pop__r5:int.
  forall ring_buf__pop__r6:ar_index. forall ring_buf__pop__r7:length_type.
  forall ring_buf__pop__element1:integer. forall r16:integer map.
  forall r17:int. forall r18:ar_index. forall r19:length_type.
  forall h1:integer. forall ring_buf__push__r16:integer map.
  forall ring_buf__push__r17:int. forall ring_buf__push__r18:ar_index.
  forall ring_buf__push__r19:length_type.
  forall ring_buf__push__r20:integer map. forall ring_buf__push__r21:int.
  forall ring_buf__push__r22:ar_index.
  forall ring_buf__push__r23:length_type. forall r20:integer map.
  forall r21:int. forall r22:ar_index. forall r23:length_type.
  forall ring_buf__pop__element2:integer.
  forall ring_buf__pop__r8:integer map. forall ring_buf__pop__r9:int.
  forall ring_buf__pop__r10:ar_index. forall ring_buf__pop__r11:length_type.
  forall ring_buf__pop__r12:integer map. forall ring_buf__pop__r13:int.
  forall ring_buf__pop__r14:ar_index. forall ring_buf__pop__r15:length_type.
  forall ring_buf__pop__element3:integer. forall r24:integer map.
  forall r25:int. forall r26:ar_index. forall r27:length_type.
  forall h2:integer. forall ring_buf__pop__element4:integer.
  forall ring_buf__pop__r16:integer map. forall ring_buf__pop__r17:int.
  forall ring_buf__pop__r18:ar_index. forall ring_buf__pop__r19:length_type.
  ((((((ring_buf__clear__r = r) and (ring_buf__clear__r1 = r1)) and
  (ring_buf__clear__r2 = r2)) and (ring_buf__clear__r3 = r3)) and
  ((is_empty(mk_ring_buffer(mk_buf_array(ring_buf__clear__r4,
  ring_buf__clear__r5), ring_buf__clear__r6,
  ring_buf__clear__r7)) = true) and (mk_ring_buffer(mk_buf_array(r4, r5), r6,
  r7) = mk_ring_buffer(mk_buf_array(ring_buf__clear__r4,
  ring_buf__clear__r5), ring_buf__clear__r6, ring_buf__clear__r7)))) ->
  (((mk_ring_buffer(mk_buf_array(ring_buf__push__r, ring_buf__push__r1),
  ring_buf__push__r2, ring_buf__push__r3) = mk_ring_buffer(mk_buf_array(r4,
  r5), r6, r7)) and
  ((to_int1(ring_buf__push__r7) = (to_int1(ring_buf__push__r3) + 1)) and
  ((((ring_buf__push__r4 = r8) and (ring_buf__push__r5 = r9)) and
  (ring_buf__push__r6 = r10)) and (ring_buf__push__r7 = r11)))) ->
  (((mk_ring_buffer(mk_buf_array(ring_buf__push__r8, ring_buf__push__r9),
  ring_buf__push__r10, ring_buf__push__r11) = mk_ring_buffer(mk_buf_array(r8,
  r9), r10, r11)) and
  ((to_int1(ring_buf__push__r15) = (to_int1(ring_buf__push__r11) + 1)) and
  ((((ring_buf__push__r12 = r12) and (ring_buf__push__r13 = r13)) and
  (ring_buf__push__r14 = r14)) and (ring_buf__push__r15 = r15)))) ->
  (((ring_buf__pop__element = h) and
  ((mk_ring_buffer(mk_buf_array(ring_buf__pop__r, ring_buf__pop__r1),
  ring_buf__pop__r2, ring_buf__pop__r3) = mk_ring_buffer(mk_buf_array(r12,
  r13), r14, r15)) and
  (((to_int1(ring_buf__pop__r7) = (to_int1(ring_buf__pop__r3) - 1)) and
  (to_int2(head(mk_ring_buffer(mk_buf_array(ring_buf__pop__r,
  ring_buf__pop__r1), ring_buf__pop__r2,
  ring_buf__pop__r3))) = to_int2(ring_buf__pop__element1))) and
  (((((ring_buf__pop__r4 = r16) and (ring_buf__pop__r5 = r17)) and
  (ring_buf__pop__r6 = r18)) and (ring_buf__pop__r7 = r19)) and
  (h1 = ring_buf__pop__element1))))) -> ((to_int2(h1) = to_int2(x)) ->
  (((mk_ring_buffer(mk_buf_array(ring_buf__push__r16, ring_buf__push__r17),
  ring_buf__push__r18,
  ring_buf__push__r19) = mk_ring_buffer(mk_buf_array(r16, r17), r18,
  r19)) and
  ((to_int1(ring_buf__push__r23) = (to_int1(ring_buf__push__r19) + 1)) and
  ((((ring_buf__push__r20 = r20) and (ring_buf__push__r21 = r21)) and
  (ring_buf__push__r22 = r22)) and (ring_buf__push__r23 = r23)))) ->
  (((ring_buf__pop__element2 = h1) and
  ((mk_ring_buffer(mk_buf_array(ring_buf__pop__r8, ring_buf__pop__r9),
  ring_buf__pop__r10, ring_buf__pop__r11) = mk_ring_buffer(mk_buf_array(r20,
  r21), r22, r23)) and
  (((to_int1(ring_buf__pop__r15) = (to_int1(ring_buf__pop__r11) - 1)) and
  (to_int2(head(mk_ring_buffer(mk_buf_array(ring_buf__pop__r8,
  ring_buf__pop__r9), ring_buf__pop__r10,
  ring_buf__pop__r11))) = to_int2(ring_buf__pop__element3))) and
  (((((ring_buf__pop__r12 = r24) and (ring_buf__pop__r13 = r25)) and
  (ring_buf__pop__r14 = r26)) and (ring_buf__pop__r15 = r27)) and
  (h2 = ring_buf__pop__element3))))) -> ((to_int2(h2) = to_int2(y)) ->
  ((ring_buf__pop__element4 = h2) ->
  ((mk_ring_buffer(mk_buf_array(ring_buf__pop__r16, ring_buf__pop__r17),
  ring_buf__pop__r18, ring_buf__pop__r19) = mk_ring_buffer(mk_buf_array(r24,
  r25), r26, r27)) ->
  (not (is_empty(mk_ring_buffer(mk_buf_array(ring_buf__pop__r16,
  ring_buf__pop__r17), ring_buf__pop__r18,
  ring_buf__pop__r19)) = true)))))))))))))

